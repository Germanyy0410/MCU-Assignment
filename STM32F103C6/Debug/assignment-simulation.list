
assignment-simulation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004da4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08004eb0  08004eb0  00014eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051a8  080051a8  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  080051a8  080051a8  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051a8  080051a8  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051a8  080051a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080051b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000098  08005248  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08005248  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131a6  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a73  00000000  00000000  00033267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00035ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00036a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d55  00000000  00000000  00037690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd75  00000000  00000000  000503e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089078  00000000  00000000  0006015a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e91d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039d0  00000000  00000000  000e9228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e98 	.word	0x08004e98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08004e98 	.word	0x08004e98

0800014c <initButton>:
int button_flag[NO_BUTTONS + 1];
int TimerForKeyPress[NO_BUTTONS + 1];

int Button1PressCounter = 1;    /* INITIALLY, MODE = 1 */

void initButton() {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (int i = 1; i <= NO_BUTTONS; i++) {
 8000152:	2301      	movs	r3, #1
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e020      	b.n	800019a <initButton+0x4e>
		KeyReg0[i] = NORMAL_STATE;
 8000158:	4a14      	ldr	r2, [pc, #80]	; (80001ac <initButton+0x60>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2101      	movs	r1, #1
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg1[i] = NORMAL_STATE;
 8000162:	4a13      	ldr	r2, [pc, #76]	; (80001b0 <initButton+0x64>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2101      	movs	r1, #1
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg2[i] = NORMAL_STATE;
 800016c:	4a11      	ldr	r2, [pc, #68]	; (80001b4 <initButton+0x68>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2101      	movs	r1, #1
 8000172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg3[i] = NORMAL_STATE; 
 8000176:	4a10      	ldr	r2, [pc, #64]	; (80001b8 <initButton+0x6c>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2101      	movs	r1, #1
 800017c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		button_flag[i] = 0;
 8000180:	4a0e      	ldr	r2, [pc, #56]	; (80001bc <initButton+0x70>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2100      	movs	r1, #0
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		TimerForKeyPress[i] = 200;
 800018a:	4a0d      	ldr	r2, [pc, #52]	; (80001c0 <initButton+0x74>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	21c8      	movs	r1, #200	; 0xc8
 8000190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 1; i <= NO_BUTTONS; i++) {
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	3301      	adds	r3, #1
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b04      	cmp	r3, #4
 800019e:	dddb      	ble.n	8000158 <initButton+0xc>
	}
}
 80001a0:	bf00      	nop
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	200000e8 	.word	0x200000e8
 80001b0:	20000144 	.word	0x20000144
 80001b4:	20000180 	.word	0x20000180
 80001b8:	200000d4 	.word	0x200000d4
 80001bc:	2000016c 	.word	0x2000016c
 80001c0:	20000158 	.word	0x20000158

080001c4 <getKeyInput>:

void getKeyInput() {
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
    for (int i = 1; i <= NO_BUTTONS; i++) {
 80001ca:	2301      	movs	r3, #1
 80001cc:	607b      	str	r3, [r7, #4]
 80001ce:	e099      	b.n	8000304 <getKeyInput+0x140>
        KeyReg0[i] = KeyReg1[i];
 80001d0:	4a51      	ldr	r2, [pc, #324]	; (8000318 <getKeyInput+0x154>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d8:	4950      	ldr	r1, [pc, #320]	; (800031c <getKeyInput+0x158>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg1[i] = KeyReg2[i];
 80001e0:	4a4f      	ldr	r2, [pc, #316]	; (8000320 <getKeyInput+0x15c>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e8:	494b      	ldr	r1, [pc, #300]	; (8000318 <getKeyInput+0x154>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        if (i == 1) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d109      	bne.n	800020a <getKeyInput+0x46>
 80001f6:	2102      	movs	r1, #2
 80001f8:	484a      	ldr	r0, [pc, #296]	; (8000324 <getKeyInput+0x160>)
 80001fa:	f002 f91d 	bl	8002438 <HAL_GPIO_ReadPin>
 80001fe:	4603      	mov	r3, r0
 8000200:	4619      	mov	r1, r3
 8000202:	4a47      	ldr	r2, [pc, #284]	; (8000320 <getKeyInput+0x15c>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 2) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_2_1_GPIO_Port, BUTTON_2_1_Pin);
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b02      	cmp	r3, #2
 800020e:	d10a      	bne.n	8000226 <getKeyInput+0x62>
 8000210:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000214:	4844      	ldr	r0, [pc, #272]	; (8000328 <getKeyInput+0x164>)
 8000216:	f002 f90f 	bl	8002438 <HAL_GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	4619      	mov	r1, r3
 800021e:	4a40      	ldr	r2, [pc, #256]	; (8000320 <getKeyInput+0x15c>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 3) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2b03      	cmp	r3, #3
 800022a:	d109      	bne.n	8000240 <getKeyInput+0x7c>
 800022c:	2101      	movs	r1, #1
 800022e:	483e      	ldr	r0, [pc, #248]	; (8000328 <getKeyInput+0x164>)
 8000230:	f002 f902 	bl	8002438 <HAL_GPIO_ReadPin>
 8000234:	4603      	mov	r3, r0
 8000236:	4619      	mov	r1, r3
 8000238:	4a39      	ldr	r2, [pc, #228]	; (8000320 <getKeyInput+0x15c>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 4) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_PEDESTRIAN_GPIO_Port, BUTTON_PEDESTRIAN_Pin);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2b04      	cmp	r3, #4
 8000244:	d109      	bne.n	800025a <getKeyInput+0x96>
 8000246:	2101      	movs	r1, #1
 8000248:	4836      	ldr	r0, [pc, #216]	; (8000324 <getKeyInput+0x160>)
 800024a:	f002 f8f5 	bl	8002438 <HAL_GPIO_ReadPin>
 800024e:	4603      	mov	r3, r0
 8000250:	4619      	mov	r1, r3
 8000252:	4a33      	ldr	r2, [pc, #204]	; (8000320 <getKeyInput+0x15c>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 800025a:	4a30      	ldr	r2, [pc, #192]	; (800031c <getKeyInput+0x158>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000262:	492d      	ldr	r1, [pc, #180]	; (8000318 <getKeyInput+0x154>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800026a:	429a      	cmp	r2, r3
 800026c:	d147      	bne.n	80002fe <getKeyInput+0x13a>
 800026e:	4a2a      	ldr	r2, [pc, #168]	; (8000318 <getKeyInput+0x154>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000276:	492a      	ldr	r1, [pc, #168]	; (8000320 <getKeyInput+0x15c>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800027e:	429a      	cmp	r2, r3
 8000280:	d13d      	bne.n	80002fe <getKeyInput+0x13a>
            if (KeyReg3[i] != KeyReg2[i]) {
 8000282:	4a2a      	ldr	r2, [pc, #168]	; (800032c <getKeyInput+0x168>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800028a:	4925      	ldr	r1, [pc, #148]	; (8000320 <getKeyInput+0x15c>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000292:	429a      	cmp	r2, r3
 8000294:	d016      	beq.n	80002c4 <getKeyInput+0x100>
                KeyReg3[i] = KeyReg2[i];
 8000296:	4a22      	ldr	r2, [pc, #136]	; (8000320 <getKeyInput+0x15c>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800029e:	4923      	ldr	r1, [pc, #140]	; (800032c <getKeyInput+0x168>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                if (KeyReg2[i] == PRESSED_STATE) {
 80002a6:	4a1e      	ldr	r2, [pc, #120]	; (8000320 <getKeyInput+0x15c>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d125      	bne.n	80002fe <getKeyInput+0x13a>
                    subKeyProcess(i);
 80002b2:	6878      	ldr	r0, [r7, #4]
 80002b4:	f000 f858 	bl	8000368 <subKeyProcess>
                    TimerForKeyPress[i] = 200;
 80002b8:	4a1d      	ldr	r2, [pc, #116]	; (8000330 <getKeyInput+0x16c>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	21c8      	movs	r1, #200	; 0xc8
 80002be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002c2:	e01c      	b.n	80002fe <getKeyInput+0x13a>
                }
            } else {
                TimerForKeyPress[i]--;
 80002c4:	4a1a      	ldr	r2, [pc, #104]	; (8000330 <getKeyInput+0x16c>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002cc:	1e5a      	subs	r2, r3, #1
 80002ce:	4918      	ldr	r1, [pc, #96]	; (8000330 <getKeyInput+0x16c>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TimerForKeyPress[i] == 0) {
 80002d6:	4a16      	ldr	r2, [pc, #88]	; (8000330 <getKeyInput+0x16c>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d10d      	bne.n	80002fe <getKeyInput+0x13a>
                    if (KeyReg2[i] == PRESSED_STATE) {
 80002e2:	4a0f      	ldr	r2, [pc, #60]	; (8000320 <getKeyInput+0x15c>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d102      	bne.n	80002f4 <getKeyInput+0x130>
                        subKeyProcess(i);
 80002ee:	6878      	ldr	r0, [r7, #4]
 80002f0:	f000 f83a 	bl	8000368 <subKeyProcess>
                    }

                    TimerForKeyPress[i] = 200;
 80002f4:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <getKeyInput+0x16c>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	21c8      	movs	r1, #200	; 0xc8
 80002fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 1; i <= NO_BUTTONS; i++) {
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3301      	adds	r3, #1
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2b04      	cmp	r3, #4
 8000308:	f77f af62 	ble.w	80001d0 <getKeyInput+0xc>
                }
            }
        }
    }
}
 800030c:	bf00      	nop
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000144 	.word	0x20000144
 800031c:	200000e8 	.word	0x200000e8
 8000320:	20000180 	.word	0x20000180
 8000324:	40010800 	.word	0x40010800
 8000328:	40010c00 	.word	0x40010c00
 800032c:	200000d4 	.word	0x200000d4
 8000330:	20000158 	.word	0x20000158

08000334 <isButtonPressed>:

int isButtonPressed(int index) {
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
//	if (index > NO_BUTTONS)
//		return 0;

	if (button_flag[index]) {
 800033c:	4a09      	ldr	r2, [pc, #36]	; (8000364 <isButtonPressed+0x30>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d006      	beq.n	8000356 <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000348:	4a06      	ldr	r2, [pc, #24]	; (8000364 <isButtonPressed+0x30>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	2100      	movs	r1, #0
 800034e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000352:	2301      	movs	r3, #1
 8000354:	e000      	b.n	8000358 <isButtonPressed+0x24>
	}
	return 0;
 8000356:	2300      	movs	r3, #0
}
 8000358:	4618      	mov	r0, r3
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	2000016c 	.word	0x2000016c

08000368 <subKeyProcess>:

void subKeyProcess(int index) {
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000370:	4a04      	ldr	r2, [pc, #16]	; (8000384 <subKeyProcess+0x1c>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	2101      	movs	r1, #1
 8000376:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	2000016c 	.word	0x2000016c

08000388 <fsm_automatic_run>:
 *      Author: ProX
 */

#include "fsm_automatic.h"

void fsm_automatic_run(UART_HandleTypeDef huart2) {
 8000388:	b084      	sub	sp, #16
 800038a:	b580      	push	{r7, lr}
 800038c:	af00      	add	r7, sp, #0
 800038e:	f107 0c08 	add.w	ip, r7, #8
 8000392:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    /* CHANGE TO MANUAL MODE WHEN BUTTON1 IS PRESSED */
    if (isButtonPressed(1)) {
 8000396:	2001      	movs	r0, #1
 8000398:	f7ff ffcc 	bl	8000334 <isButtonPressed>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d006      	beq.n	80003b0 <fsm_automatic_run+0x28>
    	status = MANUAL_MODE;
 80003a2:	4bbc      	ldr	r3, [pc, #752]	; (8000694 <fsm_automatic_run+0x30c>)
 80003a4:	2203      	movs	r2, #3
 80003a6:	601a      	str	r2, [r3, #0]
		traffic_status = INIT;
 80003a8:	4bbb      	ldr	r3, [pc, #748]	; (8000698 <fsm_automatic_run+0x310>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	601a      	str	r2, [r3, #0]
		return;
 80003ae:	e16c      	b.n	800068a <fsm_automatic_run+0x302>
    }

    switch (traffic_status) {
 80003b0:	4bb9      	ldr	r3, [pc, #740]	; (8000698 <fsm_automatic_run+0x310>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d04d      	beq.n	8000454 <fsm_automatic_run+0xcc>
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	f340 8166 	ble.w	800068a <fsm_automatic_run+0x302>
 80003be:	2b50      	cmp	r3, #80	; 0x50
 80003c0:	f300 8163 	bgt.w	800068a <fsm_automatic_run+0x302>
 80003c4:	2b32      	cmp	r3, #50	; 0x32
 80003c6:	f2c0 8160 	blt.w	800068a <fsm_automatic_run+0x302>
 80003ca:	3b32      	subs	r3, #50	; 0x32
 80003cc:	2b1e      	cmp	r3, #30
 80003ce:	f200 815c 	bhi.w	800068a <fsm_automatic_run+0x302>
 80003d2:	a201      	add	r2, pc, #4	; (adr r2, 80003d8 <fsm_automatic_run+0x50>)
 80003d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d8:	080004df 	.word	0x080004df
 80003dc:	0800068b 	.word	0x0800068b
 80003e0:	0800068b 	.word	0x0800068b
 80003e4:	0800068b 	.word	0x0800068b
 80003e8:	0800068b 	.word	0x0800068b
 80003ec:	0800068b 	.word	0x0800068b
 80003f0:	0800068b 	.word	0x0800068b
 80003f4:	0800068b 	.word	0x0800068b
 80003f8:	0800068b 	.word	0x0800068b
 80003fc:	0800068b 	.word	0x0800068b
 8000400:	08000537 	.word	0x08000537
 8000404:	0800068b 	.word	0x0800068b
 8000408:	0800068b 	.word	0x0800068b
 800040c:	0800068b 	.word	0x0800068b
 8000410:	0800068b 	.word	0x0800068b
 8000414:	0800068b 	.word	0x0800068b
 8000418:	0800068b 	.word	0x0800068b
 800041c:	0800068b 	.word	0x0800068b
 8000420:	0800068b 	.word	0x0800068b
 8000424:	0800068b 	.word	0x0800068b
 8000428:	080005ab 	.word	0x080005ab
 800042c:	0800068b 	.word	0x0800068b
 8000430:	0800068b 	.word	0x0800068b
 8000434:	0800068b 	.word	0x0800068b
 8000438:	0800068b 	.word	0x0800068b
 800043c:	0800068b 	.word	0x0800068b
 8000440:	0800068b 	.word	0x0800068b
 8000444:	0800068b 	.word	0x0800068b
 8000448:	0800068b 	.word	0x0800068b
 800044c:	0800068b 	.word	0x0800068b
 8000450:	08000601 	.word	0x08000601
    case INIT:
    	/* UART COMMUNICATION */
    	HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Mode: Automatic mode\r\n"), 1000);
 8000454:	4991      	ldr	r1, [pc, #580]	; (800069c <fsm_automatic_run+0x314>)
 8000456:	4892      	ldr	r0, [pc, #584]	; (80006a0 <fsm_automatic_run+0x318>)
 8000458:	f004 f8f2 	bl	8004640 <siprintf>
 800045c:	4603      	mov	r3, r0
 800045e:	b29a      	uxth	r2, r3
 8000460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000464:	498e      	ldr	r1, [pc, #568]	; (80006a0 <fsm_automatic_run+0x318>)
 8000466:	f107 0008 	add.w	r0, r7, #8
 800046a:	f003 fbbe 	bl	8003bea <HAL_UART_Transmit>

    	resetLights();
 800046e:	f000 fd4b 	bl	8000f08 <resetLights>
    	/* INACTIVE pedestrian light when in INIT state */
    	pedestrian_status = PEDESTRIAN_INACTIVE;
 8000472:	4b8c      	ldr	r3, [pc, #560]	; (80006a4 <fsm_automatic_run+0x31c>)
 8000474:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000478:	601a      	str	r2, [r3, #0]

        traffic_status = RED_GREEN;
 800047a:	4b87      	ldr	r3, [pc, #540]	; (8000698 <fsm_automatic_run+0x310>)
 800047c:	2232      	movs	r2, #50	; 0x32
 800047e:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "RED   GREEN\r\n"), 1000);
 8000480:	4989      	ldr	r1, [pc, #548]	; (80006a8 <fsm_automatic_run+0x320>)
 8000482:	4887      	ldr	r0, [pc, #540]	; (80006a0 <fsm_automatic_run+0x318>)
 8000484:	f004 f8dc 	bl	8004640 <siprintf>
 8000488:	4603      	mov	r3, r0
 800048a:	b29a      	uxth	r2, r3
 800048c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000490:	4983      	ldr	r1, [pc, #524]	; (80006a0 <fsm_automatic_run+0x318>)
 8000492:	f107 0008 	add.w	r0, r7, #8
 8000496:	f003 fba8 	bl	8003bea <HAL_UART_Transmit>

        setTimer(1, green_counter);
 800049a:	4b84      	ldr	r3, [pc, #528]	; (80006ac <fsm_automatic_run+0x324>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4619      	mov	r1, r3
 80004a0:	2001      	movs	r0, #1
 80004a2:	f001 fa41 	bl	8001928 <setTimer>

		setTimer(3, 250); 		// timer 3 for counting light
 80004a6:	21fa      	movs	r1, #250	; 0xfa
 80004a8:	2003      	movs	r0, #3
 80004aa:	f001 fa3d 	bl	8001928 <setTimer>

        counter_light_1 = red_counter / 1000;
 80004ae:	4b80      	ldr	r3, [pc, #512]	; (80006b0 <fsm_automatic_run+0x328>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a80      	ldr	r2, [pc, #512]	; (80006b4 <fsm_automatic_run+0x32c>)
 80004b4:	fb82 1203 	smull	r1, r2, r2, r3
 80004b8:	1192      	asrs	r2, r2, #6
 80004ba:	17db      	asrs	r3, r3, #31
 80004bc:	1ad3      	subs	r3, r2, r3
 80004be:	4a7e      	ldr	r2, [pc, #504]	; (80006b8 <fsm_automatic_run+0x330>)
 80004c0:	6013      	str	r3, [r2, #0]
        counter_light_2 = green_counter / 1000;
 80004c2:	4b7a      	ldr	r3, [pc, #488]	; (80006ac <fsm_automatic_run+0x324>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a7b      	ldr	r2, [pc, #492]	; (80006b4 <fsm_automatic_run+0x32c>)
 80004c8:	fb82 1203 	smull	r1, r2, r2, r3
 80004cc:	1192      	asrs	r2, r2, #6
 80004ce:	17db      	asrs	r3, r3, #31
 80004d0:	1ad3      	subs	r3, r2, r3
 80004d2:	4a7a      	ldr	r2, [pc, #488]	; (80006bc <fsm_automatic_run+0x334>)
 80004d4:	6013      	str	r3, [r2, #0]
        counter_lights = READ_UART;
 80004d6:	4b7a      	ldr	r3, [pc, #488]	; (80006c0 <fsm_automatic_run+0x338>)
 80004d8:	2264      	movs	r2, #100	; 0x64
 80004da:	601a      	str	r2, [r3, #0]

        break;
 80004dc:	e0d5      	b.n	800068a <fsm_automatic_run+0x302>

    case RED_GREEN:
    	setRedLight1(0);
 80004de:	2000      	movs	r0, #0
 80004e0:	f000 fd5e 	bl	8000fa0 <setRedLight1>
    	setGreenLight2(0);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 fdd3 	bl	8001090 <setGreenLight2>

        if (timer_flag[1] == 1) {
 80004ea:	4b76      	ldr	r3, [pc, #472]	; (80006c4 <fsm_automatic_run+0x33c>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	f040 80c4 	bne.w	800067c <fsm_automatic_run+0x2f4>
            traffic_status = RED_AMBER;
 80004f4:	4b68      	ldr	r3, [pc, #416]	; (8000698 <fsm_automatic_run+0x310>)
 80004f6:	223c      	movs	r2, #60	; 0x3c
 80004f8:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "RED   AMBER\r\n"), 1000);
 80004fa:	4973      	ldr	r1, [pc, #460]	; (80006c8 <fsm_automatic_run+0x340>)
 80004fc:	4868      	ldr	r0, [pc, #416]	; (80006a0 <fsm_automatic_run+0x318>)
 80004fe:	f004 f89f 	bl	8004640 <siprintf>
 8000502:	4603      	mov	r3, r0
 8000504:	b29a      	uxth	r2, r3
 8000506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050a:	4965      	ldr	r1, [pc, #404]	; (80006a0 <fsm_automatic_run+0x318>)
 800050c:	f107 0008 	add.w	r0, r7, #8
 8000510:	f003 fb6b 	bl	8003bea <HAL_UART_Transmit>
            setTimer(1, amber_counter);
 8000514:	4b6d      	ldr	r3, [pc, #436]	; (80006cc <fsm_automatic_run+0x344>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4619      	mov	r1, r3
 800051a:	2001      	movs	r0, #1
 800051c:	f001 fa04 	bl	8001928 <setTimer>

            counter_light_2 = amber_counter / 1000;
 8000520:	4b6a      	ldr	r3, [pc, #424]	; (80006cc <fsm_automatic_run+0x344>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a63      	ldr	r2, [pc, #396]	; (80006b4 <fsm_automatic_run+0x32c>)
 8000526:	fb82 1203 	smull	r1, r2, r2, r3
 800052a:	1192      	asrs	r2, r2, #6
 800052c:	17db      	asrs	r3, r3, #31
 800052e:	1ad3      	subs	r3, r2, r3
 8000530:	4a62      	ldr	r2, [pc, #392]	; (80006bc <fsm_automatic_run+0x334>)
 8000532:	6013      	str	r3, [r2, #0]
        }    

        break;
 8000534:	e0a2      	b.n	800067c <fsm_automatic_run+0x2f4>

    case RED_AMBER:
    	setRedLight1(0);
 8000536:	2000      	movs	r0, #0
 8000538:	f000 fd32 	bl	8000fa0 <setRedLight1>
    	setAmberLight2(0);
 800053c:	2000      	movs	r0, #0
 800053e:	f000 fdc5 	bl	80010cc <setAmberLight2>

        if (timer_flag[1] == 1) {
 8000542:	4b60      	ldr	r3, [pc, #384]	; (80006c4 <fsm_automatic_run+0x33c>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	2b01      	cmp	r3, #1
 8000548:	f040 809a 	bne.w	8000680 <fsm_automatic_run+0x2f8>
            traffic_status = GREEN_RED;
 800054c:	4b52      	ldr	r3, [pc, #328]	; (8000698 <fsm_automatic_run+0x310>)
 800054e:	2246      	movs	r2, #70	; 0x46
 8000550:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "GREEN   RED\r\n"), 1000);
 8000552:	495f      	ldr	r1, [pc, #380]	; (80006d0 <fsm_automatic_run+0x348>)
 8000554:	4852      	ldr	r0, [pc, #328]	; (80006a0 <fsm_automatic_run+0x318>)
 8000556:	f004 f873 	bl	8004640 <siprintf>
 800055a:	4603      	mov	r3, r0
 800055c:	b29a      	uxth	r2, r3
 800055e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000562:	494f      	ldr	r1, [pc, #316]	; (80006a0 <fsm_automatic_run+0x318>)
 8000564:	f107 0008 	add.w	r0, r7, #8
 8000568:	f003 fb3f 	bl	8003bea <HAL_UART_Transmit>
            setTimer(1, green_counter);
 800056c:	4b4f      	ldr	r3, [pc, #316]	; (80006ac <fsm_automatic_run+0x324>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4619      	mov	r1, r3
 8000572:	2001      	movs	r0, #1
 8000574:	f001 f9d8 	bl	8001928 <setTimer>

            counter_light_1 = green_counter / 1000;
 8000578:	4b4c      	ldr	r3, [pc, #304]	; (80006ac <fsm_automatic_run+0x324>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a4d      	ldr	r2, [pc, #308]	; (80006b4 <fsm_automatic_run+0x32c>)
 800057e:	fb82 1203 	smull	r1, r2, r2, r3
 8000582:	1192      	asrs	r2, r2, #6
 8000584:	17db      	asrs	r3, r3, #31
 8000586:	1ad3      	subs	r3, r2, r3
 8000588:	4a4b      	ldr	r2, [pc, #300]	; (80006b8 <fsm_automatic_run+0x330>)
 800058a:	6013      	str	r3, [r2, #0]
            counter_light_2 = red_counter / 1000;
 800058c:	4b48      	ldr	r3, [pc, #288]	; (80006b0 <fsm_automatic_run+0x328>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a48      	ldr	r2, [pc, #288]	; (80006b4 <fsm_automatic_run+0x32c>)
 8000592:	fb82 1203 	smull	r1, r2, r2, r3
 8000596:	1192      	asrs	r2, r2, #6
 8000598:	17db      	asrs	r3, r3, #31
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	4a47      	ldr	r2, [pc, #284]	; (80006bc <fsm_automatic_run+0x334>)
 800059e:	6013      	str	r3, [r2, #0]

            /* INACTIVE pedestrian light when traffic light is backing to GREEN_RED mode */
            pedestrian_status = PEDESTRIAN_INACTIVE;
 80005a0:	4b40      	ldr	r3, [pc, #256]	; (80006a4 <fsm_automatic_run+0x31c>)
 80005a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80005a6:	601a      	str	r2, [r3, #0]
        }

        break;
 80005a8:	e06a      	b.n	8000680 <fsm_automatic_run+0x2f8>

    case GREEN_RED:
    	setGreenLight1(0);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 fd16 	bl	8000fdc <setGreenLight1>
    	setRedLight2(0);
 80005b0:	2000      	movs	r0, #0
 80005b2:	f000 fd4f 	bl	8001054 <setRedLight2>

        if (timer_flag[1] == 1) {
 80005b6:	4b43      	ldr	r3, [pc, #268]	; (80006c4 <fsm_automatic_run+0x33c>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d162      	bne.n	8000684 <fsm_automatic_run+0x2fc>
            traffic_status = AMBER_RED;
 80005be:	4b36      	ldr	r3, [pc, #216]	; (8000698 <fsm_automatic_run+0x310>)
 80005c0:	2250      	movs	r2, #80	; 0x50
 80005c2:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "AMBER   RED\r\n"), 1000);
 80005c4:	4943      	ldr	r1, [pc, #268]	; (80006d4 <fsm_automatic_run+0x34c>)
 80005c6:	4836      	ldr	r0, [pc, #216]	; (80006a0 <fsm_automatic_run+0x318>)
 80005c8:	f004 f83a 	bl	8004640 <siprintf>
 80005cc:	4603      	mov	r3, r0
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d4:	4932      	ldr	r1, [pc, #200]	; (80006a0 <fsm_automatic_run+0x318>)
 80005d6:	f107 0008 	add.w	r0, r7, #8
 80005da:	f003 fb06 	bl	8003bea <HAL_UART_Transmit>
            setTimer(1, amber_counter);
 80005de:	4b3b      	ldr	r3, [pc, #236]	; (80006cc <fsm_automatic_run+0x344>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4619      	mov	r1, r3
 80005e4:	2001      	movs	r0, #1
 80005e6:	f001 f99f 	bl	8001928 <setTimer>

            counter_light_1 = amber_counter / 1000;
 80005ea:	4b38      	ldr	r3, [pc, #224]	; (80006cc <fsm_automatic_run+0x344>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a31      	ldr	r2, [pc, #196]	; (80006b4 <fsm_automatic_run+0x32c>)
 80005f0:	fb82 1203 	smull	r1, r2, r2, r3
 80005f4:	1192      	asrs	r2, r2, #6
 80005f6:	17db      	asrs	r3, r3, #31
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	4a2f      	ldr	r2, [pc, #188]	; (80006b8 <fsm_automatic_run+0x330>)
 80005fc:	6013      	str	r3, [r2, #0]
        }

        break;
 80005fe:	e041      	b.n	8000684 <fsm_automatic_run+0x2fc>

    case AMBER_RED:
    	setAmberLight1(0);
 8000600:	2000      	movs	r0, #0
 8000602:	f000 fd09 	bl	8001018 <setAmberLight1>
    	setRedLight2(0);
 8000606:	2000      	movs	r0, #0
 8000608:	f000 fd24 	bl	8001054 <setRedLight2>

        if (timer_flag[1] == 1) {
 800060c:	4b2d      	ldr	r3, [pc, #180]	; (80006c4 <fsm_automatic_run+0x33c>)
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d139      	bne.n	8000688 <fsm_automatic_run+0x300>
            traffic_status = RED_GREEN;
 8000614:	4b20      	ldr	r3, [pc, #128]	; (8000698 <fsm_automatic_run+0x310>)
 8000616:	2232      	movs	r2, #50	; 0x32
 8000618:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "RED   GREEN\r\n"), 1000);
 800061a:	4923      	ldr	r1, [pc, #140]	; (80006a8 <fsm_automatic_run+0x320>)
 800061c:	4820      	ldr	r0, [pc, #128]	; (80006a0 <fsm_automatic_run+0x318>)
 800061e:	f004 f80f 	bl	8004640 <siprintf>
 8000622:	4603      	mov	r3, r0
 8000624:	b29a      	uxth	r2, r3
 8000626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062a:	491d      	ldr	r1, [pc, #116]	; (80006a0 <fsm_automatic_run+0x318>)
 800062c:	f107 0008 	add.w	r0, r7, #8
 8000630:	f003 fadb 	bl	8003bea <HAL_UART_Transmit>
            setTimer(1, green_counter);
 8000634:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <fsm_automatic_run+0x324>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	2001      	movs	r0, #1
 800063c:	f001 f974 	bl	8001928 <setTimer>

            counter_light_1 = red_counter / 1000;
 8000640:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <fsm_automatic_run+0x328>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a1b      	ldr	r2, [pc, #108]	; (80006b4 <fsm_automatic_run+0x32c>)
 8000646:	fb82 1203 	smull	r1, r2, r2, r3
 800064a:	1192      	asrs	r2, r2, #6
 800064c:	17db      	asrs	r3, r3, #31
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	4a19      	ldr	r2, [pc, #100]	; (80006b8 <fsm_automatic_run+0x330>)
 8000652:	6013      	str	r3, [r2, #0]
            counter_light_2 = green_counter / 1000;
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <fsm_automatic_run+0x324>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a16      	ldr	r2, [pc, #88]	; (80006b4 <fsm_automatic_run+0x32c>)
 800065a:	fb82 1203 	smull	r1, r2, r2, r3
 800065e:	1192      	asrs	r2, r2, #6
 8000660:	17db      	asrs	r3, r3, #31
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	4a15      	ldr	r2, [pc, #84]	; (80006bc <fsm_automatic_run+0x334>)
 8000666:	6013      	str	r3, [r2, #0]

            /* If the pedestrian light is PEDESTRIAN_RED, change to PEDESTRIAN_GREEN when the traffic light is backing to RED_GREEN mode */
            /* If the pedestrian light is INACTIVE => no change */
            if(pedestrian_status == PEDESTRIAN_RED){
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <fsm_automatic_run+0x31c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000670:	d10a      	bne.n	8000688 <fsm_automatic_run+0x300>
            	pedestrian_status = PEDESTRIAN_GREEN;
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <fsm_automatic_run+0x31c>)
 8000674:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000678:	601a      	str	r2, [r3, #0]
            }
        }
        break;
 800067a:	e005      	b.n	8000688 <fsm_automatic_run+0x300>
        break;
 800067c:	bf00      	nop
 800067e:	e004      	b.n	800068a <fsm_automatic_run+0x302>
        break;
 8000680:	bf00      	nop
 8000682:	e002      	b.n	800068a <fsm_automatic_run+0x302>
        break;
 8000684:	bf00      	nop
 8000686:	e000      	b.n	800068a <fsm_automatic_run+0x302>
        break;
 8000688:	bf00      	nop
    }
}
 800068a:	46bd      	mov	sp, r7
 800068c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000690:	b004      	add	sp, #16
 8000692:	4770      	bx	lr
 8000694:	20000000 	.word	0x20000000
 8000698:	2000000c 	.word	0x2000000c
 800069c:	08004eb0 	.word	0x08004eb0
 80006a0:	200001b4 	.word	0x200001b4
 80006a4:	20000004 	.word	0x20000004
 80006a8:	08004ec8 	.word	0x08004ec8
 80006ac:	20000018 	.word	0x20000018
 80006b0:	20000010 	.word	0x20000010
 80006b4:	10624dd3 	.word	0x10624dd3
 80006b8:	2000001c 	.word	0x2000001c
 80006bc:	20000020 	.word	0x20000020
 80006c0:	20000024 	.word	0x20000024
 80006c4:	20000270 	.word	0x20000270
 80006c8:	08004ed8 	.word	0x08004ed8
 80006cc:	20000014 	.word	0x20000014
 80006d0:	08004ee8 	.word	0x08004ee8
 80006d4:	08004ef8 	.word	0x08004ef8

080006d8 <fsm_manual_run>:

#include "fsm_manual.h"

int blink = 0;

void fsm_manual_run(UART_HandleTypeDef huart2) {
 80006d8:	b084      	sub	sp, #16
 80006da:	b580      	push	{r7, lr}
 80006dc:	af00      	add	r7, sp, #0
 80006de:	f107 0c08 	add.w	ip, r7, #8
 80006e2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	/* OUT OF TIME FOR MANUAL EVENTS */
	if (timer_flag[1] == 1) {
 80006e6:	4ba3      	ldr	r3, [pc, #652]	; (8000974 <fsm_manual_run+0x29c>)
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d106      	bne.n	80006fc <fsm_manual_run+0x24>
		status = AUTOMATIC_MODE;
 80006ee:	4ba2      	ldr	r3, [pc, #648]	; (8000978 <fsm_manual_run+0x2a0>)
 80006f0:	2202      	movs	r2, #2
 80006f2:	601a      	str	r2, [r3, #0]
		traffic_status = INIT;
 80006f4:	4ba1      	ldr	r3, [pc, #644]	; (800097c <fsm_manual_run+0x2a4>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	601a      	str	r2, [r3, #0]
		return;
 80006fa:	e2f0      	b.n	8000cde <fsm_manual_run+0x606>
	}

	if (timer_flag[2] == 1) { // using timer2 to blink the led
 80006fc:	4b9d      	ldr	r3, [pc, #628]	; (8000974 <fsm_manual_run+0x29c>)
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d10a      	bne.n	800071a <fsm_manual_run+0x42>
		blink = 1 - blink;
 8000704:	4b9e      	ldr	r3, [pc, #632]	; (8000980 <fsm_manual_run+0x2a8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f1c3 0301 	rsb	r3, r3, #1
 800070c:	4a9c      	ldr	r2, [pc, #624]	; (8000980 <fsm_manual_run+0x2a8>)
 800070e:	6013      	str	r3, [r2, #0]
		setTimer(2, 500); // toggle every 500ms, this would get f = 2Hz for blinking the led
 8000710:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000714:	2002      	movs	r0, #2
 8000716:	f001 f907 	bl	8001928 <setTimer>
	}

	switch (traffic_status) {
 800071a:	4b98      	ldr	r3, [pc, #608]	; (800097c <fsm_manual_run+0x2a4>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	3b01      	subs	r3, #1
 8000720:	2b03      	cmp	r3, #3
 8000722:	f200 82af 	bhi.w	8000c84 <fsm_manual_run+0x5ac>
 8000726:	a201      	add	r2, pc, #4	; (adr r2, 800072c <fsm_manual_run+0x54>)
 8000728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072c:	0800073d 	.word	0x0800073d
 8000730:	080007df 	.word	0x080007df
 8000734:	080009c9 	.word	0x080009c9
 8000738:	08000b6b 	.word	0x08000b6b
	case INIT:
		/* UART COMMUNICATION */
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Mode: Manual mode\r\n"), 1000);
 800073c:	4991      	ldr	r1, [pc, #580]	; (8000984 <fsm_manual_run+0x2ac>)
 800073e:	4892      	ldr	r0, [pc, #584]	; (8000988 <fsm_manual_run+0x2b0>)
 8000740:	f003 ff7e 	bl	8004640 <siprintf>
 8000744:	4603      	mov	r3, r0
 8000746:	b29a      	uxth	r2, r3
 8000748:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074c:	498e      	ldr	r1, [pc, #568]	; (8000988 <fsm_manual_run+0x2b0>)
 800074e:	f107 0008 	add.w	r0, r7, #8
 8000752:	f003 fa4a 	bl	8003bea <HAL_UART_Transmit>


		// change traffic state to MAN_RED when change from AUTOMATIC to MANUAL
		traffic_status = MAN_RED;
 8000756:	4b89      	ldr	r3, [pc, #548]	; (800097c <fsm_manual_run+0x2a4>)
 8000758:	2202      	movs	r2, #2
 800075a:	601a      	str	r2, [r3, #0]

		time_modify_counter = red_counter; // update temporary counter storing red led delay
 800075c:	4b8b      	ldr	r3, [pc, #556]	; (800098c <fsm_manual_run+0x2b4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a8b      	ldr	r2, [pc, #556]	; (8000990 <fsm_manual_run+0x2b8>)
 8000762:	6013      	str	r3, [r2, #0]
		counter_light_1 = red_counter / 1000; 		// counter light 1 show the value of current manual light
 8000764:	4b89      	ldr	r3, [pc, #548]	; (800098c <fsm_manual_run+0x2b4>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a8a      	ldr	r2, [pc, #552]	; (8000994 <fsm_manual_run+0x2bc>)
 800076a:	fb82 1203 	smull	r1, r2, r2, r3
 800076e:	1192      	asrs	r2, r2, #6
 8000770:	17db      	asrs	r3, r3, #31
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	4a88      	ldr	r2, [pc, #544]	; (8000998 <fsm_manual_run+0x2c0>)
 8000776:	6013      	str	r3, [r2, #0]
		counter_light_2 = traffic_status;					// counter light 2 show the mode
 8000778:	4b80      	ldr	r3, [pc, #512]	; (800097c <fsm_manual_run+0x2a4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a87      	ldr	r2, [pc, #540]	; (800099c <fsm_manual_run+0x2c4>)
 800077e:	6013      	str	r3, [r2, #0]
		counter_lights = READ_UART;					// reset counter for switching 7-seg lights
 8000780:	4b87      	ldr	r3, [pc, #540]	; (80009a0 <fsm_manual_run+0x2c8>)
 8000782:	2264      	movs	r2, #100	; 0x64
 8000784:	601a      	str	r2, [r3, #0]

		setTimer(1, 5000);				// reuse timer 0 to 5 seconds for manual event
 8000786:	f241 3188 	movw	r1, #5000	; 0x1388
 800078a:	2001      	movs	r0, #1
 800078c:	f001 f8cc 	bl	8001928 <setTimer>
		setTimer(2, 500); 				// set timer 1 for led blinking
 8000790:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000794:	2002      	movs	r0, #2
 8000796:	f001 f8c7 	bl	8001928 <setTimer>
		setTimer(3, 250);				// timer 3 still counting 7-seg light
 800079a:	21fa      	movs	r1, #250	; 0xfa
 800079c:	2003      	movs	r0, #3
 800079e:	f001 f8c3 	bl	8001928 <setTimer>

		/* UART COMMUNICATION */
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Mode 2: Modifying RED\r\n"), 1000);
 80007a2:	4980      	ldr	r1, [pc, #512]	; (80009a4 <fsm_manual_run+0x2cc>)
 80007a4:	4878      	ldr	r0, [pc, #480]	; (8000988 <fsm_manual_run+0x2b0>)
 80007a6:	f003 ff4b 	bl	8004640 <siprintf>
 80007aa:	4603      	mov	r3, r0
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b2:	4975      	ldr	r1, [pc, #468]	; (8000988 <fsm_manual_run+0x2b0>)
 80007b4:	f107 0008 	add.w	r0, r7, #8
 80007b8:	f003 fa17 	bl	8003bea <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Current time = %d\r\n", counter_light_1), 1000);
 80007bc:	4b76      	ldr	r3, [pc, #472]	; (8000998 <fsm_manual_run+0x2c0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4979      	ldr	r1, [pc, #484]	; (80009a8 <fsm_manual_run+0x2d0>)
 80007c4:	4870      	ldr	r0, [pc, #448]	; (8000988 <fsm_manual_run+0x2b0>)
 80007c6:	f003 ff3b 	bl	8004640 <siprintf>
 80007ca:	4603      	mov	r3, r0
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d2:	496d      	ldr	r1, [pc, #436]	; (8000988 <fsm_manual_run+0x2b0>)
 80007d4:	f107 0008 	add.w	r0, r7, #8
 80007d8:	f003 fa07 	bl	8003bea <HAL_UART_Transmit>

		break;
 80007dc:	e27f      	b.n	8000cde <fsm_manual_run+0x606>
	case MAN_RED:
		/* BLINK LEDs */
		setRedLight1(blink);
 80007de:	4b68      	ldr	r3, [pc, #416]	; (8000980 <fsm_manual_run+0x2a8>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fbdc 	bl	8000fa0 <setRedLight1>
		setRedLight2(blink);
 80007e8:	4b65      	ldr	r3, [pc, #404]	; (8000980 <fsm_manual_run+0x2a8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 fc31 	bl	8001054 <setRedLight2>

		/* CHANGE MODE = 3 (MAN_AMBER) WHEN BUTTON1 IS PRESSED */
		if (isButtonPressed(1)) {
 80007f2:	2001      	movs	r0, #1
 80007f4:	f7ff fd9e 	bl	8000334 <isButtonPressed>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d042      	beq.n	8000884 <fsm_manual_run+0x1ac>
			traffic_status = MAN_AMBER;
 80007fe:	4b5f      	ldr	r3, [pc, #380]	; (800097c <fsm_manual_run+0x2a4>)
 8000800:	2203      	movs	r2, #3
 8000802:	601a      	str	r2, [r3, #0]

			time_modify_counter = amber_counter;	// update temporary counter storing red led delay
 8000804:	4b69      	ldr	r3, [pc, #420]	; (80009ac <fsm_manual_run+0x2d4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a61      	ldr	r2, [pc, #388]	; (8000990 <fsm_manual_run+0x2b8>)
 800080a:	6013      	str	r3, [r2, #0]
			counter_light_1 = amber_counter / 1000;	// counter light 1 show the value of current manual light
 800080c:	4b67      	ldr	r3, [pc, #412]	; (80009ac <fsm_manual_run+0x2d4>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a60      	ldr	r2, [pc, #384]	; (8000994 <fsm_manual_run+0x2bc>)
 8000812:	fb82 1203 	smull	r1, r2, r2, r3
 8000816:	1192      	asrs	r2, r2, #6
 8000818:	17db      	asrs	r3, r3, #31
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	4a5e      	ldr	r2, [pc, #376]	; (8000998 <fsm_manual_run+0x2c0>)
 800081e:	6013      	str	r3, [r2, #0]
			counter_light_2 = traffic_status;				// counter light 2 show the mode
 8000820:	4b56      	ldr	r3, [pc, #344]	; (800097c <fsm_manual_run+0x2a4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a5d      	ldr	r2, [pc, #372]	; (800099c <fsm_manual_run+0x2c4>)
 8000826:	6013      	str	r3, [r2, #0]
			counter_lights = READ_UART;				// reset counter for switching 7-seg lights
 8000828:	4b5d      	ldr	r3, [pc, #372]	; (80009a0 <fsm_manual_run+0x2c8>)
 800082a:	2264      	movs	r2, #100	; 0x64
 800082c:	601a      	str	r2, [r3, #0]

			setTimer(1, 5000);			// reuse timer 0 to 5 seconds for manual event
 800082e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000832:	2001      	movs	r0, #1
 8000834:	f001 f878 	bl	8001928 <setTimer>
			setTimer(2, 500); 			// set timer 1 for led blinking
 8000838:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800083c:	2002      	movs	r0, #2
 800083e:	f001 f873 	bl	8001928 <setTimer>
			setTimer(3, 250);			// timer 3 still counting 7-seg light
 8000842:	21fa      	movs	r1, #250	; 0xfa
 8000844:	2003      	movs	r0, #3
 8000846:	f001 f86f 	bl	8001928 <setTimer>

			/* UART COMMUNICATION */
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Mode 3: Modifying AMBER\r\n"), 1000);
 800084a:	4959      	ldr	r1, [pc, #356]	; (80009b0 <fsm_manual_run+0x2d8>)
 800084c:	484e      	ldr	r0, [pc, #312]	; (8000988 <fsm_manual_run+0x2b0>)
 800084e:	f003 fef7 	bl	8004640 <siprintf>
 8000852:	4603      	mov	r3, r0
 8000854:	b29a      	uxth	r2, r3
 8000856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085a:	494b      	ldr	r1, [pc, #300]	; (8000988 <fsm_manual_run+0x2b0>)
 800085c:	f107 0008 	add.w	r0, r7, #8
 8000860:	f003 f9c3 	bl	8003bea <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Current time = %d\r\n", counter_light_1), 1000);
 8000864:	4b4c      	ldr	r3, [pc, #304]	; (8000998 <fsm_manual_run+0x2c0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	494f      	ldr	r1, [pc, #316]	; (80009a8 <fsm_manual_run+0x2d0>)
 800086c:	4846      	ldr	r0, [pc, #280]	; (8000988 <fsm_manual_run+0x2b0>)
 800086e:	f003 fee7 	bl	8004640 <siprintf>
 8000872:	4603      	mov	r3, r0
 8000874:	b29a      	uxth	r2, r3
 8000876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087a:	4943      	ldr	r1, [pc, #268]	; (8000988 <fsm_manual_run+0x2b0>)
 800087c:	f107 0008 	add.w	r0, r7, #8
 8000880:	f003 f9b3 	bl	8003bea <HAL_UART_Transmit>
		}

		if (isButtonPressed(2) == 1) { // increasing 7-segment light counter
 8000884:	2002      	movs	r0, #2
 8000886:	f7ff fd55 	bl	8000334 <isButtonPressed>
 800088a:	4603      	mov	r3, r0
 800088c:	2b01      	cmp	r3, #1
 800088e:	d129      	bne.n	80008e4 <fsm_manual_run+0x20c>
			time_modify_counter += UPDATED_TIME;
 8000890:	4b3f      	ldr	r3, [pc, #252]	; (8000990 <fsm_manual_run+0x2b8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000898:	4a3d      	ldr	r2, [pc, #244]	; (8000990 <fsm_manual_run+0x2b8>)
 800089a:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Updated time = %d\r\n", time_modify_counter / 1000), 1000);
 800089c:	4b3c      	ldr	r3, [pc, #240]	; (8000990 <fsm_manual_run+0x2b8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a3c      	ldr	r2, [pc, #240]	; (8000994 <fsm_manual_run+0x2bc>)
 80008a2:	fb82 1203 	smull	r1, r2, r2, r3
 80008a6:	1192      	asrs	r2, r2, #6
 80008a8:	17db      	asrs	r3, r3, #31
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	461a      	mov	r2, r3
 80008ae:	4941      	ldr	r1, [pc, #260]	; (80009b4 <fsm_manual_run+0x2dc>)
 80008b0:	4835      	ldr	r0, [pc, #212]	; (8000988 <fsm_manual_run+0x2b0>)
 80008b2:	f003 fec5 	bl	8004640 <siprintf>
 80008b6:	4603      	mov	r3, r0
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008be:	4932      	ldr	r1, [pc, #200]	; (8000988 <fsm_manual_run+0x2b0>)
 80008c0:	f107 0008 	add.w	r0, r7, #8
 80008c4:	f003 f991 	bl	8003bea <HAL_UART_Transmit>
			if (time_modify_counter > MAX_TIME)
 80008c8:	4b31      	ldr	r3, [pc, #196]	; (8000990 <fsm_manual_run+0x2b8>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a3a      	ldr	r2, [pc, #232]	; (80009b8 <fsm_manual_run+0x2e0>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	dd03      	ble.n	80008da <fsm_manual_run+0x202>
				time_modify_counter = 1000; // 1 second
 80008d2:	4b2f      	ldr	r3, [pc, #188]	; (8000990 <fsm_manual_run+0x2b8>)
 80008d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008d8:	601a      	str	r2, [r3, #0]
			setTimer(1, 5000); // set 5 seconds for manual events
 80008da:	f241 3188 	movw	r1, #5000	; 0x1388
 80008de:	2001      	movs	r0, #1
 80008e0:	f001 f822 	bl	8001928 <setTimer>
		}

		if (isButtonPressed(3) == 1) { // set the new value for 7-segment light counter
 80008e4:	2003      	movs	r0, #3
 80008e6:	f7ff fd25 	bl	8000334 <isButtonPressed>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	f040 81cb 	bne.w	8000c88 <fsm_manual_run+0x5b0>
			red_counter = time_modify_counter;
 80008f2:	4b27      	ldr	r3, [pc, #156]	; (8000990 <fsm_manual_run+0x2b8>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a25      	ldr	r2, [pc, #148]	; (800098c <fsm_manual_run+0x2b4>)
 80008f8:	6013      	str	r3, [r2, #0]
			green_counter = red_counter - amber_counter;
 80008fa:	4b24      	ldr	r3, [pc, #144]	; (800098c <fsm_manual_run+0x2b4>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <fsm_manual_run+0x2d4>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	4a2d      	ldr	r2, [pc, #180]	; (80009bc <fsm_manual_run+0x2e4>)
 8000906:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);								// set 5 seconds for manual events
 8000908:	f241 3188 	movw	r1, #5000	; 0x1388
 800090c:	2001      	movs	r0, #1
 800090e:	f001 f80b 	bl	8001928 <setTimer>
			counter_light_1 = red_counter / 1000; // counter light 1 show the value of current manual light
 8000912:	4b1e      	ldr	r3, [pc, #120]	; (800098c <fsm_manual_run+0x2b4>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a1f      	ldr	r2, [pc, #124]	; (8000994 <fsm_manual_run+0x2bc>)
 8000918:	fb82 1203 	smull	r1, r2, r2, r3
 800091c:	1192      	asrs	r2, r2, #6
 800091e:	17db      	asrs	r3, r3, #31
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	4a1d      	ldr	r2, [pc, #116]	; (8000998 <fsm_manual_run+0x2c0>)
 8000924:	6013      	str	r3, [r2, #0]
			counter_lights = READ_UART;								// reset counter for switching 7-seg lights
 8000926:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <fsm_manual_run+0x2c8>)
 8000928:	2264      	movs	r2, #100	; 0x64
 800092a:	601a      	str	r2, [r3, #0]

			status = AUTOMATIC_MODE;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <fsm_manual_run+0x2a0>)
 800092e:	2202      	movs	r2, #2
 8000930:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <fsm_manual_run+0x2a4>)
 8000934:	2201      	movs	r2, #1
 8000936:	601a      	str	r2, [r3, #0]

			/* UART COMMUNICATION */
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Upon update:\r\n"), 1000);
 8000938:	4921      	ldr	r1, [pc, #132]	; (80009c0 <fsm_manual_run+0x2e8>)
 800093a:	4813      	ldr	r0, [pc, #76]	; (8000988 <fsm_manual_run+0x2b0>)
 800093c:	f003 fe80 	bl	8004640 <siprintf>
 8000940:	4603      	mov	r3, r0
 8000942:	b29a      	uxth	r2, r3
 8000944:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000948:	490f      	ldr	r1, [pc, #60]	; (8000988 <fsm_manual_run+0x2b0>)
 800094a:	f107 0008 	add.w	r0, r7, #8
 800094e:	f003 f94c 	bl	8003bea <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "RED counter = %d\r\n", counter_light_1), 1000);
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <fsm_manual_run+0x2c0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	491a      	ldr	r1, [pc, #104]	; (80009c4 <fsm_manual_run+0x2ec>)
 800095a:	480b      	ldr	r0, [pc, #44]	; (8000988 <fsm_manual_run+0x2b0>)
 800095c:	f003 fe70 	bl	8004640 <siprintf>
 8000960:	4603      	mov	r3, r0
 8000962:	b29a      	uxth	r2, r3
 8000964:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000968:	4907      	ldr	r1, [pc, #28]	; (8000988 <fsm_manual_run+0x2b0>)
 800096a:	f107 0008 	add.w	r0, r7, #8
 800096e:	f003 f93c 	bl	8003bea <HAL_UART_Transmit>
		}
		break;
 8000972:	e189      	b.n	8000c88 <fsm_manual_run+0x5b0>
 8000974:	20000270 	.word	0x20000270
 8000978:	20000000 	.word	0x20000000
 800097c:	2000000c 	.word	0x2000000c
 8000980:	200000b4 	.word	0x200000b4
 8000984:	08004f08 	.word	0x08004f08
 8000988:	200001b4 	.word	0x200001b4
 800098c:	20000010 	.word	0x20000010
 8000990:	200000c0 	.word	0x200000c0
 8000994:	10624dd3 	.word	0x10624dd3
 8000998:	2000001c 	.word	0x2000001c
 800099c:	20000020 	.word	0x20000020
 80009a0:	20000024 	.word	0x20000024
 80009a4:	08004f1c 	.word	0x08004f1c
 80009a8:	08004f34 	.word	0x08004f34
 80009ac:	20000014 	.word	0x20000014
 80009b0:	08004f48 	.word	0x08004f48
 80009b4:	08004f64 	.word	0x08004f64
 80009b8:	000182b8 	.word	0x000182b8
 80009bc:	20000018 	.word	0x20000018
 80009c0:	08004f78 	.word	0x08004f78
 80009c4:	08004f88 	.word	0x08004f88

	case MAN_AMBER:
		/* BLINK LEDs */
		setAmberLight1(blink);
 80009c8:	4bb1      	ldr	r3, [pc, #708]	; (8000c90 <fsm_manual_run+0x5b8>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fb23 	bl	8001018 <setAmberLight1>
		setAmberLight2(blink);
 80009d2:	4baf      	ldr	r3, [pc, #700]	; (8000c90 <fsm_manual_run+0x5b8>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 fb78 	bl	80010cc <setAmberLight2>

		/* CHANGE MODE = 4 (MAN_GREEN) WHEN BUTTON1 IS PRESSED */
		if (isButtonPressed(1)) {
 80009dc:	2001      	movs	r0, #1
 80009de:	f7ff fca9 	bl	8000334 <isButtonPressed>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d048      	beq.n	8000a7a <fsm_manual_run+0x3a2>
			traffic_status = MAN_GREEN;
 80009e8:	4baa      	ldr	r3, [pc, #680]	; (8000c94 <fsm_manual_run+0x5bc>)
 80009ea:	2204      	movs	r2, #4
 80009ec:	601a      	str	r2, [r3, #0]

			time_modify_counter = green_counter / 1000;	// update temporary counter storing red led delay
 80009ee:	4baa      	ldr	r3, [pc, #680]	; (8000c98 <fsm_manual_run+0x5c0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4aaa      	ldr	r2, [pc, #680]	; (8000c9c <fsm_manual_run+0x5c4>)
 80009f4:	fb82 1203 	smull	r1, r2, r2, r3
 80009f8:	1192      	asrs	r2, r2, #6
 80009fa:	17db      	asrs	r3, r3, #31
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	4aa8      	ldr	r2, [pc, #672]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000a00:	6013      	str	r3, [r2, #0]
			counter_light_1 = green_counter / 1000;			// counter light 1 show the value of current manual light
 8000a02:	4ba5      	ldr	r3, [pc, #660]	; (8000c98 <fsm_manual_run+0x5c0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4aa5      	ldr	r2, [pc, #660]	; (8000c9c <fsm_manual_run+0x5c4>)
 8000a08:	fb82 1203 	smull	r1, r2, r2, r3
 8000a0c:	1192      	asrs	r2, r2, #6
 8000a0e:	17db      	asrs	r3, r3, #31
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	4aa4      	ldr	r2, [pc, #656]	; (8000ca4 <fsm_manual_run+0x5cc>)
 8000a14:	6013      	str	r3, [r2, #0]
			counter_light_2 = traffic_status;						// counter light 2 show the mode
 8000a16:	4b9f      	ldr	r3, [pc, #636]	; (8000c94 <fsm_manual_run+0x5bc>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4aa3      	ldr	r2, [pc, #652]	; (8000ca8 <fsm_manual_run+0x5d0>)
 8000a1c:	6013      	str	r3, [r2, #0]
			counter_lights = READ_UART;						// reset counter for switching 7-seg lights
 8000a1e:	4ba3      	ldr	r3, [pc, #652]	; (8000cac <fsm_manual_run+0x5d4>)
 8000a20:	2264      	movs	r2, #100	; 0x64
 8000a22:	601a      	str	r2, [r3, #0]

			setTimer(1, 5000);				// reuse timer 0 to 5 seconds for manual event
 8000a24:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f000 ff7d 	bl	8001928 <setTimer>
			setTimer(2, 500); 				// set timer 1 for led blinking
 8000a2e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a32:	2002      	movs	r0, #2
 8000a34:	f000 ff78 	bl	8001928 <setTimer>
			setTimer(3, 250);				// timer 3 still counting 7-seg light
 8000a38:	21fa      	movs	r1, #250	; 0xfa
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	f000 ff74 	bl	8001928 <setTimer>

			/* UART COMMUNICATION */
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Mode 4: Modifying GREEN\r\n"), 1000);
 8000a40:	499b      	ldr	r1, [pc, #620]	; (8000cb0 <fsm_manual_run+0x5d8>)
 8000a42:	489c      	ldr	r0, [pc, #624]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000a44:	f003 fdfc 	bl	8004640 <siprintf>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a50:	4998      	ldr	r1, [pc, #608]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000a52:	f107 0008 	add.w	r0, r7, #8
 8000a56:	f003 f8c8 	bl	8003bea <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Current time = %d\r\n", counter_light_1), 1000);
 8000a5a:	4b92      	ldr	r3, [pc, #584]	; (8000ca4 <fsm_manual_run+0x5cc>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4995      	ldr	r1, [pc, #596]	; (8000cb8 <fsm_manual_run+0x5e0>)
 8000a62:	4894      	ldr	r0, [pc, #592]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000a64:	f003 fdec 	bl	8004640 <siprintf>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a70:	4990      	ldr	r1, [pc, #576]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000a72:	f107 0008 	add.w	r0, r7, #8
 8000a76:	f003 f8b8 	bl	8003bea <HAL_UART_Transmit>
		}

		if (isButtonPressed(2) == 1) { // increasing 7-segment light counter
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	f7ff fc5a 	bl	8000334 <isButtonPressed>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d129      	bne.n	8000ada <fsm_manual_run+0x402>
			time_modify_counter += UPDATED_TIME;
 8000a86:	4b86      	ldr	r3, [pc, #536]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a8e:	4a84      	ldr	r2, [pc, #528]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000a90:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Updated time = %d\r\n", time_modify_counter / 1000), 1000);
 8000a92:	4b83      	ldr	r3, [pc, #524]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a81      	ldr	r2, [pc, #516]	; (8000c9c <fsm_manual_run+0x5c4>)
 8000a98:	fb82 1203 	smull	r1, r2, r2, r3
 8000a9c:	1192      	asrs	r2, r2, #6
 8000a9e:	17db      	asrs	r3, r3, #31
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4985      	ldr	r1, [pc, #532]	; (8000cbc <fsm_manual_run+0x5e4>)
 8000aa6:	4883      	ldr	r0, [pc, #524]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000aa8:	f003 fdca 	bl	8004640 <siprintf>
 8000aac:	4603      	mov	r3, r0
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab4:	497f      	ldr	r1, [pc, #508]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000ab6:	f107 0008 	add.w	r0, r7, #8
 8000aba:	f003 f896 	bl	8003bea <HAL_UART_Transmit>
			if (time_modify_counter > MAX_TIME)
 8000abe:	4b78      	ldr	r3, [pc, #480]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a7f      	ldr	r2, [pc, #508]	; (8000cc0 <fsm_manual_run+0x5e8>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	dd03      	ble.n	8000ad0 <fsm_manual_run+0x3f8>
				time_modify_counter = 1000; // 1 second
 8000ac8:	4b75      	ldr	r3, [pc, #468]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000aca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ace:	601a      	str	r2, [r3, #0]
			setTimer(1, 5000); // set 5 seconds for manual events
 8000ad0:	f241 3188 	movw	r1, #5000	; 0x1388
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f000 ff27 	bl	8001928 <setTimer>
		}

		if (isButtonPressed(3) == 1) { // set the new value for 7-segment light counter
 8000ada:	2003      	movs	r0, #3
 8000adc:	f7ff fc2a 	bl	8000334 <isButtonPressed>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	f040 80d2 	bne.w	8000c8c <fsm_manual_run+0x5b4>
			amber_counter = time_modify_counter;
 8000ae8:	4b6d      	ldr	r3, [pc, #436]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a75      	ldr	r2, [pc, #468]	; (8000cc4 <fsm_manual_run+0x5ec>)
 8000aee:	6013      	str	r3, [r2, #0]
			red_counter = amber_counter + green_counter;
 8000af0:	4b74      	ldr	r3, [pc, #464]	; (8000cc4 <fsm_manual_run+0x5ec>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b68      	ldr	r3, [pc, #416]	; (8000c98 <fsm_manual_run+0x5c0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4413      	add	r3, r2
 8000afa:	4a73      	ldr	r2, [pc, #460]	; (8000cc8 <fsm_manual_run+0x5f0>)
 8000afc:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);									// set 5 seconds for manual events
 8000afe:	f241 3188 	movw	r1, #5000	; 0x1388
 8000b02:	2001      	movs	r0, #1
 8000b04:	f000 ff10 	bl	8001928 <setTimer>
			counter_light_1 = amber_counter / 1000; // counter light 1 show the value of current manual light
 8000b08:	4b6e      	ldr	r3, [pc, #440]	; (8000cc4 <fsm_manual_run+0x5ec>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a63      	ldr	r2, [pc, #396]	; (8000c9c <fsm_manual_run+0x5c4>)
 8000b0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b12:	1192      	asrs	r2, r2, #6
 8000b14:	17db      	asrs	r3, r3, #31
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	4a62      	ldr	r2, [pc, #392]	; (8000ca4 <fsm_manual_run+0x5cc>)
 8000b1a:	6013      	str	r3, [r2, #0]
			counter_lights = READ_UART;									// reset counter for switching 7-seg lights
 8000b1c:	4b63      	ldr	r3, [pc, #396]	; (8000cac <fsm_manual_run+0x5d4>)
 8000b1e:	2264      	movs	r2, #100	; 0x64
 8000b20:	601a      	str	r2, [r3, #0]

			status = AUTOMATIC_MODE;
 8000b22:	4b6a      	ldr	r3, [pc, #424]	; (8000ccc <fsm_manual_run+0x5f4>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 8000b28:	4b5a      	ldr	r3, [pc, #360]	; (8000c94 <fsm_manual_run+0x5bc>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	601a      	str	r2, [r3, #0]

			/* UART COMMUNICATION */
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Upon update:\r\n"), 1000);
 8000b2e:	4968      	ldr	r1, [pc, #416]	; (8000cd0 <fsm_manual_run+0x5f8>)
 8000b30:	4860      	ldr	r0, [pc, #384]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000b32:	f003 fd85 	bl	8004640 <siprintf>
 8000b36:	4603      	mov	r3, r0
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3e:	495d      	ldr	r1, [pc, #372]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000b40:	f107 0008 	add.w	r0, r7, #8
 8000b44:	f003 f851 	bl	8003bea <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "AMBER counter = %d\r\n", counter_light_1), 1000);
 8000b48:	4b56      	ldr	r3, [pc, #344]	; (8000ca4 <fsm_manual_run+0x5cc>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4961      	ldr	r1, [pc, #388]	; (8000cd4 <fsm_manual_run+0x5fc>)
 8000b50:	4858      	ldr	r0, [pc, #352]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000b52:	f003 fd75 	bl	8004640 <siprintf>
 8000b56:	4603      	mov	r3, r0
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5e:	4955      	ldr	r1, [pc, #340]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000b60:	f107 0008 	add.w	r0, r7, #8
 8000b64:	f003 f841 	bl	8003bea <HAL_UART_Transmit>
		}

		break;
 8000b68:	e090      	b.n	8000c8c <fsm_manual_run+0x5b4>

	case MAN_GREEN:
		/* BLINK LEDs */
		setGreenLight1(blink);
 8000b6a:	4b49      	ldr	r3, [pc, #292]	; (8000c90 <fsm_manual_run+0x5b8>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 fa34 	bl	8000fdc <setGreenLight1>
		setGreenLight2(blink);
 8000b74:	4b46      	ldr	r3, [pc, #280]	; (8000c90 <fsm_manual_run+0x5b8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 fa89 	bl	8001090 <setGreenLight2>

		/* CHANGE MODE = 1 (AUTOMATIC) WHEN BUTTON1 IS PRESSED */
		if (isButtonPressed(1)) {
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff fbd8 	bl	8000334 <isButtonPressed>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d005      	beq.n	8000b96 <fsm_manual_run+0x4be>
			status = AUTOMATIC_MODE;
 8000b8a:	4b50      	ldr	r3, [pc, #320]	; (8000ccc <fsm_manual_run+0x5f4>)
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 8000b90:	4b40      	ldr	r3, [pc, #256]	; (8000c94 <fsm_manual_run+0x5bc>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	601a      	str	r2, [r3, #0]
		}

		if (isButtonPressed(2) == 1) { // increasing 7-segment light counter
 8000b96:	2002      	movs	r0, #2
 8000b98:	f7ff fbcc 	bl	8000334 <isButtonPressed>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d129      	bne.n	8000bf6 <fsm_manual_run+0x51e>
			time_modify_counter += UPDATED_TIME;
 8000ba2:	4b3f      	ldr	r3, [pc, #252]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000baa:	4a3d      	ldr	r2, [pc, #244]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000bac:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Updated time = %d\r\n", time_modify_counter / 1000), 1000);
 8000bae:	4b3c      	ldr	r3, [pc, #240]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a3a      	ldr	r2, [pc, #232]	; (8000c9c <fsm_manual_run+0x5c4>)
 8000bb4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bb8:	1192      	asrs	r2, r2, #6
 8000bba:	17db      	asrs	r3, r3, #31
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	493e      	ldr	r1, [pc, #248]	; (8000cbc <fsm_manual_run+0x5e4>)
 8000bc2:	483c      	ldr	r0, [pc, #240]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000bc4:	f003 fd3c 	bl	8004640 <siprintf>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd0:	4938      	ldr	r1, [pc, #224]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000bd2:	f107 0008 	add.w	r0, r7, #8
 8000bd6:	f003 f808 	bl	8003bea <HAL_UART_Transmit>
			if (time_modify_counter > MAX_TIME)
 8000bda:	4b31      	ldr	r3, [pc, #196]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a38      	ldr	r2, [pc, #224]	; (8000cc0 <fsm_manual_run+0x5e8>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	dd03      	ble.n	8000bec <fsm_manual_run+0x514>
				time_modify_counter = 1000; // 1 second
 8000be4:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000be6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bea:	601a      	str	r2, [r3, #0]
			setTimer(1, 5000); // set 5 seconds for manual events
 8000bec:	f241 3188 	movw	r1, #5000	; 0x1388
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f000 fe99 	bl	8001928 <setTimer>
		}

		if (isButtonPressed(3) == 1) { // set the new value for 7-segment light counter
 8000bf6:	2003      	movs	r0, #3
 8000bf8:	f7ff fb9c 	bl	8000334 <isButtonPressed>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d16c      	bne.n	8000cdc <fsm_manual_run+0x604>
			green_counter = time_modify_counter;
 8000c02:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a24      	ldr	r2, [pc, #144]	; (8000c98 <fsm_manual_run+0x5c0>)
 8000c08:	6013      	str	r3, [r2, #0]
			red_counter = amber_counter + green_counter;
 8000c0a:	4b2e      	ldr	r3, [pc, #184]	; (8000cc4 <fsm_manual_run+0x5ec>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <fsm_manual_run+0x5c0>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a2c      	ldr	r2, [pc, #176]	; (8000cc8 <fsm_manual_run+0x5f0>)
 8000c16:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);									// set 5 seconds for manual events
 8000c18:	f241 3188 	movw	r1, #5000	; 0x1388
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f000 fe83 	bl	8001928 <setTimer>
			counter_light_1 = green_counter / 1000; // counter light 1 show the value of current manual light
 8000c22:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <fsm_manual_run+0x5c0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a1d      	ldr	r2, [pc, #116]	; (8000c9c <fsm_manual_run+0x5c4>)
 8000c28:	fb82 1203 	smull	r1, r2, r2, r3
 8000c2c:	1192      	asrs	r2, r2, #6
 8000c2e:	17db      	asrs	r3, r3, #31
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	4a1c      	ldr	r2, [pc, #112]	; (8000ca4 <fsm_manual_run+0x5cc>)
 8000c34:	6013      	str	r3, [r2, #0]
			counter_lights = READ_UART;									// reset counter for switching 7-seg lights
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <fsm_manual_run+0x5d4>)
 8000c38:	2264      	movs	r2, #100	; 0x64
 8000c3a:	601a      	str	r2, [r3, #0]

			status = AUTOMATIC_MODE;
 8000c3c:	4b23      	ldr	r3, [pc, #140]	; (8000ccc <fsm_manual_run+0x5f4>)
 8000c3e:	2202      	movs	r2, #2
 8000c40:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <fsm_manual_run+0x5bc>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	601a      	str	r2, [r3, #0]

			/* UART COMMUNICATION */
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Upon update:\r\n"), 1000);
 8000c48:	4921      	ldr	r1, [pc, #132]	; (8000cd0 <fsm_manual_run+0x5f8>)
 8000c4a:	481a      	ldr	r0, [pc, #104]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000c4c:	f003 fcf8 	bl	8004640 <siprintf>
 8000c50:	4603      	mov	r3, r0
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c58:	4916      	ldr	r1, [pc, #88]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000c5a:	f107 0008 	add.w	r0, r7, #8
 8000c5e:	f002 ffc4 	bl	8003bea <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "GREEN counter = %d\r\n", counter_light_1), 1000);
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <fsm_manual_run+0x5cc>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	461a      	mov	r2, r3
 8000c68:	491b      	ldr	r1, [pc, #108]	; (8000cd8 <fsm_manual_run+0x600>)
 8000c6a:	4812      	ldr	r0, [pc, #72]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000c6c:	f003 fce8 	bl	8004640 <siprintf>
 8000c70:	4603      	mov	r3, r0
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c78:	490e      	ldr	r1, [pc, #56]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000c7a:	f107 0008 	add.w	r0, r7, #8
 8000c7e:	f002 ffb4 	bl	8003bea <HAL_UART_Transmit>
		}

		break;
 8000c82:	e02b      	b.n	8000cdc <fsm_manual_run+0x604>
	default:
		break;
 8000c84:	bf00      	nop
 8000c86:	e02a      	b.n	8000cde <fsm_manual_run+0x606>
		break;
 8000c88:	bf00      	nop
 8000c8a:	e028      	b.n	8000cde <fsm_manual_run+0x606>
		break;
 8000c8c:	bf00      	nop
 8000c8e:	e026      	b.n	8000cde <fsm_manual_run+0x606>
 8000c90:	200000b4 	.word	0x200000b4
 8000c94:	2000000c 	.word	0x2000000c
 8000c98:	20000018 	.word	0x20000018
 8000c9c:	10624dd3 	.word	0x10624dd3
 8000ca0:	200000c0 	.word	0x200000c0
 8000ca4:	2000001c 	.word	0x2000001c
 8000ca8:	20000020 	.word	0x20000020
 8000cac:	20000024 	.word	0x20000024
 8000cb0:	08004f9c 	.word	0x08004f9c
 8000cb4:	200001b4 	.word	0x200001b4
 8000cb8:	08004f34 	.word	0x08004f34
 8000cbc:	08004f64 	.word	0x08004f64
 8000cc0:	000182b8 	.word	0x000182b8
 8000cc4:	20000014 	.word	0x20000014
 8000cc8:	20000010 	.word	0x20000010
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	08004f78 	.word	0x08004f78
 8000cd4:	08004fb8 	.word	0x08004fb8
 8000cd8:	08004fd0 	.word	0x08004fd0
		break;
 8000cdc:	bf00      	nop
	}
}
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <PedestrianRed>:
 *      Author: ProX
 */

#include "fsm_pedestrian.h"

void PedestrianRed() {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, 1);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <PedestrianRed+0x20>)
 8000cf4:	f001 fbb7 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cfe:	4803      	ldr	r0, [pc, #12]	; (8000d0c <PedestrianRed+0x24>)
 8000d00:	f001 fbb1 	bl	8002466 <HAL_GPIO_WritePin>
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40010c00 	.word	0x40010c00
 8000d0c:	40010800 	.word	0x40010800

08000d10 <PedestrianGreen>:

void PedestrianGreen() {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <PedestrianGreen+0x20>)
 8000d1c:	f001 fba3 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, 1);
 8000d20:	2201      	movs	r2, #1
 8000d22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d26:	4803      	ldr	r0, [pc, #12]	; (8000d34 <PedestrianGreen+0x24>)
 8000d28:	f001 fb9d 	bl	8002466 <HAL_GPIO_WritePin>
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40010c00 	.word	0x40010c00
 8000d34:	40010800 	.word	0x40010800

08000d38 <PedestrianInvalid>:

void PedestrianInvalid() {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, 1);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <PedestrianInvalid+0x20>)
 8000d44:	f001 fb8f 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, 1);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d4e:	4803      	ldr	r0, [pc, #12]	; (8000d5c <PedestrianInvalid+0x24>)
 8000d50:	f001 fb89 	bl	8002466 <HAL_GPIO_WritePin>
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40010c00 	.word	0x40010c00
 8000d5c:	40010800 	.word	0x40010800

08000d60 <fsm_pedestrian_run>:

void fsm_pedestrian_run(void) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	switch (pedestrian_status) {
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <fsm_pedestrian_run+0x94>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000d6c:	d03c      	beq.n	8000de8 <fsm_pedestrian_run+0x88>
 8000d6e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000d72:	dc3d      	bgt.n	8000df0 <fsm_pedestrian_run+0x90>
 8000d74:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000d78:	d003      	beq.n	8000d82 <fsm_pedestrian_run+0x22>
 8000d7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d7e:	d02d      	beq.n	8000ddc <fsm_pedestrian_run+0x7c>

	case PEDESTRIAN_RED:
		PedestrianRed();
		break;
	}
}
 8000d80:	e036      	b.n	8000df0 <fsm_pedestrian_run+0x90>
		PedestrianInvalid();
 8000d82:	f7ff ffd9 	bl	8000d38 <PedestrianInvalid>
		buzzer_status = OFF;
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <fsm_pedestrian_run+0x98>)
 8000d88:	2209      	movs	r2, #9
 8000d8a:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(4)) {
 8000d8c:	2004      	movs	r0, #4
 8000d8e:	f7ff fad1 	bl	8000334 <isButtonPressed>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d02a      	beq.n	8000dee <fsm_pedestrian_run+0x8e>
			PedestrianGreen();
 8000d98:	f7ff ffba 	bl	8000d10 <PedestrianGreen>
			if (traffic_status == RED_AMBER || traffic_status == RED_GREEN) {
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <fsm_pedestrian_run+0x9c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b3c      	cmp	r3, #60	; 0x3c
 8000da2:	d003      	beq.n	8000dac <fsm_pedestrian_run+0x4c>
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <fsm_pedestrian_run+0x9c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b32      	cmp	r3, #50	; 0x32
 8000daa:	d104      	bne.n	8000db6 <fsm_pedestrian_run+0x56>
				pedestrian_status = PEDESTRIAN_GREEN;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <fsm_pedestrian_run+0x94>)
 8000dae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	e011      	b.n	8000dda <fsm_pedestrian_run+0x7a>
			else if (traffic_status == GREEN_RED || traffic_status == AMBER_RED) {
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <fsm_pedestrian_run+0x9c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b46      	cmp	r3, #70	; 0x46
 8000dbc:	d003      	beq.n	8000dc6 <fsm_pedestrian_run+0x66>
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <fsm_pedestrian_run+0x9c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b50      	cmp	r3, #80	; 0x50
 8000dc4:	d104      	bne.n	8000dd0 <fsm_pedestrian_run+0x70>
				pedestrian_status = PEDESTRIAN_RED;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <fsm_pedestrian_run+0x94>)
 8000dc8:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	e004      	b.n	8000dda <fsm_pedestrian_run+0x7a>
				pedestrian_status = PEDESTRIAN_INACTIVE;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <fsm_pedestrian_run+0x94>)
 8000dd2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000dd6:	601a      	str	r2, [r3, #0]
		break;
 8000dd8:	e009      	b.n	8000dee <fsm_pedestrian_run+0x8e>
 8000dda:	e008      	b.n	8000dee <fsm_pedestrian_run+0x8e>
		PedestrianGreen();
 8000ddc:	f7ff ff98 	bl	8000d10 <PedestrianGreen>
		buzzer_status = ON;
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <fsm_pedestrian_run+0x98>)
 8000de2:	2207      	movs	r2, #7
 8000de4:	601a      	str	r2, [r3, #0]
		break;
 8000de6:	e003      	b.n	8000df0 <fsm_pedestrian_run+0x90>
		PedestrianRed();
 8000de8:	f7ff ff7e 	bl	8000ce8 <PedestrianRed>
		break;
 8000dec:	e000      	b.n	8000df0 <fsm_pedestrian_run+0x90>
		break;
 8000dee:	bf00      	nop
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000004 	.word	0x20000004
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	2000000c 	.word	0x2000000c

08000e00 <fsm_buzzer_run>:

int buzzer_volume = 0;
int freq = 0;			

void fsm_buzzer_run() {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
   switch(buzzer_status) {
 8000e04:	4b38      	ldr	r3, [pc, #224]	; (8000ee8 <fsm_buzzer_run+0xe8>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b09      	cmp	r3, #9
 8000e0a:	d006      	beq.n	8000e1a <fsm_buzzer_run+0x1a>
 8000e0c:	2b09      	cmp	r3, #9
 8000e0e:	dc69      	bgt.n	8000ee4 <fsm_buzzer_run+0xe4>
 8000e10:	2b07      	cmp	r3, #7
 8000e12:	d00b      	beq.n	8000e2c <fsm_buzzer_run+0x2c>
 8000e14:	2b08      	cmp	r3, #8
 8000e16:	d031      	beq.n	8000e7c <fsm_buzzer_run+0x7c>
			setTimer(3, (1000 - freq * 10));
		}

		break;
	}
}
 8000e18:	e064      	b.n	8000ee4 <fsm_buzzer_run+0xe4>
		buzzer_volume = 0;
 8000e1a:	4b34      	ldr	r3, [pc, #208]	; (8000eec <fsm_buzzer_run+0xec>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, buzzer_volume);
 8000e20:	4b32      	ldr	r3, [pc, #200]	; (8000eec <fsm_buzzer_run+0xec>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b32      	ldr	r3, [pc, #200]	; (8000ef0 <fsm_buzzer_run+0xf0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000e2a:	e05b      	b.n	8000ee4 <fsm_buzzer_run+0xe4>
		if (status == RED_AMBER && timer_counter[0] <= amber_counter) {
 8000e2c:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <fsm_buzzer_run+0xf4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b3c      	cmp	r3, #60	; 0x3c
 8000e32:	d10b      	bne.n	8000e4c <fsm_buzzer_run+0x4c>
 8000e34:	4b30      	ldr	r3, [pc, #192]	; (8000ef8 <fsm_buzzer_run+0xf8>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b30      	ldr	r3, [pc, #192]	; (8000efc <fsm_buzzer_run+0xfc>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	dc05      	bgt.n	8000e4c <fsm_buzzer_run+0x4c>
			buzzer_status = HURRY;
 8000e40:	4b29      	ldr	r3, [pc, #164]	; (8000ee8 <fsm_buzzer_run+0xe8>)
 8000e42:	2208      	movs	r2, #8
 8000e44:	601a      	str	r2, [r3, #0]
			buzzer_volume = 10;
 8000e46:	4b29      	ldr	r3, [pc, #164]	; (8000eec <fsm_buzzer_run+0xec>)
 8000e48:	220a      	movs	r2, #10
 8000e4a:	601a      	str	r2, [r3, #0]
		if (timer_flag[3] == 1) {
 8000e4c:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <fsm_buzzer_run+0x100>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d144      	bne.n	8000ede <fsm_buzzer_run+0xde>
			buzzer_volume = (buzzer_volume == 0) ? 10 : 0;
 8000e54:	4b25      	ldr	r3, [pc, #148]	; (8000eec <fsm_buzzer_run+0xec>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d101      	bne.n	8000e60 <fsm_buzzer_run+0x60>
 8000e5c:	230a      	movs	r3, #10
 8000e5e:	e000      	b.n	8000e62 <fsm_buzzer_run+0x62>
 8000e60:	2300      	movs	r3, #0
 8000e62:	4a22      	ldr	r2, [pc, #136]	; (8000eec <fsm_buzzer_run+0xec>)
 8000e64:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, buzzer_volume);
 8000e66:	4b21      	ldr	r3, [pc, #132]	; (8000eec <fsm_buzzer_run+0xec>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <fsm_buzzer_run+0xf0>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	635a      	str	r2, [r3, #52]	; 0x34
			setTimer(3, 1000);
 8000e70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e74:	2003      	movs	r0, #3
 8000e76:	f000 fd57 	bl	8001928 <setTimer>
		break;
 8000e7a:	e030      	b.n	8000ede <fsm_buzzer_run+0xde>
		if (status != RED_AMBER && status != RED_GREEN) {
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <fsm_buzzer_run+0xf4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b3c      	cmp	r3, #60	; 0x3c
 8000e82:	d006      	beq.n	8000e92 <fsm_buzzer_run+0x92>
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <fsm_buzzer_run+0xf4>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b32      	cmp	r3, #50	; 0x32
 8000e8a:	d002      	beq.n	8000e92 <fsm_buzzer_run+0x92>
			buzzer_status = OFF;
 8000e8c:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <fsm_buzzer_run+0xe8>)
 8000e8e:	2209      	movs	r2, #9
 8000e90:	601a      	str	r2, [r3, #0]
		freq += 10;
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <fsm_buzzer_run+0x104>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	330a      	adds	r3, #10
 8000e98:	4a1a      	ldr	r2, [pc, #104]	; (8000f04 <fsm_buzzer_run+0x104>)
 8000e9a:	6013      	str	r3, [r2, #0]
		if (timer_flag[3] == 1) {
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <fsm_buzzer_run+0x100>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d11e      	bne.n	8000ee2 <fsm_buzzer_run+0xe2>
			buzzer_volume = (buzzer_volume == 0) ? (10 + freq) : 0;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <fsm_buzzer_run+0xec>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d103      	bne.n	8000eb4 <fsm_buzzer_run+0xb4>
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <fsm_buzzer_run+0x104>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	330a      	adds	r3, #10
 8000eb2:	e000      	b.n	8000eb6 <fsm_buzzer_run+0xb6>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <fsm_buzzer_run+0xec>)
 8000eb8:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, buzzer_volume);
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <fsm_buzzer_run+0xec>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <fsm_buzzer_run+0xf0>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	635a      	str	r2, [r3, #52]	; 0x34
			setTimer(3, (1000 - freq * 10));
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <fsm_buzzer_run+0x104>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f06f 0209 	mvn.w	r2, #9
 8000ecc:	fb02 f303 	mul.w	r3, r2, r3
 8000ed0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	2003      	movs	r0, #3
 8000ed8:	f000 fd26 	bl	8001928 <setTimer>
		break;
 8000edc:	e001      	b.n	8000ee2 <fsm_buzzer_run+0xe2>
		break;
 8000ede:	bf00      	nop
 8000ee0:	e000      	b.n	8000ee4 <fsm_buzzer_run+0xe4>
		break;
 8000ee2:	bf00      	nop
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	200000b8 	.word	0x200000b8
 8000ef0:	200000fc 	.word	0x200000fc
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	20000260 	.word	0x20000260
 8000efc:	20000014 	.word	0x20000014
 8000f00:	20000270 	.word	0x20000270
 8000f04:	200000bc 	.word	0x200000bc

08000f08 <resetLights>:
 */

#include "graphics.h"

void resetLights()
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	time_modify_counter = 0;
 8000f0c:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <resetLights+0x88>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
	traffic_status = INIT;
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <resetLights+0x8c>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1e:	481e      	ldr	r0, [pc, #120]	; (8000f98 <resetLights+0x90>)
 8000f20:	f001 faa1 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f2a:	481b      	ldr	r0, [pc, #108]	; (8000f98 <resetLights+0x90>)
 8000f2c:	f001 fa9b 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f36:	4818      	ldr	r0, [pc, #96]	; (8000f98 <resetLights+0x90>)
 8000f38:	f001 fa95 	bl	8002466 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f42:	4816      	ldr	r0, [pc, #88]	; (8000f9c <resetLights+0x94>)
 8000f44:	f001 fa8f 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f4e:	4813      	ldr	r0, [pc, #76]	; (8000f9c <resetLights+0x94>)
 8000f50:	f001 fa89 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, GPIO_PIN_SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f5a:	4810      	ldr	r0, [pc, #64]	; (8000f9c <resetLights+0x94>)
 8000f5c:	f001 fa83 	bl	8002466 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2140      	movs	r1, #64	; 0x40
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <resetLights+0x90>)
 8000f66:	f001 fa7e 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2180      	movs	r1, #128	; 0x80
 8000f6e:	480a      	ldr	r0, [pc, #40]	; (8000f98 <resetLights+0x90>)
 8000f70:	f001 fa79 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f7a:	4807      	ldr	r0, [pc, #28]	; (8000f98 <resetLights+0x90>)
 8000f7c:	f001 fa73 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f86:	4804      	ldr	r0, [pc, #16]	; (8000f98 <resetLights+0x90>)
 8000f88:	f001 fa6d 	bl	8002466 <HAL_GPIO_WritePin>
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200000c0 	.word	0x200000c0
 8000f94:	2000000c 	.word	0x2000000c
 8000f98:	40010c00 	.word	0x40010c00
 8000f9c:	40010800 	.word	0x40010800

08000fa0 <setRedLight1>:

void setRedLight1(int blink)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, blink);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb2:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <setRedLight1+0x38>)
 8000fb4:	f001 fa57 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fbe:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <setRedLight1+0x38>)
 8000fc0:	f001 fa51 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, GPIO_PIN_SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fca:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <setRedLight1+0x38>)
 8000fcc:	f001 fa4b 	bl	8002466 <HAL_GPIO_WritePin>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40010c00 	.word	0x40010c00

08000fdc <setGreenLight1>:
void setGreenLight1(int blink)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fea:	480a      	ldr	r0, [pc, #40]	; (8001014 <setGreenLight1+0x38>)
 8000fec:	f001 fa3b 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, blink);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <setGreenLight1+0x38>)
 8000ffc:	f001 fa33 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <setGreenLight1+0x38>)
 8001008:	f001 fa2d 	bl	8002466 <HAL_GPIO_WritePin>
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40010c00 	.word	0x40010c00

08001018 <setAmberLight1>:
void setAmberLight1(int blink)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8001020:	2201      	movs	r2, #1
 8001022:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001026:	480a      	ldr	r0, [pc, #40]	; (8001050 <setAmberLight1+0x38>)
 8001028:	f001 fa1d 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001032:	4807      	ldr	r0, [pc, #28]	; (8001050 <setAmberLight1+0x38>)
 8001034:	f001 fa17 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, blink);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001042:	4803      	ldr	r0, [pc, #12]	; (8001050 <setAmberLight1+0x38>)
 8001044:	f001 fa0f 	bl	8002466 <HAL_GPIO_WritePin>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40010c00 	.word	0x40010c00

08001054 <setRedLight2>:

void setRedLight2(int blink)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, blink);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	461a      	mov	r2, r3
 8001062:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001066:	4809      	ldr	r0, [pc, #36]	; (800108c <setRedLight2+0x38>)
 8001068:	f001 f9fd 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001072:	4806      	ldr	r0, [pc, #24]	; (800108c <setRedLight2+0x38>)
 8001074:	f001 f9f7 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, GPIO_PIN_SET);
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800107e:	4803      	ldr	r0, [pc, #12]	; (800108c <setRedLight2+0x38>)
 8001080:	f001 f9f1 	bl	8002466 <HAL_GPIO_WritePin>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40010800 	.word	0x40010800

08001090 <setGreenLight2>:
void setGreenLight2(int blink)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109e:	480a      	ldr	r0, [pc, #40]	; (80010c8 <setGreenLight2+0x38>)
 80010a0:	f001 f9e1 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, blink);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	461a      	mov	r2, r3
 80010aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <setGreenLight2+0x38>)
 80010b0:	f001 f9d9 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ba:	4803      	ldr	r0, [pc, #12]	; (80010c8 <setGreenLight2+0x38>)
 80010bc:	f001 f9d3 	bl	8002466 <HAL_GPIO_WritePin>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40010800 	.word	0x40010800

080010cc <setAmberLight2>:
void setAmberLight2(int blink)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010da:	480a      	ldr	r0, [pc, #40]	; (8001104 <setAmberLight2+0x38>)
 80010dc:	f001 f9c3 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 80010e0:	2201      	movs	r2, #1
 80010e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010e6:	4807      	ldr	r0, [pc, #28]	; (8001104 <setAmberLight2+0x38>)
 80010e8:	f001 f9bd 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, blink);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010f6:	4803      	ldr	r0, [pc, #12]	; (8001104 <setAmberLight2+0x38>)
 80010f8:	f001 f9b5 	bl	8002466 <HAL_GPIO_WritePin>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40010800 	.word	0x40010800

08001108 <display7SegmentLED>:

void display7SegmentLED(int number, GPIO_TypeDef *GPIOx[], uint16_t GPIO_Pins[])
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b0cd      	sub	sp, #308	; 0x134
 800110c:	af00      	add	r7, sp, #0
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	6018      	str	r0, [r3, #0]
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	6019      	str	r1, [r3, #0]
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	601a      	str	r2, [r3, #0]
	int num[10][7] = {
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4a1e      	ldr	r2, [pc, #120]	; (800119c <display7SegmentLED+0x94>)
 8001124:	4618      	mov	r0, r3
 8001126:	4611      	mov	r1, r2
 8001128:	f44f 738c 	mov.w	r3, #280	; 0x118
 800112c:	461a      	mov	r2, r3
 800112e:	f003 fa71 	bl	8004614 <memcpy>
		{0, 0, 0, 1, 1, 1, 1}, // 7
		{0, 0, 0, 0, 0, 0, 0}, // 8
		{0, 0, 0, 0, 1, 0, 0}  // 9
	};

	for (int i = 0; i < 7; i++)
 8001132:	2300      	movs	r3, #0
 8001134:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001138:	e025      	b.n	8001186 <display7SegmentLED+0x7e>
	{
		HAL_GPIO_WritePin(GPIOx[i], GPIO_Pins[i], num[number][i]);
 800113a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	f107 0208 	add.w	r2, r7, #8
 8001144:	6812      	ldr	r2, [r2, #0]
 8001146:	4413      	add	r3, r2
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	1d3a      	adds	r2, r7, #4
 8001152:	6812      	ldr	r2, [r2, #0]
 8001154:	4413      	add	r3, r2
 8001156:	881c      	ldrh	r4, [r3, #0]
 8001158:	f107 0114 	add.w	r1, r7, #20
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	4613      	mov	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	1a9b      	subs	r3, r3, r2
 8001168:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800116c:	4413      	add	r3, r2
 800116e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	461a      	mov	r2, r3
 8001176:	4621      	mov	r1, r4
 8001178:	f001 f975 	bl	8002466 <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++)
 800117c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001180:	3301      	adds	r3, #1
 8001182:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001186:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800118a:	2b06      	cmp	r3, #6
 800118c:	ddd5      	ble.n	800113a <display7SegmentLED+0x32>
	}
}
 800118e:	bf00      	nop
 8001190:	bf00      	nop
 8001192:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8001196:	46bd      	mov	sp, r7
 8001198:	bd90      	pop	{r4, r7, pc}
 800119a:	bf00      	nop
 800119c:	08004fe8 	.word	0x08004fe8

080011a0 <display7SegmentLight>:

void display7SegmentLight(UART_HandleTypeDef huart2)
{
 80011a0:	b084      	sub	sp, #16
 80011a2:	b5b0      	push	{r4, r5, r7, lr}
 80011a4:	b08c      	sub	sp, #48	; 0x30
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80011ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t GPIO_Pins[] = {SEG0_Pin, SEG1_Pin, SEG2_Pin, SEG3_Pin,
 80011b0:	4b9a      	ldr	r3, [pc, #616]	; (800141c <display7SegmentLight+0x27c>)
 80011b2:	f107 0420 	add.w	r4, r7, #32
 80011b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011b8:	c407      	stmia	r4!, {r0, r1, r2}
 80011ba:	8023      	strh	r3, [r4, #0]
							SEG4_Pin, SEG5_Pin, SEG6_Pin};
	GPIO_TypeDef * GPIOx[] = {SEG0_GPIO_Port, SEG1_GPIO_Port, SEG2_GPIO_Port,
 80011bc:	4b98      	ldr	r3, [pc, #608]	; (8001420 <display7SegmentLight+0x280>)
 80011be:	1d3c      	adds	r4, r7, #4
 80011c0:	461d      	mov	r5, r3
 80011c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			SEG3_GPIO_Port, SEG4_GPIO_Port, SEG5_GPIO_Port, SEG6_GPIO_Port};
	switch (counter_lights)
 80011ce:	4b95      	ldr	r3, [pc, #596]	; (8001424 <display7SegmentLight+0x284>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011d6:	f000 80cb 	beq.w	8001370 <display7SegmentLight+0x1d0>
 80011da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011de:	f300 810a 	bgt.w	80013f6 <display7SegmentLight+0x256>
 80011e2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80011e6:	f000 8092 	beq.w	800130e <display7SegmentLight+0x16e>
 80011ea:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80011ee:	f300 8102 	bgt.w	80013f6 <display7SegmentLight+0x256>
 80011f2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80011f6:	d053      	beq.n	80012a0 <display7SegmentLight+0x100>
 80011f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80011fc:	f300 80fb 	bgt.w	80013f6 <display7SegmentLight+0x256>
 8001200:	2b64      	cmp	r3, #100	; 0x64
 8001202:	d002      	beq.n	800120a <display7SegmentLight+0x6a>
 8001204:	2bc8      	cmp	r3, #200	; 0xc8
 8001206:	d019      	beq.n	800123c <display7SegmentLight+0x9c>
 8001208:	e0f5      	b.n	80013f6 <display7SegmentLight+0x256>
	{
	case READ_UART:
		if (status == AUTOMATIC_MODE)
 800120a:	4b87      	ldr	r3, [pc, #540]	; (8001428 <display7SegmentLight+0x288>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d110      	bne.n	8001234 <display7SegmentLight+0x94>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Light 1 = %d   Light 2 = %d\r\n", counter_light_1, counter_light_2), 1000);
 8001212:	4b86      	ldr	r3, [pc, #536]	; (800142c <display7SegmentLight+0x28c>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4b86      	ldr	r3, [pc, #536]	; (8001430 <display7SegmentLight+0x290>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4986      	ldr	r1, [pc, #536]	; (8001434 <display7SegmentLight+0x294>)
 800121c:	4886      	ldr	r0, [pc, #536]	; (8001438 <display7SegmentLight+0x298>)
 800121e:	f003 fa0f 	bl	8004640 <siprintf>
 8001222:	4603      	mov	r3, r0
 8001224:	b29a      	uxth	r2, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	4983      	ldr	r1, [pc, #524]	; (8001438 <display7SegmentLight+0x298>)
 800122c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001230:	f002 fcdb 	bl	8003bea <HAL_UART_Transmit>
		counter_lights = LIGHT_1;
 8001234:	4b7b      	ldr	r3, [pc, #492]	; (8001424 <display7SegmentLight+0x284>)
 8001236:	22c8      	movs	r2, #200	; 0xc8
 8001238:	601a      	str	r2, [r3, #0]
		break;
 800123a:	e0e7      	b.n	800140c <display7SegmentLight+0x26c>
	case LIGHT_1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	2140      	movs	r1, #64	; 0x40
 8001240:	487e      	ldr	r0, [pc, #504]	; (800143c <display7SegmentLight+0x29c>)
 8001242:	f001 f910 	bl	8002466 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001246:	2201      	movs	r2, #1
 8001248:	2180      	movs	r1, #128	; 0x80
 800124a:	487c      	ldr	r0, [pc, #496]	; (800143c <display7SegmentLight+0x29c>)
 800124c:	f001 f90b 	bl	8002466 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001256:	4879      	ldr	r0, [pc, #484]	; (800143c <display7SegmentLight+0x29c>)
 8001258:	f001 f905 	bl	8002466 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800125c:	2201      	movs	r2, #1
 800125e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001262:	4876      	ldr	r0, [pc, #472]	; (800143c <display7SegmentLight+0x29c>)
 8001264:	f001 f8ff 	bl	8002466 <HAL_GPIO_WritePin>
		display7SegmentLED(counter_light_1 / 10, GPIOx, GPIO_Pins); // first digit of light 1
 8001268:	4b70      	ldr	r3, [pc, #448]	; (800142c <display7SegmentLight+0x28c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a74      	ldr	r2, [pc, #464]	; (8001440 <display7SegmentLight+0x2a0>)
 800126e:	fb82 1203 	smull	r1, r2, r2, r3
 8001272:	1092      	asrs	r2, r2, #2
 8001274:	17db      	asrs	r3, r3, #31
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	f107 0220 	add.w	r2, r7, #32
 800127c:	1d39      	adds	r1, r7, #4
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff42 	bl	8001108 <display7SegmentLED>
		if (timer_flag[3] == 1)
 8001284:	4b6f      	ldr	r3, [pc, #444]	; (8001444 <display7SegmentLight+0x2a4>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	2b01      	cmp	r3, #1
 800128a:	f040 80b8 	bne.w	80013fe <display7SegmentLight+0x25e>
		{
			counter_lights = LIGHT_2;
 800128e:	4b65      	ldr	r3, [pc, #404]	; (8001424 <display7SegmentLight+0x284>)
 8001290:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001294:	601a      	str	r2, [r3, #0]
			setTimer(3, 250);
 8001296:	21fa      	movs	r1, #250	; 0xfa
 8001298:	2003      	movs	r0, #3
 800129a:	f000 fb45 	bl	8001928 <setTimer>
		}
		break;
 800129e:	e0ae      	b.n	80013fe <display7SegmentLight+0x25e>
	case LIGHT_2:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	2140      	movs	r1, #64	; 0x40
 80012a4:	4865      	ldr	r0, [pc, #404]	; (800143c <display7SegmentLight+0x29c>)
 80012a6:	f001 f8de 	bl	8002466 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2180      	movs	r1, #128	; 0x80
 80012ae:	4863      	ldr	r0, [pc, #396]	; (800143c <display7SegmentLight+0x29c>)
 80012b0:	f001 f8d9 	bl	8002466 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80012b4:	2201      	movs	r2, #1
 80012b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ba:	4860      	ldr	r0, [pc, #384]	; (800143c <display7SegmentLight+0x29c>)
 80012bc:	f001 f8d3 	bl	8002466 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80012c0:	2201      	movs	r2, #1
 80012c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012c6:	485d      	ldr	r0, [pc, #372]	; (800143c <display7SegmentLight+0x29c>)
 80012c8:	f001 f8cd 	bl	8002466 <HAL_GPIO_WritePin>
		display7SegmentLED(counter_light_1 % 10, GPIOx, GPIO_Pins); // second digit of light 1
 80012cc:	4b57      	ldr	r3, [pc, #348]	; (800142c <display7SegmentLight+0x28c>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b5b      	ldr	r3, [pc, #364]	; (8001440 <display7SegmentLight+0x2a0>)
 80012d2:	fb83 1302 	smull	r1, r3, r3, r2
 80012d6:	1099      	asrs	r1, r3, #2
 80012d8:	17d3      	asrs	r3, r2, #31
 80012da:	1ac8      	subs	r0, r1, r3
 80012dc:	4603      	mov	r3, r0
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4403      	add	r3, r0
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	1ad0      	subs	r0, r2, r3
 80012e6:	f107 0220 	add.w	r2, r7, #32
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff ff0b 	bl	8001108 <display7SegmentLED>
		if (timer_flag[3] == 1)
 80012f2:	4b54      	ldr	r3, [pc, #336]	; (8001444 <display7SegmentLight+0x2a4>)
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	f040 8083 	bne.w	8001402 <display7SegmentLight+0x262>
		{
			counter_lights = LIGHT_3;
 80012fc:	4b49      	ldr	r3, [pc, #292]	; (8001424 <display7SegmentLight+0x284>)
 80012fe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001302:	601a      	str	r2, [r3, #0]
			setTimer(3, 250);
 8001304:	21fa      	movs	r1, #250	; 0xfa
 8001306:	2003      	movs	r0, #3
 8001308:	f000 fb0e 	bl	8001928 <setTimer>
		}
		break;
 800130c:	e079      	b.n	8001402 <display7SegmentLight+0x262>
	case LIGHT_3:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 800130e:	2201      	movs	r2, #1
 8001310:	2140      	movs	r1, #64	; 0x40
 8001312:	484a      	ldr	r0, [pc, #296]	; (800143c <display7SegmentLight+0x29c>)
 8001314:	f001 f8a7 	bl	8002466 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001318:	2201      	movs	r2, #1
 800131a:	2180      	movs	r1, #128	; 0x80
 800131c:	4847      	ldr	r0, [pc, #284]	; (800143c <display7SegmentLight+0x29c>)
 800131e:	f001 f8a2 	bl	8002466 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001328:	4844      	ldr	r0, [pc, #272]	; (800143c <display7SegmentLight+0x29c>)
 800132a:	f001 f89c 	bl	8002466 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001334:	4841      	ldr	r0, [pc, #260]	; (800143c <display7SegmentLight+0x29c>)
 8001336:	f001 f896 	bl	8002466 <HAL_GPIO_WritePin>
		display7SegmentLED(counter_light_2 / 10, GPIOx, GPIO_Pins); // first digit of light 2
 800133a:	4b3d      	ldr	r3, [pc, #244]	; (8001430 <display7SegmentLight+0x290>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a40      	ldr	r2, [pc, #256]	; (8001440 <display7SegmentLight+0x2a0>)
 8001340:	fb82 1203 	smull	r1, r2, r2, r3
 8001344:	1092      	asrs	r2, r2, #2
 8001346:	17db      	asrs	r3, r3, #31
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	f107 0220 	add.w	r2, r7, #32
 800134e:	1d39      	adds	r1, r7, #4
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fed9 	bl	8001108 <display7SegmentLED>
		if (timer_flag[3] == 1)
 8001356:	4b3b      	ldr	r3, [pc, #236]	; (8001444 <display7SegmentLight+0x2a4>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d153      	bne.n	8001406 <display7SegmentLight+0x266>
		{
			counter_lights = LIGHT_4;
 800135e:	4b31      	ldr	r3, [pc, #196]	; (8001424 <display7SegmentLight+0x284>)
 8001360:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001364:	601a      	str	r2, [r3, #0]
			setTimer(3, 250);
 8001366:	21fa      	movs	r1, #250	; 0xfa
 8001368:	2003      	movs	r0, #3
 800136a:	f000 fadd 	bl	8001928 <setTimer>
		}
		break;
 800136e:	e04a      	b.n	8001406 <display7SegmentLight+0x266>
	case LIGHT_4:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	2140      	movs	r1, #64	; 0x40
 8001374:	4831      	ldr	r0, [pc, #196]	; (800143c <display7SegmentLight+0x29c>)
 8001376:	f001 f876 	bl	8002466 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800137a:	2201      	movs	r2, #1
 800137c:	2180      	movs	r1, #128	; 0x80
 800137e:	482f      	ldr	r0, [pc, #188]	; (800143c <display7SegmentLight+0x29c>)
 8001380:	f001 f871 	bl	8002466 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001384:	2201      	movs	r2, #1
 8001386:	f44f 7180 	mov.w	r1, #256	; 0x100
 800138a:	482c      	ldr	r0, [pc, #176]	; (800143c <display7SegmentLight+0x29c>)
 800138c:	f001 f86b 	bl	8002466 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001396:	4829      	ldr	r0, [pc, #164]	; (800143c <display7SegmentLight+0x29c>)
 8001398:	f001 f865 	bl	8002466 <HAL_GPIO_WritePin>
		display7SegmentLED(counter_light_2 % 10, GPIOx, GPIO_Pins); // second digit of light 2
 800139c:	4b24      	ldr	r3, [pc, #144]	; (8001430 <display7SegmentLight+0x290>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b27      	ldr	r3, [pc, #156]	; (8001440 <display7SegmentLight+0x2a0>)
 80013a2:	fb83 1302 	smull	r1, r3, r3, r2
 80013a6:	1099      	asrs	r1, r3, #2
 80013a8:	17d3      	asrs	r3, r2, #31
 80013aa:	1ac8      	subs	r0, r1, r3
 80013ac:	4603      	mov	r3, r0
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4403      	add	r3, r0
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	1ad0      	subs	r0, r2, r3
 80013b6:	f107 0220 	add.w	r2, r7, #32
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff fea3 	bl	8001108 <display7SegmentLED>
		if (timer_flag[3] == 1)
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <display7SegmentLight+0x2a4>)
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d11f      	bne.n	800140a <display7SegmentLight+0x26a>
		{
			counter_lights = READ_UART;
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <display7SegmentLight+0x284>)
 80013cc:	2264      	movs	r2, #100	; 0x64
 80013ce:	601a      	str	r2, [r3, #0]
			if (status == AUTOMATIC_MODE)
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <display7SegmentLight+0x288>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d109      	bne.n	80013ec <display7SegmentLight+0x24c>
			{
				counter_light_1--;
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <display7SegmentLight+0x28c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	3b01      	subs	r3, #1
 80013de:	4a13      	ldr	r2, [pc, #76]	; (800142c <display7SegmentLight+0x28c>)
 80013e0:	6013      	str	r3, [r2, #0]
				counter_light_2--;
 80013e2:	4b13      	ldr	r3, [pc, #76]	; (8001430 <display7SegmentLight+0x290>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	4a11      	ldr	r2, [pc, #68]	; (8001430 <display7SegmentLight+0x290>)
 80013ea:	6013      	str	r3, [r2, #0]
			}
			setTimer(3, 250);
 80013ec:	21fa      	movs	r1, #250	; 0xfa
 80013ee:	2003      	movs	r0, #3
 80013f0:	f000 fa9a 	bl	8001928 <setTimer>
		}
		break;
 80013f4:	e009      	b.n	800140a <display7SegmentLight+0x26a>
	default:
		counter_lights = READ_UART;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <display7SegmentLight+0x284>)
 80013f8:	2264      	movs	r2, #100	; 0x64
 80013fa:	601a      	str	r2, [r3, #0]
		break;
 80013fc:	e006      	b.n	800140c <display7SegmentLight+0x26c>
		break;
 80013fe:	bf00      	nop
 8001400:	e004      	b.n	800140c <display7SegmentLight+0x26c>
		break;
 8001402:	bf00      	nop
 8001404:	e002      	b.n	800140c <display7SegmentLight+0x26c>
		break;
 8001406:	bf00      	nop
 8001408:	e000      	b.n	800140c <display7SegmentLight+0x26c>
		break;
 800140a:	bf00      	nop
	}
}
 800140c:	bf00      	nop
 800140e:	3730      	adds	r7, #48	; 0x30
 8001410:	46bd      	mov	sp, r7
 8001412:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001416:	b004      	add	sp, #16
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	08005120 	.word	0x08005120
 8001420:	08005130 	.word	0x08005130
 8001424:	20000024 	.word	0x20000024
 8001428:	20000000 	.word	0x20000000
 800142c:	2000001c 	.word	0x2000001c
 8001430:	20000020 	.word	0x20000020
 8001434:	08005100 	.word	0x08005100
 8001438:	200001b4 	.word	0x200001b4
 800143c:	40010c00 	.word	0x40010c00
 8001440:	66666667 	.word	0x66666667
 8001444:	20000270 	.word	0x20000270

08001448 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <HAL_UART_RxCpltCallback+0x5c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d11f      	bne.n	800149a <HAL_UART_RxCpltCallback+0x52>
		buffer[index_buffer++] = temp;
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <HAL_UART_RxCpltCallback+0x60>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	b2d1      	uxtb	r1, r2
 8001462:	4a11      	ldr	r2, [pc, #68]	; (80014a8 <HAL_UART_RxCpltCallback+0x60>)
 8001464:	7011      	strb	r1, [r2, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <HAL_UART_RxCpltCallback+0x64>)
 800146a:	7819      	ldrb	r1, [r3, #0]
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <HAL_UART_RxCpltCallback+0x68>)
 800146e:	5499      	strb	r1, [r3, r2]
		if (index_buffer == MAX_BUFFER_SIZE)
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <HAL_UART_RxCpltCallback+0x60>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b1e      	cmp	r3, #30
 8001476:	d102      	bne.n	800147e <HAL_UART_RxCpltCallback+0x36>
			index_buffer = 0;
 8001478:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <HAL_UART_RxCpltCallback+0x60>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_UART_RxCpltCallback+0x6c>)
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 8001484:	2332      	movs	r3, #50	; 0x32
 8001486:	2201      	movs	r2, #1
 8001488:	4908      	ldr	r1, [pc, #32]	; (80014ac <HAL_UART_RxCpltCallback+0x64>)
 800148a:	480b      	ldr	r0, [pc, #44]	; (80014b8 <HAL_UART_RxCpltCallback+0x70>)
 800148c:	f002 fbad 	bl	8003bea <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8001490:	2201      	movs	r2, #1
 8001492:	4906      	ldr	r1, [pc, #24]	; (80014ac <HAL_UART_RxCpltCallback+0x64>)
 8001494:	4808      	ldr	r0, [pc, #32]	; (80014b8 <HAL_UART_RxCpltCallback+0x70>)
 8001496:	f002 fc3a 	bl	8003d0e <HAL_UART_Receive_IT>
	}
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40004400 	.word	0x40004400
 80014a8:	200000c5 	.word	0x200000c5
 80014ac:	200000c4 	.word	0x200000c4
 80014b0:	20000194 	.word	0x20000194
 80014b4:	200000c6 	.word	0x200000c6
 80014b8:	2000021c 	.word	0x2000021c

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014be:	b08f      	sub	sp, #60	; 0x3c
 80014c0:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c2:	f000 fc1f 	bl	8001d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c6:	f000 f87f 	bl	80015c8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80014ca:	f000 f8bf 	bl	800164c <MX_TIM2_Init>
  MX_GPIO_Init();
 80014ce:	f000 f9a9 	bl	8001824 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014d2:	f000 f97d 	bl	80017d0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80014d6:	f000 f905 	bl	80016e4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80014da:	4833      	ldr	r0, [pc, #204]	; (80015a8 <main+0xec>)
 80014dc:	f001 fc46 	bl	8002d6c <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart2, &temp, 1);
 80014e0:	2201      	movs	r2, #1
 80014e2:	4932      	ldr	r1, [pc, #200]	; (80015ac <main+0xf0>)
 80014e4:	4832      	ldr	r0, [pc, #200]	; (80015b0 <main+0xf4>)
 80014e6:	f002 fc12 	bl	8003d0e <HAL_UART_Receive_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80014ea:	2100      	movs	r1, #0
 80014ec:	4831      	ldr	r0, [pc, #196]	; (80015b4 <main+0xf8>)
 80014ee:	f001 fce1 	bl	8002eb4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	initButton();
 80014f2:	f7fe fe2b 	bl	800014c <initButton>
	HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, GPIO_PIN_SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014fc:	482e      	ldr	r0, [pc, #184]	; (80015b8 <main+0xfc>)
 80014fe:	f000 ffb2 	bl	8002466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, GPIO_PIN_SET);
 8001502:	2201      	movs	r2, #1
 8001504:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001508:	482c      	ldr	r0, [pc, #176]	; (80015bc <main+0x100>)
 800150a:	f000 ffac 	bl	8002466 <HAL_GPIO_WritePin>
	while (1) {
		if (buffer_flag == 1) {
 800150e:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <main+0x104>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d102      	bne.n	800151c <main+0x60>
			buffer_flag = 0;
 8001516:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <main+0x104>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
		}

		 fsm_pedestrian_run();
 800151c:	f7ff fc20 	bl	8000d60 <fsm_pedestrian_run>
		 fsm_buzzer_run();
 8001520:	f7ff fc6e 	bl	8000e00 <fsm_buzzer_run>

		if (status == AUTOMATIC_MODE)
 8001524:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <main+0x108>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d110      	bne.n	800154e <main+0x92>
			fsm_automatic_run(huart2);
 800152c:	4e20      	ldr	r6, [pc, #128]	; (80015b0 <main+0xf4>)
 800152e:	466d      	mov	r5, sp
 8001530:	f106 0410 	add.w	r4, r6, #16
 8001534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800153a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800153c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800153e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001540:	6823      	ldr	r3, [r4, #0]
 8001542:	602b      	str	r3, [r5, #0]
 8001544:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001548:	f7fe ff1e 	bl	8000388 <fsm_automatic_run>
 800154c:	e013      	b.n	8001576 <main+0xba>
		else if (status == MANUAL_MODE)
 800154e:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <main+0x108>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b03      	cmp	r3, #3
 8001554:	d10f      	bne.n	8001576 <main+0xba>
			fsm_manual_run(huart2);
 8001556:	4e16      	ldr	r6, [pc, #88]	; (80015b0 <main+0xf4>)
 8001558:	466d      	mov	r5, sp
 800155a:	f106 0410 	add.w	r4, r6, #16
 800155e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800156a:	6823      	ldr	r3, [r4, #0]
 800156c:	602b      	str	r3, [r5, #0]
 800156e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001572:	f7ff f8b1 	bl	80006d8 <fsm_manual_run>

		if (buffer_flag == 1) {
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <main+0x104>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d102      	bne.n	8001584 <main+0xc8>
			buffer_flag = 0;
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <main+0x104>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
		}

		display7SegmentLight(huart2);
 8001584:	4e0a      	ldr	r6, [pc, #40]	; (80015b0 <main+0xf4>)
 8001586:	466d      	mov	r5, sp
 8001588:	f106 0410 	add.w	r4, r6, #16
 800158c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800158e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001592:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	602b      	str	r3, [r5, #0]
 800159c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80015a0:	f7ff fdfe 	bl	80011a0 <display7SegmentLight>
	while (1) {
 80015a4:	e7b3      	b.n	800150e <main+0x52>
 80015a6:	bf00      	nop
 80015a8:	200001d4 	.word	0x200001d4
 80015ac:	200000c4 	.word	0x200000c4
 80015b0:	2000021c 	.word	0x2000021c
 80015b4:	200000fc 	.word	0x200000fc
 80015b8:	40010c00 	.word	0x40010c00
 80015bc:	40010800 	.word	0x40010800
 80015c0:	200000c6 	.word	0x200000c6
 80015c4:	20000000 	.word	0x20000000

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b090      	sub	sp, #64	; 0x40
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 0318 	add.w	r3, r7, #24
 80015d2:	2228      	movs	r2, #40	; 0x28
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f003 f82a 	bl	8004630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ee:	2301      	movs	r3, #1
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f2:	2310      	movs	r3, #16
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f6:	2302      	movs	r3, #2
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80015fa:	2300      	movs	r3, #0
 80015fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80015fe:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001602:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001604:	f107 0318 	add.w	r3, r7, #24
 8001608:	4618      	mov	r0, r3
 800160a:	f000 ff45 	bl	8002498 <HAL_RCC_OscConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001614:	f000 f982 	bl	800191c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001618:	230f      	movs	r3, #15
 800161a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161c:	2302      	movs	r3, #2
 800161e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2102      	movs	r1, #2
 8001632:	4618      	mov	r0, r3
 8001634:	f001 f9b0 	bl	8002998 <HAL_RCC_ClockConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800163e:	f000 f96d 	bl	800191c <Error_Handler>
  }
}
 8001642:	bf00      	nop
 8001644:	3740      	adds	r7, #64	; 0x40
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001652:	f107 0308 	add.w	r3, r7, #8
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001660:	463b      	mov	r3, r7
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001668:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <MX_TIM2_Init+0x94>)
 800166a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800166e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <MX_TIM2_Init+0x94>)
 8001672:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001676:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <MX_TIM2_Init+0x94>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <MX_TIM2_Init+0x94>)
 8001680:	224f      	movs	r2, #79	; 0x4f
 8001682:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <MX_TIM2_Init+0x94>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <MX_TIM2_Init+0x94>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001690:	4813      	ldr	r0, [pc, #76]	; (80016e0 <MX_TIM2_Init+0x94>)
 8001692:	f001 fb1b 	bl	8002ccc <HAL_TIM_Base_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800169c:	f000 f93e 	bl	800191c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	4619      	mov	r1, r3
 80016ac:	480c      	ldr	r0, [pc, #48]	; (80016e0 <MX_TIM2_Init+0x94>)
 80016ae:	f001 fe63 	bl	8003378 <HAL_TIM_ConfigClockSource>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016b8:	f000 f930 	bl	800191c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016bc:	2300      	movs	r3, #0
 80016be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016c4:	463b      	mov	r3, r7
 80016c6:	4619      	mov	r1, r3
 80016c8:	4805      	ldr	r0, [pc, #20]	; (80016e0 <MX_TIM2_Init+0x94>)
 80016ca:	f002 f9d7 	bl	8003a7c <HAL_TIMEx_MasterConfigSynchronization>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016d4:	f000 f922 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200001d4 	.word	0x200001d4

080016e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08e      	sub	sp, #56	; 0x38
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	f107 0320 	add.w	r3, r7, #32
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
 8001710:	615a      	str	r2, [r3, #20]
 8001712:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001714:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <MX_TIM3_Init+0xe4>)
 8001716:	4a2d      	ldr	r2, [pc, #180]	; (80017cc <MX_TIM3_Init+0xe8>)
 8001718:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 800171a:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <MX_TIM3_Init+0xe4>)
 800171c:	224f      	movs	r2, #79	; 0x4f
 800171e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001720:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <MX_TIM3_Init+0xe4>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 8001726:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <MX_TIM3_Init+0xe4>)
 8001728:	224f      	movs	r2, #79	; 0x4f
 800172a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172c:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <MX_TIM3_Init+0xe4>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001732:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <MX_TIM3_Init+0xe4>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001738:	4823      	ldr	r0, [pc, #140]	; (80017c8 <MX_TIM3_Init+0xe4>)
 800173a:	f001 fac7 	bl	8002ccc <HAL_TIM_Base_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001744:	f000 f8ea 	bl	800191c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800174e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001752:	4619      	mov	r1, r3
 8001754:	481c      	ldr	r0, [pc, #112]	; (80017c8 <MX_TIM3_Init+0xe4>)
 8001756:	f001 fe0f 	bl	8003378 <HAL_TIM_ConfigClockSource>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001760:	f000 f8dc 	bl	800191c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001764:	4818      	ldr	r0, [pc, #96]	; (80017c8 <MX_TIM3_Init+0xe4>)
 8001766:	f001 fb4d 	bl	8002e04 <HAL_TIM_PWM_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001770:	f000 f8d4 	bl	800191c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800177c:	f107 0320 	add.w	r3, r7, #32
 8001780:	4619      	mov	r1, r3
 8001782:	4811      	ldr	r0, [pc, #68]	; (80017c8 <MX_TIM3_Init+0xe4>)
 8001784:	f002 f97a 	bl	8003a7c <HAL_TIMEx_MasterConfigSynchronization>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800178e:	f000 f8c5 	bl	800191c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001792:	2360      	movs	r3, #96	; 0x60
 8001794:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	2200      	movs	r2, #0
 80017a6:	4619      	mov	r1, r3
 80017a8:	4807      	ldr	r0, [pc, #28]	; (80017c8 <MX_TIM3_Init+0xe4>)
 80017aa:	f001 fd27 	bl	80031fc <HAL_TIM_PWM_ConfigChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80017b4:	f000 f8b2 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017b8:	4803      	ldr	r0, [pc, #12]	; (80017c8 <MX_TIM3_Init+0xe4>)
 80017ba:	f000 f977 	bl	8001aac <HAL_TIM_MspPostInit>

}
 80017be:	bf00      	nop
 80017c0:	3738      	adds	r7, #56	; 0x38
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200000fc 	.word	0x200000fc
 80017cc:	40000400 	.word	0x40000400

080017d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <MX_USART2_UART_Init+0x50>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_USART2_UART_Init+0x4c>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_USART2_UART_Init+0x4c>)
 8001808:	f002 f9a2 	bl	8003b50 <HAL_UART_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001812:	f000 f883 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000021c 	.word	0x2000021c
 8001820:	40004400 	.word	0x40004400

08001824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182a:	f107 0308 	add.w	r3, r7, #8
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <MX_GPIO_Init+0xd4>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a2e      	ldr	r2, [pc, #184]	; (80018f8 <MX_GPIO_Init+0xd4>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b2c      	ldr	r3, [pc, #176]	; (80018f8 <MX_GPIO_Init+0xd4>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001850:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <MX_GPIO_Init+0xd4>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a28      	ldr	r2, [pc, #160]	; (80018f8 <MX_GPIO_Init+0xd4>)
 8001856:	f043 0308 	orr.w	r3, r3, #8
 800185a:	6193      	str	r3, [r2, #24]
 800185c:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <MX_GPIO_Init+0xd4>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG2_Pin|SEG3_Pin|D7_PEDESTRIAN_Pin|SEG4_Pin
 8001868:	2200      	movs	r2, #0
 800186a:	f64f 71a0 	movw	r1, #65440	; 0xffa0
 800186e:	4823      	ldr	r0, [pc, #140]	; (80018fc <MX_GPIO_Init+0xd8>)
 8001870:	f000 fdf9 	bl	8002466 <HAL_GPIO_WritePin>
                          |LED_1_Pin|SEG5_Pin|SEG6_Pin|LED_RED_2_Pin
                          |LED_AMBER_2_Pin|LED_GREEN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|D6_PEDESTRIAN_Pin|LED_RED_1_Pin
 8001874:	2200      	movs	r2, #0
 8001876:	f24e 71fe 	movw	r1, #59390	; 0xe7fe
 800187a:	4821      	ldr	r0, [pc, #132]	; (8001900 <MX_GPIO_Init+0xdc>)
 800187c:	f000 fdf3 	bl	8002466 <HAL_GPIO_WritePin>
                          |LED_AMBER_1_Pin|LED_GREEN_1_Pin|LED_2_Pin|LED_4_Pin
                          |LED_3_Pin|EN0_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_PEDESTRIAN_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_PEDESTRIAN_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8001880:	2313      	movs	r3, #19
 8001882:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001888:	2301      	movs	r3, #1
 800188a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	4619      	mov	r1, r3
 8001892:	481a      	ldr	r0, [pc, #104]	; (80018fc <MX_GPIO_Init+0xd8>)
 8001894:	f000 fc56 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG2_Pin SEG3_Pin D7_PEDESTRIAN_Pin SEG4_Pin
                           LED_1_Pin SEG5_Pin SEG6_Pin LED_RED_2_Pin
                           LED_AMBER_2_Pin LED_GREEN_2_Pin */
  GPIO_InitStruct.Pin = SEG2_Pin|SEG3_Pin|D7_PEDESTRIAN_Pin|SEG4_Pin
 8001898:	f64f 73a0 	movw	r3, #65440	; 0xffa0
 800189c:	60bb      	str	r3, [r7, #8]
                          |LED_1_Pin|SEG5_Pin|SEG6_Pin|LED_RED_2_Pin
                          |LED_AMBER_2_Pin|LED_GREEN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189e:	2301      	movs	r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2302      	movs	r3, #2
 80018a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018aa:	f107 0308 	add.w	r3, r7, #8
 80018ae:	4619      	mov	r1, r3
 80018b0:	4812      	ldr	r0, [pc, #72]	; (80018fc <MX_GPIO_Init+0xd8>)
 80018b2:	f000 fc47 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_3_Pin BUTTON_2_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_2_1_Pin;
 80018b6:	f640 0301 	movw	r3, #2049	; 0x801
 80018ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c4:	f107 0308 	add.w	r3, r7, #8
 80018c8:	4619      	mov	r1, r3
 80018ca:	480d      	ldr	r0, [pc, #52]	; (8001900 <MX_GPIO_Init+0xdc>)
 80018cc:	f000 fc3a 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin D6_PEDESTRIAN_Pin LED_RED_1_Pin
                           LED_AMBER_1_Pin LED_GREEN_1_Pin LED_2_Pin LED_4_Pin
                           LED_3_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|D6_PEDESTRIAN_Pin|LED_RED_1_Pin
 80018d0:	f24e 73fe 	movw	r3, #59390	; 0xe7fe
 80018d4:	60bb      	str	r3, [r7, #8]
                          |LED_AMBER_1_Pin|LED_GREEN_1_Pin|LED_2_Pin|LED_4_Pin
                          |LED_3_Pin|EN0_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2302      	movs	r3, #2
 80018e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e2:	f107 0308 	add.w	r3, r7, #8
 80018e6:	4619      	mov	r1, r3
 80018e8:	4805      	ldr	r0, [pc, #20]	; (8001900 <MX_GPIO_Init+0xdc>)
 80018ea:	f000 fc2b 	bl	8002144 <HAL_GPIO_Init>

}
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40010800 	.word	0x40010800
 8001900:	40010c00 	.word	0x40010c00

08001904 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	timerRun();
 800190c:	f000 f82c 	bl	8001968 <timerRun>
	getKeyInput();
 8001910:	f7fe fc58 	bl	80001c4 <getKeyInput>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001920:	b672      	cpsid	i
}
 8001922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001924:	e7fe      	b.n	8001924 <Error_Handler+0x8>
	...

08001928 <setTimer>:
#define TIMER_CYCLE 10

int timer_flag[NO_TIMERS + 1];
int timer_counter[NO_TIMERS + 1];

void setTimer(int flagNo, int duration) {
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
	timer_counter[flagNo] = duration / TIMER_CYCLE;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	4a09      	ldr	r2, [pc, #36]	; (800195c <setTimer+0x34>)
 8001936:	fb82 1203 	smull	r1, r2, r2, r3
 800193a:	1092      	asrs	r2, r2, #2
 800193c:	17db      	asrs	r3, r3, #31
 800193e:	1ad2      	subs	r2, r2, r3
 8001940:	4907      	ldr	r1, [pc, #28]	; (8001960 <setTimer+0x38>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[flagNo] = 0;
 8001948:	4a06      	ldr	r2, [pc, #24]	; (8001964 <setTimer+0x3c>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2100      	movs	r1, #0
 800194e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	66666667 	.word	0x66666667
 8001960:	20000260 	.word	0x20000260
 8001964:	20000270 	.word	0x20000270

08001968 <timerRun>:

void timerRun() {
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
	for (int flagNo = 1; flagNo <= NO_TIMERS; flagNo++) {
 800196e:	2301      	movs	r3, #1
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	e01c      	b.n	80019ae <timerRun+0x46>
		if (timer_counter[flagNo] > 0) {
 8001974:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <timerRun+0x58>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197c:	2b00      	cmp	r3, #0
 800197e:	dd13      	ble.n	80019a8 <timerRun+0x40>
			timer_counter[flagNo]--;
 8001980:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <timerRun+0x58>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001988:	1e5a      	subs	r2, r3, #1
 800198a:	490d      	ldr	r1, [pc, #52]	; (80019c0 <timerRun+0x58>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[flagNo] <= 0) {
 8001992:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <timerRun+0x58>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199a:	2b00      	cmp	r3, #0
 800199c:	dc04      	bgt.n	80019a8 <timerRun+0x40>
				timer_flag[flagNo] = 1;
 800199e:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <timerRun+0x5c>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2101      	movs	r1, #1
 80019a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int flagNo = 1; flagNo <= NO_TIMERS; flagNo++) {
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3301      	adds	r3, #1
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	dddf      	ble.n	8001974 <timerRun+0xc>
			}
		}
	}
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	20000260 	.word	0x20000260
 80019c4:	20000270 	.word	0x20000270

080019c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_MspInit+0x5c>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <HAL_MspInit+0x5c>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6193      	str	r3, [r2, #24]
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_MspInit+0x5c>)
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <HAL_MspInit+0x5c>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <HAL_MspInit+0x5c>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f0:	61d3      	str	r3, [r2, #28]
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <HAL_MspInit+0x5c>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <HAL_MspInit+0x60>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <HAL_MspInit+0x60>)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40010000 	.word	0x40010000

08001a2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a3c:	d114      	bne.n	8001a68 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a3e:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_TIM_Base_MspInit+0x78>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	4a18      	ldr	r2, [pc, #96]	; (8001aa4 <HAL_TIM_Base_MspInit+0x78>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	61d3      	str	r3, [r2, #28]
 8001a4a:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <HAL_TIM_Base_MspInit+0x78>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2100      	movs	r1, #0
 8001a5a:	201c      	movs	r0, #28
 8001a5c:	f000 fa8b 	bl	8001f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a60:	201c      	movs	r0, #28
 8001a62:	f000 faa4 	bl	8001fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a66:	e018      	b.n	8001a9a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0e      	ldr	r2, [pc, #56]	; (8001aa8 <HAL_TIM_Base_MspInit+0x7c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d113      	bne.n	8001a9a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a72:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <HAL_TIM_Base_MspInit+0x78>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <HAL_TIM_Base_MspInit+0x78>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	61d3      	str	r3, [r2, #28]
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_TIM_Base_MspInit+0x78>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	201d      	movs	r0, #29
 8001a90:	f000 fa71 	bl	8001f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a94:	201d      	movs	r0, #29
 8001a96:	f000 fa8a 	bl	8001fae <HAL_NVIC_EnableIRQ>
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40000400 	.word	0x40000400

08001aac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0310 	add.w	r3, r7, #16
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a0f      	ldr	r2, [pc, #60]	; (8001b04 <HAL_TIM_MspPostInit+0x58>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d117      	bne.n	8001afc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001acc:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <HAL_TIM_MspPostInit+0x5c>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4a0d      	ldr	r2, [pc, #52]	; (8001b08 <HAL_TIM_MspPostInit+0x5c>)
 8001ad2:	f043 0304 	orr.w	r3, r3, #4
 8001ad6:	6193      	str	r3, [r2, #24]
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_TIM_MspPostInit+0x5c>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ae4:	2340      	movs	r3, #64	; 0x40
 8001ae6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2302      	movs	r3, #2
 8001aee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	4619      	mov	r1, r3
 8001af6:	4805      	ldr	r0, [pc, #20]	; (8001b0c <HAL_TIM_MspPostInit+0x60>)
 8001af8:	f000 fb24 	bl	8002144 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001afc:	bf00      	nop
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40000400 	.word	0x40000400
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40010800 	.word	0x40010800

08001b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ba8 <HAL_UART_MspInit+0x98>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d137      	bne.n	8001ba0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b30:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <HAL_UART_MspInit+0x9c>)
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	4a1d      	ldr	r2, [pc, #116]	; (8001bac <HAL_UART_MspInit+0x9c>)
 8001b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b3a:	61d3      	str	r3, [r2, #28]
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <HAL_UART_MspInit+0x9c>)
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_UART_MspInit+0x9c>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4a17      	ldr	r2, [pc, #92]	; (8001bac <HAL_UART_MspInit+0x9c>)
 8001b4e:	f043 0304 	orr.w	r3, r3, #4
 8001b52:	6193      	str	r3, [r2, #24]
 8001b54:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_UART_MspInit+0x9c>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b60:	2304      	movs	r3, #4
 8001b62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	f107 0310 	add.w	r3, r7, #16
 8001b70:	4619      	mov	r1, r3
 8001b72:	480f      	ldr	r0, [pc, #60]	; (8001bb0 <HAL_UART_MspInit+0xa0>)
 8001b74:	f000 fae6 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b78:	2308      	movs	r3, #8
 8001b7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	f107 0310 	add.w	r3, r7, #16
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <HAL_UART_MspInit+0xa0>)
 8001b8c:	f000 fada 	bl	8002144 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2100      	movs	r1, #0
 8001b94:	2026      	movs	r0, #38	; 0x26
 8001b96:	f000 f9ee 	bl	8001f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b9a:	2026      	movs	r0, #38	; 0x26
 8001b9c:	f000 fa07 	bl	8001fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ba0:	bf00      	nop
 8001ba2:	3720      	adds	r7, #32
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40004400 	.word	0x40004400
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40010800 	.word	0x40010800

08001bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <NMI_Handler+0x4>

08001bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bbe:	e7fe      	b.n	8001bbe <HardFault_Handler+0x4>

08001bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <MemManage_Handler+0x4>

08001bc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <BusFault_Handler+0x4>

08001bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <UsageFault_Handler+0x4>

08001bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfa:	f000 f8c9 	bl	8001d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <TIM2_IRQHandler+0x10>)
 8001c0a:	f001 f9ef 	bl	8002fec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200001d4 	.word	0x200001d4

08001c18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <TIM3_IRQHandler+0x10>)
 8001c1e:	f001 f9e5 	bl	8002fec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200000fc 	.word	0x200000fc

08001c2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <USART2_IRQHandler+0x10>)
 8001c32:	f002 f89d 	bl	8003d70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	2000021c 	.word	0x2000021c

08001c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c48:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <_sbrk+0x5c>)
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <_sbrk+0x60>)
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c54:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <_sbrk+0x64>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d102      	bne.n	8001c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <_sbrk+0x64>)
 8001c5e:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <_sbrk+0x68>)
 8001c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <_sbrk+0x64>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d207      	bcs.n	8001c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c70:	f002 fca6 	bl	80045c0 <__errno>
 8001c74:	4603      	mov	r3, r0
 8001c76:	220c      	movs	r2, #12
 8001c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7e:	e009      	b.n	8001c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <_sbrk+0x64>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <_sbrk+0x64>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <_sbrk+0x64>)
 8001c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c92:	68fb      	ldr	r3, [r7, #12]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20002800 	.word	0x20002800
 8001ca0:	00000400 	.word	0x00000400
 8001ca4:	200000c8 	.word	0x200000c8
 8001ca8:	20000298 	.word	0x20000298

08001cac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb8:	480c      	ldr	r0, [pc, #48]	; (8001cec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cba:	490d      	ldr	r1, [pc, #52]	; (8001cf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	; (8001cf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc0:	e002      	b.n	8001cc8 <LoopCopyDataInit>

08001cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc6:	3304      	adds	r3, #4

08001cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ccc:	d3f9      	bcc.n	8001cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cce:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cd0:	4c0a      	ldr	r4, [pc, #40]	; (8001cfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd4:	e001      	b.n	8001cda <LoopFillZerobss>

08001cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd8:	3204      	adds	r2, #4

08001cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cdc:	d3fb      	bcc.n	8001cd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cde:	f7ff ffe5 	bl	8001cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ce2:	f002 fc73 	bl	80045cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ce6:	f7ff fbe9 	bl	80014bc <main>
  bx lr
 8001cea:	4770      	bx	lr
  ldr r0, =_sdata
 8001cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001cf4:	080051b0 	.word	0x080051b0
  ldr r2, =_sbss
 8001cf8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001cfc:	20000294 	.word	0x20000294

08001d00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d00:	e7fe      	b.n	8001d00 <ADC1_2_IRQHandler>
	...

08001d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <HAL_Init+0x28>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a07      	ldr	r2, [pc, #28]	; (8001d2c <HAL_Init+0x28>)
 8001d0e:	f043 0310 	orr.w	r3, r3, #16
 8001d12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d14:	2003      	movs	r0, #3
 8001d16:	f000 f923 	bl	8001f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1a:	200f      	movs	r0, #15
 8001d1c:	f000 f808 	bl	8001d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d20:	f7ff fe52 	bl	80019c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40022000 	.word	0x40022000

08001d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_InitTick+0x54>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_InitTick+0x58>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	4619      	mov	r1, r3
 8001d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 f93b 	bl	8001fca <HAL_SYSTICK_Config>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00e      	b.n	8001d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b0f      	cmp	r3, #15
 8001d62:	d80a      	bhi.n	8001d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d64:	2200      	movs	r2, #0
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f000 f903 	bl	8001f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d70:	4a06      	ldr	r2, [pc, #24]	; (8001d8c <HAL_InitTick+0x5c>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e000      	b.n	8001d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000028 	.word	0x20000028
 8001d88:	20000030 	.word	0x20000030
 8001d8c:	2000002c 	.word	0x2000002c

08001d90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <HAL_IncTick+0x1c>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <HAL_IncTick+0x20>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	4a03      	ldr	r2, [pc, #12]	; (8001db0 <HAL_IncTick+0x20>)
 8001da2:	6013      	str	r3, [r2, #0]
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	20000030 	.word	0x20000030
 8001db0:	20000280 	.word	0x20000280

08001db4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return uwTick;
 8001db8:	4b02      	ldr	r3, [pc, #8]	; (8001dc4 <HAL_GetTick+0x10>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	20000280 	.word	0x20000280

08001dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de4:	4013      	ands	r3, r2
 8001de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	60d3      	str	r3, [r2, #12]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <__NVIC_GetPriorityGrouping+0x18>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	f003 0307 	and.w	r3, r3, #7
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	db0b      	blt.n	8001e56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	f003 021f 	and.w	r2, r3, #31
 8001e44:	4906      	ldr	r1, [pc, #24]	; (8001e60 <__NVIC_EnableIRQ+0x34>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	e000e100 	.word	0xe000e100

08001e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	6039      	str	r1, [r7, #0]
 8001e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	db0a      	blt.n	8001e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	490c      	ldr	r1, [pc, #48]	; (8001eb0 <__NVIC_SetPriority+0x4c>)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	0112      	lsls	r2, r2, #4
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	440b      	add	r3, r1
 8001e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e8c:	e00a      	b.n	8001ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4908      	ldr	r1, [pc, #32]	; (8001eb4 <__NVIC_SetPriority+0x50>)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	3b04      	subs	r3, #4
 8001e9c:	0112      	lsls	r2, r2, #4
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	761a      	strb	r2, [r3, #24]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000e100 	.word	0xe000e100
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	; 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f1c3 0307 	rsb	r3, r3, #7
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	bf28      	it	cs
 8001ed6:	2304      	movcs	r3, #4
 8001ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3304      	adds	r3, #4
 8001ede:	2b06      	cmp	r3, #6
 8001ee0:	d902      	bls.n	8001ee8 <NVIC_EncodePriority+0x30>
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3b03      	subs	r3, #3
 8001ee6:	e000      	b.n	8001eea <NVIC_EncodePriority+0x32>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43da      	mvns	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	401a      	ands	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f00:	f04f 31ff 	mov.w	r1, #4294967295
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	43d9      	mvns	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	4313      	orrs	r3, r2
         );
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3724      	adds	r7, #36	; 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f2c:	d301      	bcc.n	8001f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00f      	b.n	8001f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f32:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <SysTick_Config+0x40>)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3a:	210f      	movs	r1, #15
 8001f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f40:	f7ff ff90 	bl	8001e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <SysTick_Config+0x40>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4a:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <SysTick_Config+0x40>)
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	e000e010 	.word	0xe000e010

08001f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff ff2d 	bl	8001dc8 <__NVIC_SetPriorityGrouping>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b086      	sub	sp, #24
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f88:	f7ff ff42 	bl	8001e10 <__NVIC_GetPriorityGrouping>
 8001f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	6978      	ldr	r0, [r7, #20]
 8001f94:	f7ff ff90 	bl	8001eb8 <NVIC_EncodePriority>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff5f 	bl	8001e64 <__NVIC_SetPriority>
}
 8001fa6:	bf00      	nop
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff35 	bl	8001e2c <__NVIC_EnableIRQ>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ffa2 	bl	8001f1c <SysTick_Config>
 8001fd8:	4603      	mov	r3, r0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b085      	sub	sp, #20
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d008      	beq.n	800200a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e020      	b.n	800204c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 020e 	bic.w	r2, r2, #14
 8002018:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0201 	bic.w	r2, r2, #1
 8002028:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002032:	2101      	movs	r1, #1
 8002034:	fa01 f202 	lsl.w	r2, r1, r2
 8002038:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800204a:	7bfb      	ldrb	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr
	...

08002058 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800206a:	2b02      	cmp	r3, #2
 800206c:	d005      	beq.n	800207a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2204      	movs	r2, #4
 8002072:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	e051      	b.n	800211e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 020e 	bic.w	r2, r2, #14
 8002088:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0201 	bic.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a22      	ldr	r2, [pc, #136]	; (8002128 <HAL_DMA_Abort_IT+0xd0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d029      	beq.n	80020f8 <HAL_DMA_Abort_IT+0xa0>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a20      	ldr	r2, [pc, #128]	; (800212c <HAL_DMA_Abort_IT+0xd4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d022      	beq.n	80020f4 <HAL_DMA_Abort_IT+0x9c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1f      	ldr	r2, [pc, #124]	; (8002130 <HAL_DMA_Abort_IT+0xd8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d01a      	beq.n	80020ee <HAL_DMA_Abort_IT+0x96>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a1d      	ldr	r2, [pc, #116]	; (8002134 <HAL_DMA_Abort_IT+0xdc>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d012      	beq.n	80020e8 <HAL_DMA_Abort_IT+0x90>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a1c      	ldr	r2, [pc, #112]	; (8002138 <HAL_DMA_Abort_IT+0xe0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d00a      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x8a>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a1a      	ldr	r2, [pc, #104]	; (800213c <HAL_DMA_Abort_IT+0xe4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d102      	bne.n	80020dc <HAL_DMA_Abort_IT+0x84>
 80020d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020da:	e00e      	b.n	80020fa <HAL_DMA_Abort_IT+0xa2>
 80020dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020e0:	e00b      	b.n	80020fa <HAL_DMA_Abort_IT+0xa2>
 80020e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020e6:	e008      	b.n	80020fa <HAL_DMA_Abort_IT+0xa2>
 80020e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ec:	e005      	b.n	80020fa <HAL_DMA_Abort_IT+0xa2>
 80020ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020f2:	e002      	b.n	80020fa <HAL_DMA_Abort_IT+0xa2>
 80020f4:	2310      	movs	r3, #16
 80020f6:	e000      	b.n	80020fa <HAL_DMA_Abort_IT+0xa2>
 80020f8:	2301      	movs	r3, #1
 80020fa:	4a11      	ldr	r2, [pc, #68]	; (8002140 <HAL_DMA_Abort_IT+0xe8>)
 80020fc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4798      	blx	r3
    } 
  }
  return status;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40020008 	.word	0x40020008
 800212c:	4002001c 	.word	0x4002001c
 8002130:	40020030 	.word	0x40020030
 8002134:	40020044 	.word	0x40020044
 8002138:	40020058 	.word	0x40020058
 800213c:	4002006c 	.word	0x4002006c
 8002140:	40020000 	.word	0x40020000

08002144 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002144:	b480      	push	{r7}
 8002146:	b08b      	sub	sp, #44	; 0x2c
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800214e:	2300      	movs	r3, #0
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002152:	2300      	movs	r3, #0
 8002154:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002156:	e148      	b.n	80023ea <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002158:	2201      	movs	r2, #1
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	429a      	cmp	r2, r3
 8002172:	f040 8137 	bne.w	80023e4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4aa3      	ldr	r2, [pc, #652]	; (8002408 <HAL_GPIO_Init+0x2c4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d05e      	beq.n	800223e <HAL_GPIO_Init+0xfa>
 8002180:	4aa1      	ldr	r2, [pc, #644]	; (8002408 <HAL_GPIO_Init+0x2c4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d875      	bhi.n	8002272 <HAL_GPIO_Init+0x12e>
 8002186:	4aa1      	ldr	r2, [pc, #644]	; (800240c <HAL_GPIO_Init+0x2c8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d058      	beq.n	800223e <HAL_GPIO_Init+0xfa>
 800218c:	4a9f      	ldr	r2, [pc, #636]	; (800240c <HAL_GPIO_Init+0x2c8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d86f      	bhi.n	8002272 <HAL_GPIO_Init+0x12e>
 8002192:	4a9f      	ldr	r2, [pc, #636]	; (8002410 <HAL_GPIO_Init+0x2cc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d052      	beq.n	800223e <HAL_GPIO_Init+0xfa>
 8002198:	4a9d      	ldr	r2, [pc, #628]	; (8002410 <HAL_GPIO_Init+0x2cc>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d869      	bhi.n	8002272 <HAL_GPIO_Init+0x12e>
 800219e:	4a9d      	ldr	r2, [pc, #628]	; (8002414 <HAL_GPIO_Init+0x2d0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d04c      	beq.n	800223e <HAL_GPIO_Init+0xfa>
 80021a4:	4a9b      	ldr	r2, [pc, #620]	; (8002414 <HAL_GPIO_Init+0x2d0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d863      	bhi.n	8002272 <HAL_GPIO_Init+0x12e>
 80021aa:	4a9b      	ldr	r2, [pc, #620]	; (8002418 <HAL_GPIO_Init+0x2d4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d046      	beq.n	800223e <HAL_GPIO_Init+0xfa>
 80021b0:	4a99      	ldr	r2, [pc, #612]	; (8002418 <HAL_GPIO_Init+0x2d4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d85d      	bhi.n	8002272 <HAL_GPIO_Init+0x12e>
 80021b6:	2b12      	cmp	r3, #18
 80021b8:	d82a      	bhi.n	8002210 <HAL_GPIO_Init+0xcc>
 80021ba:	2b12      	cmp	r3, #18
 80021bc:	d859      	bhi.n	8002272 <HAL_GPIO_Init+0x12e>
 80021be:	a201      	add	r2, pc, #4	; (adr r2, 80021c4 <HAL_GPIO_Init+0x80>)
 80021c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c4:	0800223f 	.word	0x0800223f
 80021c8:	08002219 	.word	0x08002219
 80021cc:	0800222b 	.word	0x0800222b
 80021d0:	0800226d 	.word	0x0800226d
 80021d4:	08002273 	.word	0x08002273
 80021d8:	08002273 	.word	0x08002273
 80021dc:	08002273 	.word	0x08002273
 80021e0:	08002273 	.word	0x08002273
 80021e4:	08002273 	.word	0x08002273
 80021e8:	08002273 	.word	0x08002273
 80021ec:	08002273 	.word	0x08002273
 80021f0:	08002273 	.word	0x08002273
 80021f4:	08002273 	.word	0x08002273
 80021f8:	08002273 	.word	0x08002273
 80021fc:	08002273 	.word	0x08002273
 8002200:	08002273 	.word	0x08002273
 8002204:	08002273 	.word	0x08002273
 8002208:	08002221 	.word	0x08002221
 800220c:	08002235 	.word	0x08002235
 8002210:	4a82      	ldr	r2, [pc, #520]	; (800241c <HAL_GPIO_Init+0x2d8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d013      	beq.n	800223e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002216:	e02c      	b.n	8002272 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	623b      	str	r3, [r7, #32]
          break;
 800221e:	e029      	b.n	8002274 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	3304      	adds	r3, #4
 8002226:	623b      	str	r3, [r7, #32]
          break;
 8002228:	e024      	b.n	8002274 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	3308      	adds	r3, #8
 8002230:	623b      	str	r3, [r7, #32]
          break;
 8002232:	e01f      	b.n	8002274 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	330c      	adds	r3, #12
 800223a:	623b      	str	r3, [r7, #32]
          break;
 800223c:	e01a      	b.n	8002274 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d102      	bne.n	800224c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002246:	2304      	movs	r3, #4
 8002248:	623b      	str	r3, [r7, #32]
          break;
 800224a:	e013      	b.n	8002274 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d105      	bne.n	8002260 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002254:	2308      	movs	r3, #8
 8002256:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	611a      	str	r2, [r3, #16]
          break;
 800225e:	e009      	b.n	8002274 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002260:	2308      	movs	r3, #8
 8002262:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69fa      	ldr	r2, [r7, #28]
 8002268:	615a      	str	r2, [r3, #20]
          break;
 800226a:	e003      	b.n	8002274 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800226c:	2300      	movs	r3, #0
 800226e:	623b      	str	r3, [r7, #32]
          break;
 8002270:	e000      	b.n	8002274 <HAL_GPIO_Init+0x130>
          break;
 8002272:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	2bff      	cmp	r3, #255	; 0xff
 8002278:	d801      	bhi.n	800227e <HAL_GPIO_Init+0x13a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	e001      	b.n	8002282 <HAL_GPIO_Init+0x13e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3304      	adds	r3, #4
 8002282:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	2bff      	cmp	r3, #255	; 0xff
 8002288:	d802      	bhi.n	8002290 <HAL_GPIO_Init+0x14c>
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	e002      	b.n	8002296 <HAL_GPIO_Init+0x152>
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	3b08      	subs	r3, #8
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	210f      	movs	r1, #15
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	fa01 f303 	lsl.w	r3, r1, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	401a      	ands	r2, r3
 80022a8:	6a39      	ldr	r1, [r7, #32]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	fa01 f303 	lsl.w	r3, r1, r3
 80022b0:	431a      	orrs	r2, r3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 8090 	beq.w	80023e4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022c4:	4b56      	ldr	r3, [pc, #344]	; (8002420 <HAL_GPIO_Init+0x2dc>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	4a55      	ldr	r2, [pc, #340]	; (8002420 <HAL_GPIO_Init+0x2dc>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6193      	str	r3, [r2, #24]
 80022d0:	4b53      	ldr	r3, [pc, #332]	; (8002420 <HAL_GPIO_Init+0x2dc>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022dc:	4a51      	ldr	r2, [pc, #324]	; (8002424 <HAL_GPIO_Init+0x2e0>)
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	089b      	lsrs	r3, r3, #2
 80022e2:	3302      	adds	r3, #2
 80022e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	220f      	movs	r2, #15
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4013      	ands	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a49      	ldr	r2, [pc, #292]	; (8002428 <HAL_GPIO_Init+0x2e4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d00d      	beq.n	8002324 <HAL_GPIO_Init+0x1e0>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a48      	ldr	r2, [pc, #288]	; (800242c <HAL_GPIO_Init+0x2e8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d007      	beq.n	8002320 <HAL_GPIO_Init+0x1dc>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a47      	ldr	r2, [pc, #284]	; (8002430 <HAL_GPIO_Init+0x2ec>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d101      	bne.n	800231c <HAL_GPIO_Init+0x1d8>
 8002318:	2302      	movs	r3, #2
 800231a:	e004      	b.n	8002326 <HAL_GPIO_Init+0x1e2>
 800231c:	2303      	movs	r3, #3
 800231e:	e002      	b.n	8002326 <HAL_GPIO_Init+0x1e2>
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <HAL_GPIO_Init+0x1e2>
 8002324:	2300      	movs	r3, #0
 8002326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002328:	f002 0203 	and.w	r2, r2, #3
 800232c:	0092      	lsls	r2, r2, #2
 800232e:	4093      	lsls	r3, r2
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002336:	493b      	ldr	r1, [pc, #236]	; (8002424 <HAL_GPIO_Init+0x2e0>)
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	3302      	adds	r3, #2
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d006      	beq.n	800235e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002350:	4b38      	ldr	r3, [pc, #224]	; (8002434 <HAL_GPIO_Init+0x2f0>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4937      	ldr	r1, [pc, #220]	; (8002434 <HAL_GPIO_Init+0x2f0>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	600b      	str	r3, [r1, #0]
 800235c:	e006      	b.n	800236c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800235e:	4b35      	ldr	r3, [pc, #212]	; (8002434 <HAL_GPIO_Init+0x2f0>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	43db      	mvns	r3, r3
 8002366:	4933      	ldr	r1, [pc, #204]	; (8002434 <HAL_GPIO_Init+0x2f0>)
 8002368:	4013      	ands	r3, r2
 800236a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d006      	beq.n	8002386 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002378:	4b2e      	ldr	r3, [pc, #184]	; (8002434 <HAL_GPIO_Init+0x2f0>)
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	492d      	ldr	r1, [pc, #180]	; (8002434 <HAL_GPIO_Init+0x2f0>)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
 8002384:	e006      	b.n	8002394 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002386:	4b2b      	ldr	r3, [pc, #172]	; (8002434 <HAL_GPIO_Init+0x2f0>)
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	43db      	mvns	r3, r3
 800238e:	4929      	ldr	r1, [pc, #164]	; (8002434 <HAL_GPIO_Init+0x2f0>)
 8002390:	4013      	ands	r3, r2
 8002392:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d006      	beq.n	80023ae <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023a0:	4b24      	ldr	r3, [pc, #144]	; (8002434 <HAL_GPIO_Init+0x2f0>)
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	4923      	ldr	r1, [pc, #140]	; (8002434 <HAL_GPIO_Init+0x2f0>)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]
 80023ac:	e006      	b.n	80023bc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023ae:	4b21      	ldr	r3, [pc, #132]	; (8002434 <HAL_GPIO_Init+0x2f0>)
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	491f      	ldr	r1, [pc, #124]	; (8002434 <HAL_GPIO_Init+0x2f0>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d006      	beq.n	80023d6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023c8:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <HAL_GPIO_Init+0x2f0>)
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	4919      	ldr	r1, [pc, #100]	; (8002434 <HAL_GPIO_Init+0x2f0>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	60cb      	str	r3, [r1, #12]
 80023d4:	e006      	b.n	80023e4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023d6:	4b17      	ldr	r3, [pc, #92]	; (8002434 <HAL_GPIO_Init+0x2f0>)
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	43db      	mvns	r3, r3
 80023de:	4915      	ldr	r1, [pc, #84]	; (8002434 <HAL_GPIO_Init+0x2f0>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	3301      	adds	r3, #1
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f47f aeaf 	bne.w	8002158 <HAL_GPIO_Init+0x14>
  }
}
 80023fa:	bf00      	nop
 80023fc:	bf00      	nop
 80023fe:	372c      	adds	r7, #44	; 0x2c
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	10320000 	.word	0x10320000
 800240c:	10310000 	.word	0x10310000
 8002410:	10220000 	.word	0x10220000
 8002414:	10210000 	.word	0x10210000
 8002418:	10120000 	.word	0x10120000
 800241c:	10110000 	.word	0x10110000
 8002420:	40021000 	.word	0x40021000
 8002424:	40010000 	.word	0x40010000
 8002428:	40010800 	.word	0x40010800
 800242c:	40010c00 	.word	0x40010c00
 8002430:	40011000 	.word	0x40011000
 8002434:	40010400 	.word	0x40010400

08002438 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	887b      	ldrh	r3, [r7, #2]
 800244a:	4013      	ands	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	e001      	b.n	800245a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800245a:	7bfb      	ldrb	r3, [r7, #15]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	460b      	mov	r3, r1
 8002470:	807b      	strh	r3, [r7, #2]
 8002472:	4613      	mov	r3, r2
 8002474:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002476:	787b      	ldrb	r3, [r7, #1]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800247c:	887a      	ldrh	r2, [r7, #2]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002482:	e003      	b.n	800248c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002484:	887b      	ldrh	r3, [r7, #2]
 8002486:	041a      	lsls	r2, r3, #16
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	611a      	str	r2, [r3, #16]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
	...

08002498 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e26c      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8087 	beq.w	80025c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024b8:	4b92      	ldr	r3, [pc, #584]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d00c      	beq.n	80024de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024c4:	4b8f      	ldr	r3, [pc, #572]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 030c 	and.w	r3, r3, #12
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d112      	bne.n	80024f6 <HAL_RCC_OscConfig+0x5e>
 80024d0:	4b8c      	ldr	r3, [pc, #560]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024dc:	d10b      	bne.n	80024f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024de:	4b89      	ldr	r3, [pc, #548]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d06c      	beq.n	80025c4 <HAL_RCC_OscConfig+0x12c>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d168      	bne.n	80025c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e246      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024fe:	d106      	bne.n	800250e <HAL_RCC_OscConfig+0x76>
 8002500:	4b80      	ldr	r3, [pc, #512]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a7f      	ldr	r2, [pc, #508]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	e02e      	b.n	800256c <HAL_RCC_OscConfig+0xd4>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0x98>
 8002516:	4b7b      	ldr	r3, [pc, #492]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a7a      	ldr	r2, [pc, #488]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800251c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b78      	ldr	r3, [pc, #480]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a77      	ldr	r2, [pc, #476]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002528:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e01d      	b.n	800256c <HAL_RCC_OscConfig+0xd4>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002538:	d10c      	bne.n	8002554 <HAL_RCC_OscConfig+0xbc>
 800253a:	4b72      	ldr	r3, [pc, #456]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a71      	ldr	r2, [pc, #452]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b6f      	ldr	r3, [pc, #444]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a6e      	ldr	r2, [pc, #440]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800254c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e00b      	b.n	800256c <HAL_RCC_OscConfig+0xd4>
 8002554:	4b6b      	ldr	r3, [pc, #428]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a6a      	ldr	r2, [pc, #424]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800255a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	4b68      	ldr	r3, [pc, #416]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a67      	ldr	r2, [pc, #412]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800256a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d013      	beq.n	800259c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff fc1e 	bl	8001db4 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800257c:	f7ff fc1a 	bl	8001db4 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	; 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e1fa      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	4b5d      	ldr	r3, [pc, #372]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0xe4>
 800259a:	e014      	b.n	80025c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7ff fc0a 	bl	8001db4 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a4:	f7ff fc06 	bl	8001db4 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	; 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e1e6      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b6:	4b53      	ldr	r3, [pc, #332]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x10c>
 80025c2:	e000      	b.n	80025c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d063      	beq.n	800269a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025d2:	4b4c      	ldr	r3, [pc, #304]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00b      	beq.n	80025f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025de:	4b49      	ldr	r3, [pc, #292]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d11c      	bne.n	8002624 <HAL_RCC_OscConfig+0x18c>
 80025ea:	4b46      	ldr	r3, [pc, #280]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d116      	bne.n	8002624 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f6:	4b43      	ldr	r3, [pc, #268]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_RCC_OscConfig+0x176>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d001      	beq.n	800260e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e1ba      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260e:	4b3d      	ldr	r3, [pc, #244]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4939      	ldr	r1, [pc, #228]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002622:	e03a      	b.n	800269a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d020      	beq.n	800266e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800262c:	4b36      	ldr	r3, [pc, #216]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002632:	f7ff fbbf 	bl	8001db4 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263a:	f7ff fbbb 	bl	8001db4 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e19b      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264c:	4b2d      	ldr	r3, [pc, #180]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002658:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4927      	ldr	r1, [pc, #156]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002668:	4313      	orrs	r3, r2
 800266a:	600b      	str	r3, [r1, #0]
 800266c:	e015      	b.n	800269a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800266e:	4b26      	ldr	r3, [pc, #152]	; (8002708 <HAL_RCC_OscConfig+0x270>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002674:	f7ff fb9e 	bl	8001db4 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267c:	f7ff fb9a 	bl	8001db4 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e17a      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268e:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d03a      	beq.n	800271c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d019      	beq.n	80026e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ae:	4b17      	ldr	r3, [pc, #92]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b4:	f7ff fb7e 	bl	8001db4 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026bc:	f7ff fb7a 	bl	8001db4 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e15a      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ce:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026da:	2001      	movs	r0, #1
 80026dc:	f000 fad8 	bl	8002c90 <RCC_Delay>
 80026e0:	e01c      	b.n	800271c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <HAL_RCC_OscConfig+0x274>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e8:	f7ff fb64 	bl	8001db4 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ee:	e00f      	b.n	8002710 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f0:	f7ff fb60 	bl	8001db4 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d908      	bls.n	8002710 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e140      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
 8002708:	42420000 	.word	0x42420000
 800270c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002710:	4b9e      	ldr	r3, [pc, #632]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1e9      	bne.n	80026f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80a6 	beq.w	8002876 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272a:	2300      	movs	r3, #0
 800272c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272e:	4b97      	ldr	r3, [pc, #604]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10d      	bne.n	8002756 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	4b94      	ldr	r3, [pc, #592]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	4a93      	ldr	r2, [pc, #588]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002744:	61d3      	str	r3, [r2, #28]
 8002746:	4b91      	ldr	r3, [pc, #580]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002752:	2301      	movs	r3, #1
 8002754:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002756:	4b8e      	ldr	r3, [pc, #568]	; (8002990 <HAL_RCC_OscConfig+0x4f8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d118      	bne.n	8002794 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002762:	4b8b      	ldr	r3, [pc, #556]	; (8002990 <HAL_RCC_OscConfig+0x4f8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a8a      	ldr	r2, [pc, #552]	; (8002990 <HAL_RCC_OscConfig+0x4f8>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276e:	f7ff fb21 	bl	8001db4 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002776:	f7ff fb1d 	bl	8001db4 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b64      	cmp	r3, #100	; 0x64
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e0fd      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002788:	4b81      	ldr	r3, [pc, #516]	; (8002990 <HAL_RCC_OscConfig+0x4f8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d106      	bne.n	80027aa <HAL_RCC_OscConfig+0x312>
 800279c:	4b7b      	ldr	r3, [pc, #492]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	4a7a      	ldr	r2, [pc, #488]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6213      	str	r3, [r2, #32]
 80027a8:	e02d      	b.n	8002806 <HAL_RCC_OscConfig+0x36e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0x334>
 80027b2:	4b76      	ldr	r3, [pc, #472]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	4a75      	ldr	r2, [pc, #468]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	6213      	str	r3, [r2, #32]
 80027be:	4b73      	ldr	r3, [pc, #460]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	4a72      	ldr	r2, [pc, #456]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027c4:	f023 0304 	bic.w	r3, r3, #4
 80027c8:	6213      	str	r3, [r2, #32]
 80027ca:	e01c      	b.n	8002806 <HAL_RCC_OscConfig+0x36e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b05      	cmp	r3, #5
 80027d2:	d10c      	bne.n	80027ee <HAL_RCC_OscConfig+0x356>
 80027d4:	4b6d      	ldr	r3, [pc, #436]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4a6c      	ldr	r2, [pc, #432]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027da:	f043 0304 	orr.w	r3, r3, #4
 80027de:	6213      	str	r3, [r2, #32]
 80027e0:	4b6a      	ldr	r3, [pc, #424]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	4a69      	ldr	r2, [pc, #420]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6213      	str	r3, [r2, #32]
 80027ec:	e00b      	b.n	8002806 <HAL_RCC_OscConfig+0x36e>
 80027ee:	4b67      	ldr	r3, [pc, #412]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	4a66      	ldr	r2, [pc, #408]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	6213      	str	r3, [r2, #32]
 80027fa:	4b64      	ldr	r3, [pc, #400]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	4a63      	ldr	r2, [pc, #396]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d015      	beq.n	800283a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280e:	f7ff fad1 	bl	8001db4 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002814:	e00a      	b.n	800282c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002816:	f7ff facd 	bl	8001db4 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	f241 3288 	movw	r2, #5000	; 0x1388
 8002824:	4293      	cmp	r3, r2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e0ab      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282c:	4b57      	ldr	r3, [pc, #348]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0ee      	beq.n	8002816 <HAL_RCC_OscConfig+0x37e>
 8002838:	e014      	b.n	8002864 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283a:	f7ff fabb 	bl	8001db4 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002840:	e00a      	b.n	8002858 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002842:	f7ff fab7 	bl	8001db4 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002850:	4293      	cmp	r3, r2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e095      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002858:	4b4c      	ldr	r3, [pc, #304]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1ee      	bne.n	8002842 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002864:	7dfb      	ldrb	r3, [r7, #23]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d105      	bne.n	8002876 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286a:	4b48      	ldr	r3, [pc, #288]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	4a47      	ldr	r2, [pc, #284]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002874:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 8081 	beq.w	8002982 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002880:	4b42      	ldr	r3, [pc, #264]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b08      	cmp	r3, #8
 800288a:	d061      	beq.n	8002950 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d146      	bne.n	8002922 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002894:	4b3f      	ldr	r3, [pc, #252]	; (8002994 <HAL_RCC_OscConfig+0x4fc>)
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289a:	f7ff fa8b 	bl	8001db4 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a2:	f7ff fa87 	bl	8001db4 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e067      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b4:	4b35      	ldr	r3, [pc, #212]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c8:	d108      	bne.n	80028dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028ca:	4b30      	ldr	r3, [pc, #192]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	492d      	ldr	r1, [pc, #180]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028dc:	4b2b      	ldr	r3, [pc, #172]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a19      	ldr	r1, [r3, #32]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	430b      	orrs	r3, r1
 80028ee:	4927      	ldr	r1, [pc, #156]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f4:	4b27      	ldr	r3, [pc, #156]	; (8002994 <HAL_RCC_OscConfig+0x4fc>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fa:	f7ff fa5b 	bl	8001db4 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002902:	f7ff fa57 	bl	8001db4 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e037      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002914:	4b1d      	ldr	r3, [pc, #116]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x46a>
 8002920:	e02f      	b.n	8002982 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002922:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <HAL_RCC_OscConfig+0x4fc>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7ff fa44 	bl	8001db4 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002930:	f7ff fa40 	bl	8001db4 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e020      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002942:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x498>
 800294e:	e018      	b.n	8002982 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e013      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCC_OscConfig+0x4f4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	429a      	cmp	r2, r3
 800296e:	d106      	bne.n	800297e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d001      	beq.n	8002982 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	40007000 	.word	0x40007000
 8002994:	42420060 	.word	0x42420060

08002998 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0d0      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029ac:	4b6a      	ldr	r3, [pc, #424]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d910      	bls.n	80029dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ba:	4b67      	ldr	r3, [pc, #412]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 0207 	bic.w	r2, r3, #7
 80029c2:	4965      	ldr	r1, [pc, #404]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ca:	4b63      	ldr	r3, [pc, #396]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0b8      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d020      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f4:	4b59      	ldr	r3, [pc, #356]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4a58      	ldr	r2, [pc, #352]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a0c:	4b53      	ldr	r3, [pc, #332]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	4a52      	ldr	r2, [pc, #328]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a18:	4b50      	ldr	r3, [pc, #320]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	494d      	ldr	r1, [pc, #308]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d040      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d107      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	4b47      	ldr	r3, [pc, #284]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d115      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e07f      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a56:	4b41      	ldr	r3, [pc, #260]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e073      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a66:	4b3d      	ldr	r3, [pc, #244]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e06b      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a76:	4b39      	ldr	r3, [pc, #228]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f023 0203 	bic.w	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4936      	ldr	r1, [pc, #216]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a88:	f7ff f994 	bl	8001db4 <HAL_GetTick>
 8002a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a90:	f7ff f990 	bl	8001db4 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e053      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	4b2d      	ldr	r3, [pc, #180]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 020c 	and.w	r2, r3, #12
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d1eb      	bne.n	8002a90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b27      	ldr	r3, [pc, #156]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d210      	bcs.n	8002ae8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 0207 	bic.w	r2, r3, #7
 8002ace:	4922      	ldr	r1, [pc, #136]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	4b20      	ldr	r3, [pc, #128]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e032      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af4:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	4916      	ldr	r1, [pc, #88]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d009      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b12:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	490e      	ldr	r1, [pc, #56]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b26:	f000 f821 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	091b      	lsrs	r3, r3, #4
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	490a      	ldr	r1, [pc, #40]	; (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002b38:	5ccb      	ldrb	r3, [r1, r3]
 8002b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3e:	4a09      	ldr	r2, [pc, #36]	; (8002b64 <HAL_RCC_ClockConfig+0x1cc>)
 8002b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b42:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <HAL_RCC_ClockConfig+0x1d0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff f8f2 	bl	8001d30 <HAL_InitTick>

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40022000 	.word	0x40022000
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	0800515c 	.word	0x0800515c
 8002b64:	20000028 	.word	0x20000028
 8002b68:	2000002c 	.word	0x2000002c

08002b6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b6c:	b490      	push	{r4, r7}
 8002b6e:	b08a      	sub	sp, #40	; 0x28
 8002b70:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b72:	4b2a      	ldr	r3, [pc, #168]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b74:	1d3c      	adds	r4, r7, #4
 8002b76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b7c:	f240 2301 	movw	r3, #513	; 0x201
 8002b80:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	2300      	movs	r3, #0
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b96:	4b22      	ldr	r3, [pc, #136]	; (8002c20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d002      	beq.n	8002bac <HAL_RCC_GetSysClockFreq+0x40>
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d003      	beq.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x46>
 8002baa:	e02d      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bac:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bae:	623b      	str	r3, [r7, #32]
      break;
 8002bb0:	e02d      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	0c9b      	lsrs	r3, r3, #18
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bc4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d013      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bd0:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	0c5b      	lsrs	r3, r3, #17
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bde:	4413      	add	r3, r2
 8002be0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002be4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	4a0e      	ldr	r2, [pc, #56]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bea:	fb02 f203 	mul.w	r2, r2, r3
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf6:	e004      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	4a0b      	ldr	r2, [pc, #44]	; (8002c28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bfc:	fb02 f303 	mul.w	r3, r2, r3
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	623b      	str	r3, [r7, #32]
      break;
 8002c06:	e002      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c0a:	623b      	str	r3, [r7, #32]
      break;
 8002c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3728      	adds	r7, #40	; 0x28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc90      	pop	{r4, r7}
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	0800514c 	.word	0x0800514c
 8002c20:	40021000 	.word	0x40021000
 8002c24:	007a1200 	.word	0x007a1200
 8002c28:	003d0900 	.word	0x003d0900

08002c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c30:	4b02      	ldr	r3, [pc, #8]	; (8002c3c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	20000028 	.word	0x20000028

08002c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c44:	f7ff fff2 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	0a1b      	lsrs	r3, r3, #8
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	4903      	ldr	r1, [pc, #12]	; (8002c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c56:	5ccb      	ldrb	r3, [r1, r3]
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021000 	.word	0x40021000
 8002c64:	0800516c 	.word	0x0800516c

08002c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c6c:	f7ff ffde 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8002c70:	4602      	mov	r2, r0
 8002c72:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	0adb      	lsrs	r3, r3, #11
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	4903      	ldr	r1, [pc, #12]	; (8002c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c7e:	5ccb      	ldrb	r3, [r1, r3]
 8002c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	0800516c 	.word	0x0800516c

08002c90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c98:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <RCC_Delay+0x34>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <RCC_Delay+0x38>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	0a5b      	lsrs	r3, r3, #9
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	fb02 f303 	mul.w	r3, r2, r3
 8002caa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cac:	bf00      	nop
  }
  while (Delay --);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1e5a      	subs	r2, r3, #1
 8002cb2:	60fa      	str	r2, [r7, #12]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1f9      	bne.n	8002cac <RCC_Delay+0x1c>
}
 8002cb8:	bf00      	nop
 8002cba:	bf00      	nop
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	20000028 	.word	0x20000028
 8002cc8:	10624dd3 	.word	0x10624dd3

08002ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e041      	b.n	8002d62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe fe9a 	bl	8001a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3304      	adds	r3, #4
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	f000 fc1c 	bl	8003548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d001      	beq.n	8002d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e035      	b.n	8002df0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a16      	ldr	r2, [pc, #88]	; (8002dfc <HAL_TIM_Base_Start_IT+0x90>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d009      	beq.n	8002dba <HAL_TIM_Base_Start_IT+0x4e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dae:	d004      	beq.n	8002dba <HAL_TIM_Base_Start_IT+0x4e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a12      	ldr	r2, [pc, #72]	; (8002e00 <HAL_TIM_Base_Start_IT+0x94>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d111      	bne.n	8002dde <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2b06      	cmp	r3, #6
 8002dca:	d010      	beq.n	8002dee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ddc:	e007      	b.n	8002dee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 0201 	orr.w	r2, r2, #1
 8002dec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40012c00 	.word	0x40012c00
 8002e00:	40000400 	.word	0x40000400

08002e04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e041      	b.n	8002e9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d106      	bne.n	8002e30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f839 	bl	8002ea2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	4619      	mov	r1, r3
 8002e42:	4610      	mov	r0, r2
 8002e44:	f000 fb80 	bl	8003548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d109      	bne.n	8002ed8 <HAL_TIM_PWM_Start+0x24>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	bf14      	ite	ne
 8002ed0:	2301      	movne	r3, #1
 8002ed2:	2300      	moveq	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	e022      	b.n	8002f1e <HAL_TIM_PWM_Start+0x6a>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d109      	bne.n	8002ef2 <HAL_TIM_PWM_Start+0x3e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	bf14      	ite	ne
 8002eea:	2301      	movne	r3, #1
 8002eec:	2300      	moveq	r3, #0
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	e015      	b.n	8002f1e <HAL_TIM_PWM_Start+0x6a>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d109      	bne.n	8002f0c <HAL_TIM_PWM_Start+0x58>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	bf14      	ite	ne
 8002f04:	2301      	movne	r3, #1
 8002f06:	2300      	moveq	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	e008      	b.n	8002f1e <HAL_TIM_PWM_Start+0x6a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	bf14      	ite	ne
 8002f18:	2301      	movne	r3, #1
 8002f1a:	2300      	moveq	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e059      	b.n	8002fda <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d104      	bne.n	8002f36 <HAL_TIM_PWM_Start+0x82>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f34:	e013      	b.n	8002f5e <HAL_TIM_PWM_Start+0xaa>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d104      	bne.n	8002f46 <HAL_TIM_PWM_Start+0x92>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f44:	e00b      	b.n	8002f5e <HAL_TIM_PWM_Start+0xaa>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d104      	bne.n	8002f56 <HAL_TIM_PWM_Start+0xa2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f54:	e003      	b.n	8002f5e <HAL_TIM_PWM_Start+0xaa>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2201      	movs	r2, #1
 8002f64:	6839      	ldr	r1, [r7, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 fd64 	bl	8003a34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1c      	ldr	r2, [pc, #112]	; (8002fe4 <HAL_TIM_PWM_Start+0x130>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d107      	bne.n	8002f86 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a16      	ldr	r2, [pc, #88]	; (8002fe4 <HAL_TIM_PWM_Start+0x130>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d009      	beq.n	8002fa4 <HAL_TIM_PWM_Start+0xf0>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f98:	d004      	beq.n	8002fa4 <HAL_TIM_PWM_Start+0xf0>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <HAL_TIM_PWM_Start+0x134>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d111      	bne.n	8002fc8 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b06      	cmp	r3, #6
 8002fb4:	d010      	beq.n	8002fd8 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 0201 	orr.w	r2, r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc6:	e007      	b.n	8002fd8 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40012c00 	.word	0x40012c00
 8002fe8:	40000400 	.word	0x40000400

08002fec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d122      	bne.n	8003048 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b02      	cmp	r3, #2
 800300e:	d11b      	bne.n	8003048 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0202 	mvn.w	r2, #2
 8003018:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fa6f 	bl	8003512 <HAL_TIM_IC_CaptureCallback>
 8003034:	e005      	b.n	8003042 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fa62 	bl	8003500 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fa71 	bl	8003524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b04      	cmp	r3, #4
 8003054:	d122      	bne.n	800309c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b04      	cmp	r3, #4
 8003062:	d11b      	bne.n	800309c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f06f 0204 	mvn.w	r2, #4
 800306c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2202      	movs	r2, #2
 8003072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fa45 	bl	8003512 <HAL_TIM_IC_CaptureCallback>
 8003088:	e005      	b.n	8003096 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fa38 	bl	8003500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 fa47 	bl	8003524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d122      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d11b      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0208 	mvn.w	r2, #8
 80030c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2204      	movs	r2, #4
 80030c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fa1b 	bl	8003512 <HAL_TIM_IC_CaptureCallback>
 80030dc:	e005      	b.n	80030ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fa0e 	bl	8003500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fa1d 	bl	8003524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	2b10      	cmp	r3, #16
 80030fc:	d122      	bne.n	8003144 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	2b10      	cmp	r3, #16
 800310a:	d11b      	bne.n	8003144 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0210 	mvn.w	r2, #16
 8003114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2208      	movs	r2, #8
 800311a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f9f1 	bl	8003512 <HAL_TIM_IC_CaptureCallback>
 8003130:	e005      	b.n	800313e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f9e4 	bl	8003500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f9f3 	bl	8003524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b01      	cmp	r3, #1
 8003150:	d10e      	bne.n	8003170 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b01      	cmp	r3, #1
 800315e:	d107      	bne.n	8003170 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0201 	mvn.w	r2, #1
 8003168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fe fbca 	bl	8001904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317a:	2b80      	cmp	r3, #128	; 0x80
 800317c:	d10e      	bne.n	800319c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003188:	2b80      	cmp	r3, #128	; 0x80
 800318a:	d107      	bne.n	800319c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fcd1 	bl	8003b3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a6:	2b40      	cmp	r3, #64	; 0x40
 80031a8:	d10e      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b4:	2b40      	cmp	r3, #64	; 0x40
 80031b6:	d107      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f9b7 	bl	8003536 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	d10e      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d107      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0220 	mvn.w	r2, #32
 80031ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fc9c 	bl	8003b2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031f4:	bf00      	nop
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003212:	2302      	movs	r3, #2
 8003214:	e0ac      	b.n	8003370 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b0c      	cmp	r3, #12
 8003222:	f200 809f 	bhi.w	8003364 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003226:	a201      	add	r2, pc, #4	; (adr r2, 800322c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322c:	08003261 	.word	0x08003261
 8003230:	08003365 	.word	0x08003365
 8003234:	08003365 	.word	0x08003365
 8003238:	08003365 	.word	0x08003365
 800323c:	080032a1 	.word	0x080032a1
 8003240:	08003365 	.word	0x08003365
 8003244:	08003365 	.word	0x08003365
 8003248:	08003365 	.word	0x08003365
 800324c:	080032e3 	.word	0x080032e3
 8003250:	08003365 	.word	0x08003365
 8003254:	08003365 	.word	0x08003365
 8003258:	08003365 	.word	0x08003365
 800325c:	08003323 	.word	0x08003323
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f9c6 	bl	80035f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0208 	orr.w	r2, r2, #8
 800327a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0204 	bic.w	r2, r2, #4
 800328a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6999      	ldr	r1, [r3, #24]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	619a      	str	r2, [r3, #24]
      break;
 800329e:	e062      	b.n	8003366 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fa0c 	bl	80036c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6999      	ldr	r1, [r3, #24]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	021a      	lsls	r2, r3, #8
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	619a      	str	r2, [r3, #24]
      break;
 80032e0:	e041      	b.n	8003366 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fa55 	bl	8003798 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0208 	orr.w	r2, r2, #8
 80032fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0204 	bic.w	r2, r2, #4
 800330c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69d9      	ldr	r1, [r3, #28]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	61da      	str	r2, [r3, #28]
      break;
 8003320:	e021      	b.n	8003366 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68b9      	ldr	r1, [r7, #8]
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fa9f 	bl	800386c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69da      	ldr	r2, [r3, #28]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800333c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69da      	ldr	r2, [r3, #28]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69d9      	ldr	r1, [r3, #28]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	021a      	lsls	r2, r3, #8
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	61da      	str	r2, [r3, #28]
      break;
 8003362:	e000      	b.n	8003366 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003364:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_TIM_ConfigClockSource+0x18>
 800338c:	2302      	movs	r3, #2
 800338e:	e0b3      	b.n	80034f8 <HAL_TIM_ConfigClockSource+0x180>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c8:	d03e      	beq.n	8003448 <HAL_TIM_ConfigClockSource+0xd0>
 80033ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ce:	f200 8087 	bhi.w	80034e0 <HAL_TIM_ConfigClockSource+0x168>
 80033d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d6:	f000 8085 	beq.w	80034e4 <HAL_TIM_ConfigClockSource+0x16c>
 80033da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033de:	d87f      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x168>
 80033e0:	2b70      	cmp	r3, #112	; 0x70
 80033e2:	d01a      	beq.n	800341a <HAL_TIM_ConfigClockSource+0xa2>
 80033e4:	2b70      	cmp	r3, #112	; 0x70
 80033e6:	d87b      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x168>
 80033e8:	2b60      	cmp	r3, #96	; 0x60
 80033ea:	d050      	beq.n	800348e <HAL_TIM_ConfigClockSource+0x116>
 80033ec:	2b60      	cmp	r3, #96	; 0x60
 80033ee:	d877      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x168>
 80033f0:	2b50      	cmp	r3, #80	; 0x50
 80033f2:	d03c      	beq.n	800346e <HAL_TIM_ConfigClockSource+0xf6>
 80033f4:	2b50      	cmp	r3, #80	; 0x50
 80033f6:	d873      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x168>
 80033f8:	2b40      	cmp	r3, #64	; 0x40
 80033fa:	d058      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0x136>
 80033fc:	2b40      	cmp	r3, #64	; 0x40
 80033fe:	d86f      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x168>
 8003400:	2b30      	cmp	r3, #48	; 0x30
 8003402:	d064      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x156>
 8003404:	2b30      	cmp	r3, #48	; 0x30
 8003406:	d86b      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x168>
 8003408:	2b20      	cmp	r3, #32
 800340a:	d060      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x156>
 800340c:	2b20      	cmp	r3, #32
 800340e:	d867      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x168>
 8003410:	2b00      	cmp	r3, #0
 8003412:	d05c      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x156>
 8003414:	2b10      	cmp	r3, #16
 8003416:	d05a      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003418:	e062      	b.n	80034e0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6899      	ldr	r1, [r3, #8]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f000 fae4 	bl	80039f6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800343c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	609a      	str	r2, [r3, #8]
      break;
 8003446:	e04e      	b.n	80034e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	6899      	ldr	r1, [r3, #8]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f000 facd 	bl	80039f6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800346a:	609a      	str	r2, [r3, #8]
      break;
 800346c:	e03b      	b.n	80034e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6859      	ldr	r1, [r3, #4]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	461a      	mov	r2, r3
 800347c:	f000 fa44 	bl	8003908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2150      	movs	r1, #80	; 0x50
 8003486:	4618      	mov	r0, r3
 8003488:	f000 fa9b 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 800348c:	e02b      	b.n	80034e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6859      	ldr	r1, [r3, #4]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	461a      	mov	r2, r3
 800349c:	f000 fa62 	bl	8003964 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2160      	movs	r1, #96	; 0x60
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fa8b 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 80034ac:	e01b      	b.n	80034e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	6859      	ldr	r1, [r3, #4]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	461a      	mov	r2, r3
 80034bc:	f000 fa24 	bl	8003908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2140      	movs	r1, #64	; 0x40
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fa7b 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 80034cc:	e00b      	b.n	80034e6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4619      	mov	r1, r3
 80034d8:	4610      	mov	r0, r2
 80034da:	f000 fa72 	bl	80039c2 <TIM_ITRx_SetConfig>
        break;
 80034de:	e002      	b.n	80034e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034e0:	bf00      	nop
 80034e2:	e000      	b.n	80034e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr

08003512 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr

08003524 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr

08003536 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr

08003548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a25      	ldr	r2, [pc, #148]	; (80035f0 <TIM_Base_SetConfig+0xa8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d007      	beq.n	8003570 <TIM_Base_SetConfig+0x28>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003566:	d003      	beq.n	8003570 <TIM_Base_SetConfig+0x28>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a22      	ldr	r2, [pc, #136]	; (80035f4 <TIM_Base_SetConfig+0xac>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d108      	bne.n	8003582 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a1a      	ldr	r2, [pc, #104]	; (80035f0 <TIM_Base_SetConfig+0xa8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d007      	beq.n	800359a <TIM_Base_SetConfig+0x52>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003590:	d003      	beq.n	800359a <TIM_Base_SetConfig+0x52>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a17      	ldr	r2, [pc, #92]	; (80035f4 <TIM_Base_SetConfig+0xac>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d108      	bne.n	80035ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a07      	ldr	r2, [pc, #28]	; (80035f0 <TIM_Base_SetConfig+0xa8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d103      	bne.n	80035e0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	615a      	str	r2, [r3, #20]
}
 80035e6:	bf00      	nop
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	40012c00 	.word	0x40012c00
 80035f4:	40000400 	.word	0x40000400

080035f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	f023 0201 	bic.w	r2, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0303 	bic.w	r3, r3, #3
 800362e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f023 0302 	bic.w	r3, r3, #2
 8003640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a1c      	ldr	r2, [pc, #112]	; (80036c0 <TIM_OC1_SetConfig+0xc8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d10c      	bne.n	800366e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f023 0308 	bic.w	r3, r3, #8
 800365a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f023 0304 	bic.w	r3, r3, #4
 800366c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a13      	ldr	r2, [pc, #76]	; (80036c0 <TIM_OC1_SetConfig+0xc8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d111      	bne.n	800369a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800367c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	621a      	str	r2, [r3, #32]
}
 80036b4:	bf00      	nop
 80036b6:	371c      	adds	r7, #28
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40012c00 	.word	0x40012c00

080036c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	f023 0210 	bic.w	r2, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f023 0320 	bic.w	r3, r3, #32
 800370e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a1d      	ldr	r2, [pc, #116]	; (8003794 <TIM_OC2_SetConfig+0xd0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d10d      	bne.n	8003740 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800372a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800373e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a14      	ldr	r2, [pc, #80]	; (8003794 <TIM_OC2_SetConfig+0xd0>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d113      	bne.n	8003770 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800374e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	621a      	str	r2, [r3, #32]
}
 800378a:	bf00      	nop
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr
 8003794:	40012c00 	.word	0x40012c00

08003798 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0303 	bic.w	r3, r3, #3
 80037ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a1d      	ldr	r2, [pc, #116]	; (8003868 <TIM_OC3_SetConfig+0xd0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d10d      	bne.n	8003812 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	4313      	orrs	r3, r2
 8003808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a14      	ldr	r2, [pc, #80]	; (8003868 <TIM_OC3_SetConfig+0xd0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d113      	bne.n	8003842 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	621a      	str	r2, [r3, #32]
}
 800385c:	bf00      	nop
 800385e:	371c      	adds	r7, #28
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40012c00 	.word	0x40012c00

0800386c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800389a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	021b      	lsls	r3, r3, #8
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	031b      	lsls	r3, r3, #12
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a0f      	ldr	r2, [pc, #60]	; (8003904 <TIM_OC4_SetConfig+0x98>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d109      	bne.n	80038e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	019b      	lsls	r3, r3, #6
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	621a      	str	r2, [r3, #32]
}
 80038fa:	bf00      	nop
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	40012c00 	.word	0x40012c00

08003908 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	f023 0201 	bic.w	r2, r3, #1
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f023 030a 	bic.w	r3, r3, #10
 8003944:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4313      	orrs	r3, r2
 800394c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	621a      	str	r2, [r3, #32]
}
 800395a:	bf00      	nop
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	f023 0210 	bic.w	r2, r3, #16
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800398e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	031b      	lsls	r3, r3, #12
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	621a      	str	r2, [r3, #32]
}
 80039b8:	bf00      	nop
 80039ba:	371c      	adds	r7, #28
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr

080039c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b085      	sub	sp, #20
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	f043 0307 	orr.w	r3, r3, #7
 80039e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	609a      	str	r2, [r3, #8]
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr

080039f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b087      	sub	sp, #28
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
 8003a02:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a10:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	021a      	lsls	r2, r3, #8
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	609a      	str	r2, [r3, #8]
}
 8003a2a:	bf00      	nop
 8003a2c:	371c      	adds	r7, #28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	2201      	movs	r2, #1
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a1a      	ldr	r2, [r3, #32]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	43db      	mvns	r3, r3
 8003a56:	401a      	ands	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a1a      	ldr	r2, [r3, #32]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f003 031f 	and.w	r3, r3, #31
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	621a      	str	r2, [r3, #32]
}
 8003a72:	bf00      	nop
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr

08003a7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e041      	b.n	8003b18 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a14      	ldr	r2, [pc, #80]	; (8003b24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d009      	beq.n	8003aec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae0:	d004      	beq.n	8003aec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a10      	ldr	r2, [pc, #64]	; (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d10c      	bne.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40012c00 	.word	0x40012c00
 8003b28:	40000400 	.word	0x40000400

08003b2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr

08003b3e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr

08003b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e03f      	b.n	8003be2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fd ffca 	bl	8001b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2224      	movs	r2, #36	; 0x24
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 fc85 	bl	80044a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695a      	ldr	r2, [r3, #20]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b08a      	sub	sp, #40	; 0x28
 8003bee:	af02      	add	r7, sp, #8
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	603b      	str	r3, [r7, #0]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b20      	cmp	r3, #32
 8003c08:	d17c      	bne.n	8003d04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <HAL_UART_Transmit+0x2c>
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e075      	b.n	8003d06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_UART_Transmit+0x3e>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e06e      	b.n	8003d06 <HAL_UART_Transmit+0x11c>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2221      	movs	r2, #33	; 0x21
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c3e:	f7fe f8b9 	bl	8001db4 <HAL_GetTick>
 8003c42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	88fa      	ldrh	r2, [r7, #6]
 8003c48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	88fa      	ldrh	r2, [r7, #6]
 8003c4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c58:	d108      	bne.n	8003c6c <HAL_UART_Transmit+0x82>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d104      	bne.n	8003c6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	e003      	b.n	8003c74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c7c:	e02a      	b.n	8003cd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2200      	movs	r2, #0
 8003c86:	2180      	movs	r1, #128	; 0x80
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 fa38 	bl	80040fe <UART_WaitOnFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e036      	b.n	8003d06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10b      	bne.n	8003cb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	3302      	adds	r3, #2
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	e007      	b.n	8003cc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	781a      	ldrb	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1cf      	bne.n	8003c7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2140      	movs	r1, #64	; 0x40
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 fa08 	bl	80040fe <UART_WaitOnFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e006      	b.n	8003d06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	e000      	b.n	8003d06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d04:	2302      	movs	r3, #2
  }
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3720      	adds	r7, #32
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d11d      	bne.n	8003d64 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <HAL_UART_Receive_IT+0x26>
 8003d2e:	88fb      	ldrh	r3, [r7, #6]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e016      	b.n	8003d66 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_UART_Receive_IT+0x38>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e00f      	b.n	8003d66 <HAL_UART_Receive_IT+0x58>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003d54:	88fb      	ldrh	r3, [r7, #6]
 8003d56:	461a      	mov	r2, r3
 8003d58:	68b9      	ldr	r1, [r7, #8]
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 fa19 	bl	8004192 <UART_Start_Receive_IT>
 8003d60:	4603      	mov	r3, r0
 8003d62:	e000      	b.n	8003d66 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d64:	2302      	movs	r3, #2
  }
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08a      	sub	sp, #40	; 0x28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10d      	bne.n	8003dc2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x52>
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fac9 	bl	8004352 <UART_Receive_IT>
      return;
 8003dc0:	e17b      	b.n	80040ba <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80b1 	beq.w	8003f2c <HAL_UART_IRQHandler+0x1bc>
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d105      	bne.n	8003de0 <HAL_UART_IRQHandler+0x70>
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 80a6 	beq.w	8003f2c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <HAL_UART_IRQHandler+0x90>
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d005      	beq.n	8003e00 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	f043 0201 	orr.w	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <HAL_UART_IRQHandler+0xb0>
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	f043 0202 	orr.w	r2, r3, #2
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_UART_IRQHandler+0xd0>
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	f043 0204 	orr.w	r2, r3, #4
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00f      	beq.n	8003e6a <HAL_UART_IRQHandler+0xfa>
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d104      	bne.n	8003e5e <HAL_UART_IRQHandler+0xee>
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f043 0208 	orr.w	r2, r3, #8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 811e 	beq.w	80040b0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <HAL_UART_IRQHandler+0x11e>
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	f003 0320 	and.w	r3, r3, #32
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 fa62 	bl	8004352 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bf14      	ite	ne
 8003e9c:	2301      	movne	r3, #1
 8003e9e:	2300      	moveq	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d102      	bne.n	8003eb6 <HAL_UART_IRQHandler+0x146>
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d031      	beq.n	8003f1a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f9a4 	bl	8004204 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d023      	beq.n	8003f12 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695a      	ldr	r2, [r3, #20]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d013      	beq.n	8003f0a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	4a76      	ldr	r2, [pc, #472]	; (80040c0 <HAL_UART_IRQHandler+0x350>)
 8003ee8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fe f8b2 	bl	8002058 <HAL_DMA_Abort_IT>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d016      	beq.n	8003f28 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f04:	4610      	mov	r0, r2
 8003f06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f08:	e00e      	b.n	8003f28 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f8e3 	bl	80040d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f10:	e00a      	b.n	8003f28 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f8df 	bl	80040d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f18:	e006      	b.n	8003f28 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f8db 	bl	80040d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f26:	e0c3      	b.n	80040b0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f28:	bf00      	nop
    return;
 8003f2a:	e0c1      	b.n	80040b0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	f040 80a1 	bne.w	8004078 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 809b 	beq.w	8004078 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8095 	beq.w	8004078 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d04e      	beq.n	8004010 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003f7c:	8a3b      	ldrh	r3, [r7, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 8098 	beq.w	80040b4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f88:	8a3a      	ldrh	r2, [r7, #16]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	f080 8092 	bcs.w	80040b4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8a3a      	ldrh	r2, [r7, #16]
 8003f94:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d02b      	beq.n	8003ff8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fae:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0201 	bic.w	r2, r2, #1
 8003fbe:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695a      	ldr	r2, [r3, #20]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fce:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0210 	bic.w	r2, r2, #16
 8003fec:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fd fff5 	bl	8001fe2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004000:	b29b      	uxth	r3, r3
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	b29b      	uxth	r3, r3
 8004006:	4619      	mov	r1, r3
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f86d 	bl	80040e8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800400e:	e051      	b.n	80040b4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004018:	b29b      	uxth	r3, r3
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d047      	beq.n	80040b8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004028:	8a7b      	ldrh	r3, [r7, #18]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d044      	beq.n	80040b8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800403c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695a      	ldr	r2, [r3, #20]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0201 	bic.w	r2, r2, #1
 800404c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0210 	bic.w	r2, r2, #16
 800406a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800406c:	8a7b      	ldrh	r3, [r7, #18]
 800406e:	4619      	mov	r1, r3
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f839 	bl	80040e8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004076:	e01f      	b.n	80040b8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <HAL_UART_IRQHandler+0x324>
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f8f9 	bl	8004284 <UART_Transmit_IT>
    return;
 8004092:	e012      	b.n	80040ba <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00d      	beq.n	80040ba <HAL_UART_IRQHandler+0x34a>
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f93a 	bl	8004322 <UART_EndTransmit_IT>
    return;
 80040ae:	e004      	b.n	80040ba <HAL_UART_IRQHandler+0x34a>
    return;
 80040b0:	bf00      	nop
 80040b2:	e002      	b.n	80040ba <HAL_UART_IRQHandler+0x34a>
      return;
 80040b4:	bf00      	nop
 80040b6:	e000      	b.n	80040ba <HAL_UART_IRQHandler+0x34a>
      return;
 80040b8:	bf00      	nop
  }
}
 80040ba:	3728      	adds	r7, #40	; 0x28
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	0800425d 	.word	0x0800425d

080040c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr

080040d6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr

080040e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bc80      	pop	{r7}
 80040fc:	4770      	bx	lr

080040fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	60f8      	str	r0, [r7, #12]
 8004106:	60b9      	str	r1, [r7, #8]
 8004108:	603b      	str	r3, [r7, #0]
 800410a:	4613      	mov	r3, r2
 800410c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800410e:	e02c      	b.n	800416a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004116:	d028      	beq.n	800416a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <UART_WaitOnFlagUntilTimeout+0x30>
 800411e:	f7fd fe49 	bl	8001db4 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	429a      	cmp	r2, r3
 800412c:	d21d      	bcs.n	800416a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800413c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695a      	ldr	r2, [r3, #20]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0201 	bic.w	r2, r2, #1
 800414c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e00f      	b.n	800418a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4013      	ands	r3, r2
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	429a      	cmp	r2, r3
 8004178:	bf0c      	ite	eq
 800417a:	2301      	moveq	r3, #1
 800417c:	2300      	movne	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	461a      	mov	r2, r3
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	429a      	cmp	r2, r3
 8004186:	d0c3      	beq.n	8004110 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004192:	b480      	push	{r7}
 8004194:	b085      	sub	sp, #20
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	4613      	mov	r3, r2
 800419e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	88fa      	ldrh	r2, [r7, #6]
 80041aa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	88fa      	ldrh	r2, [r7, #6]
 80041b0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2222      	movs	r2, #34	; 0x22
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695a      	ldr	r2, [r3, #20]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0201 	orr.w	r2, r2, #1
 80041e6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0220 	orr.w	r2, r2, #32
 80041f6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr

08004204 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800421a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695a      	ldr	r2, [r3, #20]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0201 	bic.w	r2, r2, #1
 800422a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	2b01      	cmp	r3, #1
 8004232:	d107      	bne.n	8004244 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0210 	bic.w	r2, r2, #16
 8004242:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr

0800425c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f7ff ff2d 	bl	80040d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800427c:	bf00      	nop
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b21      	cmp	r3, #33	; 0x21
 8004296:	d13e      	bne.n	8004316 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a0:	d114      	bne.n	80042cc <UART_Transmit_IT+0x48>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d110      	bne.n	80042cc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	1c9a      	adds	r2, r3, #2
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	621a      	str	r2, [r3, #32]
 80042ca:	e008      	b.n	80042de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	1c59      	adds	r1, r3, #1
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6211      	str	r1, [r2, #32]
 80042d6:	781a      	ldrb	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	4619      	mov	r1, r3
 80042ec:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10f      	bne.n	8004312 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004300:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004310:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	e000      	b.n	8004318 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004316:	2302      	movs	r3, #2
  }
}
 8004318:	4618      	mov	r0, r3
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr

08004322 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b082      	sub	sp, #8
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004338:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff febe 	bl	80040c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b086      	sub	sp, #24
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b22      	cmp	r3, #34	; 0x22
 8004364:	f040 8099 	bne.w	800449a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004370:	d117      	bne.n	80043a2 <UART_Receive_IT+0x50>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d113      	bne.n	80043a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	b29b      	uxth	r3, r3
 800438c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004390:	b29a      	uxth	r2, r3
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439a:	1c9a      	adds	r2, r3, #2
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	629a      	str	r2, [r3, #40]	; 0x28
 80043a0:	e026      	b.n	80043f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b4:	d007      	beq.n	80043c6 <UART_Receive_IT+0x74>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10a      	bne.n	80043d4 <UART_Receive_IT+0x82>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	701a      	strb	r2, [r3, #0]
 80043d2:	e008      	b.n	80043e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	4619      	mov	r1, r3
 80043fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004400:	2b00      	cmp	r3, #0
 8004402:	d148      	bne.n	8004496 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0220 	bic.w	r2, r2, #32
 8004412:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004422:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0201 	bic.w	r2, r2, #1
 8004432:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	2b01      	cmp	r3, #1
 8004442:	d123      	bne.n	800448c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0210 	bic.w	r2, r2, #16
 8004458:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b10      	cmp	r3, #16
 8004466:	d10a      	bne.n	800447e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004482:	4619      	mov	r1, r3
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff fe2f 	bl	80040e8 <HAL_UARTEx_RxEventCallback>
 800448a:	e002      	b.n	8004492 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7fc ffdb 	bl	8001448 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	e002      	b.n	800449c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	e000      	b.n	800449c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800449a:	2302      	movs	r3, #2
  }
}
 800449c:	4618      	mov	r0, r3
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044de:	f023 030c 	bic.w	r3, r3, #12
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6812      	ldr	r2, [r2, #0]
 80044e6:	68b9      	ldr	r1, [r7, #8]
 80044e8:	430b      	orrs	r3, r1
 80044ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a2c      	ldr	r2, [pc, #176]	; (80045b8 <UART_SetConfig+0x114>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d103      	bne.n	8004514 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800450c:	f7fe fbac 	bl	8002c68 <HAL_RCC_GetPCLK2Freq>
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	e002      	b.n	800451a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004514:	f7fe fb94 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 8004518:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	009a      	lsls	r2, r3, #2
 8004524:	441a      	add	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004530:	4a22      	ldr	r2, [pc, #136]	; (80045bc <UART_SetConfig+0x118>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	0119      	lsls	r1, r3, #4
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4613      	mov	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	009a      	lsls	r2, r3, #2
 8004544:	441a      	add	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004550:	4b1a      	ldr	r3, [pc, #104]	; (80045bc <UART_SetConfig+0x118>)
 8004552:	fba3 0302 	umull	r0, r3, r3, r2
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	2064      	movs	r0, #100	; 0x64
 800455a:	fb00 f303 	mul.w	r3, r0, r3
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	3332      	adds	r3, #50	; 0x32
 8004564:	4a15      	ldr	r2, [pc, #84]	; (80045bc <UART_SetConfig+0x118>)
 8004566:	fba2 2303 	umull	r2, r3, r2, r3
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004570:	4419      	add	r1, r3
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	009a      	lsls	r2, r3, #2
 800457c:	441a      	add	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	fbb2 f2f3 	udiv	r2, r2, r3
 8004588:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <UART_SetConfig+0x118>)
 800458a:	fba3 0302 	umull	r0, r3, r3, r2
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	2064      	movs	r0, #100	; 0x64
 8004592:	fb00 f303 	mul.w	r3, r0, r3
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	3332      	adds	r3, #50	; 0x32
 800459c:	4a07      	ldr	r2, [pc, #28]	; (80045bc <UART_SetConfig+0x118>)
 800459e:	fba2 2303 	umull	r2, r3, r2, r3
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	f003 020f 	and.w	r2, r3, #15
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	440a      	add	r2, r1
 80045ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80045b0:	bf00      	nop
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40013800 	.word	0x40013800
 80045bc:	51eb851f 	.word	0x51eb851f

080045c0 <__errno>:
 80045c0:	4b01      	ldr	r3, [pc, #4]	; (80045c8 <__errno+0x8>)
 80045c2:	6818      	ldr	r0, [r3, #0]
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	20000034 	.word	0x20000034

080045cc <__libc_init_array>:
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	2600      	movs	r6, #0
 80045d0:	4d0c      	ldr	r5, [pc, #48]	; (8004604 <__libc_init_array+0x38>)
 80045d2:	4c0d      	ldr	r4, [pc, #52]	; (8004608 <__libc_init_array+0x3c>)
 80045d4:	1b64      	subs	r4, r4, r5
 80045d6:	10a4      	asrs	r4, r4, #2
 80045d8:	42a6      	cmp	r6, r4
 80045da:	d109      	bne.n	80045f0 <__libc_init_array+0x24>
 80045dc:	f000 fc5c 	bl	8004e98 <_init>
 80045e0:	2600      	movs	r6, #0
 80045e2:	4d0a      	ldr	r5, [pc, #40]	; (800460c <__libc_init_array+0x40>)
 80045e4:	4c0a      	ldr	r4, [pc, #40]	; (8004610 <__libc_init_array+0x44>)
 80045e6:	1b64      	subs	r4, r4, r5
 80045e8:	10a4      	asrs	r4, r4, #2
 80045ea:	42a6      	cmp	r6, r4
 80045ec:	d105      	bne.n	80045fa <__libc_init_array+0x2e>
 80045ee:	bd70      	pop	{r4, r5, r6, pc}
 80045f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f4:	4798      	blx	r3
 80045f6:	3601      	adds	r6, #1
 80045f8:	e7ee      	b.n	80045d8 <__libc_init_array+0xc>
 80045fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80045fe:	4798      	blx	r3
 8004600:	3601      	adds	r6, #1
 8004602:	e7f2      	b.n	80045ea <__libc_init_array+0x1e>
 8004604:	080051a8 	.word	0x080051a8
 8004608:	080051a8 	.word	0x080051a8
 800460c:	080051a8 	.word	0x080051a8
 8004610:	080051ac 	.word	0x080051ac

08004614 <memcpy>:
 8004614:	440a      	add	r2, r1
 8004616:	4291      	cmp	r1, r2
 8004618:	f100 33ff 	add.w	r3, r0, #4294967295
 800461c:	d100      	bne.n	8004620 <memcpy+0xc>
 800461e:	4770      	bx	lr
 8004620:	b510      	push	{r4, lr}
 8004622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004626:	4291      	cmp	r1, r2
 8004628:	f803 4f01 	strb.w	r4, [r3, #1]!
 800462c:	d1f9      	bne.n	8004622 <memcpy+0xe>
 800462e:	bd10      	pop	{r4, pc}

08004630 <memset>:
 8004630:	4603      	mov	r3, r0
 8004632:	4402      	add	r2, r0
 8004634:	4293      	cmp	r3, r2
 8004636:	d100      	bne.n	800463a <memset+0xa>
 8004638:	4770      	bx	lr
 800463a:	f803 1b01 	strb.w	r1, [r3], #1
 800463e:	e7f9      	b.n	8004634 <memset+0x4>

08004640 <siprintf>:
 8004640:	b40e      	push	{r1, r2, r3}
 8004642:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004646:	b500      	push	{lr}
 8004648:	b09c      	sub	sp, #112	; 0x70
 800464a:	ab1d      	add	r3, sp, #116	; 0x74
 800464c:	9002      	str	r0, [sp, #8]
 800464e:	9006      	str	r0, [sp, #24]
 8004650:	9107      	str	r1, [sp, #28]
 8004652:	9104      	str	r1, [sp, #16]
 8004654:	4808      	ldr	r0, [pc, #32]	; (8004678 <siprintf+0x38>)
 8004656:	4909      	ldr	r1, [pc, #36]	; (800467c <siprintf+0x3c>)
 8004658:	f853 2b04 	ldr.w	r2, [r3], #4
 800465c:	9105      	str	r1, [sp, #20]
 800465e:	6800      	ldr	r0, [r0, #0]
 8004660:	a902      	add	r1, sp, #8
 8004662:	9301      	str	r3, [sp, #4]
 8004664:	f000 f868 	bl	8004738 <_svfiprintf_r>
 8004668:	2200      	movs	r2, #0
 800466a:	9b02      	ldr	r3, [sp, #8]
 800466c:	701a      	strb	r2, [r3, #0]
 800466e:	b01c      	add	sp, #112	; 0x70
 8004670:	f85d eb04 	ldr.w	lr, [sp], #4
 8004674:	b003      	add	sp, #12
 8004676:	4770      	bx	lr
 8004678:	20000034 	.word	0x20000034
 800467c:	ffff0208 	.word	0xffff0208

08004680 <__ssputs_r>:
 8004680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004684:	688e      	ldr	r6, [r1, #8]
 8004686:	4682      	mov	sl, r0
 8004688:	429e      	cmp	r6, r3
 800468a:	460c      	mov	r4, r1
 800468c:	4690      	mov	r8, r2
 800468e:	461f      	mov	r7, r3
 8004690:	d838      	bhi.n	8004704 <__ssputs_r+0x84>
 8004692:	898a      	ldrh	r2, [r1, #12]
 8004694:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004698:	d032      	beq.n	8004700 <__ssputs_r+0x80>
 800469a:	6825      	ldr	r5, [r4, #0]
 800469c:	6909      	ldr	r1, [r1, #16]
 800469e:	3301      	adds	r3, #1
 80046a0:	eba5 0901 	sub.w	r9, r5, r1
 80046a4:	6965      	ldr	r5, [r4, #20]
 80046a6:	444b      	add	r3, r9
 80046a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046b0:	106d      	asrs	r5, r5, #1
 80046b2:	429d      	cmp	r5, r3
 80046b4:	bf38      	it	cc
 80046b6:	461d      	movcc	r5, r3
 80046b8:	0553      	lsls	r3, r2, #21
 80046ba:	d531      	bpl.n	8004720 <__ssputs_r+0xa0>
 80046bc:	4629      	mov	r1, r5
 80046be:	f000 fb45 	bl	8004d4c <_malloc_r>
 80046c2:	4606      	mov	r6, r0
 80046c4:	b950      	cbnz	r0, 80046dc <__ssputs_r+0x5c>
 80046c6:	230c      	movs	r3, #12
 80046c8:	f04f 30ff 	mov.w	r0, #4294967295
 80046cc:	f8ca 3000 	str.w	r3, [sl]
 80046d0:	89a3      	ldrh	r3, [r4, #12]
 80046d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046d6:	81a3      	strh	r3, [r4, #12]
 80046d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046dc:	464a      	mov	r2, r9
 80046de:	6921      	ldr	r1, [r4, #16]
 80046e0:	f7ff ff98 	bl	8004614 <memcpy>
 80046e4:	89a3      	ldrh	r3, [r4, #12]
 80046e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ee:	81a3      	strh	r3, [r4, #12]
 80046f0:	6126      	str	r6, [r4, #16]
 80046f2:	444e      	add	r6, r9
 80046f4:	6026      	str	r6, [r4, #0]
 80046f6:	463e      	mov	r6, r7
 80046f8:	6165      	str	r5, [r4, #20]
 80046fa:	eba5 0509 	sub.w	r5, r5, r9
 80046fe:	60a5      	str	r5, [r4, #8]
 8004700:	42be      	cmp	r6, r7
 8004702:	d900      	bls.n	8004706 <__ssputs_r+0x86>
 8004704:	463e      	mov	r6, r7
 8004706:	4632      	mov	r2, r6
 8004708:	4641      	mov	r1, r8
 800470a:	6820      	ldr	r0, [r4, #0]
 800470c:	f000 fab8 	bl	8004c80 <memmove>
 8004710:	68a3      	ldr	r3, [r4, #8]
 8004712:	6822      	ldr	r2, [r4, #0]
 8004714:	1b9b      	subs	r3, r3, r6
 8004716:	4432      	add	r2, r6
 8004718:	2000      	movs	r0, #0
 800471a:	60a3      	str	r3, [r4, #8]
 800471c:	6022      	str	r2, [r4, #0]
 800471e:	e7db      	b.n	80046d8 <__ssputs_r+0x58>
 8004720:	462a      	mov	r2, r5
 8004722:	f000 fb6d 	bl	8004e00 <_realloc_r>
 8004726:	4606      	mov	r6, r0
 8004728:	2800      	cmp	r0, #0
 800472a:	d1e1      	bne.n	80046f0 <__ssputs_r+0x70>
 800472c:	4650      	mov	r0, sl
 800472e:	6921      	ldr	r1, [r4, #16]
 8004730:	f000 fac0 	bl	8004cb4 <_free_r>
 8004734:	e7c7      	b.n	80046c6 <__ssputs_r+0x46>
	...

08004738 <_svfiprintf_r>:
 8004738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800473c:	4698      	mov	r8, r3
 800473e:	898b      	ldrh	r3, [r1, #12]
 8004740:	4607      	mov	r7, r0
 8004742:	061b      	lsls	r3, r3, #24
 8004744:	460d      	mov	r5, r1
 8004746:	4614      	mov	r4, r2
 8004748:	b09d      	sub	sp, #116	; 0x74
 800474a:	d50e      	bpl.n	800476a <_svfiprintf_r+0x32>
 800474c:	690b      	ldr	r3, [r1, #16]
 800474e:	b963      	cbnz	r3, 800476a <_svfiprintf_r+0x32>
 8004750:	2140      	movs	r1, #64	; 0x40
 8004752:	f000 fafb 	bl	8004d4c <_malloc_r>
 8004756:	6028      	str	r0, [r5, #0]
 8004758:	6128      	str	r0, [r5, #16]
 800475a:	b920      	cbnz	r0, 8004766 <_svfiprintf_r+0x2e>
 800475c:	230c      	movs	r3, #12
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	f04f 30ff 	mov.w	r0, #4294967295
 8004764:	e0d1      	b.n	800490a <_svfiprintf_r+0x1d2>
 8004766:	2340      	movs	r3, #64	; 0x40
 8004768:	616b      	str	r3, [r5, #20]
 800476a:	2300      	movs	r3, #0
 800476c:	9309      	str	r3, [sp, #36]	; 0x24
 800476e:	2320      	movs	r3, #32
 8004770:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004774:	2330      	movs	r3, #48	; 0x30
 8004776:	f04f 0901 	mov.w	r9, #1
 800477a:	f8cd 800c 	str.w	r8, [sp, #12]
 800477e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004924 <_svfiprintf_r+0x1ec>
 8004782:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004786:	4623      	mov	r3, r4
 8004788:	469a      	mov	sl, r3
 800478a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800478e:	b10a      	cbz	r2, 8004794 <_svfiprintf_r+0x5c>
 8004790:	2a25      	cmp	r2, #37	; 0x25
 8004792:	d1f9      	bne.n	8004788 <_svfiprintf_r+0x50>
 8004794:	ebba 0b04 	subs.w	fp, sl, r4
 8004798:	d00b      	beq.n	80047b2 <_svfiprintf_r+0x7a>
 800479a:	465b      	mov	r3, fp
 800479c:	4622      	mov	r2, r4
 800479e:	4629      	mov	r1, r5
 80047a0:	4638      	mov	r0, r7
 80047a2:	f7ff ff6d 	bl	8004680 <__ssputs_r>
 80047a6:	3001      	adds	r0, #1
 80047a8:	f000 80aa 	beq.w	8004900 <_svfiprintf_r+0x1c8>
 80047ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047ae:	445a      	add	r2, fp
 80047b0:	9209      	str	r2, [sp, #36]	; 0x24
 80047b2:	f89a 3000 	ldrb.w	r3, [sl]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80a2 	beq.w	8004900 <_svfiprintf_r+0x1c8>
 80047bc:	2300      	movs	r3, #0
 80047be:	f04f 32ff 	mov.w	r2, #4294967295
 80047c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047c6:	f10a 0a01 	add.w	sl, sl, #1
 80047ca:	9304      	str	r3, [sp, #16]
 80047cc:	9307      	str	r3, [sp, #28]
 80047ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047d2:	931a      	str	r3, [sp, #104]	; 0x68
 80047d4:	4654      	mov	r4, sl
 80047d6:	2205      	movs	r2, #5
 80047d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047dc:	4851      	ldr	r0, [pc, #324]	; (8004924 <_svfiprintf_r+0x1ec>)
 80047de:	f000 fa41 	bl	8004c64 <memchr>
 80047e2:	9a04      	ldr	r2, [sp, #16]
 80047e4:	b9d8      	cbnz	r0, 800481e <_svfiprintf_r+0xe6>
 80047e6:	06d0      	lsls	r0, r2, #27
 80047e8:	bf44      	itt	mi
 80047ea:	2320      	movmi	r3, #32
 80047ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047f0:	0711      	lsls	r1, r2, #28
 80047f2:	bf44      	itt	mi
 80047f4:	232b      	movmi	r3, #43	; 0x2b
 80047f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047fa:	f89a 3000 	ldrb.w	r3, [sl]
 80047fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004800:	d015      	beq.n	800482e <_svfiprintf_r+0xf6>
 8004802:	4654      	mov	r4, sl
 8004804:	2000      	movs	r0, #0
 8004806:	f04f 0c0a 	mov.w	ip, #10
 800480a:	9a07      	ldr	r2, [sp, #28]
 800480c:	4621      	mov	r1, r4
 800480e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004812:	3b30      	subs	r3, #48	; 0x30
 8004814:	2b09      	cmp	r3, #9
 8004816:	d94e      	bls.n	80048b6 <_svfiprintf_r+0x17e>
 8004818:	b1b0      	cbz	r0, 8004848 <_svfiprintf_r+0x110>
 800481a:	9207      	str	r2, [sp, #28]
 800481c:	e014      	b.n	8004848 <_svfiprintf_r+0x110>
 800481e:	eba0 0308 	sub.w	r3, r0, r8
 8004822:	fa09 f303 	lsl.w	r3, r9, r3
 8004826:	4313      	orrs	r3, r2
 8004828:	46a2      	mov	sl, r4
 800482a:	9304      	str	r3, [sp, #16]
 800482c:	e7d2      	b.n	80047d4 <_svfiprintf_r+0x9c>
 800482e:	9b03      	ldr	r3, [sp, #12]
 8004830:	1d19      	adds	r1, r3, #4
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	9103      	str	r1, [sp, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	bfbb      	ittet	lt
 800483a:	425b      	neglt	r3, r3
 800483c:	f042 0202 	orrlt.w	r2, r2, #2
 8004840:	9307      	strge	r3, [sp, #28]
 8004842:	9307      	strlt	r3, [sp, #28]
 8004844:	bfb8      	it	lt
 8004846:	9204      	strlt	r2, [sp, #16]
 8004848:	7823      	ldrb	r3, [r4, #0]
 800484a:	2b2e      	cmp	r3, #46	; 0x2e
 800484c:	d10c      	bne.n	8004868 <_svfiprintf_r+0x130>
 800484e:	7863      	ldrb	r3, [r4, #1]
 8004850:	2b2a      	cmp	r3, #42	; 0x2a
 8004852:	d135      	bne.n	80048c0 <_svfiprintf_r+0x188>
 8004854:	9b03      	ldr	r3, [sp, #12]
 8004856:	3402      	adds	r4, #2
 8004858:	1d1a      	adds	r2, r3, #4
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	9203      	str	r2, [sp, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	bfb8      	it	lt
 8004862:	f04f 33ff 	movlt.w	r3, #4294967295
 8004866:	9305      	str	r3, [sp, #20]
 8004868:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004934 <_svfiprintf_r+0x1fc>
 800486c:	2203      	movs	r2, #3
 800486e:	4650      	mov	r0, sl
 8004870:	7821      	ldrb	r1, [r4, #0]
 8004872:	f000 f9f7 	bl	8004c64 <memchr>
 8004876:	b140      	cbz	r0, 800488a <_svfiprintf_r+0x152>
 8004878:	2340      	movs	r3, #64	; 0x40
 800487a:	eba0 000a 	sub.w	r0, r0, sl
 800487e:	fa03 f000 	lsl.w	r0, r3, r0
 8004882:	9b04      	ldr	r3, [sp, #16]
 8004884:	3401      	adds	r4, #1
 8004886:	4303      	orrs	r3, r0
 8004888:	9304      	str	r3, [sp, #16]
 800488a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800488e:	2206      	movs	r2, #6
 8004890:	4825      	ldr	r0, [pc, #148]	; (8004928 <_svfiprintf_r+0x1f0>)
 8004892:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004896:	f000 f9e5 	bl	8004c64 <memchr>
 800489a:	2800      	cmp	r0, #0
 800489c:	d038      	beq.n	8004910 <_svfiprintf_r+0x1d8>
 800489e:	4b23      	ldr	r3, [pc, #140]	; (800492c <_svfiprintf_r+0x1f4>)
 80048a0:	bb1b      	cbnz	r3, 80048ea <_svfiprintf_r+0x1b2>
 80048a2:	9b03      	ldr	r3, [sp, #12]
 80048a4:	3307      	adds	r3, #7
 80048a6:	f023 0307 	bic.w	r3, r3, #7
 80048aa:	3308      	adds	r3, #8
 80048ac:	9303      	str	r3, [sp, #12]
 80048ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048b0:	4433      	add	r3, r6
 80048b2:	9309      	str	r3, [sp, #36]	; 0x24
 80048b4:	e767      	b.n	8004786 <_svfiprintf_r+0x4e>
 80048b6:	460c      	mov	r4, r1
 80048b8:	2001      	movs	r0, #1
 80048ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80048be:	e7a5      	b.n	800480c <_svfiprintf_r+0xd4>
 80048c0:	2300      	movs	r3, #0
 80048c2:	f04f 0c0a 	mov.w	ip, #10
 80048c6:	4619      	mov	r1, r3
 80048c8:	3401      	adds	r4, #1
 80048ca:	9305      	str	r3, [sp, #20]
 80048cc:	4620      	mov	r0, r4
 80048ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048d2:	3a30      	subs	r2, #48	; 0x30
 80048d4:	2a09      	cmp	r2, #9
 80048d6:	d903      	bls.n	80048e0 <_svfiprintf_r+0x1a8>
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0c5      	beq.n	8004868 <_svfiprintf_r+0x130>
 80048dc:	9105      	str	r1, [sp, #20]
 80048de:	e7c3      	b.n	8004868 <_svfiprintf_r+0x130>
 80048e0:	4604      	mov	r4, r0
 80048e2:	2301      	movs	r3, #1
 80048e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80048e8:	e7f0      	b.n	80048cc <_svfiprintf_r+0x194>
 80048ea:	ab03      	add	r3, sp, #12
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	462a      	mov	r2, r5
 80048f0:	4638      	mov	r0, r7
 80048f2:	4b0f      	ldr	r3, [pc, #60]	; (8004930 <_svfiprintf_r+0x1f8>)
 80048f4:	a904      	add	r1, sp, #16
 80048f6:	f3af 8000 	nop.w
 80048fa:	1c42      	adds	r2, r0, #1
 80048fc:	4606      	mov	r6, r0
 80048fe:	d1d6      	bne.n	80048ae <_svfiprintf_r+0x176>
 8004900:	89ab      	ldrh	r3, [r5, #12]
 8004902:	065b      	lsls	r3, r3, #25
 8004904:	f53f af2c 	bmi.w	8004760 <_svfiprintf_r+0x28>
 8004908:	9809      	ldr	r0, [sp, #36]	; 0x24
 800490a:	b01d      	add	sp, #116	; 0x74
 800490c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004910:	ab03      	add	r3, sp, #12
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	462a      	mov	r2, r5
 8004916:	4638      	mov	r0, r7
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <_svfiprintf_r+0x1f8>)
 800491a:	a904      	add	r1, sp, #16
 800491c:	f000 f87c 	bl	8004a18 <_printf_i>
 8004920:	e7eb      	b.n	80048fa <_svfiprintf_r+0x1c2>
 8004922:	bf00      	nop
 8004924:	08005174 	.word	0x08005174
 8004928:	0800517e 	.word	0x0800517e
 800492c:	00000000 	.word	0x00000000
 8004930:	08004681 	.word	0x08004681
 8004934:	0800517a 	.word	0x0800517a

08004938 <_printf_common>:
 8004938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800493c:	4616      	mov	r6, r2
 800493e:	4699      	mov	r9, r3
 8004940:	688a      	ldr	r2, [r1, #8]
 8004942:	690b      	ldr	r3, [r1, #16]
 8004944:	4607      	mov	r7, r0
 8004946:	4293      	cmp	r3, r2
 8004948:	bfb8      	it	lt
 800494a:	4613      	movlt	r3, r2
 800494c:	6033      	str	r3, [r6, #0]
 800494e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004952:	460c      	mov	r4, r1
 8004954:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004958:	b10a      	cbz	r2, 800495e <_printf_common+0x26>
 800495a:	3301      	adds	r3, #1
 800495c:	6033      	str	r3, [r6, #0]
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	0699      	lsls	r1, r3, #26
 8004962:	bf42      	ittt	mi
 8004964:	6833      	ldrmi	r3, [r6, #0]
 8004966:	3302      	addmi	r3, #2
 8004968:	6033      	strmi	r3, [r6, #0]
 800496a:	6825      	ldr	r5, [r4, #0]
 800496c:	f015 0506 	ands.w	r5, r5, #6
 8004970:	d106      	bne.n	8004980 <_printf_common+0x48>
 8004972:	f104 0a19 	add.w	sl, r4, #25
 8004976:	68e3      	ldr	r3, [r4, #12]
 8004978:	6832      	ldr	r2, [r6, #0]
 800497a:	1a9b      	subs	r3, r3, r2
 800497c:	42ab      	cmp	r3, r5
 800497e:	dc28      	bgt.n	80049d2 <_printf_common+0x9a>
 8004980:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004984:	1e13      	subs	r3, r2, #0
 8004986:	6822      	ldr	r2, [r4, #0]
 8004988:	bf18      	it	ne
 800498a:	2301      	movne	r3, #1
 800498c:	0692      	lsls	r2, r2, #26
 800498e:	d42d      	bmi.n	80049ec <_printf_common+0xb4>
 8004990:	4649      	mov	r1, r9
 8004992:	4638      	mov	r0, r7
 8004994:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004998:	47c0      	blx	r8
 800499a:	3001      	adds	r0, #1
 800499c:	d020      	beq.n	80049e0 <_printf_common+0xa8>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	68e5      	ldr	r5, [r4, #12]
 80049a2:	f003 0306 	and.w	r3, r3, #6
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	bf18      	it	ne
 80049aa:	2500      	movne	r5, #0
 80049ac:	6832      	ldr	r2, [r6, #0]
 80049ae:	f04f 0600 	mov.w	r6, #0
 80049b2:	68a3      	ldr	r3, [r4, #8]
 80049b4:	bf08      	it	eq
 80049b6:	1aad      	subeq	r5, r5, r2
 80049b8:	6922      	ldr	r2, [r4, #16]
 80049ba:	bf08      	it	eq
 80049bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049c0:	4293      	cmp	r3, r2
 80049c2:	bfc4      	itt	gt
 80049c4:	1a9b      	subgt	r3, r3, r2
 80049c6:	18ed      	addgt	r5, r5, r3
 80049c8:	341a      	adds	r4, #26
 80049ca:	42b5      	cmp	r5, r6
 80049cc:	d11a      	bne.n	8004a04 <_printf_common+0xcc>
 80049ce:	2000      	movs	r0, #0
 80049d0:	e008      	b.n	80049e4 <_printf_common+0xac>
 80049d2:	2301      	movs	r3, #1
 80049d4:	4652      	mov	r2, sl
 80049d6:	4649      	mov	r1, r9
 80049d8:	4638      	mov	r0, r7
 80049da:	47c0      	blx	r8
 80049dc:	3001      	adds	r0, #1
 80049de:	d103      	bne.n	80049e8 <_printf_common+0xb0>
 80049e0:	f04f 30ff 	mov.w	r0, #4294967295
 80049e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e8:	3501      	adds	r5, #1
 80049ea:	e7c4      	b.n	8004976 <_printf_common+0x3e>
 80049ec:	2030      	movs	r0, #48	; 0x30
 80049ee:	18e1      	adds	r1, r4, r3
 80049f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049fa:	4422      	add	r2, r4
 80049fc:	3302      	adds	r3, #2
 80049fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a02:	e7c5      	b.n	8004990 <_printf_common+0x58>
 8004a04:	2301      	movs	r3, #1
 8004a06:	4622      	mov	r2, r4
 8004a08:	4649      	mov	r1, r9
 8004a0a:	4638      	mov	r0, r7
 8004a0c:	47c0      	blx	r8
 8004a0e:	3001      	adds	r0, #1
 8004a10:	d0e6      	beq.n	80049e0 <_printf_common+0xa8>
 8004a12:	3601      	adds	r6, #1
 8004a14:	e7d9      	b.n	80049ca <_printf_common+0x92>
	...

08004a18 <_printf_i>:
 8004a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a1c:	460c      	mov	r4, r1
 8004a1e:	7e27      	ldrb	r7, [r4, #24]
 8004a20:	4691      	mov	r9, r2
 8004a22:	2f78      	cmp	r7, #120	; 0x78
 8004a24:	4680      	mov	r8, r0
 8004a26:	469a      	mov	sl, r3
 8004a28:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a2e:	d807      	bhi.n	8004a40 <_printf_i+0x28>
 8004a30:	2f62      	cmp	r7, #98	; 0x62
 8004a32:	d80a      	bhi.n	8004a4a <_printf_i+0x32>
 8004a34:	2f00      	cmp	r7, #0
 8004a36:	f000 80d9 	beq.w	8004bec <_printf_i+0x1d4>
 8004a3a:	2f58      	cmp	r7, #88	; 0x58
 8004a3c:	f000 80a4 	beq.w	8004b88 <_printf_i+0x170>
 8004a40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a48:	e03a      	b.n	8004ac0 <_printf_i+0xa8>
 8004a4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a4e:	2b15      	cmp	r3, #21
 8004a50:	d8f6      	bhi.n	8004a40 <_printf_i+0x28>
 8004a52:	a001      	add	r0, pc, #4	; (adr r0, 8004a58 <_printf_i+0x40>)
 8004a54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a58:	08004ab1 	.word	0x08004ab1
 8004a5c:	08004ac5 	.word	0x08004ac5
 8004a60:	08004a41 	.word	0x08004a41
 8004a64:	08004a41 	.word	0x08004a41
 8004a68:	08004a41 	.word	0x08004a41
 8004a6c:	08004a41 	.word	0x08004a41
 8004a70:	08004ac5 	.word	0x08004ac5
 8004a74:	08004a41 	.word	0x08004a41
 8004a78:	08004a41 	.word	0x08004a41
 8004a7c:	08004a41 	.word	0x08004a41
 8004a80:	08004a41 	.word	0x08004a41
 8004a84:	08004bd3 	.word	0x08004bd3
 8004a88:	08004af5 	.word	0x08004af5
 8004a8c:	08004bb5 	.word	0x08004bb5
 8004a90:	08004a41 	.word	0x08004a41
 8004a94:	08004a41 	.word	0x08004a41
 8004a98:	08004bf5 	.word	0x08004bf5
 8004a9c:	08004a41 	.word	0x08004a41
 8004aa0:	08004af5 	.word	0x08004af5
 8004aa4:	08004a41 	.word	0x08004a41
 8004aa8:	08004a41 	.word	0x08004a41
 8004aac:	08004bbd 	.word	0x08004bbd
 8004ab0:	680b      	ldr	r3, [r1, #0]
 8004ab2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ab6:	1d1a      	adds	r2, r3, #4
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	600a      	str	r2, [r1, #0]
 8004abc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0a4      	b.n	8004c0e <_printf_i+0x1f6>
 8004ac4:	6825      	ldr	r5, [r4, #0]
 8004ac6:	6808      	ldr	r0, [r1, #0]
 8004ac8:	062e      	lsls	r6, r5, #24
 8004aca:	f100 0304 	add.w	r3, r0, #4
 8004ace:	d50a      	bpl.n	8004ae6 <_printf_i+0xce>
 8004ad0:	6805      	ldr	r5, [r0, #0]
 8004ad2:	600b      	str	r3, [r1, #0]
 8004ad4:	2d00      	cmp	r5, #0
 8004ad6:	da03      	bge.n	8004ae0 <_printf_i+0xc8>
 8004ad8:	232d      	movs	r3, #45	; 0x2d
 8004ada:	426d      	negs	r5, r5
 8004adc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ae0:	230a      	movs	r3, #10
 8004ae2:	485e      	ldr	r0, [pc, #376]	; (8004c5c <_printf_i+0x244>)
 8004ae4:	e019      	b.n	8004b1a <_printf_i+0x102>
 8004ae6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004aea:	6805      	ldr	r5, [r0, #0]
 8004aec:	600b      	str	r3, [r1, #0]
 8004aee:	bf18      	it	ne
 8004af0:	b22d      	sxthne	r5, r5
 8004af2:	e7ef      	b.n	8004ad4 <_printf_i+0xbc>
 8004af4:	680b      	ldr	r3, [r1, #0]
 8004af6:	6825      	ldr	r5, [r4, #0]
 8004af8:	1d18      	adds	r0, r3, #4
 8004afa:	6008      	str	r0, [r1, #0]
 8004afc:	0628      	lsls	r0, r5, #24
 8004afe:	d501      	bpl.n	8004b04 <_printf_i+0xec>
 8004b00:	681d      	ldr	r5, [r3, #0]
 8004b02:	e002      	b.n	8004b0a <_printf_i+0xf2>
 8004b04:	0669      	lsls	r1, r5, #25
 8004b06:	d5fb      	bpl.n	8004b00 <_printf_i+0xe8>
 8004b08:	881d      	ldrh	r5, [r3, #0]
 8004b0a:	2f6f      	cmp	r7, #111	; 0x6f
 8004b0c:	bf0c      	ite	eq
 8004b0e:	2308      	moveq	r3, #8
 8004b10:	230a      	movne	r3, #10
 8004b12:	4852      	ldr	r0, [pc, #328]	; (8004c5c <_printf_i+0x244>)
 8004b14:	2100      	movs	r1, #0
 8004b16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b1a:	6866      	ldr	r6, [r4, #4]
 8004b1c:	2e00      	cmp	r6, #0
 8004b1e:	bfa8      	it	ge
 8004b20:	6821      	ldrge	r1, [r4, #0]
 8004b22:	60a6      	str	r6, [r4, #8]
 8004b24:	bfa4      	itt	ge
 8004b26:	f021 0104 	bicge.w	r1, r1, #4
 8004b2a:	6021      	strge	r1, [r4, #0]
 8004b2c:	b90d      	cbnz	r5, 8004b32 <_printf_i+0x11a>
 8004b2e:	2e00      	cmp	r6, #0
 8004b30:	d04d      	beq.n	8004bce <_printf_i+0x1b6>
 8004b32:	4616      	mov	r6, r2
 8004b34:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b38:	fb03 5711 	mls	r7, r3, r1, r5
 8004b3c:	5dc7      	ldrb	r7, [r0, r7]
 8004b3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b42:	462f      	mov	r7, r5
 8004b44:	42bb      	cmp	r3, r7
 8004b46:	460d      	mov	r5, r1
 8004b48:	d9f4      	bls.n	8004b34 <_printf_i+0x11c>
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d10b      	bne.n	8004b66 <_printf_i+0x14e>
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	07df      	lsls	r7, r3, #31
 8004b52:	d508      	bpl.n	8004b66 <_printf_i+0x14e>
 8004b54:	6923      	ldr	r3, [r4, #16]
 8004b56:	6861      	ldr	r1, [r4, #4]
 8004b58:	4299      	cmp	r1, r3
 8004b5a:	bfde      	ittt	le
 8004b5c:	2330      	movle	r3, #48	; 0x30
 8004b5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b62:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b66:	1b92      	subs	r2, r2, r6
 8004b68:	6122      	str	r2, [r4, #16]
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	4640      	mov	r0, r8
 8004b70:	f8cd a000 	str.w	sl, [sp]
 8004b74:	aa03      	add	r2, sp, #12
 8004b76:	f7ff fedf 	bl	8004938 <_printf_common>
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	d14c      	bne.n	8004c18 <_printf_i+0x200>
 8004b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b82:	b004      	add	sp, #16
 8004b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b88:	4834      	ldr	r0, [pc, #208]	; (8004c5c <_printf_i+0x244>)
 8004b8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b8e:	680e      	ldr	r6, [r1, #0]
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b96:	061f      	lsls	r7, r3, #24
 8004b98:	600e      	str	r6, [r1, #0]
 8004b9a:	d514      	bpl.n	8004bc6 <_printf_i+0x1ae>
 8004b9c:	07d9      	lsls	r1, r3, #31
 8004b9e:	bf44      	itt	mi
 8004ba0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ba4:	6023      	strmi	r3, [r4, #0]
 8004ba6:	b91d      	cbnz	r5, 8004bb0 <_printf_i+0x198>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	f023 0320 	bic.w	r3, r3, #32
 8004bae:	6023      	str	r3, [r4, #0]
 8004bb0:	2310      	movs	r3, #16
 8004bb2:	e7af      	b.n	8004b14 <_printf_i+0xfc>
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	f043 0320 	orr.w	r3, r3, #32
 8004bba:	6023      	str	r3, [r4, #0]
 8004bbc:	2378      	movs	r3, #120	; 0x78
 8004bbe:	4828      	ldr	r0, [pc, #160]	; (8004c60 <_printf_i+0x248>)
 8004bc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bc4:	e7e3      	b.n	8004b8e <_printf_i+0x176>
 8004bc6:	065e      	lsls	r6, r3, #25
 8004bc8:	bf48      	it	mi
 8004bca:	b2ad      	uxthmi	r5, r5
 8004bcc:	e7e6      	b.n	8004b9c <_printf_i+0x184>
 8004bce:	4616      	mov	r6, r2
 8004bd0:	e7bb      	b.n	8004b4a <_printf_i+0x132>
 8004bd2:	680b      	ldr	r3, [r1, #0]
 8004bd4:	6826      	ldr	r6, [r4, #0]
 8004bd6:	1d1d      	adds	r5, r3, #4
 8004bd8:	6960      	ldr	r0, [r4, #20]
 8004bda:	600d      	str	r5, [r1, #0]
 8004bdc:	0635      	lsls	r5, r6, #24
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	d501      	bpl.n	8004be6 <_printf_i+0x1ce>
 8004be2:	6018      	str	r0, [r3, #0]
 8004be4:	e002      	b.n	8004bec <_printf_i+0x1d4>
 8004be6:	0671      	lsls	r1, r6, #25
 8004be8:	d5fb      	bpl.n	8004be2 <_printf_i+0x1ca>
 8004bea:	8018      	strh	r0, [r3, #0]
 8004bec:	2300      	movs	r3, #0
 8004bee:	4616      	mov	r6, r2
 8004bf0:	6123      	str	r3, [r4, #16]
 8004bf2:	e7ba      	b.n	8004b6a <_printf_i+0x152>
 8004bf4:	680b      	ldr	r3, [r1, #0]
 8004bf6:	1d1a      	adds	r2, r3, #4
 8004bf8:	600a      	str	r2, [r1, #0]
 8004bfa:	681e      	ldr	r6, [r3, #0]
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	4630      	mov	r0, r6
 8004c00:	6862      	ldr	r2, [r4, #4]
 8004c02:	f000 f82f 	bl	8004c64 <memchr>
 8004c06:	b108      	cbz	r0, 8004c0c <_printf_i+0x1f4>
 8004c08:	1b80      	subs	r0, r0, r6
 8004c0a:	6060      	str	r0, [r4, #4]
 8004c0c:	6863      	ldr	r3, [r4, #4]
 8004c0e:	6123      	str	r3, [r4, #16]
 8004c10:	2300      	movs	r3, #0
 8004c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c16:	e7a8      	b.n	8004b6a <_printf_i+0x152>
 8004c18:	4632      	mov	r2, r6
 8004c1a:	4649      	mov	r1, r9
 8004c1c:	4640      	mov	r0, r8
 8004c1e:	6923      	ldr	r3, [r4, #16]
 8004c20:	47d0      	blx	sl
 8004c22:	3001      	adds	r0, #1
 8004c24:	d0ab      	beq.n	8004b7e <_printf_i+0x166>
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	079b      	lsls	r3, r3, #30
 8004c2a:	d413      	bmi.n	8004c54 <_printf_i+0x23c>
 8004c2c:	68e0      	ldr	r0, [r4, #12]
 8004c2e:	9b03      	ldr	r3, [sp, #12]
 8004c30:	4298      	cmp	r0, r3
 8004c32:	bfb8      	it	lt
 8004c34:	4618      	movlt	r0, r3
 8004c36:	e7a4      	b.n	8004b82 <_printf_i+0x16a>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	4632      	mov	r2, r6
 8004c3c:	4649      	mov	r1, r9
 8004c3e:	4640      	mov	r0, r8
 8004c40:	47d0      	blx	sl
 8004c42:	3001      	adds	r0, #1
 8004c44:	d09b      	beq.n	8004b7e <_printf_i+0x166>
 8004c46:	3501      	adds	r5, #1
 8004c48:	68e3      	ldr	r3, [r4, #12]
 8004c4a:	9903      	ldr	r1, [sp, #12]
 8004c4c:	1a5b      	subs	r3, r3, r1
 8004c4e:	42ab      	cmp	r3, r5
 8004c50:	dcf2      	bgt.n	8004c38 <_printf_i+0x220>
 8004c52:	e7eb      	b.n	8004c2c <_printf_i+0x214>
 8004c54:	2500      	movs	r5, #0
 8004c56:	f104 0619 	add.w	r6, r4, #25
 8004c5a:	e7f5      	b.n	8004c48 <_printf_i+0x230>
 8004c5c:	08005185 	.word	0x08005185
 8004c60:	08005196 	.word	0x08005196

08004c64 <memchr>:
 8004c64:	4603      	mov	r3, r0
 8004c66:	b510      	push	{r4, lr}
 8004c68:	b2c9      	uxtb	r1, r1
 8004c6a:	4402      	add	r2, r0
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	4618      	mov	r0, r3
 8004c70:	d101      	bne.n	8004c76 <memchr+0x12>
 8004c72:	2000      	movs	r0, #0
 8004c74:	e003      	b.n	8004c7e <memchr+0x1a>
 8004c76:	7804      	ldrb	r4, [r0, #0]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	428c      	cmp	r4, r1
 8004c7c:	d1f6      	bne.n	8004c6c <memchr+0x8>
 8004c7e:	bd10      	pop	{r4, pc}

08004c80 <memmove>:
 8004c80:	4288      	cmp	r0, r1
 8004c82:	b510      	push	{r4, lr}
 8004c84:	eb01 0402 	add.w	r4, r1, r2
 8004c88:	d902      	bls.n	8004c90 <memmove+0x10>
 8004c8a:	4284      	cmp	r4, r0
 8004c8c:	4623      	mov	r3, r4
 8004c8e:	d807      	bhi.n	8004ca0 <memmove+0x20>
 8004c90:	1e43      	subs	r3, r0, #1
 8004c92:	42a1      	cmp	r1, r4
 8004c94:	d008      	beq.n	8004ca8 <memmove+0x28>
 8004c96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c9e:	e7f8      	b.n	8004c92 <memmove+0x12>
 8004ca0:	4601      	mov	r1, r0
 8004ca2:	4402      	add	r2, r0
 8004ca4:	428a      	cmp	r2, r1
 8004ca6:	d100      	bne.n	8004caa <memmove+0x2a>
 8004ca8:	bd10      	pop	{r4, pc}
 8004caa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cb2:	e7f7      	b.n	8004ca4 <memmove+0x24>

08004cb4 <_free_r>:
 8004cb4:	b538      	push	{r3, r4, r5, lr}
 8004cb6:	4605      	mov	r5, r0
 8004cb8:	2900      	cmp	r1, #0
 8004cba:	d043      	beq.n	8004d44 <_free_r+0x90>
 8004cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cc0:	1f0c      	subs	r4, r1, #4
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	bfb8      	it	lt
 8004cc6:	18e4      	addlt	r4, r4, r3
 8004cc8:	f000 f8d0 	bl	8004e6c <__malloc_lock>
 8004ccc:	4a1e      	ldr	r2, [pc, #120]	; (8004d48 <_free_r+0x94>)
 8004cce:	6813      	ldr	r3, [r2, #0]
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	b933      	cbnz	r3, 8004ce2 <_free_r+0x2e>
 8004cd4:	6063      	str	r3, [r4, #4]
 8004cd6:	6014      	str	r4, [r2, #0]
 8004cd8:	4628      	mov	r0, r5
 8004cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cde:	f000 b8cb 	b.w	8004e78 <__malloc_unlock>
 8004ce2:	42a3      	cmp	r3, r4
 8004ce4:	d90a      	bls.n	8004cfc <_free_r+0x48>
 8004ce6:	6821      	ldr	r1, [r4, #0]
 8004ce8:	1862      	adds	r2, r4, r1
 8004cea:	4293      	cmp	r3, r2
 8004cec:	bf01      	itttt	eq
 8004cee:	681a      	ldreq	r2, [r3, #0]
 8004cf0:	685b      	ldreq	r3, [r3, #4]
 8004cf2:	1852      	addeq	r2, r2, r1
 8004cf4:	6022      	streq	r2, [r4, #0]
 8004cf6:	6063      	str	r3, [r4, #4]
 8004cf8:	6004      	str	r4, [r0, #0]
 8004cfa:	e7ed      	b.n	8004cd8 <_free_r+0x24>
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	b10b      	cbz	r3, 8004d06 <_free_r+0x52>
 8004d02:	42a3      	cmp	r3, r4
 8004d04:	d9fa      	bls.n	8004cfc <_free_r+0x48>
 8004d06:	6811      	ldr	r1, [r2, #0]
 8004d08:	1850      	adds	r0, r2, r1
 8004d0a:	42a0      	cmp	r0, r4
 8004d0c:	d10b      	bne.n	8004d26 <_free_r+0x72>
 8004d0e:	6820      	ldr	r0, [r4, #0]
 8004d10:	4401      	add	r1, r0
 8004d12:	1850      	adds	r0, r2, r1
 8004d14:	4283      	cmp	r3, r0
 8004d16:	6011      	str	r1, [r2, #0]
 8004d18:	d1de      	bne.n	8004cd8 <_free_r+0x24>
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	4401      	add	r1, r0
 8004d20:	6011      	str	r1, [r2, #0]
 8004d22:	6053      	str	r3, [r2, #4]
 8004d24:	e7d8      	b.n	8004cd8 <_free_r+0x24>
 8004d26:	d902      	bls.n	8004d2e <_free_r+0x7a>
 8004d28:	230c      	movs	r3, #12
 8004d2a:	602b      	str	r3, [r5, #0]
 8004d2c:	e7d4      	b.n	8004cd8 <_free_r+0x24>
 8004d2e:	6820      	ldr	r0, [r4, #0]
 8004d30:	1821      	adds	r1, r4, r0
 8004d32:	428b      	cmp	r3, r1
 8004d34:	bf01      	itttt	eq
 8004d36:	6819      	ldreq	r1, [r3, #0]
 8004d38:	685b      	ldreq	r3, [r3, #4]
 8004d3a:	1809      	addeq	r1, r1, r0
 8004d3c:	6021      	streq	r1, [r4, #0]
 8004d3e:	6063      	str	r3, [r4, #4]
 8004d40:	6054      	str	r4, [r2, #4]
 8004d42:	e7c9      	b.n	8004cd8 <_free_r+0x24>
 8004d44:	bd38      	pop	{r3, r4, r5, pc}
 8004d46:	bf00      	nop
 8004d48:	200000cc 	.word	0x200000cc

08004d4c <_malloc_r>:
 8004d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4e:	1ccd      	adds	r5, r1, #3
 8004d50:	f025 0503 	bic.w	r5, r5, #3
 8004d54:	3508      	adds	r5, #8
 8004d56:	2d0c      	cmp	r5, #12
 8004d58:	bf38      	it	cc
 8004d5a:	250c      	movcc	r5, #12
 8004d5c:	2d00      	cmp	r5, #0
 8004d5e:	4606      	mov	r6, r0
 8004d60:	db01      	blt.n	8004d66 <_malloc_r+0x1a>
 8004d62:	42a9      	cmp	r1, r5
 8004d64:	d903      	bls.n	8004d6e <_malloc_r+0x22>
 8004d66:	230c      	movs	r3, #12
 8004d68:	6033      	str	r3, [r6, #0]
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d6e:	f000 f87d 	bl	8004e6c <__malloc_lock>
 8004d72:	4921      	ldr	r1, [pc, #132]	; (8004df8 <_malloc_r+0xac>)
 8004d74:	680a      	ldr	r2, [r1, #0]
 8004d76:	4614      	mov	r4, r2
 8004d78:	b99c      	cbnz	r4, 8004da2 <_malloc_r+0x56>
 8004d7a:	4f20      	ldr	r7, [pc, #128]	; (8004dfc <_malloc_r+0xb0>)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	b923      	cbnz	r3, 8004d8a <_malloc_r+0x3e>
 8004d80:	4621      	mov	r1, r4
 8004d82:	4630      	mov	r0, r6
 8004d84:	f000 f862 	bl	8004e4c <_sbrk_r>
 8004d88:	6038      	str	r0, [r7, #0]
 8004d8a:	4629      	mov	r1, r5
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	f000 f85d 	bl	8004e4c <_sbrk_r>
 8004d92:	1c43      	adds	r3, r0, #1
 8004d94:	d123      	bne.n	8004dde <_malloc_r+0x92>
 8004d96:	230c      	movs	r3, #12
 8004d98:	4630      	mov	r0, r6
 8004d9a:	6033      	str	r3, [r6, #0]
 8004d9c:	f000 f86c 	bl	8004e78 <__malloc_unlock>
 8004da0:	e7e3      	b.n	8004d6a <_malloc_r+0x1e>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	1b5b      	subs	r3, r3, r5
 8004da6:	d417      	bmi.n	8004dd8 <_malloc_r+0x8c>
 8004da8:	2b0b      	cmp	r3, #11
 8004daa:	d903      	bls.n	8004db4 <_malloc_r+0x68>
 8004dac:	6023      	str	r3, [r4, #0]
 8004dae:	441c      	add	r4, r3
 8004db0:	6025      	str	r5, [r4, #0]
 8004db2:	e004      	b.n	8004dbe <_malloc_r+0x72>
 8004db4:	6863      	ldr	r3, [r4, #4]
 8004db6:	42a2      	cmp	r2, r4
 8004db8:	bf0c      	ite	eq
 8004dba:	600b      	streq	r3, [r1, #0]
 8004dbc:	6053      	strne	r3, [r2, #4]
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	f000 f85a 	bl	8004e78 <__malloc_unlock>
 8004dc4:	f104 000b 	add.w	r0, r4, #11
 8004dc8:	1d23      	adds	r3, r4, #4
 8004dca:	f020 0007 	bic.w	r0, r0, #7
 8004dce:	1ac2      	subs	r2, r0, r3
 8004dd0:	d0cc      	beq.n	8004d6c <_malloc_r+0x20>
 8004dd2:	1a1b      	subs	r3, r3, r0
 8004dd4:	50a3      	str	r3, [r4, r2]
 8004dd6:	e7c9      	b.n	8004d6c <_malloc_r+0x20>
 8004dd8:	4622      	mov	r2, r4
 8004dda:	6864      	ldr	r4, [r4, #4]
 8004ddc:	e7cc      	b.n	8004d78 <_malloc_r+0x2c>
 8004dde:	1cc4      	adds	r4, r0, #3
 8004de0:	f024 0403 	bic.w	r4, r4, #3
 8004de4:	42a0      	cmp	r0, r4
 8004de6:	d0e3      	beq.n	8004db0 <_malloc_r+0x64>
 8004de8:	1a21      	subs	r1, r4, r0
 8004dea:	4630      	mov	r0, r6
 8004dec:	f000 f82e 	bl	8004e4c <_sbrk_r>
 8004df0:	3001      	adds	r0, #1
 8004df2:	d1dd      	bne.n	8004db0 <_malloc_r+0x64>
 8004df4:	e7cf      	b.n	8004d96 <_malloc_r+0x4a>
 8004df6:	bf00      	nop
 8004df8:	200000cc 	.word	0x200000cc
 8004dfc:	200000d0 	.word	0x200000d0

08004e00 <_realloc_r>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	4607      	mov	r7, r0
 8004e04:	4614      	mov	r4, r2
 8004e06:	460e      	mov	r6, r1
 8004e08:	b921      	cbnz	r1, 8004e14 <_realloc_r+0x14>
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e10:	f7ff bf9c 	b.w	8004d4c <_malloc_r>
 8004e14:	b922      	cbnz	r2, 8004e20 <_realloc_r+0x20>
 8004e16:	f7ff ff4d 	bl	8004cb4 <_free_r>
 8004e1a:	4625      	mov	r5, r4
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e20:	f000 f830 	bl	8004e84 <_malloc_usable_size_r>
 8004e24:	42a0      	cmp	r0, r4
 8004e26:	d20f      	bcs.n	8004e48 <_realloc_r+0x48>
 8004e28:	4621      	mov	r1, r4
 8004e2a:	4638      	mov	r0, r7
 8004e2c:	f7ff ff8e 	bl	8004d4c <_malloc_r>
 8004e30:	4605      	mov	r5, r0
 8004e32:	2800      	cmp	r0, #0
 8004e34:	d0f2      	beq.n	8004e1c <_realloc_r+0x1c>
 8004e36:	4631      	mov	r1, r6
 8004e38:	4622      	mov	r2, r4
 8004e3a:	f7ff fbeb 	bl	8004614 <memcpy>
 8004e3e:	4631      	mov	r1, r6
 8004e40:	4638      	mov	r0, r7
 8004e42:	f7ff ff37 	bl	8004cb4 <_free_r>
 8004e46:	e7e9      	b.n	8004e1c <_realloc_r+0x1c>
 8004e48:	4635      	mov	r5, r6
 8004e4a:	e7e7      	b.n	8004e1c <_realloc_r+0x1c>

08004e4c <_sbrk_r>:
 8004e4c:	b538      	push	{r3, r4, r5, lr}
 8004e4e:	2300      	movs	r3, #0
 8004e50:	4d05      	ldr	r5, [pc, #20]	; (8004e68 <_sbrk_r+0x1c>)
 8004e52:	4604      	mov	r4, r0
 8004e54:	4608      	mov	r0, r1
 8004e56:	602b      	str	r3, [r5, #0]
 8004e58:	f7fc fef2 	bl	8001c40 <_sbrk>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	d102      	bne.n	8004e66 <_sbrk_r+0x1a>
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	b103      	cbz	r3, 8004e66 <_sbrk_r+0x1a>
 8004e64:	6023      	str	r3, [r4, #0]
 8004e66:	bd38      	pop	{r3, r4, r5, pc}
 8004e68:	20000284 	.word	0x20000284

08004e6c <__malloc_lock>:
 8004e6c:	4801      	ldr	r0, [pc, #4]	; (8004e74 <__malloc_lock+0x8>)
 8004e6e:	f000 b811 	b.w	8004e94 <__retarget_lock_acquire_recursive>
 8004e72:	bf00      	nop
 8004e74:	2000028c 	.word	0x2000028c

08004e78 <__malloc_unlock>:
 8004e78:	4801      	ldr	r0, [pc, #4]	; (8004e80 <__malloc_unlock+0x8>)
 8004e7a:	f000 b80c 	b.w	8004e96 <__retarget_lock_release_recursive>
 8004e7e:	bf00      	nop
 8004e80:	2000028c 	.word	0x2000028c

08004e84 <_malloc_usable_size_r>:
 8004e84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e88:	1f18      	subs	r0, r3, #4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	bfbc      	itt	lt
 8004e8e:	580b      	ldrlt	r3, [r1, r0]
 8004e90:	18c0      	addlt	r0, r0, r3
 8004e92:	4770      	bx	lr

08004e94 <__retarget_lock_acquire_recursive>:
 8004e94:	4770      	bx	lr

08004e96 <__retarget_lock_release_recursive>:
 8004e96:	4770      	bx	lr

08004e98 <_init>:
 8004e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9a:	bf00      	nop
 8004e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9e:	bc08      	pop	{r3}
 8004ea0:	469e      	mov	lr, r3
 8004ea2:	4770      	bx	lr

08004ea4 <_fini>:
 8004ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea6:	bf00      	nop
 8004ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eaa:	bc08      	pop	{r3}
 8004eac:	469e      	mov	lr, r3
 8004eae:	4770      	bx	lr
