
assignment-simulation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000330c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08003418  08003418  00013418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003584  08003584  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08003584  08003584  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003584  08003584  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003584  08003584  00013584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003588  08003588  00013588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  0800358c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000030  080035bc  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080035bc  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bac1  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ffe  00000000  00000000  0002bb1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  0002db18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  0002e808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173e1  00000000  00000000  0002f3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e264  00000000  00000000  000467d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084a28  00000000  00000000  00054a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d9465  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000346c  00000000  00000000  000d94b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08003400 	.word	0x08003400

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08003400 	.word	0x08003400

0800014c <initButton>:
int button_flag[NO_BUTTONS + 1];
int TimerForKeyPress[NO_BUTTONS + 1];

int Button1PressCounter = 1;    /* INITIALLY, MODE = 1 */

void initButton() {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (int i = 1; i <= NO_BUTTONS; i++) {
 8000152:	2301      	movs	r3, #1
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e020      	b.n	800019a <initButton+0x4e>
		KeyReg0[i] = NORMAL_STATE;
 8000158:	4a14      	ldr	r2, [pc, #80]	; (80001ac <initButton+0x60>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2101      	movs	r1, #1
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg1[i] = NORMAL_STATE;
 8000162:	4a13      	ldr	r2, [pc, #76]	; (80001b0 <initButton+0x64>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2101      	movs	r1, #1
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg2[i] = NORMAL_STATE;
 800016c:	4a11      	ldr	r2, [pc, #68]	; (80001b4 <initButton+0x68>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2101      	movs	r1, #1
 8000172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg3[i] = NORMAL_STATE; 
 8000176:	4a10      	ldr	r2, [pc, #64]	; (80001b8 <initButton+0x6c>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2101      	movs	r1, #1
 800017c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		button_flag[i] = 0;
 8000180:	4a0e      	ldr	r2, [pc, #56]	; (80001bc <initButton+0x70>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2100      	movs	r1, #0
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		TimerForKeyPress[i] = 200;
 800018a:	4a0d      	ldr	r2, [pc, #52]	; (80001c0 <initButton+0x74>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	21c8      	movs	r1, #200	; 0xc8
 8000190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 1; i <= NO_BUTTONS; i++) {
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	3301      	adds	r3, #1
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b04      	cmp	r3, #4
 800019e:	dddb      	ble.n	8000158 <initButton+0xc>
	}
}
 80001a0:	bf00      	nop
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	20000068 	.word	0x20000068
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	200000b8 	.word	0x200000b8
 80001b8:	20000054 	.word	0x20000054
 80001bc:	200000a4 	.word	0x200000a4
 80001c0:	20000090 	.word	0x20000090

080001c4 <getKeyInput>:

void getKeyInput() {
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
    for (int i = 1; i < NO_BUTTONS; i++) {
 80001ca:	2301      	movs	r3, #1
 80001cc:	607b      	str	r3, [r7, #4]
 80001ce:	e098      	b.n	8000302 <getKeyInput+0x13e>
        KeyReg0[i] = KeyReg1[i];
 80001d0:	4a50      	ldr	r2, [pc, #320]	; (8000314 <getKeyInput+0x150>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d8:	494f      	ldr	r1, [pc, #316]	; (8000318 <getKeyInput+0x154>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg1[i] = KeyReg2[i];
 80001e0:	4a4e      	ldr	r2, [pc, #312]	; (800031c <getKeyInput+0x158>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e8:	494a      	ldr	r1, [pc, #296]	; (8000314 <getKeyInput+0x150>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        if (i == 1) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d109      	bne.n	800020a <getKeyInput+0x46>
 80001f6:	2102      	movs	r1, #2
 80001f8:	4849      	ldr	r0, [pc, #292]	; (8000320 <getKeyInput+0x15c>)
 80001fa:	f001 fc9d 	bl	8001b38 <HAL_GPIO_ReadPin>
 80001fe:	4603      	mov	r3, r0
 8000200:	4619      	mov	r1, r3
 8000202:	4a46      	ldr	r2, [pc, #280]	; (800031c <getKeyInput+0x158>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 2) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b02      	cmp	r3, #2
 800020e:	d109      	bne.n	8000224 <getKeyInput+0x60>
 8000210:	2110      	movs	r1, #16
 8000212:	4843      	ldr	r0, [pc, #268]	; (8000320 <getKeyInput+0x15c>)
 8000214:	f001 fc90 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000218:	4603      	mov	r3, r0
 800021a:	4619      	mov	r1, r3
 800021c:	4a3f      	ldr	r2, [pc, #252]	; (800031c <getKeyInput+0x158>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 3) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	2b03      	cmp	r3, #3
 8000228:	d109      	bne.n	800023e <getKeyInput+0x7a>
 800022a:	2101      	movs	r1, #1
 800022c:	483d      	ldr	r0, [pc, #244]	; (8000324 <getKeyInput+0x160>)
 800022e:	f001 fc83 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000232:	4603      	mov	r3, r0
 8000234:	4619      	mov	r1, r3
 8000236:	4a39      	ldr	r2, [pc, #228]	; (800031c <getKeyInput+0x158>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 4) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_PEDESTRIAN_GPIO_Port, BUTTON_PEDESTRIAN_Pin);
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2b04      	cmp	r3, #4
 8000242:	d109      	bne.n	8000258 <getKeyInput+0x94>
 8000244:	2101      	movs	r1, #1
 8000246:	4836      	ldr	r0, [pc, #216]	; (8000320 <getKeyInput+0x15c>)
 8000248:	f001 fc76 	bl	8001b38 <HAL_GPIO_ReadPin>
 800024c:	4603      	mov	r3, r0
 800024e:	4619      	mov	r1, r3
 8000250:	4a32      	ldr	r2, [pc, #200]	; (800031c <getKeyInput+0x158>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000258:	4a2f      	ldr	r2, [pc, #188]	; (8000318 <getKeyInput+0x154>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000260:	492c      	ldr	r1, [pc, #176]	; (8000314 <getKeyInput+0x150>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000268:	429a      	cmp	r2, r3
 800026a:	d147      	bne.n	80002fc <getKeyInput+0x138>
 800026c:	4a29      	ldr	r2, [pc, #164]	; (8000314 <getKeyInput+0x150>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000274:	4929      	ldr	r1, [pc, #164]	; (800031c <getKeyInput+0x158>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800027c:	429a      	cmp	r2, r3
 800027e:	d13d      	bne.n	80002fc <getKeyInput+0x138>
            if (KeyReg3[i] != KeyReg2[i]) {
 8000280:	4a29      	ldr	r2, [pc, #164]	; (8000328 <getKeyInput+0x164>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000288:	4924      	ldr	r1, [pc, #144]	; (800031c <getKeyInput+0x158>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000290:	429a      	cmp	r2, r3
 8000292:	d016      	beq.n	80002c2 <getKeyInput+0xfe>
                KeyReg3[i] = KeyReg2[i];
 8000294:	4a21      	ldr	r2, [pc, #132]	; (800031c <getKeyInput+0x158>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800029c:	4922      	ldr	r1, [pc, #136]	; (8000328 <getKeyInput+0x164>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                if (KeyReg2[i] == PRESSED_STATE) {
 80002a4:	4a1d      	ldr	r2, [pc, #116]	; (800031c <getKeyInput+0x158>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d125      	bne.n	80002fc <getKeyInput+0x138>
                    subKeyProcess(i);
 80002b0:	6878      	ldr	r0, [r7, #4]
 80002b2:	f000 f85b 	bl	800036c <subKeyProcess>
                    TimerForKeyPress[i] = 200;
 80002b6:	4a1d      	ldr	r2, [pc, #116]	; (800032c <getKeyInput+0x168>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	21c8      	movs	r1, #200	; 0xc8
 80002bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002c0:	e01c      	b.n	80002fc <getKeyInput+0x138>
                }
            } else {
                TimerForKeyPress[i]--;
 80002c2:	4a1a      	ldr	r2, [pc, #104]	; (800032c <getKeyInput+0x168>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ca:	1e5a      	subs	r2, r3, #1
 80002cc:	4917      	ldr	r1, [pc, #92]	; (800032c <getKeyInput+0x168>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TimerForKeyPress[i] == 0) {
 80002d4:	4a15      	ldr	r2, [pc, #84]	; (800032c <getKeyInput+0x168>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d10d      	bne.n	80002fc <getKeyInput+0x138>
                    if (KeyReg2[i] == PRESSED_STATE) {
 80002e0:	4a0e      	ldr	r2, [pc, #56]	; (800031c <getKeyInput+0x158>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d102      	bne.n	80002f2 <getKeyInput+0x12e>
                        subKeyProcess(i);
 80002ec:	6878      	ldr	r0, [r7, #4]
 80002ee:	f000 f83d 	bl	800036c <subKeyProcess>
                    }

                    TimerForKeyPress[i] = 200;
 80002f2:	4a0e      	ldr	r2, [pc, #56]	; (800032c <getKeyInput+0x168>)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	21c8      	movs	r1, #200	; 0xc8
 80002f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 1; i < NO_BUTTONS; i++) {
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	3301      	adds	r3, #1
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2b03      	cmp	r3, #3
 8000306:	f77f af63 	ble.w	80001d0 <getKeyInput+0xc>
                }
            }
        }
    }
}
 800030a:	bf00      	nop
 800030c:	bf00      	nop
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	2000007c 	.word	0x2000007c
 8000318:	20000068 	.word	0x20000068
 800031c:	200000b8 	.word	0x200000b8
 8000320:	40010800 	.word	0x40010800
 8000324:	40010c00 	.word	0x40010c00
 8000328:	20000054 	.word	0x20000054
 800032c:	20000090 	.word	0x20000090

08000330 <isButtonPressed>:

int isButtonPressed(int index) {
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	if (index > NO_BUTTONS)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	2b04      	cmp	r3, #4
 800033c:	dd01      	ble.n	8000342 <isButtonPressed+0x12>
		return 0;
 800033e:	2300      	movs	r3, #0
 8000340:	e00d      	b.n	800035e <isButtonPressed+0x2e>

	if (button_flag[index]) {
 8000342:	4a09      	ldr	r2, [pc, #36]	; (8000368 <isButtonPressed+0x38>)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d006      	beq.n	800035c <isButtonPressed+0x2c>
		button_flag[index] = 0;
 800034e:	4a06      	ldr	r2, [pc, #24]	; (8000368 <isButtonPressed+0x38>)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2100      	movs	r1, #0
 8000354:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000358:	2301      	movs	r3, #1
 800035a:	e000      	b.n	800035e <isButtonPressed+0x2e>
	}
	return 0;
 800035c:	2300      	movs	r3, #0
}
 800035e:	4618      	mov	r0, r3
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	200000a4 	.word	0x200000a4

0800036c <subKeyProcess>:

void subKeyProcess(int index) {
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000374:	4a04      	ldr	r2, [pc, #16]	; (8000388 <subKeyProcess+0x1c>)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	2101      	movs	r1, #1
 800037a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	200000a4 	.word	0x200000a4

0800038c <fsm_automatic_run>:
 *      Author: ProX
 */

#include "fsm_automatic.h"

void fsm_automatic_run(void) {
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
    /* CHANGE TO MANUAL MODE WHEN BUTTON1 IS PRESSED */
    if (isButtonPressed(1)) {
 8000390:	2001      	movs	r0, #1
 8000392:	f7ff ffcd 	bl	8000330 <isButtonPressed>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d006      	beq.n	80003aa <fsm_automatic_run+0x1e>
    	status = MANUAL_MODE;
 800039c:	4b93      	ldr	r3, [pc, #588]	; (80005ec <fsm_automatic_run+0x260>)
 800039e:	2203      	movs	r2, #3
 80003a0:	601a      	str	r2, [r3, #0]
		traffic_status = INIT;
 80003a2:	4b93      	ldr	r3, [pc, #588]	; (80005f0 <fsm_automatic_run+0x264>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	601a      	str	r2, [r3, #0]
		return;
 80003a8:	e11e      	b.n	80005e8 <fsm_automatic_run+0x25c>
    }

    switch (traffic_status) {
 80003aa:	4b91      	ldr	r3, [pc, #580]	; (80005f0 <fsm_automatic_run+0x264>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d04e      	beq.n	8000450 <fsm_automatic_run+0xc4>
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	f340 8118 	ble.w	80005e8 <fsm_automatic_run+0x25c>
 80003b8:	2b50      	cmp	r3, #80	; 0x50
 80003ba:	f300 8115 	bgt.w	80005e8 <fsm_automatic_run+0x25c>
 80003be:	2b32      	cmp	r3, #50	; 0x32
 80003c0:	f2c0 8112 	blt.w	80005e8 <fsm_automatic_run+0x25c>
 80003c4:	3b32      	subs	r3, #50	; 0x32
 80003c6:	2b1e      	cmp	r3, #30
 80003c8:	f200 810e 	bhi.w	80005e8 <fsm_automatic_run+0x25c>
 80003cc:	a201      	add	r2, pc, #4	; (adr r2, 80003d4 <fsm_automatic_run+0x48>)
 80003ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d2:	bf00      	nop
 80003d4:	080004a7 	.word	0x080004a7
 80003d8:	080005e9 	.word	0x080005e9
 80003dc:	080005e9 	.word	0x080005e9
 80003e0:	080005e9 	.word	0x080005e9
 80003e4:	080005e9 	.word	0x080005e9
 80003e8:	080005e9 	.word	0x080005e9
 80003ec:	080005e9 	.word	0x080005e9
 80003f0:	080005e9 	.word	0x080005e9
 80003f4:	080005e9 	.word	0x080005e9
 80003f8:	080005e9 	.word	0x080005e9
 80003fc:	080004e5 	.word	0x080004e5
 8000400:	080005e9 	.word	0x080005e9
 8000404:	080005e9 	.word	0x080005e9
 8000408:	080005e9 	.word	0x080005e9
 800040c:	080005e9 	.word	0x080005e9
 8000410:	080005e9 	.word	0x080005e9
 8000414:	080005e9 	.word	0x080005e9
 8000418:	080005e9 	.word	0x080005e9
 800041c:	080005e9 	.word	0x080005e9
 8000420:	080005e9 	.word	0x080005e9
 8000424:	0800053d 	.word	0x0800053d
 8000428:	080005e9 	.word	0x080005e9
 800042c:	080005e9 	.word	0x080005e9
 8000430:	080005e9 	.word	0x080005e9
 8000434:	080005e9 	.word	0x080005e9
 8000438:	080005e9 	.word	0x080005e9
 800043c:	080005e9 	.word	0x080005e9
 8000440:	080005e9 	.word	0x080005e9
 8000444:	080005e9 	.word	0x080005e9
 8000448:	080005e9 	.word	0x080005e9
 800044c:	08000579 	.word	0x08000579
    case INIT:
    	resetLights();
 8000450:	f000 fab4 	bl	80009bc <resetLights>
    	/* INACTIVE pedestrian light when in INIT state */
    	pedestrian_status = PEDESTRIAN_INACTIVE;
 8000454:	4b67      	ldr	r3, [pc, #412]	; (80005f4 <fsm_automatic_run+0x268>)
 8000456:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800045a:	601a      	str	r2, [r3, #0]

        traffic_status = RED_GREEN;
 800045c:	4b64      	ldr	r3, [pc, #400]	; (80005f0 <fsm_automatic_run+0x264>)
 800045e:	2232      	movs	r2, #50	; 0x32
 8000460:	601a      	str	r2, [r3, #0]
        setTimer(1, green_counter);
 8000462:	4b65      	ldr	r3, [pc, #404]	; (80005f8 <fsm_automatic_run+0x26c>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4619      	mov	r1, r3
 8000468:	2001      	movs	r0, #1
 800046a:	f000 fe6b 	bl	8001144 <setTimer>

		setTimer(3, 250); 		// timer 3 for counting light
 800046e:	21fa      	movs	r1, #250	; 0xfa
 8000470:	2003      	movs	r0, #3
 8000472:	f000 fe67 	bl	8001144 <setTimer>

        counter_light_1 = red_counter / 1000;
 8000476:	4b61      	ldr	r3, [pc, #388]	; (80005fc <fsm_automatic_run+0x270>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a61      	ldr	r2, [pc, #388]	; (8000600 <fsm_automatic_run+0x274>)
 800047c:	fb82 1203 	smull	r1, r2, r2, r3
 8000480:	1192      	asrs	r2, r2, #6
 8000482:	17db      	asrs	r3, r3, #31
 8000484:	1ad3      	subs	r3, r2, r3
 8000486:	4a5f      	ldr	r2, [pc, #380]	; (8000604 <fsm_automatic_run+0x278>)
 8000488:	6013      	str	r3, [r2, #0]
        counter_light_2 = green_counter / 1000;
 800048a:	4b5b      	ldr	r3, [pc, #364]	; (80005f8 <fsm_automatic_run+0x26c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a5c      	ldr	r2, [pc, #368]	; (8000600 <fsm_automatic_run+0x274>)
 8000490:	fb82 1203 	smull	r1, r2, r2, r3
 8000494:	1192      	asrs	r2, r2, #6
 8000496:	17db      	asrs	r3, r3, #31
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	4a5b      	ldr	r2, [pc, #364]	; (8000608 <fsm_automatic_run+0x27c>)
 800049c:	6013      	str	r3, [r2, #0]
        counter_lights = 1;
 800049e:	4b5b      	ldr	r3, [pc, #364]	; (800060c <fsm_automatic_run+0x280>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	601a      	str	r2, [r3, #0]

        break;
 80004a4:	e0a0      	b.n	80005e8 <fsm_automatic_run+0x25c>

    case RED_GREEN:
    	setRedLight1(0);
 80004a6:	2000      	movs	r0, #0
 80004a8:	f000 fad4 	bl	8000a54 <setRedLight1>
    	setGreenLight2(0);
 80004ac:	2000      	movs	r0, #0
 80004ae:	f000 fb49 	bl	8000b44 <setGreenLight2>

        if (timer_flag[1] == 1) {
 80004b2:	4b57      	ldr	r3, [pc, #348]	; (8000610 <fsm_automatic_run+0x284>)
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	f040 808f 	bne.w	80005da <fsm_automatic_run+0x24e>
            traffic_status = RED_AMBER;
 80004bc:	4b4c      	ldr	r3, [pc, #304]	; (80005f0 <fsm_automatic_run+0x264>)
 80004be:	223c      	movs	r2, #60	; 0x3c
 80004c0:	601a      	str	r2, [r3, #0]
            setTimer(1, amber_counter);
 80004c2:	4b54      	ldr	r3, [pc, #336]	; (8000614 <fsm_automatic_run+0x288>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4619      	mov	r1, r3
 80004c8:	2001      	movs	r0, #1
 80004ca:	f000 fe3b 	bl	8001144 <setTimer>

            counter_light_2 = amber_counter / 1000;
 80004ce:	4b51      	ldr	r3, [pc, #324]	; (8000614 <fsm_automatic_run+0x288>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a4b      	ldr	r2, [pc, #300]	; (8000600 <fsm_automatic_run+0x274>)
 80004d4:	fb82 1203 	smull	r1, r2, r2, r3
 80004d8:	1192      	asrs	r2, r2, #6
 80004da:	17db      	asrs	r3, r3, #31
 80004dc:	1ad3      	subs	r3, r2, r3
 80004de:	4a4a      	ldr	r2, [pc, #296]	; (8000608 <fsm_automatic_run+0x27c>)
 80004e0:	6013      	str	r3, [r2, #0]
        }    

        break;
 80004e2:	e07a      	b.n	80005da <fsm_automatic_run+0x24e>

    case RED_AMBER:
    	setRedLight1(0);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 fab5 	bl	8000a54 <setRedLight1>
    	setAmberLight2(0);
 80004ea:	2000      	movs	r0, #0
 80004ec:	f000 fb48 	bl	8000b80 <setAmberLight2>

        if (timer_flag[1] == 1) {
 80004f0:	4b47      	ldr	r3, [pc, #284]	; (8000610 <fsm_automatic_run+0x284>)
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d172      	bne.n	80005de <fsm_automatic_run+0x252>
            traffic_status = GREEN_RED;
 80004f8:	4b3d      	ldr	r3, [pc, #244]	; (80005f0 <fsm_automatic_run+0x264>)
 80004fa:	2246      	movs	r2, #70	; 0x46
 80004fc:	601a      	str	r2, [r3, #0]
            setTimer(1, green_counter);
 80004fe:	4b3e      	ldr	r3, [pc, #248]	; (80005f8 <fsm_automatic_run+0x26c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4619      	mov	r1, r3
 8000504:	2001      	movs	r0, #1
 8000506:	f000 fe1d 	bl	8001144 <setTimer>

            counter_light_1 = green_counter / 1000;
 800050a:	4b3b      	ldr	r3, [pc, #236]	; (80005f8 <fsm_automatic_run+0x26c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a3c      	ldr	r2, [pc, #240]	; (8000600 <fsm_automatic_run+0x274>)
 8000510:	fb82 1203 	smull	r1, r2, r2, r3
 8000514:	1192      	asrs	r2, r2, #6
 8000516:	17db      	asrs	r3, r3, #31
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	4a3a      	ldr	r2, [pc, #232]	; (8000604 <fsm_automatic_run+0x278>)
 800051c:	6013      	str	r3, [r2, #0]
            counter_light_2 = red_counter / 1000;
 800051e:	4b37      	ldr	r3, [pc, #220]	; (80005fc <fsm_automatic_run+0x270>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a37      	ldr	r2, [pc, #220]	; (8000600 <fsm_automatic_run+0x274>)
 8000524:	fb82 1203 	smull	r1, r2, r2, r3
 8000528:	1192      	asrs	r2, r2, #6
 800052a:	17db      	asrs	r3, r3, #31
 800052c:	1ad3      	subs	r3, r2, r3
 800052e:	4a36      	ldr	r2, [pc, #216]	; (8000608 <fsm_automatic_run+0x27c>)
 8000530:	6013      	str	r3, [r2, #0]

            /* INACTIVE pedestrian light when traffic light is backing to GREEN_RED mode */
            pedestrian_status = PEDESTRIAN_INACTIVE;
 8000532:	4b30      	ldr	r3, [pc, #192]	; (80005f4 <fsm_automatic_run+0x268>)
 8000534:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000538:	601a      	str	r2, [r3, #0]
        }

        break;
 800053a:	e050      	b.n	80005de <fsm_automatic_run+0x252>

    case GREEN_RED:
    	setGreenLight1(0);
 800053c:	2000      	movs	r0, #0
 800053e:	f000 faa7 	bl	8000a90 <setGreenLight1>
    	setRedLight2(0);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 fae0 	bl	8000b08 <setRedLight2>

        if (timer_flag[1] == 1) {
 8000548:	4b31      	ldr	r3, [pc, #196]	; (8000610 <fsm_automatic_run+0x284>)
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d148      	bne.n	80005e2 <fsm_automatic_run+0x256>
            traffic_status = AMBER_RED;
 8000550:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <fsm_automatic_run+0x264>)
 8000552:	2250      	movs	r2, #80	; 0x50
 8000554:	601a      	str	r2, [r3, #0]
            setTimer(1, amber_counter);
 8000556:	4b2f      	ldr	r3, [pc, #188]	; (8000614 <fsm_automatic_run+0x288>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4619      	mov	r1, r3
 800055c:	2001      	movs	r0, #1
 800055e:	f000 fdf1 	bl	8001144 <setTimer>

            counter_light_1 = amber_counter / 1000;
 8000562:	4b2c      	ldr	r3, [pc, #176]	; (8000614 <fsm_automatic_run+0x288>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a26      	ldr	r2, [pc, #152]	; (8000600 <fsm_automatic_run+0x274>)
 8000568:	fb82 1203 	smull	r1, r2, r2, r3
 800056c:	1192      	asrs	r2, r2, #6
 800056e:	17db      	asrs	r3, r3, #31
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	4a24      	ldr	r2, [pc, #144]	; (8000604 <fsm_automatic_run+0x278>)
 8000574:	6013      	str	r3, [r2, #0]
        }

        break;
 8000576:	e034      	b.n	80005e2 <fsm_automatic_run+0x256>

    case AMBER_RED:
    	setAmberLight1(0);
 8000578:	2000      	movs	r0, #0
 800057a:	f000 faa7 	bl	8000acc <setAmberLight1>
    	setRedLight2(0);
 800057e:	2000      	movs	r0, #0
 8000580:	f000 fac2 	bl	8000b08 <setRedLight2>

        if (timer_flag[1] == 1) {
 8000584:	4b22      	ldr	r3, [pc, #136]	; (8000610 <fsm_automatic_run+0x284>)
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d12c      	bne.n	80005e6 <fsm_automatic_run+0x25a>
            traffic_status = RED_GREEN;
 800058c:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <fsm_automatic_run+0x264>)
 800058e:	2232      	movs	r2, #50	; 0x32
 8000590:	601a      	str	r2, [r3, #0]
            setTimer(1, green_counter);
 8000592:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <fsm_automatic_run+0x26c>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4619      	mov	r1, r3
 8000598:	2001      	movs	r0, #1
 800059a:	f000 fdd3 	bl	8001144 <setTimer>

            counter_light_1 = red_counter / 1000;
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <fsm_automatic_run+0x270>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a17      	ldr	r2, [pc, #92]	; (8000600 <fsm_automatic_run+0x274>)
 80005a4:	fb82 1203 	smull	r1, r2, r2, r3
 80005a8:	1192      	asrs	r2, r2, #6
 80005aa:	17db      	asrs	r3, r3, #31
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	4a15      	ldr	r2, [pc, #84]	; (8000604 <fsm_automatic_run+0x278>)
 80005b0:	6013      	str	r3, [r2, #0]
            counter_light_2 = green_counter / 1000;
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <fsm_automatic_run+0x26c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a12      	ldr	r2, [pc, #72]	; (8000600 <fsm_automatic_run+0x274>)
 80005b8:	fb82 1203 	smull	r1, r2, r2, r3
 80005bc:	1192      	asrs	r2, r2, #6
 80005be:	17db      	asrs	r3, r3, #31
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	4a11      	ldr	r2, [pc, #68]	; (8000608 <fsm_automatic_run+0x27c>)
 80005c4:	6013      	str	r3, [r2, #0]

            /* If the pedestrian light is PEDESTRIAN_RED, change to PEDESTRIAN_GREEN when the traffic light is backing to RED_GREEN mode */
            /* If the pedestrian light is INACTIVE => no change */
            if(pedestrian_status == PEDESTRIAN_RED){
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <fsm_automatic_run+0x268>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80005ce:	d10a      	bne.n	80005e6 <fsm_automatic_run+0x25a>
            	pedestrian_status = PEDESTRIAN_GREEN;
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <fsm_automatic_run+0x268>)
 80005d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005d6:	601a      	str	r2, [r3, #0]
            }
        }
        break;
 80005d8:	e005      	b.n	80005e6 <fsm_automatic_run+0x25a>
        break;
 80005da:	bf00      	nop
 80005dc:	e004      	b.n	80005e8 <fsm_automatic_run+0x25c>
        break;
 80005de:	bf00      	nop
 80005e0:	e002      	b.n	80005e8 <fsm_automatic_run+0x25c>
        break;
 80005e2:	bf00      	nop
 80005e4:	e000      	b.n	80005e8 <fsm_automatic_run+0x25c>
        break;
 80005e6:	bf00      	nop
    }
}
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20000008 	.word	0x20000008
 80005f4:	20000004 	.word	0x20000004
 80005f8:	20000014 	.word	0x20000014
 80005fc:	2000000c 	.word	0x2000000c
 8000600:	10624dd3 	.word	0x10624dd3
 8000604:	20000018 	.word	0x20000018
 8000608:	2000001c 	.word	0x2000001c
 800060c:	20000020 	.word	0x20000020
 8000610:	20000168 	.word	0x20000168
 8000614:	20000010 	.word	0x20000010

08000618 <fsm_manual_run>:

#include "fsm_manual.h"

int blink = 0;

void fsm_manual_run(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	/* OUT OF TIME FOR MANUAL EVENTS */
	if (timer_flag[1] == 1) {
 800061c:	4ba0      	ldr	r3, [pc, #640]	; (80008a0 <fsm_manual_run+0x288>)
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d105      	bne.n	8000630 <fsm_manual_run+0x18>
		status = AUTOMATIC_MODE;
 8000624:	4b9f      	ldr	r3, [pc, #636]	; (80008a4 <fsm_manual_run+0x28c>)
 8000626:	2202      	movs	r2, #2
 8000628:	601a      	str	r2, [r3, #0]
		traffic_status = INIT;
 800062a:	4b9f      	ldr	r3, [pc, #636]	; (80008a8 <fsm_manual_run+0x290>)
 800062c:	2201      	movs	r2, #1
 800062e:	601a      	str	r2, [r3, #0]
	}

	if (timer_flag[2] == 1) { // using timer2 to blink the led
 8000630:	4b9b      	ldr	r3, [pc, #620]	; (80008a0 <fsm_manual_run+0x288>)
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d10a      	bne.n	800064e <fsm_manual_run+0x36>
		blink = 1 - blink;
 8000638:	4b9c      	ldr	r3, [pc, #624]	; (80008ac <fsm_manual_run+0x294>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f1c3 0301 	rsb	r3, r3, #1
 8000640:	4a9a      	ldr	r2, [pc, #616]	; (80008ac <fsm_manual_run+0x294>)
 8000642:	6013      	str	r3, [r2, #0]
		setTimer(2, 500); // toggle every 500ms, this would get f = 2Hz for blinking the led
 8000644:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000648:	2002      	movs	r0, #2
 800064a:	f000 fd7b 	bl	8001144 <setTimer>
	}

	switch (traffic_status) {
 800064e:	4b96      	ldr	r3, [pc, #600]	; (80008a8 <fsm_manual_run+0x290>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	3b01      	subs	r3, #1
 8000654:	2b03      	cmp	r3, #3
 8000656:	f200 8191 	bhi.w	800097c <fsm_manual_run+0x364>
 800065a:	a201      	add	r2, pc, #4	; (adr r2, 8000660 <fsm_manual_run+0x48>)
 800065c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000660:	08000671 	.word	0x08000671
 8000664:	080006bf 	.word	0x080006bf
 8000668:	080007a9 	.word	0x080007a9
 800066c:	080008d5 	.word	0x080008d5
	case INIT:
		// change traffic state to MAN_RED when change from AUTOMATIC to MANUAL
		traffic_status = MAN_RED;
 8000670:	4b8d      	ldr	r3, [pc, #564]	; (80008a8 <fsm_manual_run+0x290>)
 8000672:	2202      	movs	r2, #2
 8000674:	601a      	str	r2, [r3, #0]

		time_modify_counter = red_counter; // update temporary counter storing red led delay
 8000676:	4b8e      	ldr	r3, [pc, #568]	; (80008b0 <fsm_manual_run+0x298>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a8e      	ldr	r2, [pc, #568]	; (80008b4 <fsm_manual_run+0x29c>)
 800067c:	6013      	str	r3, [r2, #0]
		counter_light_1 = red_counter / 1000; 		// counter light 1 show the value of current manual light
 800067e:	4b8c      	ldr	r3, [pc, #560]	; (80008b0 <fsm_manual_run+0x298>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a8d      	ldr	r2, [pc, #564]	; (80008b8 <fsm_manual_run+0x2a0>)
 8000684:	fb82 1203 	smull	r1, r2, r2, r3
 8000688:	1192      	asrs	r2, r2, #6
 800068a:	17db      	asrs	r3, r3, #31
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	4a8b      	ldr	r2, [pc, #556]	; (80008bc <fsm_manual_run+0x2a4>)
 8000690:	6013      	str	r3, [r2, #0]
		counter_light_2 = traffic_status;					// counter light 2 show the mode
 8000692:	4b85      	ldr	r3, [pc, #532]	; (80008a8 <fsm_manual_run+0x290>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a8a      	ldr	r2, [pc, #552]	; (80008c0 <fsm_manual_run+0x2a8>)
 8000698:	6013      	str	r3, [r2, #0]

		setTimer(1, 5000);				// reuse timer 0 to 5 seconds for manual event
 800069a:	f241 3188 	movw	r1, #5000	; 0x1388
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 fd50 	bl	8001144 <setTimer>
		setTimer(2, 500); 				// set timer 1 for led blinking
 80006a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006a8:	2002      	movs	r0, #2
 80006aa:	f000 fd4b 	bl	8001144 <setTimer>
		setTimer(3, 250);				// timer 3 still counting 7-seg light
 80006ae:	21fa      	movs	r1, #250	; 0xfa
 80006b0:	2003      	movs	r0, #3
 80006b2:	f000 fd47 	bl	8001144 <setTimer>
		counter_lights = 1;				// reset counter for switching 7-seg lights
 80006b6:	4b83      	ldr	r3, [pc, #524]	; (80008c4 <fsm_manual_run+0x2ac>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	601a      	str	r2, [r3, #0]

		break;
 80006bc:	e165      	b.n	800098a <fsm_manual_run+0x372>
	case MAN_RED:
		/* BLINK LEDs */
		setRedLight1(blink);
 80006be:	4b7b      	ldr	r3, [pc, #492]	; (80008ac <fsm_manual_run+0x294>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f9c6 	bl	8000a54 <setRedLight1>
		setRedLight2(blink);
 80006c8:	4b78      	ldr	r3, [pc, #480]	; (80008ac <fsm_manual_run+0x294>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fa1b 	bl	8000b08 <setRedLight2>

		/* CHANGE MODE = 3 (MAN_AMBER) WHEN BUTTON1 IS PRESSED */
		if (isButtonPressed(1)) {
 80006d2:	2001      	movs	r0, #1
 80006d4:	f7ff fe2c 	bl	8000330 <isButtonPressed>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d025      	beq.n	800072a <fsm_manual_run+0x112>
			traffic_status = MAN_AMBER;
 80006de:	4b72      	ldr	r3, [pc, #456]	; (80008a8 <fsm_manual_run+0x290>)
 80006e0:	2203      	movs	r2, #3
 80006e2:	601a      	str	r2, [r3, #0]

			time_modify_counter = amber_counter;	// update temporary counter storing red led delay
 80006e4:	4b78      	ldr	r3, [pc, #480]	; (80008c8 <fsm_manual_run+0x2b0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a72      	ldr	r2, [pc, #456]	; (80008b4 <fsm_manual_run+0x29c>)
 80006ea:	6013      	str	r3, [r2, #0]
			counter_light_1 = amber_counter / 1000;	// counter light 1 show the value of current manual light
 80006ec:	4b76      	ldr	r3, [pc, #472]	; (80008c8 <fsm_manual_run+0x2b0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a71      	ldr	r2, [pc, #452]	; (80008b8 <fsm_manual_run+0x2a0>)
 80006f2:	fb82 1203 	smull	r1, r2, r2, r3
 80006f6:	1192      	asrs	r2, r2, #6
 80006f8:	17db      	asrs	r3, r3, #31
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	4a6f      	ldr	r2, [pc, #444]	; (80008bc <fsm_manual_run+0x2a4>)
 80006fe:	6013      	str	r3, [r2, #0]
			counter_light_2 = traffic_status;				// counter light 2 show the mode
 8000700:	4b69      	ldr	r3, [pc, #420]	; (80008a8 <fsm_manual_run+0x290>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a6e      	ldr	r2, [pc, #440]	; (80008c0 <fsm_manual_run+0x2a8>)
 8000706:	6013      	str	r3, [r2, #0]

			setTimer(1, 5000);			// reuse timer 0 to 5 seconds for manual event
 8000708:	f241 3188 	movw	r1, #5000	; 0x1388
 800070c:	2001      	movs	r0, #1
 800070e:	f000 fd19 	bl	8001144 <setTimer>
			setTimer(2, 500); 			// set timer 1 for led blinking
 8000712:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000716:	2002      	movs	r0, #2
 8000718:	f000 fd14 	bl	8001144 <setTimer>
			setTimer(3, 250);			// timer 3 still counting 7-seg light
 800071c:	21fa      	movs	r1, #250	; 0xfa
 800071e:	2003      	movs	r0, #3
 8000720:	f000 fd10 	bl	8001144 <setTimer>
			counter_lights = 1;			// reset counter for switching 7-seg lights
 8000724:	4b67      	ldr	r3, [pc, #412]	; (80008c4 <fsm_manual_run+0x2ac>)
 8000726:	2201      	movs	r2, #1
 8000728:	601a      	str	r2, [r3, #0]
		}

		if (isButtonPressed(2) == 1) { // increasing 7-segment light counter
 800072a:	2002      	movs	r0, #2
 800072c:	f7ff fe00 	bl	8000330 <isButtonPressed>
 8000730:	4603      	mov	r3, r0
 8000732:	2b01      	cmp	r3, #1
 8000734:	d113      	bne.n	800075e <fsm_manual_run+0x146>
			time_modify_counter += UPDATED_TIME;
 8000736:	4b5f      	ldr	r3, [pc, #380]	; (80008b4 <fsm_manual_run+0x29c>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800073e:	4a5d      	ldr	r2, [pc, #372]	; (80008b4 <fsm_manual_run+0x29c>)
 8000740:	6013      	str	r3, [r2, #0]
			if (time_modify_counter > MAX_TIME)
 8000742:	4b5c      	ldr	r3, [pc, #368]	; (80008b4 <fsm_manual_run+0x29c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a61      	ldr	r2, [pc, #388]	; (80008cc <fsm_manual_run+0x2b4>)
 8000748:	4293      	cmp	r3, r2
 800074a:	dd03      	ble.n	8000754 <fsm_manual_run+0x13c>
				time_modify_counter = 1000; // 1 second
 800074c:	4b59      	ldr	r3, [pc, #356]	; (80008b4 <fsm_manual_run+0x29c>)
 800074e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000752:	601a      	str	r2, [r3, #0]
			setTimer(1, 5000); // set 5 seconds for manual events
 8000754:	f241 3188 	movw	r1, #5000	; 0x1388
 8000758:	2001      	movs	r0, #1
 800075a:	f000 fcf3 	bl	8001144 <setTimer>
		}

		if (isButtonPressed(3) == 1) { // set the new value for 7-segment light counter
 800075e:	2003      	movs	r0, #3
 8000760:	f7ff fde6 	bl	8000330 <isButtonPressed>
 8000764:	4603      	mov	r3, r0
 8000766:	2b01      	cmp	r3, #1
 8000768:	f040 810a 	bne.w	8000980 <fsm_manual_run+0x368>
			red_counter = time_modify_counter;
 800076c:	4b51      	ldr	r3, [pc, #324]	; (80008b4 <fsm_manual_run+0x29c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a4f      	ldr	r2, [pc, #316]	; (80008b0 <fsm_manual_run+0x298>)
 8000772:	6013      	str	r3, [r2, #0]
			green_counter = red_counter - amber_counter;
 8000774:	4b4e      	ldr	r3, [pc, #312]	; (80008b0 <fsm_manual_run+0x298>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4b53      	ldr	r3, [pc, #332]	; (80008c8 <fsm_manual_run+0x2b0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	4a54      	ldr	r2, [pc, #336]	; (80008d0 <fsm_manual_run+0x2b8>)
 8000780:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);								// set 5 seconds for manual events
 8000782:	f241 3188 	movw	r1, #5000	; 0x1388
 8000786:	2001      	movs	r0, #1
 8000788:	f000 fcdc 	bl	8001144 <setTimer>
			counter_light_1 = red_counter / 1000; // counter light 1 show the value of current manual light
 800078c:	4b48      	ldr	r3, [pc, #288]	; (80008b0 <fsm_manual_run+0x298>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a49      	ldr	r2, [pc, #292]	; (80008b8 <fsm_manual_run+0x2a0>)
 8000792:	fb82 1203 	smull	r1, r2, r2, r3
 8000796:	1192      	asrs	r2, r2, #6
 8000798:	17db      	asrs	r3, r3, #31
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	4a47      	ldr	r2, [pc, #284]	; (80008bc <fsm_manual_run+0x2a4>)
 800079e:	6013      	str	r3, [r2, #0]
			counter_lights = 1;								// reset counter for switching 7-seg lights
 80007a0:	4b48      	ldr	r3, [pc, #288]	; (80008c4 <fsm_manual_run+0x2ac>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]
		}
		break;
 80007a6:	e0eb      	b.n	8000980 <fsm_manual_run+0x368>

	case MAN_AMBER:
		/* BLINK LEDs */
		setAmberLight1(blink);
 80007a8:	4b40      	ldr	r3, [pc, #256]	; (80008ac <fsm_manual_run+0x294>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f98d 	bl	8000acc <setAmberLight1>
		setAmberLight2(blink);
 80007b2:	4b3e      	ldr	r3, [pc, #248]	; (80008ac <fsm_manual_run+0x294>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f9e2 	bl	8000b80 <setAmberLight2>

		/* CHANGE MODE = 4 (MAN_GREEN) WHEN BUTTON1 IS PRESSED */
		if (isButtonPressed(1)) {
 80007bc:	2001      	movs	r0, #1
 80007be:	f7ff fdb7 	bl	8000330 <isButtonPressed>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d02b      	beq.n	8000820 <fsm_manual_run+0x208>
			traffic_status = MAN_GREEN;
 80007c8:	4b37      	ldr	r3, [pc, #220]	; (80008a8 <fsm_manual_run+0x290>)
 80007ca:	2204      	movs	r2, #4
 80007cc:	601a      	str	r2, [r3, #0]

			time_modify_counter = green_counter / 1000;	// update temporary counter storing red led delay
 80007ce:	4b40      	ldr	r3, [pc, #256]	; (80008d0 <fsm_manual_run+0x2b8>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a39      	ldr	r2, [pc, #228]	; (80008b8 <fsm_manual_run+0x2a0>)
 80007d4:	fb82 1203 	smull	r1, r2, r2, r3
 80007d8:	1192      	asrs	r2, r2, #6
 80007da:	17db      	asrs	r3, r3, #31
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	4a35      	ldr	r2, [pc, #212]	; (80008b4 <fsm_manual_run+0x29c>)
 80007e0:	6013      	str	r3, [r2, #0]
			counter_light_1 = green_counter / 1000;			// counter light 1 show the value of current manual light
 80007e2:	4b3b      	ldr	r3, [pc, #236]	; (80008d0 <fsm_manual_run+0x2b8>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a34      	ldr	r2, [pc, #208]	; (80008b8 <fsm_manual_run+0x2a0>)
 80007e8:	fb82 1203 	smull	r1, r2, r2, r3
 80007ec:	1192      	asrs	r2, r2, #6
 80007ee:	17db      	asrs	r3, r3, #31
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	4a32      	ldr	r2, [pc, #200]	; (80008bc <fsm_manual_run+0x2a4>)
 80007f4:	6013      	str	r3, [r2, #0]
			counter_light_2 = traffic_status;						// counter light 2 show the mode
 80007f6:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <fsm_manual_run+0x290>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a31      	ldr	r2, [pc, #196]	; (80008c0 <fsm_manual_run+0x2a8>)
 80007fc:	6013      	str	r3, [r2, #0]

			setTimer(1, 5000);				// reuse timer 0 to 5 seconds for manual event
 80007fe:	f241 3188 	movw	r1, #5000	; 0x1388
 8000802:	2001      	movs	r0, #1
 8000804:	f000 fc9e 	bl	8001144 <setTimer>
			setTimer(2, 500); 				// set timer 1 for led blinking
 8000808:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800080c:	2002      	movs	r0, #2
 800080e:	f000 fc99 	bl	8001144 <setTimer>
			setTimer(3, 250);				// timer 3 still counting 7-seg light
 8000812:	21fa      	movs	r1, #250	; 0xfa
 8000814:	2003      	movs	r0, #3
 8000816:	f000 fc95 	bl	8001144 <setTimer>
			counter_lights = 1;				// reset counter for switching 7-seg lights
 800081a:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <fsm_manual_run+0x2ac>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
		}

		if (isButtonPressed(2) == 1) { // increasing 7-segment light counter
 8000820:	2002      	movs	r0, #2
 8000822:	f7ff fd85 	bl	8000330 <isButtonPressed>
 8000826:	4603      	mov	r3, r0
 8000828:	2b01      	cmp	r3, #1
 800082a:	d113      	bne.n	8000854 <fsm_manual_run+0x23c>
			time_modify_counter += UPDATED_TIME;
 800082c:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <fsm_manual_run+0x29c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000834:	4a1f      	ldr	r2, [pc, #124]	; (80008b4 <fsm_manual_run+0x29c>)
 8000836:	6013      	str	r3, [r2, #0]
			if (time_modify_counter > MAX_TIME)
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <fsm_manual_run+0x29c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a23      	ldr	r2, [pc, #140]	; (80008cc <fsm_manual_run+0x2b4>)
 800083e:	4293      	cmp	r3, r2
 8000840:	dd03      	ble.n	800084a <fsm_manual_run+0x232>
				time_modify_counter = 1000; // 1 second
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <fsm_manual_run+0x29c>)
 8000844:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000848:	601a      	str	r2, [r3, #0]
			setTimer(1, 5000); // set 5 seconds for manual events
 800084a:	f241 3188 	movw	r1, #5000	; 0x1388
 800084e:	2001      	movs	r0, #1
 8000850:	f000 fc78 	bl	8001144 <setTimer>
		}

		if (isButtonPressed(3) == 1) { // set the new value for 7-segment light counter
 8000854:	2003      	movs	r0, #3
 8000856:	f7ff fd6b 	bl	8000330 <isButtonPressed>
 800085a:	4603      	mov	r3, r0
 800085c:	2b01      	cmp	r3, #1
 800085e:	f040 8091 	bne.w	8000984 <fsm_manual_run+0x36c>
			amber_counter = time_modify_counter;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <fsm_manual_run+0x29c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a18      	ldr	r2, [pc, #96]	; (80008c8 <fsm_manual_run+0x2b0>)
 8000868:	6013      	str	r3, [r2, #0]
			red_counter = amber_counter + green_counter;
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <fsm_manual_run+0x2b0>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <fsm_manual_run+0x2b8>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4413      	add	r3, r2
 8000874:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <fsm_manual_run+0x298>)
 8000876:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);									// set 5 seconds for manual events
 8000878:	f241 3188 	movw	r1, #5000	; 0x1388
 800087c:	2001      	movs	r0, #1
 800087e:	f000 fc61 	bl	8001144 <setTimer>
			counter_light_1 = amber_counter / 1000; // counter light 1 show the value of current manual light
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <fsm_manual_run+0x2b0>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a0c      	ldr	r2, [pc, #48]	; (80008b8 <fsm_manual_run+0x2a0>)
 8000888:	fb82 1203 	smull	r1, r2, r2, r3
 800088c:	1192      	asrs	r2, r2, #6
 800088e:	17db      	asrs	r3, r3, #31
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <fsm_manual_run+0x2a4>)
 8000894:	6013      	str	r3, [r2, #0]
			counter_lights = 1;									// reset counter for switching 7-seg lights
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <fsm_manual_run+0x2ac>)
 8000898:	2201      	movs	r2, #1
 800089a:	601a      	str	r2, [r3, #0]
		}

		break;
 800089c:	e072      	b.n	8000984 <fsm_manual_run+0x36c>
 800089e:	bf00      	nop
 80008a0:	20000168 	.word	0x20000168
 80008a4:	20000000 	.word	0x20000000
 80008a8:	20000008 	.word	0x20000008
 80008ac:	2000004c 	.word	0x2000004c
 80008b0:	2000000c 	.word	0x2000000c
 80008b4:	20000050 	.word	0x20000050
 80008b8:	10624dd3 	.word	0x10624dd3
 80008bc:	20000018 	.word	0x20000018
 80008c0:	2000001c 	.word	0x2000001c
 80008c4:	20000020 	.word	0x20000020
 80008c8:	20000010 	.word	0x20000010
 80008cc:	000182b8 	.word	0x000182b8
 80008d0:	20000014 	.word	0x20000014

	case MAN_GREEN:
		/* BLINK LEDs */
		setGreenLight1(blink);
 80008d4:	4b2e      	ldr	r3, [pc, #184]	; (8000990 <fsm_manual_run+0x378>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 f8d9 	bl	8000a90 <setGreenLight1>
		setGreenLight2(blink);
 80008de:	4b2c      	ldr	r3, [pc, #176]	; (8000990 <fsm_manual_run+0x378>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f92e 	bl	8000b44 <setGreenLight2>

		/* CHANGE MODE = 1 (AUTOMATIC) WHEN BUTTON1 IS PRESSED */
		if (isButtonPressed(1)) {
 80008e8:	2001      	movs	r0, #1
 80008ea:	f7ff fd21 	bl	8000330 <isButtonPressed>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d005      	beq.n	8000900 <fsm_manual_run+0x2e8>
			status = AUTOMATIC_MODE;
 80008f4:	4b27      	ldr	r3, [pc, #156]	; (8000994 <fsm_manual_run+0x37c>)
 80008f6:	2202      	movs	r2, #2
 80008f8:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 80008fa:	4b27      	ldr	r3, [pc, #156]	; (8000998 <fsm_manual_run+0x380>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	601a      	str	r2, [r3, #0]
		}

		if (isButtonPressed(2) == 1) { // increasing 7-segment light counter
 8000900:	2002      	movs	r0, #2
 8000902:	f7ff fd15 	bl	8000330 <isButtonPressed>
 8000906:	4603      	mov	r3, r0
 8000908:	2b01      	cmp	r3, #1
 800090a:	d113      	bne.n	8000934 <fsm_manual_run+0x31c>
			time_modify_counter += UPDATED_TIME;
 800090c:	4b23      	ldr	r3, [pc, #140]	; (800099c <fsm_manual_run+0x384>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000914:	4a21      	ldr	r2, [pc, #132]	; (800099c <fsm_manual_run+0x384>)
 8000916:	6013      	str	r3, [r2, #0]
			if (time_modify_counter > MAX_TIME)
 8000918:	4b20      	ldr	r3, [pc, #128]	; (800099c <fsm_manual_run+0x384>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a20      	ldr	r2, [pc, #128]	; (80009a0 <fsm_manual_run+0x388>)
 800091e:	4293      	cmp	r3, r2
 8000920:	dd03      	ble.n	800092a <fsm_manual_run+0x312>
				time_modify_counter = 1000; // 1 second
 8000922:	4b1e      	ldr	r3, [pc, #120]	; (800099c <fsm_manual_run+0x384>)
 8000924:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000928:	601a      	str	r2, [r3, #0]
			setTimer(1, 5000); // set 5 seconds for manual events
 800092a:	f241 3188 	movw	r1, #5000	; 0x1388
 800092e:	2001      	movs	r0, #1
 8000930:	f000 fc08 	bl	8001144 <setTimer>
		}

		if (isButtonPressed(3) == 1) { // set the new value for 7-segment light counter
 8000934:	2003      	movs	r0, #3
 8000936:	f7ff fcfb 	bl	8000330 <isButtonPressed>
 800093a:	4603      	mov	r3, r0
 800093c:	2b01      	cmp	r3, #1
 800093e:	d123      	bne.n	8000988 <fsm_manual_run+0x370>
			green_counter = time_modify_counter;
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <fsm_manual_run+0x384>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <fsm_manual_run+0x38c>)
 8000946:	6013      	str	r3, [r2, #0]
			red_counter = amber_counter + green_counter;
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <fsm_manual_run+0x390>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <fsm_manual_run+0x38c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4413      	add	r3, r2
 8000952:	4a16      	ldr	r2, [pc, #88]	; (80009ac <fsm_manual_run+0x394>)
 8000954:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);									// set 5 seconds for manual events
 8000956:	f241 3188 	movw	r1, #5000	; 0x1388
 800095a:	2001      	movs	r0, #1
 800095c:	f000 fbf2 	bl	8001144 <setTimer>
			counter_light_1 = green_counter / 1000; // counter light 1 show the value of current manual light
 8000960:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <fsm_manual_run+0x38c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <fsm_manual_run+0x398>)
 8000966:	fb82 1203 	smull	r1, r2, r2, r3
 800096a:	1192      	asrs	r2, r2, #6
 800096c:	17db      	asrs	r3, r3, #31
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <fsm_manual_run+0x39c>)
 8000972:	6013      	str	r3, [r2, #0]
			counter_lights = 1;									// reset counter for switching 7-seg lights
 8000974:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <fsm_manual_run+0x3a0>)
 8000976:	2201      	movs	r2, #1
 8000978:	601a      	str	r2, [r3, #0]
		}

		break;
 800097a:	e005      	b.n	8000988 <fsm_manual_run+0x370>
	default:
		break;
 800097c:	bf00      	nop
 800097e:	e004      	b.n	800098a <fsm_manual_run+0x372>
		break;
 8000980:	bf00      	nop
 8000982:	e002      	b.n	800098a <fsm_manual_run+0x372>
		break;
 8000984:	bf00      	nop
 8000986:	e000      	b.n	800098a <fsm_manual_run+0x372>
		break;
 8000988:	bf00      	nop
	}
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000004c 	.word	0x2000004c
 8000994:	20000000 	.word	0x20000000
 8000998:	20000008 	.word	0x20000008
 800099c:	20000050 	.word	0x20000050
 80009a0:	000182b8 	.word	0x000182b8
 80009a4:	20000014 	.word	0x20000014
 80009a8:	20000010 	.word	0x20000010
 80009ac:	2000000c 	.word	0x2000000c
 80009b0:	10624dd3 	.word	0x10624dd3
 80009b4:	20000018 	.word	0x20000018
 80009b8:	20000020 	.word	0x20000020

080009bc <resetLights>:
 */

#include "graphics.h"

void resetLights()
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	time_modify_counter = 0;
 80009c0:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <resetLights+0x88>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
	traffic_status = INIT;
 80009c6:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <resetLights+0x8c>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d2:	481e      	ldr	r0, [pc, #120]	; (8000a4c <resetLights+0x90>)
 80009d4:	f001 f8c7 	bl	8001b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009de:	481b      	ldr	r0, [pc, #108]	; (8000a4c <resetLights+0x90>)
 80009e0:	f001 f8c1 	bl	8001b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ea:	4818      	ldr	r0, [pc, #96]	; (8000a4c <resetLights+0x90>)
 80009ec:	f001 f8bb 	bl	8001b66 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f6:	4816      	ldr	r0, [pc, #88]	; (8000a50 <resetLights+0x94>)
 80009f8:	f001 f8b5 	bl	8001b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a02:	4813      	ldr	r0, [pc, #76]	; (8000a50 <resetLights+0x94>)
 8000a04:	f001 f8af 	bl	8001b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a0e:	4810      	ldr	r0, [pc, #64]	; (8000a50 <resetLights+0x94>)
 8000a10:	f001 f8a9 	bl	8001b66 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	2140      	movs	r1, #64	; 0x40
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <resetLights+0x90>)
 8000a1a:	f001 f8a4 	bl	8001b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	480a      	ldr	r0, [pc, #40]	; (8000a4c <resetLights+0x90>)
 8000a24:	f001 f89f 	bl	8001b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2e:	4807      	ldr	r0, [pc, #28]	; (8000a4c <resetLights+0x90>)
 8000a30:	f001 f899 	bl	8001b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a3a:	4804      	ldr	r0, [pc, #16]	; (8000a4c <resetLights+0x90>)
 8000a3c:	f001 f893 	bl	8001b66 <HAL_GPIO_WritePin>
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000050 	.word	0x20000050
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	40010c00 	.word	0x40010c00
 8000a50:	40010800 	.word	0x40010800

08000a54 <setRedLight1>:

void setRedLight1(int blink)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, blink);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	461a      	mov	r2, r3
 8000a62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a66:	4809      	ldr	r0, [pc, #36]	; (8000a8c <setRedLight1+0x38>)
 8000a68:	f001 f87d 	bl	8001b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a72:	4806      	ldr	r0, [pc, #24]	; (8000a8c <setRedLight1+0x38>)
 8000a74:	f001 f877 	bl	8001b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a7e:	4803      	ldr	r0, [pc, #12]	; (8000a8c <setRedLight1+0x38>)
 8000a80:	f001 f871 	bl	8001b66 <HAL_GPIO_WritePin>
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40010c00 	.word	0x40010c00

08000a90 <setGreenLight1>:
void setGreenLight1(int blink)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9e:	480a      	ldr	r0, [pc, #40]	; (8000ac8 <setGreenLight1+0x38>)
 8000aa0:	f001 f861 	bl	8001b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, blink);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <setGreenLight1+0x38>)
 8000ab0:	f001 f859 	bl	8001b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, GPIO_PIN_SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aba:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <setGreenLight1+0x38>)
 8000abc:	f001 f853 	bl	8001b66 <HAL_GPIO_WritePin>
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40010c00 	.word	0x40010c00

08000acc <setAmberLight1>:
void setAmberLight1(int blink)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ada:	480a      	ldr	r0, [pc, #40]	; (8000b04 <setAmberLight1+0x38>)
 8000adc:	f001 f843 	bl	8001b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ae6:	4807      	ldr	r0, [pc, #28]	; (8000b04 <setAmberLight1+0x38>)
 8000ae8:	f001 f83d 	bl	8001b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, blink);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000af6:	4803      	ldr	r0, [pc, #12]	; (8000b04 <setAmberLight1+0x38>)
 8000af8:	f001 f835 	bl	8001b66 <HAL_GPIO_WritePin>
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40010c00 	.word	0x40010c00

08000b08 <setRedLight2>:

void setRedLight2(int blink)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, blink);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	461a      	mov	r2, r3
 8000b16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1a:	4809      	ldr	r0, [pc, #36]	; (8000b40 <setRedLight2+0x38>)
 8000b1c:	f001 f823 	bl	8001b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b26:	4806      	ldr	r0, [pc, #24]	; (8000b40 <setRedLight2+0x38>)
 8000b28:	f001 f81d 	bl	8001b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b32:	4803      	ldr	r0, [pc, #12]	; (8000b40 <setRedLight2+0x38>)
 8000b34:	f001 f817 	bl	8001b66 <HAL_GPIO_WritePin>
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40010800 	.word	0x40010800

08000b44 <setGreenLight2>:
void setGreenLight2(int blink)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b52:	480a      	ldr	r0, [pc, #40]	; (8000b7c <setGreenLight2+0x38>)
 8000b54:	f001 f807 	bl	8001b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, blink);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b62:	4806      	ldr	r0, [pc, #24]	; (8000b7c <setGreenLight2+0x38>)
 8000b64:	f000 ffff 	bl	8001b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, GPIO_PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b6e:	4803      	ldr	r0, [pc, #12]	; (8000b7c <setGreenLight2+0x38>)
 8000b70:	f000 fff9 	bl	8001b66 <HAL_GPIO_WritePin>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40010800 	.word	0x40010800

08000b80 <setAmberLight2>:
void setAmberLight2(int blink)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b8e:	480a      	ldr	r0, [pc, #40]	; (8000bb8 <setAmberLight2+0x38>)
 8000b90:	f000 ffe9 	bl	8001b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b9a:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <setAmberLight2+0x38>)
 8000b9c:	f000 ffe3 	bl	8001b66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, blink);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000baa:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <setAmberLight2+0x38>)
 8000bac:	f000 ffdb 	bl	8001b66 <HAL_GPIO_WritePin>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40010800 	.word	0x40010800

08000bbc <display7SegmentLED>:

void display7SegmentLED(int number, GPIO_TypeDef *GPIOx[], uint16_t GPIO_Pins[])
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b0cd      	sub	sp, #308	; 0x134
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	6018      	str	r0, [r3, #0]
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	6019      	str	r1, [r3, #0]
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	601a      	str	r2, [r3, #0]
	int num[10][7] = {
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4a1e      	ldr	r2, [pc, #120]	; (8000c50 <display7SegmentLED+0x94>)
 8000bd8:	4618      	mov	r0, r3
 8000bda:	4611      	mov	r1, r2
 8000bdc:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000be0:	461a      	mov	r2, r3
 8000be2:	f002 fbf7 	bl	80033d4 <memcpy>
		{0, 0, 0, 1, 1, 1, 1}, // 7
		{0, 0, 0, 0, 0, 0, 0}, // 8
		{0, 0, 0, 0, 1, 0, 0}  // 9
	};

	for (int i = 0; i < 7; i++)
 8000be6:	2300      	movs	r3, #0
 8000be8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000bec:	e025      	b.n	8000c3a <display7SegmentLED+0x7e>
	{
		HAL_GPIO_WritePin(GPIOx[i], GPIO_Pins[i], num[number][i]);
 8000bee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	f107 0208 	add.w	r2, r7, #8
 8000bf8:	6812      	ldr	r2, [r2, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	6818      	ldr	r0, [r3, #0]
 8000bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	1d3a      	adds	r2, r7, #4
 8000c06:	6812      	ldr	r2, [r2, #0]
 8000c08:	4413      	add	r3, r2
 8000c0a:	881c      	ldrh	r4, [r3, #0]
 8000c0c:	f107 0114 	add.w	r1, r7, #20
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	4613      	mov	r3, r2
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	1a9b      	subs	r3, r3, r2
 8000c1c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000c20:	4413      	add	r3, r2
 8000c22:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4621      	mov	r1, r4
 8000c2c:	f000 ff9b 	bl	8001b66 <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++)
 8000c30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000c34:	3301      	adds	r3, #1
 8000c36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000c3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000c3e:	2b06      	cmp	r3, #6
 8000c40:	ddd5      	ble.n	8000bee <display7SegmentLED+0x32>
	}
}
 8000c42:	bf00      	nop
 8000c44:	bf00      	nop
 8000c46:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd90      	pop	{r4, r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	08003418 	.word	0x08003418

08000c54 <display7SegmentLight>:

void display7SegmentLight()
{
 8000c54:	b5b0      	push	{r4, r5, r7, lr}
 8000c56:	b08c      	sub	sp, #48	; 0x30
 8000c58:	af00      	add	r7, sp, #0
	uint16_t GPIO_Pins[] = {SEG0_Pin, SEG1_Pin, SEG2_Pin, SEG3_Pin,
 8000c5a:	4b85      	ldr	r3, [pc, #532]	; (8000e70 <display7SegmentLight+0x21c>)
 8000c5c:	f107 0420 	add.w	r4, r7, #32
 8000c60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c62:	c407      	stmia	r4!, {r0, r1, r2}
 8000c64:	8023      	strh	r3, [r4, #0]
							SEG4_Pin, SEG5_Pin, SEG6_Pin};
	GPIO_TypeDef * GPIOx[] = {SEG0_GPIO_Port, SEG1_GPIO_Port, SEG2_GPIO_Port,
 8000c66:	4b83      	ldr	r3, [pc, #524]	; (8000e74 <display7SegmentLight+0x220>)
 8000c68:	1d3c      	adds	r4, r7, #4
 8000c6a:	461d      	mov	r5, r3
 8000c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			SEG3_GPIO_Port, SEG4_GPIO_Port, SEG5_GPIO_Port, SEG6_GPIO_Port};
	switch (counter_lights)
 8000c78:	4b7f      	ldr	r3, [pc, #508]	; (8000e78 <display7SegmentLight+0x224>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	f200 80e6 	bhi.w	8000e50 <display7SegmentLight+0x1fc>
 8000c84:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <display7SegmentLight+0x38>)
 8000c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8a:	bf00      	nop
 8000c8c:	08000c9d 	.word	0x08000c9d
 8000c90:	08000cff 	.word	0x08000cff
 8000c94:	08000d6b 	.word	0x08000d6b
 8000c98:	08000dcb 	.word	0x08000dcb
	{
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2140      	movs	r1, #64	; 0x40
 8000ca0:	4876      	ldr	r0, [pc, #472]	; (8000e7c <display7SegmentLight+0x228>)
 8000ca2:	f000 ff60 	bl	8001b66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2180      	movs	r1, #128	; 0x80
 8000caa:	4874      	ldr	r0, [pc, #464]	; (8000e7c <display7SegmentLight+0x228>)
 8000cac:	f000 ff5b 	bl	8001b66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb6:	4871      	ldr	r0, [pc, #452]	; (8000e7c <display7SegmentLight+0x228>)
 8000cb8:	f000 ff55 	bl	8001b66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc2:	486e      	ldr	r0, [pc, #440]	; (8000e7c <display7SegmentLight+0x228>)
 8000cc4:	f000 ff4f 	bl	8001b66 <HAL_GPIO_WritePin>
		display7SegmentLED(counter_light_1 / 10, GPIOx, GPIO_Pins); // first digit of light 1
 8000cc8:	4b6d      	ldr	r3, [pc, #436]	; (8000e80 <display7SegmentLight+0x22c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a6d      	ldr	r2, [pc, #436]	; (8000e84 <display7SegmentLight+0x230>)
 8000cce:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd2:	1092      	asrs	r2, r2, #2
 8000cd4:	17db      	asrs	r3, r3, #31
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	f107 0220 	add.w	r2, r7, #32
 8000cdc:	1d39      	adds	r1, r7, #4
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ff6c 	bl	8000bbc <display7SegmentLED>
		if (timer_flag[3] == 1)
 8000ce4:	4b68      	ldr	r3, [pc, #416]	; (8000e88 <display7SegmentLight+0x234>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	f040 80b5 	bne.w	8000e58 <display7SegmentLight+0x204>
		{
			counter_lights = 2;
 8000cee:	4b62      	ldr	r3, [pc, #392]	; (8000e78 <display7SegmentLight+0x224>)
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	601a      	str	r2, [r3, #0]
			setTimer(3, 250);
 8000cf4:	21fa      	movs	r1, #250	; 0xfa
 8000cf6:	2003      	movs	r0, #3
 8000cf8:	f000 fa24 	bl	8001144 <setTimer>
		}
		break;
 8000cfc:	e0ac      	b.n	8000e58 <display7SegmentLight+0x204>
	case 2:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2140      	movs	r1, #64	; 0x40
 8000d02:	485e      	ldr	r0, [pc, #376]	; (8000e7c <display7SegmentLight+0x228>)
 8000d04:	f000 ff2f 	bl	8001b66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2180      	movs	r1, #128	; 0x80
 8000d0c:	485b      	ldr	r0, [pc, #364]	; (8000e7c <display7SegmentLight+0x228>)
 8000d0e:	f000 ff2a 	bl	8001b66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000d12:	2201      	movs	r2, #1
 8000d14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d18:	4858      	ldr	r0, [pc, #352]	; (8000e7c <display7SegmentLight+0x228>)
 8000d1a:	f000 ff24 	bl	8001b66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d24:	4855      	ldr	r0, [pc, #340]	; (8000e7c <display7SegmentLight+0x228>)
 8000d26:	f000 ff1e 	bl	8001b66 <HAL_GPIO_WritePin>
		display7SegmentLED(counter_light_1 % 10, GPIOx, GPIO_Pins); // second digit of light 1
 8000d2a:	4b55      	ldr	r3, [pc, #340]	; (8000e80 <display7SegmentLight+0x22c>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	4b55      	ldr	r3, [pc, #340]	; (8000e84 <display7SegmentLight+0x230>)
 8000d30:	fb83 1302 	smull	r1, r3, r3, r2
 8000d34:	1099      	asrs	r1, r3, #2
 8000d36:	17d3      	asrs	r3, r2, #31
 8000d38:	1ac8      	subs	r0, r1, r3
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4403      	add	r3, r0
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	1ad0      	subs	r0, r2, r3
 8000d44:	f107 0220 	add.w	r2, r7, #32
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f7ff ff36 	bl	8000bbc <display7SegmentLED>
		if (timer_flag[3] == 1)
 8000d50:	4b4d      	ldr	r3, [pc, #308]	; (8000e88 <display7SegmentLight+0x234>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	f040 8081 	bne.w	8000e5c <display7SegmentLight+0x208>
		{
			counter_lights = 3;
 8000d5a:	4b47      	ldr	r3, [pc, #284]	; (8000e78 <display7SegmentLight+0x224>)
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	601a      	str	r2, [r3, #0]
			setTimer(3, 250);
 8000d60:	21fa      	movs	r1, #250	; 0xfa
 8000d62:	2003      	movs	r0, #3
 8000d64:	f000 f9ee 	bl	8001144 <setTimer>
		}
		break;
 8000d68:	e078      	b.n	8000e5c <display7SegmentLight+0x208>
	case 3:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2140      	movs	r1, #64	; 0x40
 8000d6e:	4843      	ldr	r0, [pc, #268]	; (8000e7c <display7SegmentLight+0x228>)
 8000d70:	f000 fef9 	bl	8001b66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2180      	movs	r1, #128	; 0x80
 8000d78:	4840      	ldr	r0, [pc, #256]	; (8000e7c <display7SegmentLight+0x228>)
 8000d7a:	f000 fef4 	bl	8001b66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d84:	483d      	ldr	r0, [pc, #244]	; (8000e7c <display7SegmentLight+0x228>)
 8000d86:	f000 feee 	bl	8001b66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d90:	483a      	ldr	r0, [pc, #232]	; (8000e7c <display7SegmentLight+0x228>)
 8000d92:	f000 fee8 	bl	8001b66 <HAL_GPIO_WritePin>
		display7SegmentLED(counter_light_2 / 10, GPIOx, GPIO_Pins); // first digit of light 2
 8000d96:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <display7SegmentLight+0x238>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a3a      	ldr	r2, [pc, #232]	; (8000e84 <display7SegmentLight+0x230>)
 8000d9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000da0:	1092      	asrs	r2, r2, #2
 8000da2:	17db      	asrs	r3, r3, #31
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	f107 0220 	add.w	r2, r7, #32
 8000daa:	1d39      	adds	r1, r7, #4
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff05 	bl	8000bbc <display7SegmentLED>
		if (timer_flag[3] == 1)
 8000db2:	4b35      	ldr	r3, [pc, #212]	; (8000e88 <display7SegmentLight+0x234>)
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d152      	bne.n	8000e60 <display7SegmentLight+0x20c>
		{
			counter_lights = 4;
 8000dba:	4b2f      	ldr	r3, [pc, #188]	; (8000e78 <display7SegmentLight+0x224>)
 8000dbc:	2204      	movs	r2, #4
 8000dbe:	601a      	str	r2, [r3, #0]
			setTimer(3, 250);
 8000dc0:	21fa      	movs	r1, #250	; 0xfa
 8000dc2:	2003      	movs	r0, #3
 8000dc4:	f000 f9be 	bl	8001144 <setTimer>
		}
		break;
 8000dc8:	e04a      	b.n	8000e60 <display7SegmentLight+0x20c>
	case 4:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	482b      	ldr	r0, [pc, #172]	; (8000e7c <display7SegmentLight+0x228>)
 8000dd0:	f000 fec9 	bl	8001b66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2180      	movs	r1, #128	; 0x80
 8000dd8:	4828      	ldr	r0, [pc, #160]	; (8000e7c <display7SegmentLight+0x228>)
 8000dda:	f000 fec4 	bl	8001b66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000dde:	2201      	movs	r2, #1
 8000de0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de4:	4825      	ldr	r0, [pc, #148]	; (8000e7c <display7SegmentLight+0x228>)
 8000de6:	f000 febe 	bl	8001b66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df0:	4822      	ldr	r0, [pc, #136]	; (8000e7c <display7SegmentLight+0x228>)
 8000df2:	f000 feb8 	bl	8001b66 <HAL_GPIO_WritePin>
		display7SegmentLED(counter_light_2 % 10, GPIOx, GPIO_Pins); // second digit of light 2
 8000df6:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <display7SegmentLight+0x238>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <display7SegmentLight+0x230>)
 8000dfc:	fb83 1302 	smull	r1, r3, r3, r2
 8000e00:	1099      	asrs	r1, r3, #2
 8000e02:	17d3      	asrs	r3, r2, #31
 8000e04:	1ac8      	subs	r0, r1, r3
 8000e06:	4603      	mov	r3, r0
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4403      	add	r3, r0
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	1ad0      	subs	r0, r2, r3
 8000e10:	f107 0220 	add.w	r2, r7, #32
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	4619      	mov	r1, r3
 8000e18:	f7ff fed0 	bl	8000bbc <display7SegmentLED>
		if (timer_flag[3] == 1)
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <display7SegmentLight+0x234>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d11f      	bne.n	8000e64 <display7SegmentLight+0x210>
		{
			counter_lights = 1;
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <display7SegmentLight+0x224>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	601a      	str	r2, [r3, #0]
			if (status == AUTOMATIC_MODE)
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <display7SegmentLight+0x23c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d109      	bne.n	8000e46 <display7SegmentLight+0x1f2>
			{
				counter_light_1--;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <display7SegmentLight+0x22c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	4a11      	ldr	r2, [pc, #68]	; (8000e80 <display7SegmentLight+0x22c>)
 8000e3a:	6013      	str	r3, [r2, #0]
				counter_light_2--;
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <display7SegmentLight+0x238>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <display7SegmentLight+0x238>)
 8000e44:	6013      	str	r3, [r2, #0]
			}
			setTimer(3, 250);
 8000e46:	21fa      	movs	r1, #250	; 0xfa
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 f97b 	bl	8001144 <setTimer>
		}
		break;
 8000e4e:	e009      	b.n	8000e64 <display7SegmentLight+0x210>
	default:
		counter_lights = 1;
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <display7SegmentLight+0x224>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	601a      	str	r2, [r3, #0]
		break;
 8000e56:	e006      	b.n	8000e66 <display7SegmentLight+0x212>
		break;
 8000e58:	bf00      	nop
 8000e5a:	e004      	b.n	8000e66 <display7SegmentLight+0x212>
		break;
 8000e5c:	bf00      	nop
 8000e5e:	e002      	b.n	8000e66 <display7SegmentLight+0x212>
		break;
 8000e60:	bf00      	nop
 8000e62:	e000      	b.n	8000e66 <display7SegmentLight+0x212>
		break;
 8000e64:	bf00      	nop
	}
}
 8000e66:	bf00      	nop
 8000e68:	3730      	adds	r7, #48	; 0x30
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	08003530 	.word	0x08003530
 8000e74:	08003540 	.word	0x08003540
 8000e78:	20000020 	.word	0x20000020
 8000e7c:	40010c00 	.word	0x40010c00
 8000e80:	20000018 	.word	0x20000018
 8000e84:	66666667 	.word	0x66666667
 8000e88:	20000168 	.word	0x20000168
 8000e8c:	2000001c 	.word	0x2000001c
 8000e90:	20000000 	.word	0x20000000

08000e94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e98:	f000 fab4 	bl	8001404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9c:	f000 f820 	bl	8000ee0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000ea0:	f000 f85a 	bl	8000f58 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000ea4:	f000 f8ce 	bl	8001044 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ea8:	f000 f8a2 	bl	8000ff0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000eac:	480a      	ldr	r0, [pc, #40]	; (8000ed8 <main+0x44>)
 8000eae:	f001 fadd 	bl	800246c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	initButton();
 8000eb2:	f7ff f94b 	bl	800014c <initButton>
	while (1) {
		if (status == AUTOMATIC_MODE)
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <main+0x48>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d102      	bne.n	8000ec4 <main+0x30>
			fsm_automatic_run();
 8000ebe:	f7ff fa65 	bl	800038c <fsm_automatic_run>
 8000ec2:	e005      	b.n	8000ed0 <main+0x3c>
		else if (status == MANUAL_MODE)
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <main+0x48>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d101      	bne.n	8000ed0 <main+0x3c>
			fsm_manual_run();
 8000ecc:	f7ff fba4 	bl	8000618 <fsm_manual_run>
		display7SegmentLight();
 8000ed0:	f7ff fec0 	bl	8000c54 <display7SegmentLight>
		if (status == AUTOMATIC_MODE)
 8000ed4:	e7ef      	b.n	8000eb6 <main+0x22>
 8000ed6:	bf00      	nop
 8000ed8:	200000cc 	.word	0x200000cc
 8000edc:	20000000 	.word	0x20000000

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b090      	sub	sp, #64	; 0x40
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	f107 0318 	add.w	r3, r7, #24
 8000eea:	2228      	movs	r2, #40	; 0x28
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 fa7e 	bl	80033f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f02:	2302      	movs	r3, #2
 8000f04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f06:	2301      	movs	r3, #1
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f0a:	2310      	movs	r3, #16
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f12:	f107 0318 	add.w	r3, r7, #24
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fe3e 	bl	8001b98 <HAL_RCC_OscConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f22:	f000 f909 	bl	8001138 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f26:	230f      	movs	r3, #15
 8000f28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 f8aa 	bl	8002098 <HAL_RCC_ClockConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f4a:	f000 f8f5 	bl	8001138 <Error_Handler>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3740      	adds	r7, #64	; 0x40
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <MX_TIM2_Init+0x94>)
 8000f76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <MX_TIM2_Init+0x94>)
 8000f7e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <MX_TIM2_Init+0x94>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <MX_TIM2_Init+0x94>)
 8000f8c:	2209      	movs	r2, #9
 8000f8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <MX_TIM2_Init+0x94>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <MX_TIM2_Init+0x94>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f9c:	4813      	ldr	r0, [pc, #76]	; (8000fec <MX_TIM2_Init+0x94>)
 8000f9e:	f001 fa15 	bl	80023cc <HAL_TIM_Base_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fa8:	f000 f8c6 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480c      	ldr	r0, [pc, #48]	; (8000fec <MX_TIM2_Init+0x94>)
 8000fba:	f001 fbab 	bl	8002714 <HAL_TIM_ConfigClockSource>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fc4:	f000 f8b8 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_TIM2_Init+0x94>)
 8000fd6:	f001 fd73 	bl	8002ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fe0:	f000 f8aa 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200000cc 	.word	0x200000cc

08000ff0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <MX_USART2_UART_Init+0x50>)
 8000ff8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8000ffc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001000:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_USART2_UART_Init+0x4c>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8001016:	220c      	movs	r2, #12
 8001018:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_USART2_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_USART2_UART_Init+0x4c>)
 8001028:	f001 fdb4 	bl	8002b94 <HAL_UART_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001032:	f000 f881 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000114 	.word	0x20000114
 8001040:	40004400 	.word	0x40004400

08001044 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <MX_GPIO_Init+0xd0>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a2d      	ldr	r2, [pc, #180]	; (8001114 <MX_GPIO_Init+0xd0>)
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <MX_GPIO_Init+0xd0>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001070:	4b28      	ldr	r3, [pc, #160]	; (8001114 <MX_GPIO_Init+0xd0>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a27      	ldr	r2, [pc, #156]	; (8001114 <MX_GPIO_Init+0xd0>)
 8001076:	f043 0308 	orr.w	r3, r3, #8
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b25      	ldr	r3, [pc, #148]	; (8001114 <MX_GPIO_Init+0xd0>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0308 	and.w	r3, r3, #8
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG2_Pin|BUZZER_Pin|SEG3_Pin|D7_PEDESTRIAN_Pin
 8001088:	2200      	movs	r2, #0
 800108a:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800108e:	4822      	ldr	r0, [pc, #136]	; (8001118 <MX_GPIO_Init+0xd4>)
 8001090:	f000 fd69 	bl	8001b66 <HAL_GPIO_WritePin>
                          |SEG4_Pin|LED_1_Pin|SEG5_Pin|SEG6_Pin
                          |LED_RED_2_Pin|LED_AMBER_2_Pin|LED_GREEN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|D6_PEDESTRIAN_Pin|LED_RED_1_Pin
 8001094:	2200      	movs	r2, #0
 8001096:	f24e 71fe 	movw	r1, #59390	; 0xe7fe
 800109a:	4820      	ldr	r0, [pc, #128]	; (800111c <MX_GPIO_Init+0xd8>)
 800109c:	f000 fd63 	bl	8001b66 <HAL_GPIO_WritePin>
                          |LED_AMBER_1_Pin|LED_GREEN_1_Pin|LED_2_Pin|LED_4_Pin
                          |LED_3_Pin|EN0_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_PEDESTRIAN_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_PEDESTRIAN_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 80010a0:	2313      	movs	r3, #19
 80010a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 0308 	add.w	r3, r7, #8
 80010b0:	4619      	mov	r1, r3
 80010b2:	4819      	ldr	r0, [pc, #100]	; (8001118 <MX_GPIO_Init+0xd4>)
 80010b4:	f000 fbc6 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG2_Pin BUZZER_Pin SEG3_Pin D7_PEDESTRIAN_Pin
                           SEG4_Pin LED_1_Pin SEG5_Pin SEG6_Pin
                           LED_RED_2_Pin LED_AMBER_2_Pin LED_GREEN_2_Pin */
  GPIO_InitStruct.Pin = SEG2_Pin|BUZZER_Pin|SEG3_Pin|D7_PEDESTRIAN_Pin
 80010b8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80010bc:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|LED_1_Pin|SEG5_Pin|SEG6_Pin
                          |LED_RED_2_Pin|LED_AMBER_2_Pin|LED_GREEN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2302      	movs	r3, #2
 80010c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	4619      	mov	r1, r3
 80010d0:	4811      	ldr	r0, [pc, #68]	; (8001118 <MX_GPIO_Init+0xd4>)
 80010d2:	f000 fbb7 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin;
 80010d6:	2301      	movs	r3, #1
 80010d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010de:	2301      	movs	r3, #1
 80010e0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_3_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	4619      	mov	r1, r3
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <MX_GPIO_Init+0xd8>)
 80010ea:	f000 fbab 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin D6_PEDESTRIAN_Pin LED_RED_1_Pin
                           LED_AMBER_1_Pin LED_GREEN_1_Pin LED_2_Pin LED_4_Pin
                           LED_3_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|D6_PEDESTRIAN_Pin|LED_RED_1_Pin
 80010ee:	f24e 73fe 	movw	r3, #59390	; 0xe7fe
 80010f2:	60bb      	str	r3, [r7, #8]
                          |LED_AMBER_1_Pin|LED_GREEN_1_Pin|LED_2_Pin|LED_4_Pin
                          |LED_3_Pin|EN0_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f4:	2301      	movs	r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2302      	movs	r3, #2
 80010fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	4619      	mov	r1, r3
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_GPIO_Init+0xd8>)
 8001108:	f000 fb9c 	bl	8001844 <HAL_GPIO_Init>

}
 800110c:	bf00      	nop
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40021000 	.word	0x40021000
 8001118:	40010800 	.word	0x40010800
 800111c:	40010c00 	.word	0x40010c00

08001120 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	timerRun();
 8001128:	f000 f82c 	bl	8001184 <timerRun>
	getKeyInput();
 800112c:	f7ff f84a 	bl	80001c4 <getKeyInput>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001140:	e7fe      	b.n	8001140 <Error_Handler+0x8>
	...

08001144 <setTimer>:
#define TIMER_CYCLE 10

int timer_flag[NO_TIMERS + 1];
int timer_counter[NO_TIMERS + 1];

void setTimer(int flagNo, int duration) {
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
	timer_counter[flagNo] = duration / TIMER_CYCLE;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	4a09      	ldr	r2, [pc, #36]	; (8001178 <setTimer+0x34>)
 8001152:	fb82 1203 	smull	r1, r2, r2, r3
 8001156:	1092      	asrs	r2, r2, #2
 8001158:	17db      	asrs	r3, r3, #31
 800115a:	1ad2      	subs	r2, r2, r3
 800115c:	4907      	ldr	r1, [pc, #28]	; (800117c <setTimer+0x38>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[flagNo] = 0;
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <setTimer+0x3c>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2100      	movs	r1, #0
 800116a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	66666667 	.word	0x66666667
 800117c:	20000158 	.word	0x20000158
 8001180:	20000168 	.word	0x20000168

08001184 <timerRun>:

void timerRun() {
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
	for (int flagNo = 1; flagNo <= NO_TIMERS; flagNo++) {
 800118a:	2301      	movs	r3, #1
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	e01c      	b.n	80011ca <timerRun+0x46>
		if (timer_counter[flagNo] > 0) {
 8001190:	4a12      	ldr	r2, [pc, #72]	; (80011dc <timerRun+0x58>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001198:	2b00      	cmp	r3, #0
 800119a:	dd13      	ble.n	80011c4 <timerRun+0x40>
			timer_counter[flagNo]--;
 800119c:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <timerRun+0x58>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a4:	1e5a      	subs	r2, r3, #1
 80011a6:	490d      	ldr	r1, [pc, #52]	; (80011dc <timerRun+0x58>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[flagNo] <= 0) {
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <timerRun+0x58>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	dc04      	bgt.n	80011c4 <timerRun+0x40>
				timer_flag[flagNo] = 1;
 80011ba:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <timerRun+0x5c>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2101      	movs	r1, #1
 80011c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int flagNo = 1; flagNo <= NO_TIMERS; flagNo++) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3301      	adds	r3, #1
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	dddf      	ble.n	8001190 <timerRun+0xc>
			}
		}
	}
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	20000158 	.word	0x20000158
 80011e0:	20000168 	.word	0x20000168

080011e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_MspInit+0x5c>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	4a14      	ldr	r2, [pc, #80]	; (8001240 <HAL_MspInit+0x5c>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6193      	str	r3, [r2, #24]
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_MspInit+0x5c>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <HAL_MspInit+0x5c>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <HAL_MspInit+0x5c>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120c:	61d3      	str	r3, [r2, #28]
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HAL_MspInit+0x5c>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_MspInit+0x60>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <HAL_MspInit+0x60>)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	40021000 	.word	0x40021000
 8001244:	40010000 	.word	0x40010000

08001248 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001258:	d113      	bne.n	8001282 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <HAL_TIM_Base_MspInit+0x44>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <HAL_TIM_Base_MspInit+0x44>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	61d3      	str	r3, [r2, #28]
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_TIM_Base_MspInit+0x44>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	201c      	movs	r0, #28
 8001278:	f000 f9fd 	bl	8001676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800127c:	201c      	movs	r0, #28
 800127e:	f000 fa16 	bl	80016ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000

08001290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a1f      	ldr	r2, [pc, #124]	; (8001328 <HAL_UART_MspInit+0x98>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d137      	bne.n	8001320 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012b0:	4b1e      	ldr	r3, [pc, #120]	; (800132c <HAL_UART_MspInit+0x9c>)
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	4a1d      	ldr	r2, [pc, #116]	; (800132c <HAL_UART_MspInit+0x9c>)
 80012b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ba:	61d3      	str	r3, [r2, #28]
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <HAL_UART_MspInit+0x9c>)
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_UART_MspInit+0x9c>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a17      	ldr	r2, [pc, #92]	; (800132c <HAL_UART_MspInit+0x9c>)
 80012ce:	f043 0304 	orr.w	r3, r3, #4
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_UART_MspInit+0x9c>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012e0:	2304      	movs	r3, #4
 80012e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	4619      	mov	r1, r3
 80012f2:	480f      	ldr	r0, [pc, #60]	; (8001330 <HAL_UART_MspInit+0xa0>)
 80012f4:	f000 faa6 	bl	8001844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012f8:	2308      	movs	r3, #8
 80012fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	4619      	mov	r1, r3
 800130a:	4809      	ldr	r0, [pc, #36]	; (8001330 <HAL_UART_MspInit+0xa0>)
 800130c:	f000 fa9a 	bl	8001844 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	2026      	movs	r0, #38	; 0x26
 8001316:	f000 f9ae 	bl	8001676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800131a:	2026      	movs	r0, #38	; 0x26
 800131c:	f000 f9c7 	bl	80016ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001320:	bf00      	nop
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40004400 	.word	0x40004400
 800132c:	40021000 	.word	0x40021000
 8001330:	40010800 	.word	0x40010800

08001334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <NMI_Handler+0x4>

0800133a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <HardFault_Handler+0x4>

08001340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <MemManage_Handler+0x4>

08001346 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <BusFault_Handler+0x4>

0800134c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <UsageFault_Handler+0x4>

08001352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr

0800135e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137a:	f000 f889 	bl	8001490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <TIM2_IRQHandler+0x10>)
 800138a:	f001 f8bb 	bl	8002504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200000cc 	.word	0x200000cc

08001398 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <USART2_IRQHandler+0x10>)
 800139e:	f001 fc47 	bl	8002c30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000114 	.word	0x20000114

080013ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ba:	490d      	ldr	r1, [pc, #52]	; (80013f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013bc:	4a0d      	ldr	r2, [pc, #52]	; (80013f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c0:	e002      	b.n	80013c8 <LoopCopyDataInit>

080013c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c6:	3304      	adds	r3, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013cc:	d3f9      	bcc.n	80013c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d0:	4c0a      	ldr	r4, [pc, #40]	; (80013fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d4:	e001      	b.n	80013da <LoopFillZerobss>

080013d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d8:	3204      	adds	r2, #4

080013da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013dc:	d3fb      	bcc.n	80013d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013de:	f7ff ffe5 	bl	80013ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013e2:	f001 ffd3 	bl	800338c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013e6:	f7ff fd55 	bl	8000e94 <main>
  bx lr
 80013ea:	4770      	bx	lr
  ldr r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f0:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80013f4:	0800358c 	.word	0x0800358c
  ldr r2, =_sbss
 80013f8:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80013fc:	2000017c 	.word	0x2000017c

08001400 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC1_2_IRQHandler>
	...

08001404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <HAL_Init+0x28>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a07      	ldr	r2, [pc, #28]	; (800142c <HAL_Init+0x28>)
 800140e:	f043 0310 	orr.w	r3, r3, #16
 8001412:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001414:	2003      	movs	r0, #3
 8001416:	f000 f923 	bl	8001660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800141a:	200f      	movs	r0, #15
 800141c:	f000 f808 	bl	8001430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001420:	f7ff fee0 	bl	80011e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40022000 	.word	0x40022000

08001430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_InitTick+0x54>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_InitTick+0x58>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001446:	fbb3 f3f1 	udiv	r3, r3, r1
 800144a:	fbb2 f3f3 	udiv	r3, r2, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f93b 	bl	80016ca <HAL_SYSTICK_Config>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e00e      	b.n	800147c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b0f      	cmp	r3, #15
 8001462:	d80a      	bhi.n	800147a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001464:	2200      	movs	r2, #0
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f000 f903 	bl	8001676 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001470:	4a06      	ldr	r2, [pc, #24]	; (800148c <HAL_InitTick+0x5c>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	e000      	b.n	800147c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000024 	.word	0x20000024
 8001488:	2000002c 	.word	0x2000002c
 800148c:	20000028 	.word	0x20000028

08001490 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_IncTick+0x1c>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_IncTick+0x20>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	4a03      	ldr	r2, [pc, #12]	; (80014b0 <HAL_IncTick+0x20>)
 80014a2:	6013      	str	r3, [r2, #0]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	2000002c 	.word	0x2000002c
 80014b0:	20000178 	.word	0x20000178

080014b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return uwTick;
 80014b8:	4b02      	ldr	r3, [pc, #8]	; (80014c4 <HAL_GetTick+0x10>)
 80014ba:	681b      	ldr	r3, [r3, #0]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	20000178 	.word	0x20000178

080014c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e4:	4013      	ands	r3, r2
 80014e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	60d3      	str	r3, [r2, #12]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001514:	4b04      	ldr	r3, [pc, #16]	; (8001528 <__NVIC_GetPriorityGrouping+0x18>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	f003 0307 	and.w	r3, r3, #7
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	2b00      	cmp	r3, #0
 800153c:	db0b      	blt.n	8001556 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	f003 021f 	and.w	r2, r3, #31
 8001544:	4906      	ldr	r1, [pc, #24]	; (8001560 <__NVIC_EnableIRQ+0x34>)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	095b      	lsrs	r3, r3, #5
 800154c:	2001      	movs	r0, #1
 800154e:	fa00 f202 	lsl.w	r2, r0, r2
 8001552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	e000e100 	.word	0xe000e100

08001564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001574:	2b00      	cmp	r3, #0
 8001576:	db0a      	blt.n	800158e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	490c      	ldr	r1, [pc, #48]	; (80015b0 <__NVIC_SetPriority+0x4c>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	0112      	lsls	r2, r2, #4
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	440b      	add	r3, r1
 8001588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800158c:	e00a      	b.n	80015a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4908      	ldr	r1, [pc, #32]	; (80015b4 <__NVIC_SetPriority+0x50>)
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	3b04      	subs	r3, #4
 800159c:	0112      	lsls	r2, r2, #4
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	440b      	add	r3, r1
 80015a2:	761a      	strb	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000e100 	.word	0xe000e100
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f1c3 0307 	rsb	r3, r3, #7
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	bf28      	it	cs
 80015d6:	2304      	movcs	r3, #4
 80015d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3304      	adds	r3, #4
 80015de:	2b06      	cmp	r3, #6
 80015e0:	d902      	bls.n	80015e8 <NVIC_EncodePriority+0x30>
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3b03      	subs	r3, #3
 80015e6:	e000      	b.n	80015ea <NVIC_EncodePriority+0x32>
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	f04f 32ff 	mov.w	r2, #4294967295
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43da      	mvns	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	401a      	ands	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001600:	f04f 31ff 	mov.w	r1, #4294967295
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43d9      	mvns	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	4313      	orrs	r3, r2
         );
}
 8001612:	4618      	mov	r0, r3
 8001614:	3724      	adds	r7, #36	; 0x24
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800162c:	d301      	bcc.n	8001632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162e:	2301      	movs	r3, #1
 8001630:	e00f      	b.n	8001652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <SysTick_Config+0x40>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800163a:	210f      	movs	r1, #15
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	f7ff ff90 	bl	8001564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <SysTick_Config+0x40>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <SysTick_Config+0x40>)
 800164c:	2207      	movs	r2, #7
 800164e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	e000e010 	.word	0xe000e010

08001660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff ff2d 	bl	80014c8 <__NVIC_SetPriorityGrouping>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
 8001682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001688:	f7ff ff42 	bl	8001510 <__NVIC_GetPriorityGrouping>
 800168c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	6978      	ldr	r0, [r7, #20]
 8001694:	f7ff ff90 	bl	80015b8 <NVIC_EncodePriority>
 8001698:	4602      	mov	r2, r0
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff5f 	bl	8001564 <__NVIC_SetPriority>
}
 80016a6:	bf00      	nop
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff35 	bl	800152c <__NVIC_EnableIRQ>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ffa2 	bl	800161c <SysTick_Config>
 80016d8:	4603      	mov	r3, r0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b085      	sub	sp, #20
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d008      	beq.n	800170a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2204      	movs	r2, #4
 80016fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e020      	b.n	800174c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 020e 	bic.w	r2, r2, #14
 8001718:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0201 	bic.w	r2, r2, #1
 8001728:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001732:	2101      	movs	r1, #1
 8001734:	fa01 f202 	lsl.w	r2, r1, r2
 8001738:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800174a:	7bfb      	ldrb	r3, [r7, #15]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
	...

08001758 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800176a:	2b02      	cmp	r3, #2
 800176c:	d005      	beq.n	800177a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2204      	movs	r2, #4
 8001772:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	e051      	b.n	800181e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 020e 	bic.w	r2, r2, #14
 8001788:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0201 	bic.w	r2, r2, #1
 8001798:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a22      	ldr	r2, [pc, #136]	; (8001828 <HAL_DMA_Abort_IT+0xd0>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d029      	beq.n	80017f8 <HAL_DMA_Abort_IT+0xa0>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a20      	ldr	r2, [pc, #128]	; (800182c <HAL_DMA_Abort_IT+0xd4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d022      	beq.n	80017f4 <HAL_DMA_Abort_IT+0x9c>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a1f      	ldr	r2, [pc, #124]	; (8001830 <HAL_DMA_Abort_IT+0xd8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d01a      	beq.n	80017ee <HAL_DMA_Abort_IT+0x96>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a1d      	ldr	r2, [pc, #116]	; (8001834 <HAL_DMA_Abort_IT+0xdc>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d012      	beq.n	80017e8 <HAL_DMA_Abort_IT+0x90>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a1c      	ldr	r2, [pc, #112]	; (8001838 <HAL_DMA_Abort_IT+0xe0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d00a      	beq.n	80017e2 <HAL_DMA_Abort_IT+0x8a>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a1a      	ldr	r2, [pc, #104]	; (800183c <HAL_DMA_Abort_IT+0xe4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d102      	bne.n	80017dc <HAL_DMA_Abort_IT+0x84>
 80017d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017da:	e00e      	b.n	80017fa <HAL_DMA_Abort_IT+0xa2>
 80017dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017e0:	e00b      	b.n	80017fa <HAL_DMA_Abort_IT+0xa2>
 80017e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017e6:	e008      	b.n	80017fa <HAL_DMA_Abort_IT+0xa2>
 80017e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ec:	e005      	b.n	80017fa <HAL_DMA_Abort_IT+0xa2>
 80017ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f2:	e002      	b.n	80017fa <HAL_DMA_Abort_IT+0xa2>
 80017f4:	2310      	movs	r3, #16
 80017f6:	e000      	b.n	80017fa <HAL_DMA_Abort_IT+0xa2>
 80017f8:	2301      	movs	r3, #1
 80017fa:	4a11      	ldr	r2, [pc, #68]	; (8001840 <HAL_DMA_Abort_IT+0xe8>)
 80017fc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	4798      	blx	r3
    } 
  }
  return status;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40020008 	.word	0x40020008
 800182c:	4002001c 	.word	0x4002001c
 8001830:	40020030 	.word	0x40020030
 8001834:	40020044 	.word	0x40020044
 8001838:	40020058 	.word	0x40020058
 800183c:	4002006c 	.word	0x4002006c
 8001840:	40020000 	.word	0x40020000

08001844 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001844:	b480      	push	{r7}
 8001846:	b08b      	sub	sp, #44	; 0x2c
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001856:	e148      	b.n	8001aea <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001858:	2201      	movs	r2, #1
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	429a      	cmp	r2, r3
 8001872:	f040 8137 	bne.w	8001ae4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4aa3      	ldr	r2, [pc, #652]	; (8001b08 <HAL_GPIO_Init+0x2c4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d05e      	beq.n	800193e <HAL_GPIO_Init+0xfa>
 8001880:	4aa1      	ldr	r2, [pc, #644]	; (8001b08 <HAL_GPIO_Init+0x2c4>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d875      	bhi.n	8001972 <HAL_GPIO_Init+0x12e>
 8001886:	4aa1      	ldr	r2, [pc, #644]	; (8001b0c <HAL_GPIO_Init+0x2c8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d058      	beq.n	800193e <HAL_GPIO_Init+0xfa>
 800188c:	4a9f      	ldr	r2, [pc, #636]	; (8001b0c <HAL_GPIO_Init+0x2c8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d86f      	bhi.n	8001972 <HAL_GPIO_Init+0x12e>
 8001892:	4a9f      	ldr	r2, [pc, #636]	; (8001b10 <HAL_GPIO_Init+0x2cc>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d052      	beq.n	800193e <HAL_GPIO_Init+0xfa>
 8001898:	4a9d      	ldr	r2, [pc, #628]	; (8001b10 <HAL_GPIO_Init+0x2cc>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d869      	bhi.n	8001972 <HAL_GPIO_Init+0x12e>
 800189e:	4a9d      	ldr	r2, [pc, #628]	; (8001b14 <HAL_GPIO_Init+0x2d0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d04c      	beq.n	800193e <HAL_GPIO_Init+0xfa>
 80018a4:	4a9b      	ldr	r2, [pc, #620]	; (8001b14 <HAL_GPIO_Init+0x2d0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d863      	bhi.n	8001972 <HAL_GPIO_Init+0x12e>
 80018aa:	4a9b      	ldr	r2, [pc, #620]	; (8001b18 <HAL_GPIO_Init+0x2d4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d046      	beq.n	800193e <HAL_GPIO_Init+0xfa>
 80018b0:	4a99      	ldr	r2, [pc, #612]	; (8001b18 <HAL_GPIO_Init+0x2d4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d85d      	bhi.n	8001972 <HAL_GPIO_Init+0x12e>
 80018b6:	2b12      	cmp	r3, #18
 80018b8:	d82a      	bhi.n	8001910 <HAL_GPIO_Init+0xcc>
 80018ba:	2b12      	cmp	r3, #18
 80018bc:	d859      	bhi.n	8001972 <HAL_GPIO_Init+0x12e>
 80018be:	a201      	add	r2, pc, #4	; (adr r2, 80018c4 <HAL_GPIO_Init+0x80>)
 80018c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c4:	0800193f 	.word	0x0800193f
 80018c8:	08001919 	.word	0x08001919
 80018cc:	0800192b 	.word	0x0800192b
 80018d0:	0800196d 	.word	0x0800196d
 80018d4:	08001973 	.word	0x08001973
 80018d8:	08001973 	.word	0x08001973
 80018dc:	08001973 	.word	0x08001973
 80018e0:	08001973 	.word	0x08001973
 80018e4:	08001973 	.word	0x08001973
 80018e8:	08001973 	.word	0x08001973
 80018ec:	08001973 	.word	0x08001973
 80018f0:	08001973 	.word	0x08001973
 80018f4:	08001973 	.word	0x08001973
 80018f8:	08001973 	.word	0x08001973
 80018fc:	08001973 	.word	0x08001973
 8001900:	08001973 	.word	0x08001973
 8001904:	08001973 	.word	0x08001973
 8001908:	08001921 	.word	0x08001921
 800190c:	08001935 	.word	0x08001935
 8001910:	4a82      	ldr	r2, [pc, #520]	; (8001b1c <HAL_GPIO_Init+0x2d8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d013      	beq.n	800193e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001916:	e02c      	b.n	8001972 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	623b      	str	r3, [r7, #32]
          break;
 800191e:	e029      	b.n	8001974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	3304      	adds	r3, #4
 8001926:	623b      	str	r3, [r7, #32]
          break;
 8001928:	e024      	b.n	8001974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	3308      	adds	r3, #8
 8001930:	623b      	str	r3, [r7, #32]
          break;
 8001932:	e01f      	b.n	8001974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	330c      	adds	r3, #12
 800193a:	623b      	str	r3, [r7, #32]
          break;
 800193c:	e01a      	b.n	8001974 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d102      	bne.n	800194c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001946:	2304      	movs	r3, #4
 8001948:	623b      	str	r3, [r7, #32]
          break;
 800194a:	e013      	b.n	8001974 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d105      	bne.n	8001960 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001954:	2308      	movs	r3, #8
 8001956:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	611a      	str	r2, [r3, #16]
          break;
 800195e:	e009      	b.n	8001974 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001960:	2308      	movs	r3, #8
 8001962:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	615a      	str	r2, [r3, #20]
          break;
 800196a:	e003      	b.n	8001974 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800196c:	2300      	movs	r3, #0
 800196e:	623b      	str	r3, [r7, #32]
          break;
 8001970:	e000      	b.n	8001974 <HAL_GPIO_Init+0x130>
          break;
 8001972:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2bff      	cmp	r3, #255	; 0xff
 8001978:	d801      	bhi.n	800197e <HAL_GPIO_Init+0x13a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	e001      	b.n	8001982 <HAL_GPIO_Init+0x13e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3304      	adds	r3, #4
 8001982:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2bff      	cmp	r3, #255	; 0xff
 8001988:	d802      	bhi.n	8001990 <HAL_GPIO_Init+0x14c>
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	e002      	b.n	8001996 <HAL_GPIO_Init+0x152>
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	3b08      	subs	r3, #8
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	210f      	movs	r1, #15
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	fa01 f303 	lsl.w	r3, r1, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	401a      	ands	r2, r3
 80019a8:	6a39      	ldr	r1, [r7, #32]
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	431a      	orrs	r2, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 8090 	beq.w	8001ae4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019c4:	4b56      	ldr	r3, [pc, #344]	; (8001b20 <HAL_GPIO_Init+0x2dc>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a55      	ldr	r2, [pc, #340]	; (8001b20 <HAL_GPIO_Init+0x2dc>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b53      	ldr	r3, [pc, #332]	; (8001b20 <HAL_GPIO_Init+0x2dc>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019dc:	4a51      	ldr	r2, [pc, #324]	; (8001b24 <HAL_GPIO_Init+0x2e0>)
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	3302      	adds	r3, #2
 80019e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	220f      	movs	r2, #15
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	4013      	ands	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a49      	ldr	r2, [pc, #292]	; (8001b28 <HAL_GPIO_Init+0x2e4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d00d      	beq.n	8001a24 <HAL_GPIO_Init+0x1e0>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a48      	ldr	r2, [pc, #288]	; (8001b2c <HAL_GPIO_Init+0x2e8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d007      	beq.n	8001a20 <HAL_GPIO_Init+0x1dc>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a47      	ldr	r2, [pc, #284]	; (8001b30 <HAL_GPIO_Init+0x2ec>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_GPIO_Init+0x1d8>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e004      	b.n	8001a26 <HAL_GPIO_Init+0x1e2>
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e002      	b.n	8001a26 <HAL_GPIO_Init+0x1e2>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <HAL_GPIO_Init+0x1e2>
 8001a24:	2300      	movs	r3, #0
 8001a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a28:	f002 0203 	and.w	r2, r2, #3
 8001a2c:	0092      	lsls	r2, r2, #2
 8001a2e:	4093      	lsls	r3, r2
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a36:	493b      	ldr	r1, [pc, #236]	; (8001b24 <HAL_GPIO_Init+0x2e0>)
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	089b      	lsrs	r3, r3, #2
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d006      	beq.n	8001a5e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a50:	4b38      	ldr	r3, [pc, #224]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4937      	ldr	r1, [pc, #220]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
 8001a5c:	e006      	b.n	8001a6c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a5e:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	4933      	ldr	r1, [pc, #204]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d006      	beq.n	8001a86 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a78:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	492d      	ldr	r1, [pc, #180]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a86:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	4929      	ldr	r1, [pc, #164]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aa0:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	4923      	ldr	r1, [pc, #140]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	608b      	str	r3, [r1, #8]
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aae:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	491f      	ldr	r1, [pc, #124]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d006      	beq.n	8001ad6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	4919      	ldr	r1, [pc, #100]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	60cb      	str	r3, [r1, #12]
 8001ad4:	e006      	b.n	8001ae4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ad6:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	4915      	ldr	r1, [pc, #84]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	fa22 f303 	lsr.w	r3, r2, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f47f aeaf 	bne.w	8001858 <HAL_GPIO_Init+0x14>
  }
}
 8001afa:	bf00      	nop
 8001afc:	bf00      	nop
 8001afe:	372c      	adds	r7, #44	; 0x2c
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	10320000 	.word	0x10320000
 8001b0c:	10310000 	.word	0x10310000
 8001b10:	10220000 	.word	0x10220000
 8001b14:	10210000 	.word	0x10210000
 8001b18:	10120000 	.word	0x10120000
 8001b1c:	10110000 	.word	0x10110000
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40010000 	.word	0x40010000
 8001b28:	40010800 	.word	0x40010800
 8001b2c:	40010c00 	.word	0x40010c00
 8001b30:	40011000 	.word	0x40011000
 8001b34:	40010400 	.word	0x40010400

08001b38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	887b      	ldrh	r3, [r7, #2]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	e001      	b.n	8001b5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr

08001b66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	807b      	strh	r3, [r7, #2]
 8001b72:	4613      	mov	r3, r2
 8001b74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b76:	787b      	ldrb	r3, [r7, #1]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b7c:	887a      	ldrh	r2, [r7, #2]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b82:	e003      	b.n	8001b8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b84:	887b      	ldrh	r3, [r7, #2]
 8001b86:	041a      	lsls	r2, r3, #16
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	611a      	str	r2, [r3, #16]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
	...

08001b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e26c      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 8087 	beq.w	8001cc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bb8:	4b92      	ldr	r3, [pc, #584]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 030c 	and.w	r3, r3, #12
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d00c      	beq.n	8001bde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bc4:	4b8f      	ldr	r3, [pc, #572]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d112      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x5e>
 8001bd0:	4b8c      	ldr	r3, [pc, #560]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bdc:	d10b      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bde:	4b89      	ldr	r3, [pc, #548]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d06c      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x12c>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d168      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e246      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfe:	d106      	bne.n	8001c0e <HAL_RCC_OscConfig+0x76>
 8001c00:	4b80      	ldr	r3, [pc, #512]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a7f      	ldr	r2, [pc, #508]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	e02e      	b.n	8001c6c <HAL_RCC_OscConfig+0xd4>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x98>
 8001c16:	4b7b      	ldr	r3, [pc, #492]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a7a      	ldr	r2, [pc, #488]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	4b78      	ldr	r3, [pc, #480]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a77      	ldr	r2, [pc, #476]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	e01d      	b.n	8001c6c <HAL_RCC_OscConfig+0xd4>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c38:	d10c      	bne.n	8001c54 <HAL_RCC_OscConfig+0xbc>
 8001c3a:	4b72      	ldr	r3, [pc, #456]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a71      	ldr	r2, [pc, #452]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	4b6f      	ldr	r3, [pc, #444]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a6e      	ldr	r2, [pc, #440]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e00b      	b.n	8001c6c <HAL_RCC_OscConfig+0xd4>
 8001c54:	4b6b      	ldr	r3, [pc, #428]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a6a      	ldr	r2, [pc, #424]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	4b68      	ldr	r3, [pc, #416]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a67      	ldr	r2, [pc, #412]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d013      	beq.n	8001c9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7ff fc1e 	bl	80014b4 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c7c:	f7ff fc1a 	bl	80014b4 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b64      	cmp	r3, #100	; 0x64
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e1fa      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8e:	4b5d      	ldr	r3, [pc, #372]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0xe4>
 8001c9a:	e014      	b.n	8001cc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fc0a 	bl	80014b4 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7ff fc06 	bl	80014b4 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b64      	cmp	r3, #100	; 0x64
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e1e6      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb6:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x10c>
 8001cc2:	e000      	b.n	8001cc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d063      	beq.n	8001d9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd2:	4b4c      	ldr	r3, [pc, #304]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00b      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cde:	4b49      	ldr	r3, [pc, #292]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d11c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x18c>
 8001cea:	4b46      	ldr	r3, [pc, #280]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d116      	bne.n	8001d24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf6:	4b43      	ldr	r3, [pc, #268]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <HAL_RCC_OscConfig+0x176>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d001      	beq.n	8001d0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e1ba      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0e:	4b3d      	ldr	r3, [pc, #244]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4939      	ldr	r1, [pc, #228]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d22:	e03a      	b.n	8001d9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d020      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d2c:	4b36      	ldr	r3, [pc, #216]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d32:	f7ff fbbf 	bl	80014b4 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3a:	f7ff fbbb 	bl	80014b4 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e19b      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4c:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d58:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4927      	ldr	r1, [pc, #156]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	600b      	str	r3, [r1, #0]
 8001d6c:	e015      	b.n	8001d9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d6e:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7ff fb9e 	bl	80014b4 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7c:	f7ff fb9a 	bl	80014b4 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e17a      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d03a      	beq.n	8001e1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d019      	beq.n	8001de2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db4:	f7ff fb7e 	bl	80014b4 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dbc:	f7ff fb7a 	bl	80014b4 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e15a      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dce:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f000 fad8 	bl	8002390 <RCC_Delay>
 8001de0:	e01c      	b.n	8001e1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de2:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de8:	f7ff fb64 	bl	80014b4 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dee:	e00f      	b.n	8001e10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df0:	f7ff fb60 	bl	80014b4 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d908      	bls.n	8001e10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e140      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	42420000 	.word	0x42420000
 8001e0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e10:	4b9e      	ldr	r3, [pc, #632]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1e9      	bne.n	8001df0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80a6 	beq.w	8001f76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2e:	4b97      	ldr	r3, [pc, #604]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10d      	bne.n	8001e56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3a:	4b94      	ldr	r3, [pc, #592]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	4a93      	ldr	r2, [pc, #588]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e44:	61d3      	str	r3, [r2, #28]
 8001e46:	4b91      	ldr	r3, [pc, #580]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e52:	2301      	movs	r3, #1
 8001e54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e56:	4b8e      	ldr	r3, [pc, #568]	; (8002090 <HAL_RCC_OscConfig+0x4f8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d118      	bne.n	8001e94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e62:	4b8b      	ldr	r3, [pc, #556]	; (8002090 <HAL_RCC_OscConfig+0x4f8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a8a      	ldr	r2, [pc, #552]	; (8002090 <HAL_RCC_OscConfig+0x4f8>)
 8001e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fb21 	bl	80014b4 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e76:	f7ff fb1d 	bl	80014b4 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b64      	cmp	r3, #100	; 0x64
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e0fd      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e88:	4b81      	ldr	r3, [pc, #516]	; (8002090 <HAL_RCC_OscConfig+0x4f8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d106      	bne.n	8001eaa <HAL_RCC_OscConfig+0x312>
 8001e9c:	4b7b      	ldr	r3, [pc, #492]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4a7a      	ldr	r2, [pc, #488]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6213      	str	r3, [r2, #32]
 8001ea8:	e02d      	b.n	8001f06 <HAL_RCC_OscConfig+0x36e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x334>
 8001eb2:	4b76      	ldr	r3, [pc, #472]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	4a75      	ldr	r2, [pc, #468]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	6213      	str	r3, [r2, #32]
 8001ebe:	4b73      	ldr	r3, [pc, #460]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4a72      	ldr	r2, [pc, #456]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	f023 0304 	bic.w	r3, r3, #4
 8001ec8:	6213      	str	r3, [r2, #32]
 8001eca:	e01c      	b.n	8001f06 <HAL_RCC_OscConfig+0x36e>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d10c      	bne.n	8001eee <HAL_RCC_OscConfig+0x356>
 8001ed4:	4b6d      	ldr	r3, [pc, #436]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	4a6c      	ldr	r2, [pc, #432]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001eda:	f043 0304 	orr.w	r3, r3, #4
 8001ede:	6213      	str	r3, [r2, #32]
 8001ee0:	4b6a      	ldr	r3, [pc, #424]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4a69      	ldr	r2, [pc, #420]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6213      	str	r3, [r2, #32]
 8001eec:	e00b      	b.n	8001f06 <HAL_RCC_OscConfig+0x36e>
 8001eee:	4b67      	ldr	r3, [pc, #412]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	4a66      	ldr	r2, [pc, #408]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	6213      	str	r3, [r2, #32]
 8001efa:	4b64      	ldr	r3, [pc, #400]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4a63      	ldr	r2, [pc, #396]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	f023 0304 	bic.w	r3, r3, #4
 8001f04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d015      	beq.n	8001f3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0e:	f7ff fad1 	bl	80014b4 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f16:	f7ff facd 	bl	80014b4 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e0ab      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2c:	4b57      	ldr	r3, [pc, #348]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0ee      	beq.n	8001f16 <HAL_RCC_OscConfig+0x37e>
 8001f38:	e014      	b.n	8001f64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3a:	f7ff fabb 	bl	80014b4 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7ff fab7 	bl	80014b4 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e095      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f58:	4b4c      	ldr	r3, [pc, #304]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1ee      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d105      	bne.n	8001f76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6a:	4b48      	ldr	r3, [pc, #288]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4a47      	ldr	r2, [pc, #284]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 8081 	beq.w	8002082 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f80:	4b42      	ldr	r3, [pc, #264]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d061      	beq.n	8002050 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d146      	bne.n	8002022 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f94:	4b3f      	ldr	r3, [pc, #252]	; (8002094 <HAL_RCC_OscConfig+0x4fc>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7ff fa8b 	bl	80014b4 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa2:	f7ff fa87 	bl	80014b4 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e067      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb4:	4b35      	ldr	r3, [pc, #212]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f0      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc8:	d108      	bne.n	8001fdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fca:	4b30      	ldr	r3, [pc, #192]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	492d      	ldr	r1, [pc, #180]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fdc:	4b2b      	ldr	r3, [pc, #172]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a19      	ldr	r1, [r3, #32]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	430b      	orrs	r3, r1
 8001fee:	4927      	ldr	r1, [pc, #156]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff4:	4b27      	ldr	r3, [pc, #156]	; (8002094 <HAL_RCC_OscConfig+0x4fc>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffa:	f7ff fa5b 	bl	80014b4 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002002:	f7ff fa57 	bl	80014b4 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e037      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002014:	4b1d      	ldr	r3, [pc, #116]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f0      	beq.n	8002002 <HAL_RCC_OscConfig+0x46a>
 8002020:	e02f      	b.n	8002082 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002022:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <HAL_RCC_OscConfig+0x4fc>)
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7ff fa44 	bl	80014b4 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002030:	f7ff fa40 	bl	80014b4 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e020      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002042:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x498>
 800204e:	e018      	b.n	8002082 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e013      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_RCC_OscConfig+0x4f4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	429a      	cmp	r2, r3
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207a:	429a      	cmp	r2, r3
 800207c:	d001      	beq.n	8002082 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	40007000 	.word	0x40007000
 8002094:	42420060 	.word	0x42420060

08002098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0d0      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020ac:	4b6a      	ldr	r3, [pc, #424]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d910      	bls.n	80020dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ba:	4b67      	ldr	r3, [pc, #412]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 0207 	bic.w	r2, r3, #7
 80020c2:	4965      	ldr	r1, [pc, #404]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ca:	4b63      	ldr	r3, [pc, #396]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0b8      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d020      	beq.n	800212a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020f4:	4b59      	ldr	r3, [pc, #356]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4a58      	ldr	r2, [pc, #352]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800210c:	4b53      	ldr	r3, [pc, #332]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4a52      	ldr	r2, [pc, #328]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002116:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002118:	4b50      	ldr	r3, [pc, #320]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	494d      	ldr	r1, [pc, #308]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d040      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d107      	bne.n	800214e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	4b47      	ldr	r3, [pc, #284]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d115      	bne.n	8002176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e07f      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d107      	bne.n	8002166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002156:	4b41      	ldr	r3, [pc, #260]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d109      	bne.n	8002176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e073      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002166:	4b3d      	ldr	r3, [pc, #244]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e06b      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002176:	4b39      	ldr	r3, [pc, #228]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f023 0203 	bic.w	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4936      	ldr	r1, [pc, #216]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002188:	f7ff f994 	bl	80014b4 <HAL_GetTick>
 800218c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218e:	e00a      	b.n	80021a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002190:	f7ff f990 	bl	80014b4 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	f241 3288 	movw	r2, #5000	; 0x1388
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e053      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a6:	4b2d      	ldr	r3, [pc, #180]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 020c 	and.w	r2, r3, #12
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d1eb      	bne.n	8002190 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021b8:	4b27      	ldr	r3, [pc, #156]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d210      	bcs.n	80021e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c6:	4b24      	ldr	r3, [pc, #144]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 0207 	bic.w	r2, r3, #7
 80021ce:	4922      	ldr	r1, [pc, #136]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d6:	4b20      	ldr	r3, [pc, #128]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e032      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d008      	beq.n	8002206 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4916      	ldr	r1, [pc, #88]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d009      	beq.n	8002226 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002212:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	490e      	ldr	r1, [pc, #56]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002226:	f000 f821 	bl	800226c <HAL_RCC_GetSysClockFreq>
 800222a:	4602      	mov	r2, r0
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	490a      	ldr	r1, [pc, #40]	; (8002260 <HAL_RCC_ClockConfig+0x1c8>)
 8002238:	5ccb      	ldrb	r3, [r1, r3]
 800223a:	fa22 f303 	lsr.w	r3, r2, r3
 800223e:	4a09      	ldr	r2, [pc, #36]	; (8002264 <HAL_RCC_ClockConfig+0x1cc>)
 8002240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_RCC_ClockConfig+0x1d0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff f8f2 	bl	8001430 <HAL_InitTick>

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40022000 	.word	0x40022000
 800225c:	40021000 	.word	0x40021000
 8002260:	0800356c 	.word	0x0800356c
 8002264:	20000024 	.word	0x20000024
 8002268:	20000028 	.word	0x20000028

0800226c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	b490      	push	{r4, r7}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002272:	4b2a      	ldr	r3, [pc, #168]	; (800231c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002274:	1d3c      	adds	r4, r7, #4
 8002276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800227c:	f240 2301 	movw	r3, #513	; 0x201
 8002280:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002296:	4b22      	ldr	r3, [pc, #136]	; (8002320 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d002      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x40>
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d003      	beq.n	80022b2 <HAL_RCC_GetSysClockFreq+0x46>
 80022aa:	e02d      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022ac:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022ae:	623b      	str	r3, [r7, #32]
      break;
 80022b0:	e02d      	b.n	800230e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	0c9b      	lsrs	r3, r3, #18
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022be:	4413      	add	r3, r2
 80022c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d013      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	0c5b      	lsrs	r3, r3, #17
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022de:	4413      	add	r3, r2
 80022e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022ea:	fb02 f203 	mul.w	r2, r2, r3
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
 80022f6:	e004      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	4a0b      	ldr	r2, [pc, #44]	; (8002328 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022fc:	fb02 f303 	mul.w	r3, r2, r3
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	623b      	str	r3, [r7, #32]
      break;
 8002306:	e002      	b.n	800230e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_RCC_GetSysClockFreq+0xb8>)
 800230a:	623b      	str	r3, [r7, #32]
      break;
 800230c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800230e:	6a3b      	ldr	r3, [r7, #32]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3728      	adds	r7, #40	; 0x28
 8002314:	46bd      	mov	sp, r7
 8002316:	bc90      	pop	{r4, r7}
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	0800355c 	.word	0x0800355c
 8002320:	40021000 	.word	0x40021000
 8002324:	007a1200 	.word	0x007a1200
 8002328:	003d0900 	.word	0x003d0900

0800232c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002330:	4b02      	ldr	r3, [pc, #8]	; (800233c <HAL_RCC_GetHCLKFreq+0x10>)
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	20000024 	.word	0x20000024

08002340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002344:	f7ff fff2 	bl	800232c <HAL_RCC_GetHCLKFreq>
 8002348:	4602      	mov	r2, r0
 800234a:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	0a1b      	lsrs	r3, r3, #8
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	4903      	ldr	r1, [pc, #12]	; (8002364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002356:	5ccb      	ldrb	r3, [r1, r3]
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800235c:	4618      	mov	r0, r3
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40021000 	.word	0x40021000
 8002364:	0800357c 	.word	0x0800357c

08002368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800236c:	f7ff ffde 	bl	800232c <HAL_RCC_GetHCLKFreq>
 8002370:	4602      	mov	r2, r0
 8002372:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	0adb      	lsrs	r3, r3, #11
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	4903      	ldr	r1, [pc, #12]	; (800238c <HAL_RCC_GetPCLK2Freq+0x24>)
 800237e:	5ccb      	ldrb	r3, [r1, r3]
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000
 800238c:	0800357c 	.word	0x0800357c

08002390 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002398:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <RCC_Delay+0x34>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <RCC_Delay+0x38>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	0a5b      	lsrs	r3, r3, #9
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023ac:	bf00      	nop
  }
  while (Delay --);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1e5a      	subs	r2, r3, #1
 80023b2:	60fa      	str	r2, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f9      	bne.n	80023ac <RCC_Delay+0x1c>
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	20000024 	.word	0x20000024
 80023c8:	10624dd3 	.word	0x10624dd3

080023cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e041      	b.n	8002462 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d106      	bne.n	80023f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7fe ff28 	bl	8001248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3304      	adds	r3, #4
 8002408:	4619      	mov	r1, r3
 800240a:	4610      	mov	r0, r2
 800240c:	f000 fa6a 	bl	80028e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b01      	cmp	r3, #1
 800247e:	d001      	beq.n	8002484 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e035      	b.n	80024f0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a16      	ldr	r2, [pc, #88]	; (80024fc <HAL_TIM_Base_Start_IT+0x90>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d009      	beq.n	80024ba <HAL_TIM_Base_Start_IT+0x4e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ae:	d004      	beq.n	80024ba <HAL_TIM_Base_Start_IT+0x4e>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a12      	ldr	r2, [pc, #72]	; (8002500 <HAL_TIM_Base_Start_IT+0x94>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d111      	bne.n	80024de <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b06      	cmp	r3, #6
 80024ca:	d010      	beq.n	80024ee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0201 	orr.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024dc:	e007      	b.n	80024ee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0201 	orr.w	r2, r2, #1
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40012c00 	.word	0x40012c00
 8002500:	40000400 	.word	0x40000400

08002504 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b02      	cmp	r3, #2
 8002518:	d122      	bne.n	8002560 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b02      	cmp	r3, #2
 8002526:	d11b      	bne.n	8002560 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0202 	mvn.w	r2, #2
 8002530:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f9b1 	bl	80028ae <HAL_TIM_IC_CaptureCallback>
 800254c:	e005      	b.n	800255a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f9a4 	bl	800289c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f9b3 	bl	80028c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b04      	cmp	r3, #4
 800256c:	d122      	bne.n	80025b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b04      	cmp	r3, #4
 800257a:	d11b      	bne.n	80025b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 0204 	mvn.w	r2, #4
 8002584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2202      	movs	r2, #2
 800258a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f987 	bl	80028ae <HAL_TIM_IC_CaptureCallback>
 80025a0:	e005      	b.n	80025ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f97a 	bl	800289c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f989 	bl	80028c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d122      	bne.n	8002608 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d11b      	bne.n	8002608 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0208 	mvn.w	r2, #8
 80025d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2204      	movs	r2, #4
 80025de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f95d 	bl	80028ae <HAL_TIM_IC_CaptureCallback>
 80025f4:	e005      	b.n	8002602 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f950 	bl	800289c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f95f 	bl	80028c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	2b10      	cmp	r3, #16
 8002614:	d122      	bne.n	800265c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b10      	cmp	r3, #16
 8002622:	d11b      	bne.n	800265c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0210 	mvn.w	r2, #16
 800262c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2208      	movs	r2, #8
 8002632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f933 	bl	80028ae <HAL_TIM_IC_CaptureCallback>
 8002648:	e005      	b.n	8002656 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f926 	bl	800289c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f935 	bl	80028c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b01      	cmp	r3, #1
 8002668:	d10e      	bne.n	8002688 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b01      	cmp	r3, #1
 8002676:	d107      	bne.n	8002688 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0201 	mvn.w	r2, #1
 8002680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7fe fd4c 	bl	8001120 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002692:	2b80      	cmp	r3, #128	; 0x80
 8002694:	d10e      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a0:	2b80      	cmp	r3, #128	; 0x80
 80026a2:	d107      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fa67 	bl	8002b82 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026be:	2b40      	cmp	r3, #64	; 0x40
 80026c0:	d10e      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026cc:	2b40      	cmp	r3, #64	; 0x40
 80026ce:	d107      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f8f9 	bl	80028d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0320 	and.w	r3, r3, #32
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	d10e      	bne.n	800270c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0320 	and.w	r3, r3, #32
 80026f8:	2b20      	cmp	r3, #32
 80026fa:	d107      	bne.n	800270c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0220 	mvn.w	r2, #32
 8002704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 fa32 	bl	8002b70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_TIM_ConfigClockSource+0x18>
 8002728:	2302      	movs	r3, #2
 800272a:	e0b3      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x180>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800274a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002752:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002764:	d03e      	beq.n	80027e4 <HAL_TIM_ConfigClockSource+0xd0>
 8002766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800276a:	f200 8087 	bhi.w	800287c <HAL_TIM_ConfigClockSource+0x168>
 800276e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002772:	f000 8085 	beq.w	8002880 <HAL_TIM_ConfigClockSource+0x16c>
 8002776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277a:	d87f      	bhi.n	800287c <HAL_TIM_ConfigClockSource+0x168>
 800277c:	2b70      	cmp	r3, #112	; 0x70
 800277e:	d01a      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0xa2>
 8002780:	2b70      	cmp	r3, #112	; 0x70
 8002782:	d87b      	bhi.n	800287c <HAL_TIM_ConfigClockSource+0x168>
 8002784:	2b60      	cmp	r3, #96	; 0x60
 8002786:	d050      	beq.n	800282a <HAL_TIM_ConfigClockSource+0x116>
 8002788:	2b60      	cmp	r3, #96	; 0x60
 800278a:	d877      	bhi.n	800287c <HAL_TIM_ConfigClockSource+0x168>
 800278c:	2b50      	cmp	r3, #80	; 0x50
 800278e:	d03c      	beq.n	800280a <HAL_TIM_ConfigClockSource+0xf6>
 8002790:	2b50      	cmp	r3, #80	; 0x50
 8002792:	d873      	bhi.n	800287c <HAL_TIM_ConfigClockSource+0x168>
 8002794:	2b40      	cmp	r3, #64	; 0x40
 8002796:	d058      	beq.n	800284a <HAL_TIM_ConfigClockSource+0x136>
 8002798:	2b40      	cmp	r3, #64	; 0x40
 800279a:	d86f      	bhi.n	800287c <HAL_TIM_ConfigClockSource+0x168>
 800279c:	2b30      	cmp	r3, #48	; 0x30
 800279e:	d064      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x156>
 80027a0:	2b30      	cmp	r3, #48	; 0x30
 80027a2:	d86b      	bhi.n	800287c <HAL_TIM_ConfigClockSource+0x168>
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d060      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x156>
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d867      	bhi.n	800287c <HAL_TIM_ConfigClockSource+0x168>
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d05c      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x156>
 80027b0:	2b10      	cmp	r3, #16
 80027b2:	d05a      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80027b4:	e062      	b.n	800287c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6899      	ldr	r1, [r3, #8]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f000 f95c 	bl	8002a82 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	609a      	str	r2, [r3, #8]
      break;
 80027e2:	e04e      	b.n	8002882 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	6899      	ldr	r1, [r3, #8]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f000 f945 	bl	8002a82 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002806:	609a      	str	r2, [r3, #8]
      break;
 8002808:	e03b      	b.n	8002882 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	6859      	ldr	r1, [r3, #4]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	461a      	mov	r2, r3
 8002818:	f000 f8bc 	bl	8002994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2150      	movs	r1, #80	; 0x50
 8002822:	4618      	mov	r0, r3
 8002824:	f000 f913 	bl	8002a4e <TIM_ITRx_SetConfig>
      break;
 8002828:	e02b      	b.n	8002882 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6818      	ldr	r0, [r3, #0]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	6859      	ldr	r1, [r3, #4]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	461a      	mov	r2, r3
 8002838:	f000 f8da 	bl	80029f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2160      	movs	r1, #96	; 0x60
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f903 	bl	8002a4e <TIM_ITRx_SetConfig>
      break;
 8002848:	e01b      	b.n	8002882 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6818      	ldr	r0, [r3, #0]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	6859      	ldr	r1, [r3, #4]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	461a      	mov	r2, r3
 8002858:	f000 f89c 	bl	8002994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2140      	movs	r1, #64	; 0x40
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f8f3 	bl	8002a4e <TIM_ITRx_SetConfig>
      break;
 8002868:	e00b      	b.n	8002882 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4619      	mov	r1, r3
 8002874:	4610      	mov	r0, r2
 8002876:	f000 f8ea 	bl	8002a4e <TIM_ITRx_SetConfig>
        break;
 800287a:	e002      	b.n	8002882 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800287c:	bf00      	nop
 800287e:	e000      	b.n	8002882 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002880:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a25      	ldr	r2, [pc, #148]	; (800298c <TIM_Base_SetConfig+0xa8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d007      	beq.n	800290c <TIM_Base_SetConfig+0x28>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002902:	d003      	beq.n	800290c <TIM_Base_SetConfig+0x28>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a22      	ldr	r2, [pc, #136]	; (8002990 <TIM_Base_SetConfig+0xac>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d108      	bne.n	800291e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a1a      	ldr	r2, [pc, #104]	; (800298c <TIM_Base_SetConfig+0xa8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d007      	beq.n	8002936 <TIM_Base_SetConfig+0x52>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292c:	d003      	beq.n	8002936 <TIM_Base_SetConfig+0x52>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a17      	ldr	r2, [pc, #92]	; (8002990 <TIM_Base_SetConfig+0xac>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d108      	bne.n	8002948 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800293c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4313      	orrs	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	4313      	orrs	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a07      	ldr	r2, [pc, #28]	; (800298c <TIM_Base_SetConfig+0xa8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d103      	bne.n	800297c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	615a      	str	r2, [r3, #20]
}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	40012c00 	.word	0x40012c00
 8002990:	40000400 	.word	0x40000400

08002994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	f023 0201 	bic.w	r2, r3, #1
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f023 030a 	bic.w	r3, r3, #10
 80029d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	621a      	str	r2, [r3, #32]
}
 80029e6:	bf00      	nop
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	f023 0210 	bic.w	r2, r3, #16
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	031b      	lsls	r3, r3, #12
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	621a      	str	r2, [r3, #32]
}
 8002a44:	bf00      	nop
 8002a46:	371c      	adds	r7, #28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b085      	sub	sp, #20
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f043 0307 	orr.w	r3, r3, #7
 8002a70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	609a      	str	r2, [r3, #8]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b087      	sub	sp, #28
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	021a      	lsls	r2, r3, #8
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	609a      	str	r2, [r3, #8]
}
 8002ab6:	bf00      	nop
 8002ab8:	371c      	adds	r7, #28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e041      	b.n	8002b5c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a14      	ldr	r2, [pc, #80]	; (8002b68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d009      	beq.n	8002b30 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b24:	d004      	beq.n	8002b30 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a10      	ldr	r2, [pc, #64]	; (8002b6c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d10c      	bne.n	8002b4a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40012c00 	.word	0x40012c00
 8002b6c:	40000400 	.word	0x40000400

08002b70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e03f      	b.n	8002c26 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fe fb68 	bl	8001290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2224      	movs	r2, #36	; 0x24
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 fb49 	bl	8003270 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695a      	ldr	r2, [r3, #20]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08a      	sub	sp, #40	; 0x28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10d      	bne.n	8002c82 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_UART_IRQHandler+0x52>
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fa4f 	bl	800311e <UART_Receive_IT>
      return;
 8002c80:	e17b      	b.n	8002f7a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80b1 	beq.w	8002dec <HAL_UART_IRQHandler+0x1bc>
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d105      	bne.n	8002ca0 <HAL_UART_IRQHandler+0x70>
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 80a6 	beq.w	8002dec <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_UART_IRQHandler+0x90>
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	f043 0201 	orr.w	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <HAL_UART_IRQHandler+0xb0>
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	f043 0202 	orr.w	r2, r3, #2
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_UART_IRQHandler+0xd0>
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	f043 0204 	orr.w	r2, r3, #4
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00f      	beq.n	8002d2a <HAL_UART_IRQHandler+0xfa>
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d104      	bne.n	8002d1e <HAL_UART_IRQHandler+0xee>
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f043 0208 	orr.w	r2, r3, #8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 811e 	beq.w	8002f70 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d007      	beq.n	8002d4e <HAL_UART_IRQHandler+0x11e>
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f9e8 	bl	800311e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	bf14      	ite	ne
 8002d5c:	2301      	movne	r3, #1
 8002d5e:	2300      	moveq	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d102      	bne.n	8002d76 <HAL_UART_IRQHandler+0x146>
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d031      	beq.n	8002dda <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f92a 	bl	8002fd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d023      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695a      	ldr	r2, [r3, #20]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d98:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d013      	beq.n	8002dca <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da6:	4a76      	ldr	r2, [pc, #472]	; (8002f80 <HAL_UART_IRQHandler+0x350>)
 8002da8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe fcd2 	bl	8001758 <HAL_DMA_Abort_IT>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d016      	beq.n	8002de8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc8:	e00e      	b.n	8002de8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f8ec 	bl	8002fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd0:	e00a      	b.n	8002de8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f8e8 	bl	8002fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd8:	e006      	b.n	8002de8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f8e4 	bl	8002fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002de6:	e0c3      	b.n	8002f70 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de8:	bf00      	nop
    return;
 8002dea:	e0c1      	b.n	8002f70 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	f040 80a1 	bne.w	8002f38 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 809b 	beq.w	8002f38 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 8095 	beq.w	8002f38 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d04e      	beq.n	8002ed0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002e3c:	8a3b      	ldrh	r3, [r7, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 8098 	beq.w	8002f74 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e48:	8a3a      	ldrh	r2, [r7, #16]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	f080 8092 	bcs.w	8002f74 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8a3a      	ldrh	r2, [r7, #16]
 8002e54:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d02b      	beq.n	8002eb8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e6e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0201 	bic.w	r2, r2, #1
 8002e7e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e8e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0210 	bic.w	r2, r2, #16
 8002eac:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe fc15 	bl	80016e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f876 	bl	8002fba <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002ece:	e051      	b.n	8002f74 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d047      	beq.n	8002f78 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002ee8:	8a7b      	ldrh	r3, [r7, #18]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d044      	beq.n	8002f78 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002efc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0201 	bic.w	r2, r2, #1
 8002f0c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0210 	bic.w	r2, r2, #16
 8002f2a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f2c:	8a7b      	ldrh	r3, [r7, #18]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f842 	bl	8002fba <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002f36:	e01f      	b.n	8002f78 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d008      	beq.n	8002f54 <HAL_UART_IRQHandler+0x324>
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f87f 	bl	8003050 <UART_Transmit_IT>
    return;
 8002f52:	e012      	b.n	8002f7a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00d      	beq.n	8002f7a <HAL_UART_IRQHandler+0x34a>
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f8c0 	bl	80030ee <UART_EndTransmit_IT>
    return;
 8002f6e:	e004      	b.n	8002f7a <HAL_UART_IRQHandler+0x34a>
    return;
 8002f70:	bf00      	nop
 8002f72:	e002      	b.n	8002f7a <HAL_UART_IRQHandler+0x34a>
      return;
 8002f74:	bf00      	nop
 8002f76:	e000      	b.n	8002f7a <HAL_UART_IRQHandler+0x34a>
      return;
 8002f78:	bf00      	nop
  }
}
 8002f7a:	3728      	adds	r7, #40	; 0x28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	08003029 	.word	0x08003029

08002f84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr

08002f96 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr

08002fba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fe6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d107      	bne.n	8003010 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0210 	bic.w	r2, r2, #16
 800300e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr

08003028 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f7ff ffb0 	bl	8002fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003048:	bf00      	nop
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b21      	cmp	r3, #33	; 0x21
 8003062:	d13e      	bne.n	80030e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306c:	d114      	bne.n	8003098 <UART_Transmit_IT+0x48>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d110      	bne.n	8003098 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	461a      	mov	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800308a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	1c9a      	adds	r2, r3, #2
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	621a      	str	r2, [r3, #32]
 8003096:	e008      	b.n	80030aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	1c59      	adds	r1, r3, #1
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6211      	str	r1, [r2, #32]
 80030a2:	781a      	ldrb	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	4619      	mov	r1, r3
 80030b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10f      	bne.n	80030de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	e000      	b.n	80030e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030e2:	2302      	movs	r3, #2
  }
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr

080030ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003104:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff ff38 	bl	8002f84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b086      	sub	sp, #24
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b22      	cmp	r3, #34	; 0x22
 8003130:	f040 8099 	bne.w	8003266 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800313c:	d117      	bne.n	800316e <UART_Receive_IT+0x50>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d113      	bne.n	800316e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	b29b      	uxth	r3, r3
 8003158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800315c:	b29a      	uxth	r2, r3
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	1c9a      	adds	r2, r3, #2
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	629a      	str	r2, [r3, #40]	; 0x28
 800316c:	e026      	b.n	80031bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003174:	2300      	movs	r3, #0
 8003176:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003180:	d007      	beq.n	8003192 <UART_Receive_IT+0x74>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10a      	bne.n	80031a0 <UART_Receive_IT+0x82>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	b2da      	uxtb	r2, r3
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	701a      	strb	r2, [r3, #0]
 800319e:	e008      	b.n	80031b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	4619      	mov	r1, r3
 80031ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d148      	bne.n	8003262 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0220 	bic.w	r2, r2, #32
 80031de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695a      	ldr	r2, [r3, #20]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0201 	bic.w	r2, r2, #1
 80031fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	2b01      	cmp	r3, #1
 800320e:	d123      	bne.n	8003258 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0210 	bic.w	r2, r2, #16
 8003224:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	2b10      	cmp	r3, #16
 8003232:	d10a      	bne.n	800324a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800324e:	4619      	mov	r1, r3
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff feb2 	bl	8002fba <HAL_UARTEx_RxEventCallback>
 8003256:	e002      	b.n	800325e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff fe9c 	bl	8002f96 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	e002      	b.n	8003268 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	e000      	b.n	8003268 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003266:	2302      	movs	r3, #2
  }
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	4313      	orrs	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80032aa:	f023 030c 	bic.w	r3, r3, #12
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	430b      	orrs	r3, r1
 80032b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a2c      	ldr	r2, [pc, #176]	; (8003384 <UART_SetConfig+0x114>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d103      	bne.n	80032e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032d8:	f7ff f846 	bl	8002368 <HAL_RCC_GetPCLK2Freq>
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	e002      	b.n	80032e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032e0:	f7ff f82e 	bl	8002340 <HAL_RCC_GetPCLK1Freq>
 80032e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	009a      	lsls	r2, r3, #2
 80032f0:	441a      	add	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fc:	4a22      	ldr	r2, [pc, #136]	; (8003388 <UART_SetConfig+0x118>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	0119      	lsls	r1, r3, #4
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	009a      	lsls	r2, r3, #2
 8003310:	441a      	add	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	fbb2 f2f3 	udiv	r2, r2, r3
 800331c:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <UART_SetConfig+0x118>)
 800331e:	fba3 0302 	umull	r0, r3, r3, r2
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	2064      	movs	r0, #100	; 0x64
 8003326:	fb00 f303 	mul.w	r3, r0, r3
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	3332      	adds	r3, #50	; 0x32
 8003330:	4a15      	ldr	r2, [pc, #84]	; (8003388 <UART_SetConfig+0x118>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800333c:	4419      	add	r1, r3
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	009a      	lsls	r2, r3, #2
 8003348:	441a      	add	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	fbb2 f2f3 	udiv	r2, r2, r3
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <UART_SetConfig+0x118>)
 8003356:	fba3 0302 	umull	r0, r3, r3, r2
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	2064      	movs	r0, #100	; 0x64
 800335e:	fb00 f303 	mul.w	r3, r0, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	3332      	adds	r3, #50	; 0x32
 8003368:	4a07      	ldr	r2, [pc, #28]	; (8003388 <UART_SetConfig+0x118>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	f003 020f 	and.w	r2, r3, #15
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	440a      	add	r2, r1
 800337a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40013800 	.word	0x40013800
 8003388:	51eb851f 	.word	0x51eb851f

0800338c <__libc_init_array>:
 800338c:	b570      	push	{r4, r5, r6, lr}
 800338e:	2600      	movs	r6, #0
 8003390:	4d0c      	ldr	r5, [pc, #48]	; (80033c4 <__libc_init_array+0x38>)
 8003392:	4c0d      	ldr	r4, [pc, #52]	; (80033c8 <__libc_init_array+0x3c>)
 8003394:	1b64      	subs	r4, r4, r5
 8003396:	10a4      	asrs	r4, r4, #2
 8003398:	42a6      	cmp	r6, r4
 800339a:	d109      	bne.n	80033b0 <__libc_init_array+0x24>
 800339c:	f000 f830 	bl	8003400 <_init>
 80033a0:	2600      	movs	r6, #0
 80033a2:	4d0a      	ldr	r5, [pc, #40]	; (80033cc <__libc_init_array+0x40>)
 80033a4:	4c0a      	ldr	r4, [pc, #40]	; (80033d0 <__libc_init_array+0x44>)
 80033a6:	1b64      	subs	r4, r4, r5
 80033a8:	10a4      	asrs	r4, r4, #2
 80033aa:	42a6      	cmp	r6, r4
 80033ac:	d105      	bne.n	80033ba <__libc_init_array+0x2e>
 80033ae:	bd70      	pop	{r4, r5, r6, pc}
 80033b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b4:	4798      	blx	r3
 80033b6:	3601      	adds	r6, #1
 80033b8:	e7ee      	b.n	8003398 <__libc_init_array+0xc>
 80033ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80033be:	4798      	blx	r3
 80033c0:	3601      	adds	r6, #1
 80033c2:	e7f2      	b.n	80033aa <__libc_init_array+0x1e>
 80033c4:	08003584 	.word	0x08003584
 80033c8:	08003584 	.word	0x08003584
 80033cc:	08003584 	.word	0x08003584
 80033d0:	08003588 	.word	0x08003588

080033d4 <memcpy>:
 80033d4:	440a      	add	r2, r1
 80033d6:	4291      	cmp	r1, r2
 80033d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80033dc:	d100      	bne.n	80033e0 <memcpy+0xc>
 80033de:	4770      	bx	lr
 80033e0:	b510      	push	{r4, lr}
 80033e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033e6:	4291      	cmp	r1, r2
 80033e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033ec:	d1f9      	bne.n	80033e2 <memcpy+0xe>
 80033ee:	bd10      	pop	{r4, pc}

080033f0 <memset>:
 80033f0:	4603      	mov	r3, r0
 80033f2:	4402      	add	r2, r0
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d100      	bne.n	80033fa <memset+0xa>
 80033f8:	4770      	bx	lr
 80033fa:	f803 1b01 	strb.w	r1, [r3], #1
 80033fe:	e7f9      	b.n	80033f4 <memset+0x4>

08003400 <_init>:
 8003400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003402:	bf00      	nop
 8003404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003406:	bc08      	pop	{r3}
 8003408:	469e      	mov	lr, r3
 800340a:	4770      	bx	lr

0800340c <_fini>:
 800340c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340e:	bf00      	nop
 8003410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003412:	bc08      	pop	{r3}
 8003414:	469e      	mov	lr, r3
 8003416:	4770      	bx	lr
