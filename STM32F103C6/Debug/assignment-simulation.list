
assignment-simulation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08004c88  08004c88  00014c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f80  08004f80  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08004f80  08004f80  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f80  08004f80  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f80  08004f80  00014f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f84  08004f84  00014f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08004f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000094  0800501c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  0800501c  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f91  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000282d  00000000  00000000  0003204e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00034880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  000355a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a06  00000000  00000000  000361c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f361  00000000  00000000  0004ebc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088fe4  00000000  00000000  0005df27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6f0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003934  00000000  00000000  000e6f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c70 	.word	0x08004c70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08004c70 	.word	0x08004c70

0800014c <initButton>:
int button_flag[NO_BUTTONS + 1];
int TimerForKeyPress[NO_BUTTONS + 1];

int Button1PressCounter = 1;    /* INITIALLY, MODE = 1 */

void initButton() {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (int i = 1; i <= NO_BUTTONS; i++) {
 8000152:	2301      	movs	r3, #1
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e020      	b.n	800019a <initButton+0x4e>
		KeyReg0[i] = NORMAL_STATE;
 8000158:	4a14      	ldr	r2, [pc, #80]	; (80001ac <initButton+0x60>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2101      	movs	r1, #1
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg1[i] = NORMAL_STATE;
 8000162:	4a13      	ldr	r2, [pc, #76]	; (80001b0 <initButton+0x64>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2101      	movs	r1, #1
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg2[i] = NORMAL_STATE;
 800016c:	4a11      	ldr	r2, [pc, #68]	; (80001b4 <initButton+0x68>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2101      	movs	r1, #1
 8000172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg3[i] = NORMAL_STATE; 
 8000176:	4a10      	ldr	r2, [pc, #64]	; (80001b8 <initButton+0x6c>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2101      	movs	r1, #1
 800017c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		button_flag[i] = 0;
 8000180:	4a0e      	ldr	r2, [pc, #56]	; (80001bc <initButton+0x70>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2100      	movs	r1, #0
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		TimerForKeyPress[i] = 200;
 800018a:	4a0d      	ldr	r2, [pc, #52]	; (80001c0 <initButton+0x74>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	21c8      	movs	r1, #200	; 0xc8
 8000190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 1; i <= NO_BUTTONS; i++) {
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	3301      	adds	r3, #1
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b04      	cmp	r3, #4
 800019e:	dddb      	ble.n	8000158 <initButton+0xc>
	}
}
 80001a0:	bf00      	nop
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	200000dc 	.word	0x200000dc
 80001b0:	20000138 	.word	0x20000138
 80001b4:	20000174 	.word	0x20000174
 80001b8:	200000c8 	.word	0x200000c8
 80001bc:	20000160 	.word	0x20000160
 80001c0:	2000014c 	.word	0x2000014c

080001c4 <getKeyInput>:

void getKeyInput() {
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
    for (int i = 1; i <= NO_BUTTONS; i++) {
 80001ca:	2301      	movs	r3, #1
 80001cc:	607b      	str	r3, [r7, #4]
 80001ce:	e099      	b.n	8000304 <getKeyInput+0x140>
        KeyReg0[i] = KeyReg1[i];
 80001d0:	4a51      	ldr	r2, [pc, #324]	; (8000318 <getKeyInput+0x154>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d8:	4950      	ldr	r1, [pc, #320]	; (800031c <getKeyInput+0x158>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg1[i] = KeyReg2[i];
 80001e0:	4a4f      	ldr	r2, [pc, #316]	; (8000320 <getKeyInput+0x15c>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e8:	494b      	ldr	r1, [pc, #300]	; (8000318 <getKeyInput+0x154>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        if (i == 1) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d109      	bne.n	800020a <getKeyInput+0x46>
 80001f6:	2102      	movs	r1, #2
 80001f8:	484a      	ldr	r0, [pc, #296]	; (8000324 <getKeyInput+0x160>)
 80001fa:	f002 f809 	bl	8002210 <HAL_GPIO_ReadPin>
 80001fe:	4603      	mov	r3, r0
 8000200:	4619      	mov	r1, r3
 8000202:	4a47      	ldr	r2, [pc, #284]	; (8000320 <getKeyInput+0x15c>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 2) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_2_1_GPIO_Port, BUTTON_2_1_Pin);
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b02      	cmp	r3, #2
 800020e:	d10a      	bne.n	8000226 <getKeyInput+0x62>
 8000210:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000214:	4844      	ldr	r0, [pc, #272]	; (8000328 <getKeyInput+0x164>)
 8000216:	f001 fffb 	bl	8002210 <HAL_GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	4619      	mov	r1, r3
 800021e:	4a40      	ldr	r2, [pc, #256]	; (8000320 <getKeyInput+0x15c>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 3) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2b03      	cmp	r3, #3
 800022a:	d109      	bne.n	8000240 <getKeyInput+0x7c>
 800022c:	2101      	movs	r1, #1
 800022e:	483e      	ldr	r0, [pc, #248]	; (8000328 <getKeyInput+0x164>)
 8000230:	f001 ffee 	bl	8002210 <HAL_GPIO_ReadPin>
 8000234:	4603      	mov	r3, r0
 8000236:	4619      	mov	r1, r3
 8000238:	4a39      	ldr	r2, [pc, #228]	; (8000320 <getKeyInput+0x15c>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 4) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_PEDESTRIAN_GPIO_Port, BUTTON_PEDESTRIAN_Pin);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2b04      	cmp	r3, #4
 8000244:	d109      	bne.n	800025a <getKeyInput+0x96>
 8000246:	2101      	movs	r1, #1
 8000248:	4836      	ldr	r0, [pc, #216]	; (8000324 <getKeyInput+0x160>)
 800024a:	f001 ffe1 	bl	8002210 <HAL_GPIO_ReadPin>
 800024e:	4603      	mov	r3, r0
 8000250:	4619      	mov	r1, r3
 8000252:	4a33      	ldr	r2, [pc, #204]	; (8000320 <getKeyInput+0x15c>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 800025a:	4a30      	ldr	r2, [pc, #192]	; (800031c <getKeyInput+0x158>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000262:	492d      	ldr	r1, [pc, #180]	; (8000318 <getKeyInput+0x154>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800026a:	429a      	cmp	r2, r3
 800026c:	d147      	bne.n	80002fe <getKeyInput+0x13a>
 800026e:	4a2a      	ldr	r2, [pc, #168]	; (8000318 <getKeyInput+0x154>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000276:	492a      	ldr	r1, [pc, #168]	; (8000320 <getKeyInput+0x15c>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800027e:	429a      	cmp	r2, r3
 8000280:	d13d      	bne.n	80002fe <getKeyInput+0x13a>
            if (KeyReg3[i] != KeyReg2[i]) {
 8000282:	4a2a      	ldr	r2, [pc, #168]	; (800032c <getKeyInput+0x168>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800028a:	4925      	ldr	r1, [pc, #148]	; (8000320 <getKeyInput+0x15c>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000292:	429a      	cmp	r2, r3
 8000294:	d016      	beq.n	80002c4 <getKeyInput+0x100>
                KeyReg3[i] = KeyReg2[i];
 8000296:	4a22      	ldr	r2, [pc, #136]	; (8000320 <getKeyInput+0x15c>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800029e:	4923      	ldr	r1, [pc, #140]	; (800032c <getKeyInput+0x168>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                if (KeyReg2[i] == PRESSED_STATE) {
 80002a6:	4a1e      	ldr	r2, [pc, #120]	; (8000320 <getKeyInput+0x15c>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d125      	bne.n	80002fe <getKeyInput+0x13a>
                    subKeyProcess(i);
 80002b2:	6878      	ldr	r0, [r7, #4]
 80002b4:	f000 f858 	bl	8000368 <subKeyProcess>
                    TimerForKeyPress[i] = 200;
 80002b8:	4a1d      	ldr	r2, [pc, #116]	; (8000330 <getKeyInput+0x16c>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	21c8      	movs	r1, #200	; 0xc8
 80002be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002c2:	e01c      	b.n	80002fe <getKeyInput+0x13a>
                }
            } else {
                TimerForKeyPress[i]--;
 80002c4:	4a1a      	ldr	r2, [pc, #104]	; (8000330 <getKeyInput+0x16c>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002cc:	1e5a      	subs	r2, r3, #1
 80002ce:	4918      	ldr	r1, [pc, #96]	; (8000330 <getKeyInput+0x16c>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TimerForKeyPress[i] == 0) {
 80002d6:	4a16      	ldr	r2, [pc, #88]	; (8000330 <getKeyInput+0x16c>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d10d      	bne.n	80002fe <getKeyInput+0x13a>
                    if (KeyReg2[i] == PRESSED_STATE) {
 80002e2:	4a0f      	ldr	r2, [pc, #60]	; (8000320 <getKeyInput+0x15c>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d102      	bne.n	80002f4 <getKeyInput+0x130>
                        subKeyProcess(i);
 80002ee:	6878      	ldr	r0, [r7, #4]
 80002f0:	f000 f83a 	bl	8000368 <subKeyProcess>
                    }

                    TimerForKeyPress[i] = 200;
 80002f4:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <getKeyInput+0x16c>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	21c8      	movs	r1, #200	; 0xc8
 80002fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 1; i <= NO_BUTTONS; i++) {
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3301      	adds	r3, #1
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2b04      	cmp	r3, #4
 8000308:	f77f af62 	ble.w	80001d0 <getKeyInput+0xc>
                }
            }
        }
    }
}
 800030c:	bf00      	nop
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000138 	.word	0x20000138
 800031c:	200000dc 	.word	0x200000dc
 8000320:	20000174 	.word	0x20000174
 8000324:	40010800 	.word	0x40010800
 8000328:	40010c00 	.word	0x40010c00
 800032c:	200000c8 	.word	0x200000c8
 8000330:	2000014c 	.word	0x2000014c

08000334 <isButtonPressed>:

int isButtonPressed(int index) {
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
//	if (index > NO_BUTTONS)
//		return 0;

	if (button_flag[index]) {
 800033c:	4a09      	ldr	r2, [pc, #36]	; (8000364 <isButtonPressed+0x30>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d006      	beq.n	8000356 <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000348:	4a06      	ldr	r2, [pc, #24]	; (8000364 <isButtonPressed+0x30>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	2100      	movs	r1, #0
 800034e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000352:	2301      	movs	r3, #1
 8000354:	e000      	b.n	8000358 <isButtonPressed+0x24>
	}
	return 0;
 8000356:	2300      	movs	r3, #0
}
 8000358:	4618      	mov	r0, r3
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	20000160 	.word	0x20000160

08000368 <subKeyProcess>:

void subKeyProcess(int index) {
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000370:	4a04      	ldr	r2, [pc, #16]	; (8000384 <subKeyProcess+0x1c>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	2101      	movs	r1, #1
 8000376:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	20000160 	.word	0x20000160

08000388 <fsm_automatic_run>:
 *      Author: ProX
 */

#include "fsm_automatic.h"

void fsm_automatic_run(UART_HandleTypeDef huart2) {
 8000388:	b084      	sub	sp, #16
 800038a:	b580      	push	{r7, lr}
 800038c:	af00      	add	r7, sp, #0
 800038e:	f107 0c08 	add.w	ip, r7, #8
 8000392:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    /* CHANGE TO MANUAL MODE WHEN BUTTON1 IS PRESSED */
    if (isButtonPressed(1)) {
 8000396:	2001      	movs	r0, #1
 8000398:	f7ff ffcc 	bl	8000334 <isButtonPressed>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d006      	beq.n	80003b0 <fsm_automatic_run+0x28>
    	status = MANUAL_MODE;
 80003a2:	4bbc      	ldr	r3, [pc, #752]	; (8000694 <fsm_automatic_run+0x30c>)
 80003a4:	2203      	movs	r2, #3
 80003a6:	601a      	str	r2, [r3, #0]
		traffic_status = INIT;
 80003a8:	4bbb      	ldr	r3, [pc, #748]	; (8000698 <fsm_automatic_run+0x310>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	601a      	str	r2, [r3, #0]
		return;
 80003ae:	e16c      	b.n	800068a <fsm_automatic_run+0x302>
    }

    switch (traffic_status) {
 80003b0:	4bb9      	ldr	r3, [pc, #740]	; (8000698 <fsm_automatic_run+0x310>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d04d      	beq.n	8000454 <fsm_automatic_run+0xcc>
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	f340 8166 	ble.w	800068a <fsm_automatic_run+0x302>
 80003be:	2b50      	cmp	r3, #80	; 0x50
 80003c0:	f300 8163 	bgt.w	800068a <fsm_automatic_run+0x302>
 80003c4:	2b32      	cmp	r3, #50	; 0x32
 80003c6:	f2c0 8160 	blt.w	800068a <fsm_automatic_run+0x302>
 80003ca:	3b32      	subs	r3, #50	; 0x32
 80003cc:	2b1e      	cmp	r3, #30
 80003ce:	f200 815c 	bhi.w	800068a <fsm_automatic_run+0x302>
 80003d2:	a201      	add	r2, pc, #4	; (adr r2, 80003d8 <fsm_automatic_run+0x50>)
 80003d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d8:	080004df 	.word	0x080004df
 80003dc:	0800068b 	.word	0x0800068b
 80003e0:	0800068b 	.word	0x0800068b
 80003e4:	0800068b 	.word	0x0800068b
 80003e8:	0800068b 	.word	0x0800068b
 80003ec:	0800068b 	.word	0x0800068b
 80003f0:	0800068b 	.word	0x0800068b
 80003f4:	0800068b 	.word	0x0800068b
 80003f8:	0800068b 	.word	0x0800068b
 80003fc:	0800068b 	.word	0x0800068b
 8000400:	08000537 	.word	0x08000537
 8000404:	0800068b 	.word	0x0800068b
 8000408:	0800068b 	.word	0x0800068b
 800040c:	0800068b 	.word	0x0800068b
 8000410:	0800068b 	.word	0x0800068b
 8000414:	0800068b 	.word	0x0800068b
 8000418:	0800068b 	.word	0x0800068b
 800041c:	0800068b 	.word	0x0800068b
 8000420:	0800068b 	.word	0x0800068b
 8000424:	0800068b 	.word	0x0800068b
 8000428:	080005ab 	.word	0x080005ab
 800042c:	0800068b 	.word	0x0800068b
 8000430:	0800068b 	.word	0x0800068b
 8000434:	0800068b 	.word	0x0800068b
 8000438:	0800068b 	.word	0x0800068b
 800043c:	0800068b 	.word	0x0800068b
 8000440:	0800068b 	.word	0x0800068b
 8000444:	0800068b 	.word	0x0800068b
 8000448:	0800068b 	.word	0x0800068b
 800044c:	0800068b 	.word	0x0800068b
 8000450:	08000601 	.word	0x08000601
    case INIT:
    	/* UART COMMUNICATION */
    	HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Mode: Automatic mode\r\n"), 1000);
 8000454:	4991      	ldr	r1, [pc, #580]	; (800069c <fsm_automatic_run+0x314>)
 8000456:	4892      	ldr	r0, [pc, #584]	; (80006a0 <fsm_automatic_run+0x318>)
 8000458:	f003 ffde 	bl	8004418 <siprintf>
 800045c:	4603      	mov	r3, r0
 800045e:	b29a      	uxth	r2, r3
 8000460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000464:	498e      	ldr	r1, [pc, #568]	; (80006a0 <fsm_automatic_run+0x318>)
 8000466:	f107 0008 	add.w	r0, r7, #8
 800046a:	f003 faaa 	bl	80039c2 <HAL_UART_Transmit>

    	resetLights();
 800046e:	f000 fc3b 	bl	8000ce8 <resetLights>
    	/* INACTIVE pedestrian light when in INIT state */
    	pedestrian_status = PEDESTRIAN_INACTIVE;
 8000472:	4b8c      	ldr	r3, [pc, #560]	; (80006a4 <fsm_automatic_run+0x31c>)
 8000474:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000478:	601a      	str	r2, [r3, #0]

        traffic_status = RED_GREEN;
 800047a:	4b87      	ldr	r3, [pc, #540]	; (8000698 <fsm_automatic_run+0x310>)
 800047c:	2232      	movs	r2, #50	; 0x32
 800047e:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "RED   GREEN\r\n"), 1000);
 8000480:	4989      	ldr	r1, [pc, #548]	; (80006a8 <fsm_automatic_run+0x320>)
 8000482:	4887      	ldr	r0, [pc, #540]	; (80006a0 <fsm_automatic_run+0x318>)
 8000484:	f003 ffc8 	bl	8004418 <siprintf>
 8000488:	4603      	mov	r3, r0
 800048a:	b29a      	uxth	r2, r3
 800048c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000490:	4983      	ldr	r1, [pc, #524]	; (80006a0 <fsm_automatic_run+0x318>)
 8000492:	f107 0008 	add.w	r0, r7, #8
 8000496:	f003 fa94 	bl	80039c2 <HAL_UART_Transmit>

        setTimer(1, green_counter);
 800049a:	4b84      	ldr	r3, [pc, #528]	; (80006ac <fsm_automatic_run+0x324>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4619      	mov	r1, r3
 80004a0:	2001      	movs	r0, #1
 80004a2:	f001 f92d 	bl	8001700 <setTimer>

		setTimer(3, 250); 		// timer 3 for counting light
 80004a6:	21fa      	movs	r1, #250	; 0xfa
 80004a8:	2003      	movs	r0, #3
 80004aa:	f001 f929 	bl	8001700 <setTimer>

        counter_light_1 = red_counter / 1000;
 80004ae:	4b80      	ldr	r3, [pc, #512]	; (80006b0 <fsm_automatic_run+0x328>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a80      	ldr	r2, [pc, #512]	; (80006b4 <fsm_automatic_run+0x32c>)
 80004b4:	fb82 1203 	smull	r1, r2, r2, r3
 80004b8:	1192      	asrs	r2, r2, #6
 80004ba:	17db      	asrs	r3, r3, #31
 80004bc:	1ad3      	subs	r3, r2, r3
 80004be:	4a7e      	ldr	r2, [pc, #504]	; (80006b8 <fsm_automatic_run+0x330>)
 80004c0:	6013      	str	r3, [r2, #0]
        counter_light_2 = green_counter / 1000;
 80004c2:	4b7a      	ldr	r3, [pc, #488]	; (80006ac <fsm_automatic_run+0x324>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a7b      	ldr	r2, [pc, #492]	; (80006b4 <fsm_automatic_run+0x32c>)
 80004c8:	fb82 1203 	smull	r1, r2, r2, r3
 80004cc:	1192      	asrs	r2, r2, #6
 80004ce:	17db      	asrs	r3, r3, #31
 80004d0:	1ad3      	subs	r3, r2, r3
 80004d2:	4a7a      	ldr	r2, [pc, #488]	; (80006bc <fsm_automatic_run+0x334>)
 80004d4:	6013      	str	r3, [r2, #0]
        counter_lights = READ_UART;
 80004d6:	4b7a      	ldr	r3, [pc, #488]	; (80006c0 <fsm_automatic_run+0x338>)
 80004d8:	2264      	movs	r2, #100	; 0x64
 80004da:	601a      	str	r2, [r3, #0]

        break;
 80004dc:	e0d5      	b.n	800068a <fsm_automatic_run+0x302>

    case RED_GREEN:
    	setRedLight1(0);
 80004de:	2000      	movs	r0, #0
 80004e0:	f000 fc4e 	bl	8000d80 <setRedLight1>
    	setGreenLight2(0);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 fcc3 	bl	8000e70 <setGreenLight2>

        if (timer_flag[1] == 1) {
 80004ea:	4b76      	ldr	r3, [pc, #472]	; (80006c4 <fsm_automatic_run+0x33c>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	f040 80c4 	bne.w	800067c <fsm_automatic_run+0x2f4>
            traffic_status = RED_AMBER;
 80004f4:	4b68      	ldr	r3, [pc, #416]	; (8000698 <fsm_automatic_run+0x310>)
 80004f6:	223c      	movs	r2, #60	; 0x3c
 80004f8:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "RED   AMBER\r\n"), 1000);
 80004fa:	4973      	ldr	r1, [pc, #460]	; (80006c8 <fsm_automatic_run+0x340>)
 80004fc:	4868      	ldr	r0, [pc, #416]	; (80006a0 <fsm_automatic_run+0x318>)
 80004fe:	f003 ff8b 	bl	8004418 <siprintf>
 8000502:	4603      	mov	r3, r0
 8000504:	b29a      	uxth	r2, r3
 8000506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050a:	4965      	ldr	r1, [pc, #404]	; (80006a0 <fsm_automatic_run+0x318>)
 800050c:	f107 0008 	add.w	r0, r7, #8
 8000510:	f003 fa57 	bl	80039c2 <HAL_UART_Transmit>
            setTimer(1, amber_counter);
 8000514:	4b6d      	ldr	r3, [pc, #436]	; (80006cc <fsm_automatic_run+0x344>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4619      	mov	r1, r3
 800051a:	2001      	movs	r0, #1
 800051c:	f001 f8f0 	bl	8001700 <setTimer>

            counter_light_2 = amber_counter / 1000;
 8000520:	4b6a      	ldr	r3, [pc, #424]	; (80006cc <fsm_automatic_run+0x344>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a63      	ldr	r2, [pc, #396]	; (80006b4 <fsm_automatic_run+0x32c>)
 8000526:	fb82 1203 	smull	r1, r2, r2, r3
 800052a:	1192      	asrs	r2, r2, #6
 800052c:	17db      	asrs	r3, r3, #31
 800052e:	1ad3      	subs	r3, r2, r3
 8000530:	4a62      	ldr	r2, [pc, #392]	; (80006bc <fsm_automatic_run+0x334>)
 8000532:	6013      	str	r3, [r2, #0]
        }    

        break;
 8000534:	e0a2      	b.n	800067c <fsm_automatic_run+0x2f4>

    case RED_AMBER:
    	setRedLight1(0);
 8000536:	2000      	movs	r0, #0
 8000538:	f000 fc22 	bl	8000d80 <setRedLight1>
    	setAmberLight2(0);
 800053c:	2000      	movs	r0, #0
 800053e:	f000 fcb5 	bl	8000eac <setAmberLight2>

        if (timer_flag[1] == 1) {
 8000542:	4b60      	ldr	r3, [pc, #384]	; (80006c4 <fsm_automatic_run+0x33c>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	2b01      	cmp	r3, #1
 8000548:	f040 809a 	bne.w	8000680 <fsm_automatic_run+0x2f8>
            traffic_status = GREEN_RED;
 800054c:	4b52      	ldr	r3, [pc, #328]	; (8000698 <fsm_automatic_run+0x310>)
 800054e:	2246      	movs	r2, #70	; 0x46
 8000550:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "GREEN   RED\r\n"), 1000);
 8000552:	495f      	ldr	r1, [pc, #380]	; (80006d0 <fsm_automatic_run+0x348>)
 8000554:	4852      	ldr	r0, [pc, #328]	; (80006a0 <fsm_automatic_run+0x318>)
 8000556:	f003 ff5f 	bl	8004418 <siprintf>
 800055a:	4603      	mov	r3, r0
 800055c:	b29a      	uxth	r2, r3
 800055e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000562:	494f      	ldr	r1, [pc, #316]	; (80006a0 <fsm_automatic_run+0x318>)
 8000564:	f107 0008 	add.w	r0, r7, #8
 8000568:	f003 fa2b 	bl	80039c2 <HAL_UART_Transmit>
            setTimer(1, green_counter);
 800056c:	4b4f      	ldr	r3, [pc, #316]	; (80006ac <fsm_automatic_run+0x324>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4619      	mov	r1, r3
 8000572:	2001      	movs	r0, #1
 8000574:	f001 f8c4 	bl	8001700 <setTimer>

            counter_light_1 = green_counter / 1000;
 8000578:	4b4c      	ldr	r3, [pc, #304]	; (80006ac <fsm_automatic_run+0x324>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a4d      	ldr	r2, [pc, #308]	; (80006b4 <fsm_automatic_run+0x32c>)
 800057e:	fb82 1203 	smull	r1, r2, r2, r3
 8000582:	1192      	asrs	r2, r2, #6
 8000584:	17db      	asrs	r3, r3, #31
 8000586:	1ad3      	subs	r3, r2, r3
 8000588:	4a4b      	ldr	r2, [pc, #300]	; (80006b8 <fsm_automatic_run+0x330>)
 800058a:	6013      	str	r3, [r2, #0]
            counter_light_2 = red_counter / 1000;
 800058c:	4b48      	ldr	r3, [pc, #288]	; (80006b0 <fsm_automatic_run+0x328>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a48      	ldr	r2, [pc, #288]	; (80006b4 <fsm_automatic_run+0x32c>)
 8000592:	fb82 1203 	smull	r1, r2, r2, r3
 8000596:	1192      	asrs	r2, r2, #6
 8000598:	17db      	asrs	r3, r3, #31
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	4a47      	ldr	r2, [pc, #284]	; (80006bc <fsm_automatic_run+0x334>)
 800059e:	6013      	str	r3, [r2, #0]

            /* INACTIVE pedestrian light when traffic light is backing to GREEN_RED mode */
            pedestrian_status = PEDESTRIAN_INACTIVE;
 80005a0:	4b40      	ldr	r3, [pc, #256]	; (80006a4 <fsm_automatic_run+0x31c>)
 80005a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80005a6:	601a      	str	r2, [r3, #0]
        }

        break;
 80005a8:	e06a      	b.n	8000680 <fsm_automatic_run+0x2f8>

    case GREEN_RED:
    	setGreenLight1(0);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 fc06 	bl	8000dbc <setGreenLight1>
    	setRedLight2(0);
 80005b0:	2000      	movs	r0, #0
 80005b2:	f000 fc3f 	bl	8000e34 <setRedLight2>

        if (timer_flag[1] == 1) {
 80005b6:	4b43      	ldr	r3, [pc, #268]	; (80006c4 <fsm_automatic_run+0x33c>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d162      	bne.n	8000684 <fsm_automatic_run+0x2fc>
            traffic_status = AMBER_RED;
 80005be:	4b36      	ldr	r3, [pc, #216]	; (8000698 <fsm_automatic_run+0x310>)
 80005c0:	2250      	movs	r2, #80	; 0x50
 80005c2:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "AMBER   RED\r\n"), 1000);
 80005c4:	4943      	ldr	r1, [pc, #268]	; (80006d4 <fsm_automatic_run+0x34c>)
 80005c6:	4836      	ldr	r0, [pc, #216]	; (80006a0 <fsm_automatic_run+0x318>)
 80005c8:	f003 ff26 	bl	8004418 <siprintf>
 80005cc:	4603      	mov	r3, r0
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d4:	4932      	ldr	r1, [pc, #200]	; (80006a0 <fsm_automatic_run+0x318>)
 80005d6:	f107 0008 	add.w	r0, r7, #8
 80005da:	f003 f9f2 	bl	80039c2 <HAL_UART_Transmit>
            setTimer(1, amber_counter);
 80005de:	4b3b      	ldr	r3, [pc, #236]	; (80006cc <fsm_automatic_run+0x344>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4619      	mov	r1, r3
 80005e4:	2001      	movs	r0, #1
 80005e6:	f001 f88b 	bl	8001700 <setTimer>

            counter_light_1 = amber_counter / 1000;
 80005ea:	4b38      	ldr	r3, [pc, #224]	; (80006cc <fsm_automatic_run+0x344>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a31      	ldr	r2, [pc, #196]	; (80006b4 <fsm_automatic_run+0x32c>)
 80005f0:	fb82 1203 	smull	r1, r2, r2, r3
 80005f4:	1192      	asrs	r2, r2, #6
 80005f6:	17db      	asrs	r3, r3, #31
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	4a2f      	ldr	r2, [pc, #188]	; (80006b8 <fsm_automatic_run+0x330>)
 80005fc:	6013      	str	r3, [r2, #0]
        }

        break;
 80005fe:	e041      	b.n	8000684 <fsm_automatic_run+0x2fc>

    case AMBER_RED:
    	setAmberLight1(0);
 8000600:	2000      	movs	r0, #0
 8000602:	f000 fbf9 	bl	8000df8 <setAmberLight1>
    	setRedLight2(0);
 8000606:	2000      	movs	r0, #0
 8000608:	f000 fc14 	bl	8000e34 <setRedLight2>

        if (timer_flag[1] == 1) {
 800060c:	4b2d      	ldr	r3, [pc, #180]	; (80006c4 <fsm_automatic_run+0x33c>)
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d139      	bne.n	8000688 <fsm_automatic_run+0x300>
            traffic_status = RED_GREEN;
 8000614:	4b20      	ldr	r3, [pc, #128]	; (8000698 <fsm_automatic_run+0x310>)
 8000616:	2232      	movs	r2, #50	; 0x32
 8000618:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "RED   GREEN\r\n"), 1000);
 800061a:	4923      	ldr	r1, [pc, #140]	; (80006a8 <fsm_automatic_run+0x320>)
 800061c:	4820      	ldr	r0, [pc, #128]	; (80006a0 <fsm_automatic_run+0x318>)
 800061e:	f003 fefb 	bl	8004418 <siprintf>
 8000622:	4603      	mov	r3, r0
 8000624:	b29a      	uxth	r2, r3
 8000626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062a:	491d      	ldr	r1, [pc, #116]	; (80006a0 <fsm_automatic_run+0x318>)
 800062c:	f107 0008 	add.w	r0, r7, #8
 8000630:	f003 f9c7 	bl	80039c2 <HAL_UART_Transmit>
            setTimer(1, green_counter);
 8000634:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <fsm_automatic_run+0x324>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	2001      	movs	r0, #1
 800063c:	f001 f860 	bl	8001700 <setTimer>

            counter_light_1 = red_counter / 1000;
 8000640:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <fsm_automatic_run+0x328>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a1b      	ldr	r2, [pc, #108]	; (80006b4 <fsm_automatic_run+0x32c>)
 8000646:	fb82 1203 	smull	r1, r2, r2, r3
 800064a:	1192      	asrs	r2, r2, #6
 800064c:	17db      	asrs	r3, r3, #31
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	4a19      	ldr	r2, [pc, #100]	; (80006b8 <fsm_automatic_run+0x330>)
 8000652:	6013      	str	r3, [r2, #0]
            counter_light_2 = green_counter / 1000;
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <fsm_automatic_run+0x324>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a16      	ldr	r2, [pc, #88]	; (80006b4 <fsm_automatic_run+0x32c>)
 800065a:	fb82 1203 	smull	r1, r2, r2, r3
 800065e:	1192      	asrs	r2, r2, #6
 8000660:	17db      	asrs	r3, r3, #31
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	4a15      	ldr	r2, [pc, #84]	; (80006bc <fsm_automatic_run+0x334>)
 8000666:	6013      	str	r3, [r2, #0]

            /* If the pedestrian light is PEDESTRIAN_RED, change to PEDESTRIAN_GREEN when the traffic light is backing to RED_GREEN mode */
            /* If the pedestrian light is INACTIVE => no change */
            if(pedestrian_status == PEDESTRIAN_RED){
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <fsm_automatic_run+0x31c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000670:	d10a      	bne.n	8000688 <fsm_automatic_run+0x300>
            	pedestrian_status = PEDESTRIAN_GREEN;
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <fsm_automatic_run+0x31c>)
 8000674:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000678:	601a      	str	r2, [r3, #0]
            }
        }
        break;
 800067a:	e005      	b.n	8000688 <fsm_automatic_run+0x300>
        break;
 800067c:	bf00      	nop
 800067e:	e004      	b.n	800068a <fsm_automatic_run+0x302>
        break;
 8000680:	bf00      	nop
 8000682:	e002      	b.n	800068a <fsm_automatic_run+0x302>
        break;
 8000684:	bf00      	nop
 8000686:	e000      	b.n	800068a <fsm_automatic_run+0x302>
        break;
 8000688:	bf00      	nop
    }
}
 800068a:	46bd      	mov	sp, r7
 800068c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000690:	b004      	add	sp, #16
 8000692:	4770      	bx	lr
 8000694:	20000000 	.word	0x20000000
 8000698:	20000008 	.word	0x20000008
 800069c:	08004c88 	.word	0x08004c88
 80006a0:	200001a8 	.word	0x200001a8
 80006a4:	20000004 	.word	0x20000004
 80006a8:	08004ca0 	.word	0x08004ca0
 80006ac:	20000014 	.word	0x20000014
 80006b0:	2000000c 	.word	0x2000000c
 80006b4:	10624dd3 	.word	0x10624dd3
 80006b8:	20000018 	.word	0x20000018
 80006bc:	2000001c 	.word	0x2000001c
 80006c0:	20000020 	.word	0x20000020
 80006c4:	20000264 	.word	0x20000264
 80006c8:	08004cb0 	.word	0x08004cb0
 80006cc:	20000010 	.word	0x20000010
 80006d0:	08004cc0 	.word	0x08004cc0
 80006d4:	08004cd0 	.word	0x08004cd0

080006d8 <fsm_manual_run>:

#include "fsm_manual.h"

int blink = 0;

void fsm_manual_run(UART_HandleTypeDef huart2) {
 80006d8:	b084      	sub	sp, #16
 80006da:	b580      	push	{r7, lr}
 80006dc:	af00      	add	r7, sp, #0
 80006de:	f107 0c08 	add.w	ip, r7, #8
 80006e2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	/* OUT OF TIME FOR MANUAL EVENTS */
	if (timer_flag[1] == 1) {
 80006e6:	4ba3      	ldr	r3, [pc, #652]	; (8000974 <fsm_manual_run+0x29c>)
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d106      	bne.n	80006fc <fsm_manual_run+0x24>
		status = AUTOMATIC_MODE;
 80006ee:	4ba2      	ldr	r3, [pc, #648]	; (8000978 <fsm_manual_run+0x2a0>)
 80006f0:	2202      	movs	r2, #2
 80006f2:	601a      	str	r2, [r3, #0]
		traffic_status = INIT;
 80006f4:	4ba1      	ldr	r3, [pc, #644]	; (800097c <fsm_manual_run+0x2a4>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	601a      	str	r2, [r3, #0]
		return;
 80006fa:	e2f0      	b.n	8000cde <fsm_manual_run+0x606>
	}

	if (timer_flag[2] == 1) { // using timer2 to blink the led
 80006fc:	4b9d      	ldr	r3, [pc, #628]	; (8000974 <fsm_manual_run+0x29c>)
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d10a      	bne.n	800071a <fsm_manual_run+0x42>
		blink = 1 - blink;
 8000704:	4b9e      	ldr	r3, [pc, #632]	; (8000980 <fsm_manual_run+0x2a8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f1c3 0301 	rsb	r3, r3, #1
 800070c:	4a9c      	ldr	r2, [pc, #624]	; (8000980 <fsm_manual_run+0x2a8>)
 800070e:	6013      	str	r3, [r2, #0]
		setTimer(2, 500); // toggle every 500ms, this would get f = 2Hz for blinking the led
 8000710:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000714:	2002      	movs	r0, #2
 8000716:	f000 fff3 	bl	8001700 <setTimer>
	}

	switch (traffic_status) {
 800071a:	4b98      	ldr	r3, [pc, #608]	; (800097c <fsm_manual_run+0x2a4>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	3b01      	subs	r3, #1
 8000720:	2b03      	cmp	r3, #3
 8000722:	f200 82af 	bhi.w	8000c84 <fsm_manual_run+0x5ac>
 8000726:	a201      	add	r2, pc, #4	; (adr r2, 800072c <fsm_manual_run+0x54>)
 8000728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072c:	0800073d 	.word	0x0800073d
 8000730:	080007df 	.word	0x080007df
 8000734:	080009c9 	.word	0x080009c9
 8000738:	08000b6b 	.word	0x08000b6b
	case INIT:
		/* UART COMMUNICATION */
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Mode: Manual mode\r\n"), 1000);
 800073c:	4991      	ldr	r1, [pc, #580]	; (8000984 <fsm_manual_run+0x2ac>)
 800073e:	4892      	ldr	r0, [pc, #584]	; (8000988 <fsm_manual_run+0x2b0>)
 8000740:	f003 fe6a 	bl	8004418 <siprintf>
 8000744:	4603      	mov	r3, r0
 8000746:	b29a      	uxth	r2, r3
 8000748:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074c:	498e      	ldr	r1, [pc, #568]	; (8000988 <fsm_manual_run+0x2b0>)
 800074e:	f107 0008 	add.w	r0, r7, #8
 8000752:	f003 f936 	bl	80039c2 <HAL_UART_Transmit>


		// change traffic state to MAN_RED when change from AUTOMATIC to MANUAL
		traffic_status = MAN_RED;
 8000756:	4b89      	ldr	r3, [pc, #548]	; (800097c <fsm_manual_run+0x2a4>)
 8000758:	2202      	movs	r2, #2
 800075a:	601a      	str	r2, [r3, #0]

		time_modify_counter = red_counter; // update temporary counter storing red led delay
 800075c:	4b8b      	ldr	r3, [pc, #556]	; (800098c <fsm_manual_run+0x2b4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a8b      	ldr	r2, [pc, #556]	; (8000990 <fsm_manual_run+0x2b8>)
 8000762:	6013      	str	r3, [r2, #0]
		counter_light_1 = red_counter / 1000; 		// counter light 1 show the value of current manual light
 8000764:	4b89      	ldr	r3, [pc, #548]	; (800098c <fsm_manual_run+0x2b4>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a8a      	ldr	r2, [pc, #552]	; (8000994 <fsm_manual_run+0x2bc>)
 800076a:	fb82 1203 	smull	r1, r2, r2, r3
 800076e:	1192      	asrs	r2, r2, #6
 8000770:	17db      	asrs	r3, r3, #31
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	4a88      	ldr	r2, [pc, #544]	; (8000998 <fsm_manual_run+0x2c0>)
 8000776:	6013      	str	r3, [r2, #0]
		counter_light_2 = traffic_status;					// counter light 2 show the mode
 8000778:	4b80      	ldr	r3, [pc, #512]	; (800097c <fsm_manual_run+0x2a4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a87      	ldr	r2, [pc, #540]	; (800099c <fsm_manual_run+0x2c4>)
 800077e:	6013      	str	r3, [r2, #0]
		counter_lights = READ_UART;					// reset counter for switching 7-seg lights
 8000780:	4b87      	ldr	r3, [pc, #540]	; (80009a0 <fsm_manual_run+0x2c8>)
 8000782:	2264      	movs	r2, #100	; 0x64
 8000784:	601a      	str	r2, [r3, #0]

		setTimer(1, 5000);				// reuse timer 0 to 5 seconds for manual event
 8000786:	f241 3188 	movw	r1, #5000	; 0x1388
 800078a:	2001      	movs	r0, #1
 800078c:	f000 ffb8 	bl	8001700 <setTimer>
		setTimer(2, 500); 				// set timer 1 for led blinking
 8000790:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000794:	2002      	movs	r0, #2
 8000796:	f000 ffb3 	bl	8001700 <setTimer>
		setTimer(3, 250);				// timer 3 still counting 7-seg light
 800079a:	21fa      	movs	r1, #250	; 0xfa
 800079c:	2003      	movs	r0, #3
 800079e:	f000 ffaf 	bl	8001700 <setTimer>

		/* UART COMMUNICATION */
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Mode 2: Modifying RED\r\n"), 1000);
 80007a2:	4980      	ldr	r1, [pc, #512]	; (80009a4 <fsm_manual_run+0x2cc>)
 80007a4:	4878      	ldr	r0, [pc, #480]	; (8000988 <fsm_manual_run+0x2b0>)
 80007a6:	f003 fe37 	bl	8004418 <siprintf>
 80007aa:	4603      	mov	r3, r0
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b2:	4975      	ldr	r1, [pc, #468]	; (8000988 <fsm_manual_run+0x2b0>)
 80007b4:	f107 0008 	add.w	r0, r7, #8
 80007b8:	f003 f903 	bl	80039c2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Current time = %d\r\n", counter_light_1), 1000);
 80007bc:	4b76      	ldr	r3, [pc, #472]	; (8000998 <fsm_manual_run+0x2c0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4979      	ldr	r1, [pc, #484]	; (80009a8 <fsm_manual_run+0x2d0>)
 80007c4:	4870      	ldr	r0, [pc, #448]	; (8000988 <fsm_manual_run+0x2b0>)
 80007c6:	f003 fe27 	bl	8004418 <siprintf>
 80007ca:	4603      	mov	r3, r0
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d2:	496d      	ldr	r1, [pc, #436]	; (8000988 <fsm_manual_run+0x2b0>)
 80007d4:	f107 0008 	add.w	r0, r7, #8
 80007d8:	f003 f8f3 	bl	80039c2 <HAL_UART_Transmit>

		break;
 80007dc:	e27f      	b.n	8000cde <fsm_manual_run+0x606>
	case MAN_RED:
		/* BLINK LEDs */
		setRedLight1(blink);
 80007de:	4b68      	ldr	r3, [pc, #416]	; (8000980 <fsm_manual_run+0x2a8>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 facc 	bl	8000d80 <setRedLight1>
		setRedLight2(blink);
 80007e8:	4b65      	ldr	r3, [pc, #404]	; (8000980 <fsm_manual_run+0x2a8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 fb21 	bl	8000e34 <setRedLight2>

		/* CHANGE MODE = 3 (MAN_AMBER) WHEN BUTTON1 IS PRESSED */
		if (isButtonPressed(1)) {
 80007f2:	2001      	movs	r0, #1
 80007f4:	f7ff fd9e 	bl	8000334 <isButtonPressed>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d042      	beq.n	8000884 <fsm_manual_run+0x1ac>
			traffic_status = MAN_AMBER;
 80007fe:	4b5f      	ldr	r3, [pc, #380]	; (800097c <fsm_manual_run+0x2a4>)
 8000800:	2203      	movs	r2, #3
 8000802:	601a      	str	r2, [r3, #0]

			time_modify_counter = amber_counter;	// update temporary counter storing red led delay
 8000804:	4b69      	ldr	r3, [pc, #420]	; (80009ac <fsm_manual_run+0x2d4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a61      	ldr	r2, [pc, #388]	; (8000990 <fsm_manual_run+0x2b8>)
 800080a:	6013      	str	r3, [r2, #0]
			counter_light_1 = amber_counter / 1000;	// counter light 1 show the value of current manual light
 800080c:	4b67      	ldr	r3, [pc, #412]	; (80009ac <fsm_manual_run+0x2d4>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a60      	ldr	r2, [pc, #384]	; (8000994 <fsm_manual_run+0x2bc>)
 8000812:	fb82 1203 	smull	r1, r2, r2, r3
 8000816:	1192      	asrs	r2, r2, #6
 8000818:	17db      	asrs	r3, r3, #31
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	4a5e      	ldr	r2, [pc, #376]	; (8000998 <fsm_manual_run+0x2c0>)
 800081e:	6013      	str	r3, [r2, #0]
			counter_light_2 = traffic_status;				// counter light 2 show the mode
 8000820:	4b56      	ldr	r3, [pc, #344]	; (800097c <fsm_manual_run+0x2a4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a5d      	ldr	r2, [pc, #372]	; (800099c <fsm_manual_run+0x2c4>)
 8000826:	6013      	str	r3, [r2, #0]
			counter_lights = READ_UART;				// reset counter for switching 7-seg lights
 8000828:	4b5d      	ldr	r3, [pc, #372]	; (80009a0 <fsm_manual_run+0x2c8>)
 800082a:	2264      	movs	r2, #100	; 0x64
 800082c:	601a      	str	r2, [r3, #0]

			setTimer(1, 5000);			// reuse timer 0 to 5 seconds for manual event
 800082e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000832:	2001      	movs	r0, #1
 8000834:	f000 ff64 	bl	8001700 <setTimer>
			setTimer(2, 500); 			// set timer 1 for led blinking
 8000838:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800083c:	2002      	movs	r0, #2
 800083e:	f000 ff5f 	bl	8001700 <setTimer>
			setTimer(3, 250);			// timer 3 still counting 7-seg light
 8000842:	21fa      	movs	r1, #250	; 0xfa
 8000844:	2003      	movs	r0, #3
 8000846:	f000 ff5b 	bl	8001700 <setTimer>

			/* UART COMMUNICATION */
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Mode 3: Modifying AMBER\r\n"), 1000);
 800084a:	4959      	ldr	r1, [pc, #356]	; (80009b0 <fsm_manual_run+0x2d8>)
 800084c:	484e      	ldr	r0, [pc, #312]	; (8000988 <fsm_manual_run+0x2b0>)
 800084e:	f003 fde3 	bl	8004418 <siprintf>
 8000852:	4603      	mov	r3, r0
 8000854:	b29a      	uxth	r2, r3
 8000856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085a:	494b      	ldr	r1, [pc, #300]	; (8000988 <fsm_manual_run+0x2b0>)
 800085c:	f107 0008 	add.w	r0, r7, #8
 8000860:	f003 f8af 	bl	80039c2 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Current time = %d\r\n", counter_light_1), 1000);
 8000864:	4b4c      	ldr	r3, [pc, #304]	; (8000998 <fsm_manual_run+0x2c0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	494f      	ldr	r1, [pc, #316]	; (80009a8 <fsm_manual_run+0x2d0>)
 800086c:	4846      	ldr	r0, [pc, #280]	; (8000988 <fsm_manual_run+0x2b0>)
 800086e:	f003 fdd3 	bl	8004418 <siprintf>
 8000872:	4603      	mov	r3, r0
 8000874:	b29a      	uxth	r2, r3
 8000876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087a:	4943      	ldr	r1, [pc, #268]	; (8000988 <fsm_manual_run+0x2b0>)
 800087c:	f107 0008 	add.w	r0, r7, #8
 8000880:	f003 f89f 	bl	80039c2 <HAL_UART_Transmit>
		}

		if (isButtonPressed(2) == 1) { // increasing 7-segment light counter
 8000884:	2002      	movs	r0, #2
 8000886:	f7ff fd55 	bl	8000334 <isButtonPressed>
 800088a:	4603      	mov	r3, r0
 800088c:	2b01      	cmp	r3, #1
 800088e:	d129      	bne.n	80008e4 <fsm_manual_run+0x20c>
			time_modify_counter += UPDATED_TIME;
 8000890:	4b3f      	ldr	r3, [pc, #252]	; (8000990 <fsm_manual_run+0x2b8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000898:	4a3d      	ldr	r2, [pc, #244]	; (8000990 <fsm_manual_run+0x2b8>)
 800089a:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Updated time = %d\r\n", time_modify_counter / 1000), 1000);
 800089c:	4b3c      	ldr	r3, [pc, #240]	; (8000990 <fsm_manual_run+0x2b8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a3c      	ldr	r2, [pc, #240]	; (8000994 <fsm_manual_run+0x2bc>)
 80008a2:	fb82 1203 	smull	r1, r2, r2, r3
 80008a6:	1192      	asrs	r2, r2, #6
 80008a8:	17db      	asrs	r3, r3, #31
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	461a      	mov	r2, r3
 80008ae:	4941      	ldr	r1, [pc, #260]	; (80009b4 <fsm_manual_run+0x2dc>)
 80008b0:	4835      	ldr	r0, [pc, #212]	; (8000988 <fsm_manual_run+0x2b0>)
 80008b2:	f003 fdb1 	bl	8004418 <siprintf>
 80008b6:	4603      	mov	r3, r0
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008be:	4932      	ldr	r1, [pc, #200]	; (8000988 <fsm_manual_run+0x2b0>)
 80008c0:	f107 0008 	add.w	r0, r7, #8
 80008c4:	f003 f87d 	bl	80039c2 <HAL_UART_Transmit>
			if (time_modify_counter > MAX_TIME)
 80008c8:	4b31      	ldr	r3, [pc, #196]	; (8000990 <fsm_manual_run+0x2b8>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a3a      	ldr	r2, [pc, #232]	; (80009b8 <fsm_manual_run+0x2e0>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	dd03      	ble.n	80008da <fsm_manual_run+0x202>
				time_modify_counter = 1000; // 1 second
 80008d2:	4b2f      	ldr	r3, [pc, #188]	; (8000990 <fsm_manual_run+0x2b8>)
 80008d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008d8:	601a      	str	r2, [r3, #0]
			setTimer(1, 5000); // set 5 seconds for manual events
 80008da:	f241 3188 	movw	r1, #5000	; 0x1388
 80008de:	2001      	movs	r0, #1
 80008e0:	f000 ff0e 	bl	8001700 <setTimer>
		}

		if (isButtonPressed(3) == 1) { // set the new value for 7-segment light counter
 80008e4:	2003      	movs	r0, #3
 80008e6:	f7ff fd25 	bl	8000334 <isButtonPressed>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	f040 81cb 	bne.w	8000c88 <fsm_manual_run+0x5b0>
			red_counter = time_modify_counter;
 80008f2:	4b27      	ldr	r3, [pc, #156]	; (8000990 <fsm_manual_run+0x2b8>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a25      	ldr	r2, [pc, #148]	; (800098c <fsm_manual_run+0x2b4>)
 80008f8:	6013      	str	r3, [r2, #0]
			green_counter = red_counter - amber_counter;
 80008fa:	4b24      	ldr	r3, [pc, #144]	; (800098c <fsm_manual_run+0x2b4>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <fsm_manual_run+0x2d4>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	4a2d      	ldr	r2, [pc, #180]	; (80009bc <fsm_manual_run+0x2e4>)
 8000906:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);								// set 5 seconds for manual events
 8000908:	f241 3188 	movw	r1, #5000	; 0x1388
 800090c:	2001      	movs	r0, #1
 800090e:	f000 fef7 	bl	8001700 <setTimer>
			counter_light_1 = red_counter / 1000; // counter light 1 show the value of current manual light
 8000912:	4b1e      	ldr	r3, [pc, #120]	; (800098c <fsm_manual_run+0x2b4>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a1f      	ldr	r2, [pc, #124]	; (8000994 <fsm_manual_run+0x2bc>)
 8000918:	fb82 1203 	smull	r1, r2, r2, r3
 800091c:	1192      	asrs	r2, r2, #6
 800091e:	17db      	asrs	r3, r3, #31
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	4a1d      	ldr	r2, [pc, #116]	; (8000998 <fsm_manual_run+0x2c0>)
 8000924:	6013      	str	r3, [r2, #0]
			counter_lights = READ_UART;								// reset counter for switching 7-seg lights
 8000926:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <fsm_manual_run+0x2c8>)
 8000928:	2264      	movs	r2, #100	; 0x64
 800092a:	601a      	str	r2, [r3, #0]

			status = AUTOMATIC_MODE;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <fsm_manual_run+0x2a0>)
 800092e:	2202      	movs	r2, #2
 8000930:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <fsm_manual_run+0x2a4>)
 8000934:	2201      	movs	r2, #1
 8000936:	601a      	str	r2, [r3, #0]

			/* UART COMMUNICATION */
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Upon update:\r\n"), 1000);
 8000938:	4921      	ldr	r1, [pc, #132]	; (80009c0 <fsm_manual_run+0x2e8>)
 800093a:	4813      	ldr	r0, [pc, #76]	; (8000988 <fsm_manual_run+0x2b0>)
 800093c:	f003 fd6c 	bl	8004418 <siprintf>
 8000940:	4603      	mov	r3, r0
 8000942:	b29a      	uxth	r2, r3
 8000944:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000948:	490f      	ldr	r1, [pc, #60]	; (8000988 <fsm_manual_run+0x2b0>)
 800094a:	f107 0008 	add.w	r0, r7, #8
 800094e:	f003 f838 	bl	80039c2 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "RED counter = %d\r\n", counter_light_1), 1000);
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <fsm_manual_run+0x2c0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	491a      	ldr	r1, [pc, #104]	; (80009c4 <fsm_manual_run+0x2ec>)
 800095a:	480b      	ldr	r0, [pc, #44]	; (8000988 <fsm_manual_run+0x2b0>)
 800095c:	f003 fd5c 	bl	8004418 <siprintf>
 8000960:	4603      	mov	r3, r0
 8000962:	b29a      	uxth	r2, r3
 8000964:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000968:	4907      	ldr	r1, [pc, #28]	; (8000988 <fsm_manual_run+0x2b0>)
 800096a:	f107 0008 	add.w	r0, r7, #8
 800096e:	f003 f828 	bl	80039c2 <HAL_UART_Transmit>
		}
		break;
 8000972:	e189      	b.n	8000c88 <fsm_manual_run+0x5b0>
 8000974:	20000264 	.word	0x20000264
 8000978:	20000000 	.word	0x20000000
 800097c:	20000008 	.word	0x20000008
 8000980:	200000b0 	.word	0x200000b0
 8000984:	08004ce0 	.word	0x08004ce0
 8000988:	200001a8 	.word	0x200001a8
 800098c:	2000000c 	.word	0x2000000c
 8000990:	200000b4 	.word	0x200000b4
 8000994:	10624dd3 	.word	0x10624dd3
 8000998:	20000018 	.word	0x20000018
 800099c:	2000001c 	.word	0x2000001c
 80009a0:	20000020 	.word	0x20000020
 80009a4:	08004cf4 	.word	0x08004cf4
 80009a8:	08004d0c 	.word	0x08004d0c
 80009ac:	20000010 	.word	0x20000010
 80009b0:	08004d20 	.word	0x08004d20
 80009b4:	08004d3c 	.word	0x08004d3c
 80009b8:	000182b8 	.word	0x000182b8
 80009bc:	20000014 	.word	0x20000014
 80009c0:	08004d50 	.word	0x08004d50
 80009c4:	08004d60 	.word	0x08004d60

	case MAN_AMBER:
		/* BLINK LEDs */
		setAmberLight1(blink);
 80009c8:	4bb1      	ldr	r3, [pc, #708]	; (8000c90 <fsm_manual_run+0x5b8>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fa13 	bl	8000df8 <setAmberLight1>
		setAmberLight2(blink);
 80009d2:	4baf      	ldr	r3, [pc, #700]	; (8000c90 <fsm_manual_run+0x5b8>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 fa68 	bl	8000eac <setAmberLight2>

		/* CHANGE MODE = 4 (MAN_GREEN) WHEN BUTTON1 IS PRESSED */
		if (isButtonPressed(1)) {
 80009dc:	2001      	movs	r0, #1
 80009de:	f7ff fca9 	bl	8000334 <isButtonPressed>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d048      	beq.n	8000a7a <fsm_manual_run+0x3a2>
			traffic_status = MAN_GREEN;
 80009e8:	4baa      	ldr	r3, [pc, #680]	; (8000c94 <fsm_manual_run+0x5bc>)
 80009ea:	2204      	movs	r2, #4
 80009ec:	601a      	str	r2, [r3, #0]

			time_modify_counter = green_counter / 1000;	// update temporary counter storing red led delay
 80009ee:	4baa      	ldr	r3, [pc, #680]	; (8000c98 <fsm_manual_run+0x5c0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4aaa      	ldr	r2, [pc, #680]	; (8000c9c <fsm_manual_run+0x5c4>)
 80009f4:	fb82 1203 	smull	r1, r2, r2, r3
 80009f8:	1192      	asrs	r2, r2, #6
 80009fa:	17db      	asrs	r3, r3, #31
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	4aa8      	ldr	r2, [pc, #672]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000a00:	6013      	str	r3, [r2, #0]
			counter_light_1 = green_counter / 1000;			// counter light 1 show the value of current manual light
 8000a02:	4ba5      	ldr	r3, [pc, #660]	; (8000c98 <fsm_manual_run+0x5c0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4aa5      	ldr	r2, [pc, #660]	; (8000c9c <fsm_manual_run+0x5c4>)
 8000a08:	fb82 1203 	smull	r1, r2, r2, r3
 8000a0c:	1192      	asrs	r2, r2, #6
 8000a0e:	17db      	asrs	r3, r3, #31
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	4aa4      	ldr	r2, [pc, #656]	; (8000ca4 <fsm_manual_run+0x5cc>)
 8000a14:	6013      	str	r3, [r2, #0]
			counter_light_2 = traffic_status;						// counter light 2 show the mode
 8000a16:	4b9f      	ldr	r3, [pc, #636]	; (8000c94 <fsm_manual_run+0x5bc>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4aa3      	ldr	r2, [pc, #652]	; (8000ca8 <fsm_manual_run+0x5d0>)
 8000a1c:	6013      	str	r3, [r2, #0]
			counter_lights = READ_UART;						// reset counter for switching 7-seg lights
 8000a1e:	4ba3      	ldr	r3, [pc, #652]	; (8000cac <fsm_manual_run+0x5d4>)
 8000a20:	2264      	movs	r2, #100	; 0x64
 8000a22:	601a      	str	r2, [r3, #0]

			setTimer(1, 5000);				// reuse timer 0 to 5 seconds for manual event
 8000a24:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f000 fe69 	bl	8001700 <setTimer>
			setTimer(2, 500); 				// set timer 1 for led blinking
 8000a2e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a32:	2002      	movs	r0, #2
 8000a34:	f000 fe64 	bl	8001700 <setTimer>
			setTimer(3, 250);				// timer 3 still counting 7-seg light
 8000a38:	21fa      	movs	r1, #250	; 0xfa
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	f000 fe60 	bl	8001700 <setTimer>

			/* UART COMMUNICATION */
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Mode 4: Modifying GREEN\r\n"), 1000);
 8000a40:	499b      	ldr	r1, [pc, #620]	; (8000cb0 <fsm_manual_run+0x5d8>)
 8000a42:	489c      	ldr	r0, [pc, #624]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000a44:	f003 fce8 	bl	8004418 <siprintf>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a50:	4998      	ldr	r1, [pc, #608]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000a52:	f107 0008 	add.w	r0, r7, #8
 8000a56:	f002 ffb4 	bl	80039c2 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Current time = %d\r\n", counter_light_1), 1000);
 8000a5a:	4b92      	ldr	r3, [pc, #584]	; (8000ca4 <fsm_manual_run+0x5cc>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4995      	ldr	r1, [pc, #596]	; (8000cb8 <fsm_manual_run+0x5e0>)
 8000a62:	4894      	ldr	r0, [pc, #592]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000a64:	f003 fcd8 	bl	8004418 <siprintf>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a70:	4990      	ldr	r1, [pc, #576]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000a72:	f107 0008 	add.w	r0, r7, #8
 8000a76:	f002 ffa4 	bl	80039c2 <HAL_UART_Transmit>
		}

		if (isButtonPressed(2) == 1) { // increasing 7-segment light counter
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	f7ff fc5a 	bl	8000334 <isButtonPressed>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d129      	bne.n	8000ada <fsm_manual_run+0x402>
			time_modify_counter += UPDATED_TIME;
 8000a86:	4b86      	ldr	r3, [pc, #536]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a8e:	4a84      	ldr	r2, [pc, #528]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000a90:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Updated time = %d\r\n", time_modify_counter / 1000), 1000);
 8000a92:	4b83      	ldr	r3, [pc, #524]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a81      	ldr	r2, [pc, #516]	; (8000c9c <fsm_manual_run+0x5c4>)
 8000a98:	fb82 1203 	smull	r1, r2, r2, r3
 8000a9c:	1192      	asrs	r2, r2, #6
 8000a9e:	17db      	asrs	r3, r3, #31
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4985      	ldr	r1, [pc, #532]	; (8000cbc <fsm_manual_run+0x5e4>)
 8000aa6:	4883      	ldr	r0, [pc, #524]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000aa8:	f003 fcb6 	bl	8004418 <siprintf>
 8000aac:	4603      	mov	r3, r0
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab4:	497f      	ldr	r1, [pc, #508]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000ab6:	f107 0008 	add.w	r0, r7, #8
 8000aba:	f002 ff82 	bl	80039c2 <HAL_UART_Transmit>
			if (time_modify_counter > MAX_TIME)
 8000abe:	4b78      	ldr	r3, [pc, #480]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a7f      	ldr	r2, [pc, #508]	; (8000cc0 <fsm_manual_run+0x5e8>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	dd03      	ble.n	8000ad0 <fsm_manual_run+0x3f8>
				time_modify_counter = 1000; // 1 second
 8000ac8:	4b75      	ldr	r3, [pc, #468]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000aca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ace:	601a      	str	r2, [r3, #0]
			setTimer(1, 5000); // set 5 seconds for manual events
 8000ad0:	f241 3188 	movw	r1, #5000	; 0x1388
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f000 fe13 	bl	8001700 <setTimer>
		}

		if (isButtonPressed(3) == 1) { // set the new value for 7-segment light counter
 8000ada:	2003      	movs	r0, #3
 8000adc:	f7ff fc2a 	bl	8000334 <isButtonPressed>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	f040 80d2 	bne.w	8000c8c <fsm_manual_run+0x5b4>
			amber_counter = time_modify_counter;
 8000ae8:	4b6d      	ldr	r3, [pc, #436]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a75      	ldr	r2, [pc, #468]	; (8000cc4 <fsm_manual_run+0x5ec>)
 8000aee:	6013      	str	r3, [r2, #0]
			red_counter = amber_counter + green_counter;
 8000af0:	4b74      	ldr	r3, [pc, #464]	; (8000cc4 <fsm_manual_run+0x5ec>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b68      	ldr	r3, [pc, #416]	; (8000c98 <fsm_manual_run+0x5c0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4413      	add	r3, r2
 8000afa:	4a73      	ldr	r2, [pc, #460]	; (8000cc8 <fsm_manual_run+0x5f0>)
 8000afc:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);									// set 5 seconds for manual events
 8000afe:	f241 3188 	movw	r1, #5000	; 0x1388
 8000b02:	2001      	movs	r0, #1
 8000b04:	f000 fdfc 	bl	8001700 <setTimer>
			counter_light_1 = amber_counter / 1000; // counter light 1 show the value of current manual light
 8000b08:	4b6e      	ldr	r3, [pc, #440]	; (8000cc4 <fsm_manual_run+0x5ec>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a63      	ldr	r2, [pc, #396]	; (8000c9c <fsm_manual_run+0x5c4>)
 8000b0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b12:	1192      	asrs	r2, r2, #6
 8000b14:	17db      	asrs	r3, r3, #31
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	4a62      	ldr	r2, [pc, #392]	; (8000ca4 <fsm_manual_run+0x5cc>)
 8000b1a:	6013      	str	r3, [r2, #0]
			counter_lights = READ_UART;									// reset counter for switching 7-seg lights
 8000b1c:	4b63      	ldr	r3, [pc, #396]	; (8000cac <fsm_manual_run+0x5d4>)
 8000b1e:	2264      	movs	r2, #100	; 0x64
 8000b20:	601a      	str	r2, [r3, #0]

			status = AUTOMATIC_MODE;
 8000b22:	4b6a      	ldr	r3, [pc, #424]	; (8000ccc <fsm_manual_run+0x5f4>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 8000b28:	4b5a      	ldr	r3, [pc, #360]	; (8000c94 <fsm_manual_run+0x5bc>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	601a      	str	r2, [r3, #0]

			/* UART COMMUNICATION */
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Upon update:\r\n"), 1000);
 8000b2e:	4968      	ldr	r1, [pc, #416]	; (8000cd0 <fsm_manual_run+0x5f8>)
 8000b30:	4860      	ldr	r0, [pc, #384]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000b32:	f003 fc71 	bl	8004418 <siprintf>
 8000b36:	4603      	mov	r3, r0
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3e:	495d      	ldr	r1, [pc, #372]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000b40:	f107 0008 	add.w	r0, r7, #8
 8000b44:	f002 ff3d 	bl	80039c2 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "AMBER counter = %d\r\n", counter_light_1), 1000);
 8000b48:	4b56      	ldr	r3, [pc, #344]	; (8000ca4 <fsm_manual_run+0x5cc>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4961      	ldr	r1, [pc, #388]	; (8000cd4 <fsm_manual_run+0x5fc>)
 8000b50:	4858      	ldr	r0, [pc, #352]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000b52:	f003 fc61 	bl	8004418 <siprintf>
 8000b56:	4603      	mov	r3, r0
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5e:	4955      	ldr	r1, [pc, #340]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000b60:	f107 0008 	add.w	r0, r7, #8
 8000b64:	f002 ff2d 	bl	80039c2 <HAL_UART_Transmit>
		}

		break;
 8000b68:	e090      	b.n	8000c8c <fsm_manual_run+0x5b4>

	case MAN_GREEN:
		/* BLINK LEDs */
		setGreenLight1(blink);
 8000b6a:	4b49      	ldr	r3, [pc, #292]	; (8000c90 <fsm_manual_run+0x5b8>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f924 	bl	8000dbc <setGreenLight1>
		setGreenLight2(blink);
 8000b74:	4b46      	ldr	r3, [pc, #280]	; (8000c90 <fsm_manual_run+0x5b8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 f979 	bl	8000e70 <setGreenLight2>

		/* CHANGE MODE = 1 (AUTOMATIC) WHEN BUTTON1 IS PRESSED */
		if (isButtonPressed(1)) {
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff fbd8 	bl	8000334 <isButtonPressed>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d005      	beq.n	8000b96 <fsm_manual_run+0x4be>
			status = AUTOMATIC_MODE;
 8000b8a:	4b50      	ldr	r3, [pc, #320]	; (8000ccc <fsm_manual_run+0x5f4>)
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 8000b90:	4b40      	ldr	r3, [pc, #256]	; (8000c94 <fsm_manual_run+0x5bc>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	601a      	str	r2, [r3, #0]
		}

		if (isButtonPressed(2) == 1) { // increasing 7-segment light counter
 8000b96:	2002      	movs	r0, #2
 8000b98:	f7ff fbcc 	bl	8000334 <isButtonPressed>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d129      	bne.n	8000bf6 <fsm_manual_run+0x51e>
			time_modify_counter += UPDATED_TIME;
 8000ba2:	4b3f      	ldr	r3, [pc, #252]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000baa:	4a3d      	ldr	r2, [pc, #244]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000bac:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Updated time = %d\r\n", time_modify_counter / 1000), 1000);
 8000bae:	4b3c      	ldr	r3, [pc, #240]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a3a      	ldr	r2, [pc, #232]	; (8000c9c <fsm_manual_run+0x5c4>)
 8000bb4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bb8:	1192      	asrs	r2, r2, #6
 8000bba:	17db      	asrs	r3, r3, #31
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	493e      	ldr	r1, [pc, #248]	; (8000cbc <fsm_manual_run+0x5e4>)
 8000bc2:	483c      	ldr	r0, [pc, #240]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000bc4:	f003 fc28 	bl	8004418 <siprintf>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd0:	4938      	ldr	r1, [pc, #224]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000bd2:	f107 0008 	add.w	r0, r7, #8
 8000bd6:	f002 fef4 	bl	80039c2 <HAL_UART_Transmit>
			if (time_modify_counter > MAX_TIME)
 8000bda:	4b31      	ldr	r3, [pc, #196]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a38      	ldr	r2, [pc, #224]	; (8000cc0 <fsm_manual_run+0x5e8>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	dd03      	ble.n	8000bec <fsm_manual_run+0x514>
				time_modify_counter = 1000; // 1 second
 8000be4:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000be6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bea:	601a      	str	r2, [r3, #0]
			setTimer(1, 5000); // set 5 seconds for manual events
 8000bec:	f241 3188 	movw	r1, #5000	; 0x1388
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f000 fd85 	bl	8001700 <setTimer>
		}

		if (isButtonPressed(3) == 1) { // set the new value for 7-segment light counter
 8000bf6:	2003      	movs	r0, #3
 8000bf8:	f7ff fb9c 	bl	8000334 <isButtonPressed>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d16c      	bne.n	8000cdc <fsm_manual_run+0x604>
			green_counter = time_modify_counter;
 8000c02:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <fsm_manual_run+0x5c8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a24      	ldr	r2, [pc, #144]	; (8000c98 <fsm_manual_run+0x5c0>)
 8000c08:	6013      	str	r3, [r2, #0]
			red_counter = amber_counter + green_counter;
 8000c0a:	4b2e      	ldr	r3, [pc, #184]	; (8000cc4 <fsm_manual_run+0x5ec>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <fsm_manual_run+0x5c0>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a2c      	ldr	r2, [pc, #176]	; (8000cc8 <fsm_manual_run+0x5f0>)
 8000c16:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);									// set 5 seconds for manual events
 8000c18:	f241 3188 	movw	r1, #5000	; 0x1388
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f000 fd6f 	bl	8001700 <setTimer>
			counter_light_1 = green_counter / 1000; // counter light 1 show the value of current manual light
 8000c22:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <fsm_manual_run+0x5c0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a1d      	ldr	r2, [pc, #116]	; (8000c9c <fsm_manual_run+0x5c4>)
 8000c28:	fb82 1203 	smull	r1, r2, r2, r3
 8000c2c:	1192      	asrs	r2, r2, #6
 8000c2e:	17db      	asrs	r3, r3, #31
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	4a1c      	ldr	r2, [pc, #112]	; (8000ca4 <fsm_manual_run+0x5cc>)
 8000c34:	6013      	str	r3, [r2, #0]
			counter_lights = READ_UART;									// reset counter for switching 7-seg lights
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <fsm_manual_run+0x5d4>)
 8000c38:	2264      	movs	r2, #100	; 0x64
 8000c3a:	601a      	str	r2, [r3, #0]

			status = AUTOMATIC_MODE;
 8000c3c:	4b23      	ldr	r3, [pc, #140]	; (8000ccc <fsm_manual_run+0x5f4>)
 8000c3e:	2202      	movs	r2, #2
 8000c40:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <fsm_manual_run+0x5bc>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	601a      	str	r2, [r3, #0]

			/* UART COMMUNICATION */
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Upon update:\r\n"), 1000);
 8000c48:	4921      	ldr	r1, [pc, #132]	; (8000cd0 <fsm_manual_run+0x5f8>)
 8000c4a:	481a      	ldr	r0, [pc, #104]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000c4c:	f003 fbe4 	bl	8004418 <siprintf>
 8000c50:	4603      	mov	r3, r0
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c58:	4916      	ldr	r1, [pc, #88]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000c5a:	f107 0008 	add.w	r0, r7, #8
 8000c5e:	f002 feb0 	bl	80039c2 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "GREEN counter = %d\r\n", counter_light_1), 1000);
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <fsm_manual_run+0x5cc>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	461a      	mov	r2, r3
 8000c68:	491b      	ldr	r1, [pc, #108]	; (8000cd8 <fsm_manual_run+0x600>)
 8000c6a:	4812      	ldr	r0, [pc, #72]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000c6c:	f003 fbd4 	bl	8004418 <siprintf>
 8000c70:	4603      	mov	r3, r0
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c78:	490e      	ldr	r1, [pc, #56]	; (8000cb4 <fsm_manual_run+0x5dc>)
 8000c7a:	f107 0008 	add.w	r0, r7, #8
 8000c7e:	f002 fea0 	bl	80039c2 <HAL_UART_Transmit>
		}

		break;
 8000c82:	e02b      	b.n	8000cdc <fsm_manual_run+0x604>
	default:
		break;
 8000c84:	bf00      	nop
 8000c86:	e02a      	b.n	8000cde <fsm_manual_run+0x606>
		break;
 8000c88:	bf00      	nop
 8000c8a:	e028      	b.n	8000cde <fsm_manual_run+0x606>
		break;
 8000c8c:	bf00      	nop
 8000c8e:	e026      	b.n	8000cde <fsm_manual_run+0x606>
 8000c90:	200000b0 	.word	0x200000b0
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000014 	.word	0x20000014
 8000c9c:	10624dd3 	.word	0x10624dd3
 8000ca0:	200000b4 	.word	0x200000b4
 8000ca4:	20000018 	.word	0x20000018
 8000ca8:	2000001c 	.word	0x2000001c
 8000cac:	20000020 	.word	0x20000020
 8000cb0:	08004d74 	.word	0x08004d74
 8000cb4:	200001a8 	.word	0x200001a8
 8000cb8:	08004d0c 	.word	0x08004d0c
 8000cbc:	08004d3c 	.word	0x08004d3c
 8000cc0:	000182b8 	.word	0x000182b8
 8000cc4:	20000010 	.word	0x20000010
 8000cc8:	2000000c 	.word	0x2000000c
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	08004d50 	.word	0x08004d50
 8000cd4:	08004d90 	.word	0x08004d90
 8000cd8:	08004da8 	.word	0x08004da8
		break;
 8000cdc:	bf00      	nop
	}
}
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <resetLights>:
 */

#include "graphics.h"

void resetLights()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	time_modify_counter = 0;
 8000cec:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <resetLights+0x88>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
	traffic_status = INIT;
 8000cf2:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <resetLights+0x8c>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfe:	481e      	ldr	r0, [pc, #120]	; (8000d78 <resetLights+0x90>)
 8000d00:	f001 fa9d 	bl	800223e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d0a:	481b      	ldr	r0, [pc, #108]	; (8000d78 <resetLights+0x90>)
 8000d0c:	f001 fa97 	bl	800223e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d16:	4818      	ldr	r0, [pc, #96]	; (8000d78 <resetLights+0x90>)
 8000d18:	f001 fa91 	bl	800223e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d22:	4816      	ldr	r0, [pc, #88]	; (8000d7c <resetLights+0x94>)
 8000d24:	f001 fa8b 	bl	800223e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d2e:	4813      	ldr	r0, [pc, #76]	; (8000d7c <resetLights+0x94>)
 8000d30:	f001 fa85 	bl	800223e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d3a:	4810      	ldr	r0, [pc, #64]	; (8000d7c <resetLights+0x94>)
 8000d3c:	f001 fa7f 	bl	800223e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2140      	movs	r1, #64	; 0x40
 8000d44:	480c      	ldr	r0, [pc, #48]	; (8000d78 <resetLights+0x90>)
 8000d46:	f001 fa7a 	bl	800223e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	480a      	ldr	r0, [pc, #40]	; (8000d78 <resetLights+0x90>)
 8000d50:	f001 fa75 	bl	800223e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d5a:	4807      	ldr	r0, [pc, #28]	; (8000d78 <resetLights+0x90>)
 8000d5c:	f001 fa6f 	bl	800223e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d66:	4804      	ldr	r0, [pc, #16]	; (8000d78 <resetLights+0x90>)
 8000d68:	f001 fa69 	bl	800223e <HAL_GPIO_WritePin>
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200000b4 	.word	0x200000b4
 8000d74:	20000008 	.word	0x20000008
 8000d78:	40010c00 	.word	0x40010c00
 8000d7c:	40010800 	.word	0x40010800

08000d80 <setRedLight1>:

void setRedLight1(int blink)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, blink);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d92:	4809      	ldr	r0, [pc, #36]	; (8000db8 <setRedLight1+0x38>)
 8000d94:	f001 fa53 	bl	800223e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9e:	4806      	ldr	r0, [pc, #24]	; (8000db8 <setRedLight1+0x38>)
 8000da0:	f001 fa4d 	bl	800223e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, GPIO_PIN_SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000daa:	4803      	ldr	r0, [pc, #12]	; (8000db8 <setRedLight1+0x38>)
 8000dac:	f001 fa47 	bl	800223e <HAL_GPIO_WritePin>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40010c00 	.word	0x40010c00

08000dbc <setGreenLight1>:
void setGreenLight1(int blink)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dca:	480a      	ldr	r0, [pc, #40]	; (8000df4 <setGreenLight1+0x38>)
 8000dcc:	f001 fa37 	bl	800223e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, blink);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dda:	4806      	ldr	r0, [pc, #24]	; (8000df4 <setGreenLight1+0x38>)
 8000ddc:	f001 fa2f 	bl	800223e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, GPIO_PIN_SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de6:	4803      	ldr	r0, [pc, #12]	; (8000df4 <setGreenLight1+0x38>)
 8000de8:	f001 fa29 	bl	800223e <HAL_GPIO_WritePin>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40010c00 	.word	0x40010c00

08000df8 <setAmberLight1>:
void setAmberLight1(int blink)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e06:	480a      	ldr	r0, [pc, #40]	; (8000e30 <setAmberLight1+0x38>)
 8000e08:	f001 fa19 	bl	800223e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e12:	4807      	ldr	r0, [pc, #28]	; (8000e30 <setAmberLight1+0x38>)
 8000e14:	f001 fa13 	bl	800223e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, blink);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e22:	4803      	ldr	r0, [pc, #12]	; (8000e30 <setAmberLight1+0x38>)
 8000e24:	f001 fa0b 	bl	800223e <HAL_GPIO_WritePin>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40010c00 	.word	0x40010c00

08000e34 <setRedLight2>:

void setRedLight2(int blink)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, blink);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	461a      	mov	r2, r3
 8000e42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e46:	4809      	ldr	r0, [pc, #36]	; (8000e6c <setRedLight2+0x38>)
 8000e48:	f001 f9f9 	bl	800223e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e52:	4806      	ldr	r0, [pc, #24]	; (8000e6c <setRedLight2+0x38>)
 8000e54:	f001 f9f3 	bl	800223e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e5e:	4803      	ldr	r0, [pc, #12]	; (8000e6c <setRedLight2+0x38>)
 8000e60:	f001 f9ed 	bl	800223e <HAL_GPIO_WritePin>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40010800 	.word	0x40010800

08000e70 <setGreenLight2>:
void setGreenLight2(int blink)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e7e:	480a      	ldr	r0, [pc, #40]	; (8000ea8 <setGreenLight2+0x38>)
 8000e80:	f001 f9dd 	bl	800223e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, blink);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	461a      	mov	r2, r3
 8000e8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e8e:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <setGreenLight2+0x38>)
 8000e90:	f001 f9d5 	bl	800223e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e9a:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <setGreenLight2+0x38>)
 8000e9c:	f001 f9cf 	bl	800223e <HAL_GPIO_WritePin>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40010800 	.word	0x40010800

08000eac <setAmberLight2>:
void setAmberLight2(int blink)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eba:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <setAmberLight2+0x38>)
 8000ebc:	f001 f9bf 	bl	800223e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec6:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <setAmberLight2+0x38>)
 8000ec8:	f001 f9b9 	bl	800223e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, blink);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ed6:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <setAmberLight2+0x38>)
 8000ed8:	f001 f9b1 	bl	800223e <HAL_GPIO_WritePin>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40010800 	.word	0x40010800

08000ee8 <display7SegmentLED>:

void display7SegmentLED(int number, GPIO_TypeDef *GPIOx[], uint16_t GPIO_Pins[])
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b0cd      	sub	sp, #308	; 0x134
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	6018      	str	r0, [r3, #0]
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	6019      	str	r1, [r3, #0]
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	601a      	str	r2, [r3, #0]
	int num[10][7] = {
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4a1e      	ldr	r2, [pc, #120]	; (8000f7c <display7SegmentLED+0x94>)
 8000f04:	4618      	mov	r0, r3
 8000f06:	4611      	mov	r1, r2
 8000f08:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	f003 fa6d 	bl	80043ec <memcpy>
		{0, 0, 0, 1, 1, 1, 1}, // 7
		{0, 0, 0, 0, 0, 0, 0}, // 8
		{0, 0, 0, 0, 1, 0, 0}  // 9
	};

	for (int i = 0; i < 7; i++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000f18:	e025      	b.n	8000f66 <display7SegmentLED+0x7e>
	{
		HAL_GPIO_WritePin(GPIOx[i], GPIO_Pins[i], num[number][i]);
 8000f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	f107 0208 	add.w	r2, r7, #8
 8000f24:	6812      	ldr	r2, [r2, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	6818      	ldr	r0, [r3, #0]
 8000f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	1d3a      	adds	r2, r7, #4
 8000f32:	6812      	ldr	r2, [r2, #0]
 8000f34:	4413      	add	r3, r2
 8000f36:	881c      	ldrh	r4, [r3, #0]
 8000f38:	f107 0114 	add.w	r1, r7, #20
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	4613      	mov	r3, r2
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	1a9b      	subs	r3, r3, r2
 8000f48:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000f4c:	4413      	add	r3, r2
 8000f4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	461a      	mov	r2, r3
 8000f56:	4621      	mov	r1, r4
 8000f58:	f001 f971 	bl	800223e <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++)
 8000f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f60:	3301      	adds	r3, #1
 8000f62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	ddd5      	ble.n	8000f1a <display7SegmentLED+0x32>
	}
}
 8000f6e:	bf00      	nop
 8000f70:	bf00      	nop
 8000f72:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd90      	pop	{r4, r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	08004dc0 	.word	0x08004dc0

08000f80 <display7SegmentLight>:

void display7SegmentLight(UART_HandleTypeDef huart2)
{
 8000f80:	b084      	sub	sp, #16
 8000f82:	b5b0      	push	{r4, r5, r7, lr}
 8000f84:	b08c      	sub	sp, #48	; 0x30
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000f8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t GPIO_Pins[] = {SEG0_Pin, SEG1_Pin, SEG2_Pin, SEG3_Pin,
 8000f90:	4b9a      	ldr	r3, [pc, #616]	; (80011fc <display7SegmentLight+0x27c>)
 8000f92:	f107 0420 	add.w	r4, r7, #32
 8000f96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f98:	c407      	stmia	r4!, {r0, r1, r2}
 8000f9a:	8023      	strh	r3, [r4, #0]
							SEG4_Pin, SEG5_Pin, SEG6_Pin};
	GPIO_TypeDef * GPIOx[] = {SEG0_GPIO_Port, SEG1_GPIO_Port, SEG2_GPIO_Port,
 8000f9c:	4b98      	ldr	r3, [pc, #608]	; (8001200 <display7SegmentLight+0x280>)
 8000f9e:	1d3c      	adds	r4, r7, #4
 8000fa0:	461d      	mov	r5, r3
 8000fa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000faa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			SEG3_GPIO_Port, SEG4_GPIO_Port, SEG5_GPIO_Port, SEG6_GPIO_Port};
	switch (counter_lights)
 8000fae:	4b95      	ldr	r3, [pc, #596]	; (8001204 <display7SegmentLight+0x284>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fb6:	f000 80cb 	beq.w	8001150 <display7SegmentLight+0x1d0>
 8000fba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fbe:	f300 810a 	bgt.w	80011d6 <display7SegmentLight+0x256>
 8000fc2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000fc6:	f000 8092 	beq.w	80010ee <display7SegmentLight+0x16e>
 8000fca:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000fce:	f300 8102 	bgt.w	80011d6 <display7SegmentLight+0x256>
 8000fd2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000fd6:	d053      	beq.n	8001080 <display7SegmentLight+0x100>
 8000fd8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000fdc:	f300 80fb 	bgt.w	80011d6 <display7SegmentLight+0x256>
 8000fe0:	2b64      	cmp	r3, #100	; 0x64
 8000fe2:	d002      	beq.n	8000fea <display7SegmentLight+0x6a>
 8000fe4:	2bc8      	cmp	r3, #200	; 0xc8
 8000fe6:	d019      	beq.n	800101c <display7SegmentLight+0x9c>
 8000fe8:	e0f5      	b.n	80011d6 <display7SegmentLight+0x256>
	{
	case READ_UART:
		if (status == AUTOMATIC_MODE)
 8000fea:	4b87      	ldr	r3, [pc, #540]	; (8001208 <display7SegmentLight+0x288>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d110      	bne.n	8001014 <display7SegmentLight+0x94>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Light 1 = %d   Light 2 = %d\r\n", counter_light_1, counter_light_2), 1000);
 8000ff2:	4b86      	ldr	r3, [pc, #536]	; (800120c <display7SegmentLight+0x28c>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	4b86      	ldr	r3, [pc, #536]	; (8001210 <display7SegmentLight+0x290>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4986      	ldr	r1, [pc, #536]	; (8001214 <display7SegmentLight+0x294>)
 8000ffc:	4886      	ldr	r0, [pc, #536]	; (8001218 <display7SegmentLight+0x298>)
 8000ffe:	f003 fa0b 	bl	8004418 <siprintf>
 8001002:	4603      	mov	r3, r0
 8001004:	b29a      	uxth	r2, r3
 8001006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100a:	4983      	ldr	r1, [pc, #524]	; (8001218 <display7SegmentLight+0x298>)
 800100c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001010:	f002 fcd7 	bl	80039c2 <HAL_UART_Transmit>
		counter_lights = LIGHT_1;
 8001014:	4b7b      	ldr	r3, [pc, #492]	; (8001204 <display7SegmentLight+0x284>)
 8001016:	22c8      	movs	r2, #200	; 0xc8
 8001018:	601a      	str	r2, [r3, #0]
		break;
 800101a:	e0e7      	b.n	80011ec <display7SegmentLight+0x26c>
	case LIGHT_1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2140      	movs	r1, #64	; 0x40
 8001020:	487e      	ldr	r0, [pc, #504]	; (800121c <display7SegmentLight+0x29c>)
 8001022:	f001 f90c 	bl	800223e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	487c      	ldr	r0, [pc, #496]	; (800121c <display7SegmentLight+0x29c>)
 800102c:	f001 f907 	bl	800223e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001036:	4879      	ldr	r0, [pc, #484]	; (800121c <display7SegmentLight+0x29c>)
 8001038:	f001 f901 	bl	800223e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001042:	4876      	ldr	r0, [pc, #472]	; (800121c <display7SegmentLight+0x29c>)
 8001044:	f001 f8fb 	bl	800223e <HAL_GPIO_WritePin>
		display7SegmentLED(counter_light_1 / 10, GPIOx, GPIO_Pins); // first digit of light 1
 8001048:	4b70      	ldr	r3, [pc, #448]	; (800120c <display7SegmentLight+0x28c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a74      	ldr	r2, [pc, #464]	; (8001220 <display7SegmentLight+0x2a0>)
 800104e:	fb82 1203 	smull	r1, r2, r2, r3
 8001052:	1092      	asrs	r2, r2, #2
 8001054:	17db      	asrs	r3, r3, #31
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	f107 0220 	add.w	r2, r7, #32
 800105c:	1d39      	adds	r1, r7, #4
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff42 	bl	8000ee8 <display7SegmentLED>
		if (timer_flag[3] == 1)
 8001064:	4b6f      	ldr	r3, [pc, #444]	; (8001224 <display7SegmentLight+0x2a4>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	2b01      	cmp	r3, #1
 800106a:	f040 80b8 	bne.w	80011de <display7SegmentLight+0x25e>
		{
			counter_lights = LIGHT_2;
 800106e:	4b65      	ldr	r3, [pc, #404]	; (8001204 <display7SegmentLight+0x284>)
 8001070:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001074:	601a      	str	r2, [r3, #0]
			setTimer(3, 250);
 8001076:	21fa      	movs	r1, #250	; 0xfa
 8001078:	2003      	movs	r0, #3
 800107a:	f000 fb41 	bl	8001700 <setTimer>
		}
		break;
 800107e:	e0ae      	b.n	80011de <display7SegmentLight+0x25e>
	case LIGHT_2:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	2140      	movs	r1, #64	; 0x40
 8001084:	4865      	ldr	r0, [pc, #404]	; (800121c <display7SegmentLight+0x29c>)
 8001086:	f001 f8da 	bl	800223e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	4863      	ldr	r0, [pc, #396]	; (800121c <display7SegmentLight+0x29c>)
 8001090:	f001 f8d5 	bl	800223e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109a:	4860      	ldr	r0, [pc, #384]	; (800121c <display7SegmentLight+0x29c>)
 800109c:	f001 f8cf 	bl	800223e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a6:	485d      	ldr	r0, [pc, #372]	; (800121c <display7SegmentLight+0x29c>)
 80010a8:	f001 f8c9 	bl	800223e <HAL_GPIO_WritePin>
		display7SegmentLED(counter_light_1 % 10, GPIOx, GPIO_Pins); // second digit of light 1
 80010ac:	4b57      	ldr	r3, [pc, #348]	; (800120c <display7SegmentLight+0x28c>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b5b      	ldr	r3, [pc, #364]	; (8001220 <display7SegmentLight+0x2a0>)
 80010b2:	fb83 1302 	smull	r1, r3, r3, r2
 80010b6:	1099      	asrs	r1, r3, #2
 80010b8:	17d3      	asrs	r3, r2, #31
 80010ba:	1ac8      	subs	r0, r1, r3
 80010bc:	4603      	mov	r3, r0
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4403      	add	r3, r0
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	1ad0      	subs	r0, r2, r3
 80010c6:	f107 0220 	add.w	r2, r7, #32
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	f7ff ff0b 	bl	8000ee8 <display7SegmentLED>
		if (timer_flag[3] == 1)
 80010d2:	4b54      	ldr	r3, [pc, #336]	; (8001224 <display7SegmentLight+0x2a4>)
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	f040 8083 	bne.w	80011e2 <display7SegmentLight+0x262>
		{
			counter_lights = LIGHT_3;
 80010dc:	4b49      	ldr	r3, [pc, #292]	; (8001204 <display7SegmentLight+0x284>)
 80010de:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80010e2:	601a      	str	r2, [r3, #0]
			setTimer(3, 250);
 80010e4:	21fa      	movs	r1, #250	; 0xfa
 80010e6:	2003      	movs	r0, #3
 80010e8:	f000 fb0a 	bl	8001700 <setTimer>
		}
		break;
 80010ec:	e079      	b.n	80011e2 <display7SegmentLight+0x262>
	case LIGHT_3:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	2140      	movs	r1, #64	; 0x40
 80010f2:	484a      	ldr	r0, [pc, #296]	; (800121c <display7SegmentLight+0x29c>)
 80010f4:	f001 f8a3 	bl	800223e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	2180      	movs	r1, #128	; 0x80
 80010fc:	4847      	ldr	r0, [pc, #284]	; (800121c <display7SegmentLight+0x29c>)
 80010fe:	f001 f89e 	bl	800223e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001108:	4844      	ldr	r0, [pc, #272]	; (800121c <display7SegmentLight+0x29c>)
 800110a:	f001 f898 	bl	800223e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800110e:	2201      	movs	r2, #1
 8001110:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001114:	4841      	ldr	r0, [pc, #260]	; (800121c <display7SegmentLight+0x29c>)
 8001116:	f001 f892 	bl	800223e <HAL_GPIO_WritePin>
		display7SegmentLED(counter_light_2 / 10, GPIOx, GPIO_Pins); // first digit of light 2
 800111a:	4b3d      	ldr	r3, [pc, #244]	; (8001210 <display7SegmentLight+0x290>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a40      	ldr	r2, [pc, #256]	; (8001220 <display7SegmentLight+0x2a0>)
 8001120:	fb82 1203 	smull	r1, r2, r2, r3
 8001124:	1092      	asrs	r2, r2, #2
 8001126:	17db      	asrs	r3, r3, #31
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	f107 0220 	add.w	r2, r7, #32
 800112e:	1d39      	adds	r1, r7, #4
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fed9 	bl	8000ee8 <display7SegmentLED>
		if (timer_flag[3] == 1)
 8001136:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <display7SegmentLight+0x2a4>)
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d153      	bne.n	80011e6 <display7SegmentLight+0x266>
		{
			counter_lights = LIGHT_4;
 800113e:	4b31      	ldr	r3, [pc, #196]	; (8001204 <display7SegmentLight+0x284>)
 8001140:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001144:	601a      	str	r2, [r3, #0]
			setTimer(3, 250);
 8001146:	21fa      	movs	r1, #250	; 0xfa
 8001148:	2003      	movs	r0, #3
 800114a:	f000 fad9 	bl	8001700 <setTimer>
		}
		break;
 800114e:	e04a      	b.n	80011e6 <display7SegmentLight+0x266>
	case LIGHT_4:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	2140      	movs	r1, #64	; 0x40
 8001154:	4831      	ldr	r0, [pc, #196]	; (800121c <display7SegmentLight+0x29c>)
 8001156:	f001 f872 	bl	800223e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	2180      	movs	r1, #128	; 0x80
 800115e:	482f      	ldr	r0, [pc, #188]	; (800121c <display7SegmentLight+0x29c>)
 8001160:	f001 f86d 	bl	800223e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001164:	2201      	movs	r2, #1
 8001166:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116a:	482c      	ldr	r0, [pc, #176]	; (800121c <display7SegmentLight+0x29c>)
 800116c:	f001 f867 	bl	800223e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001176:	4829      	ldr	r0, [pc, #164]	; (800121c <display7SegmentLight+0x29c>)
 8001178:	f001 f861 	bl	800223e <HAL_GPIO_WritePin>
		display7SegmentLED(counter_light_2 % 10, GPIOx, GPIO_Pins); // second digit of light 2
 800117c:	4b24      	ldr	r3, [pc, #144]	; (8001210 <display7SegmentLight+0x290>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b27      	ldr	r3, [pc, #156]	; (8001220 <display7SegmentLight+0x2a0>)
 8001182:	fb83 1302 	smull	r1, r3, r3, r2
 8001186:	1099      	asrs	r1, r3, #2
 8001188:	17d3      	asrs	r3, r2, #31
 800118a:	1ac8      	subs	r0, r1, r3
 800118c:	4603      	mov	r3, r0
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4403      	add	r3, r0
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	1ad0      	subs	r0, r2, r3
 8001196:	f107 0220 	add.w	r2, r7, #32
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff fea3 	bl	8000ee8 <display7SegmentLED>
		if (timer_flag[3] == 1)
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <display7SegmentLight+0x2a4>)
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d11f      	bne.n	80011ea <display7SegmentLight+0x26a>
		{
			counter_lights = READ_UART;
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <display7SegmentLight+0x284>)
 80011ac:	2264      	movs	r2, #100	; 0x64
 80011ae:	601a      	str	r2, [r3, #0]
			if (status == AUTOMATIC_MODE)
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <display7SegmentLight+0x288>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d109      	bne.n	80011cc <display7SegmentLight+0x24c>
			{
				counter_light_1--;
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <display7SegmentLight+0x28c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3b01      	subs	r3, #1
 80011be:	4a13      	ldr	r2, [pc, #76]	; (800120c <display7SegmentLight+0x28c>)
 80011c0:	6013      	str	r3, [r2, #0]
				counter_light_2--;
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <display7SegmentLight+0x290>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	4a11      	ldr	r2, [pc, #68]	; (8001210 <display7SegmentLight+0x290>)
 80011ca:	6013      	str	r3, [r2, #0]
			}
			setTimer(3, 250);
 80011cc:	21fa      	movs	r1, #250	; 0xfa
 80011ce:	2003      	movs	r0, #3
 80011d0:	f000 fa96 	bl	8001700 <setTimer>
		}
		break;
 80011d4:	e009      	b.n	80011ea <display7SegmentLight+0x26a>
	default:
		counter_lights = READ_UART;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <display7SegmentLight+0x284>)
 80011d8:	2264      	movs	r2, #100	; 0x64
 80011da:	601a      	str	r2, [r3, #0]
		break;
 80011dc:	e006      	b.n	80011ec <display7SegmentLight+0x26c>
		break;
 80011de:	bf00      	nop
 80011e0:	e004      	b.n	80011ec <display7SegmentLight+0x26c>
		break;
 80011e2:	bf00      	nop
 80011e4:	e002      	b.n	80011ec <display7SegmentLight+0x26c>
		break;
 80011e6:	bf00      	nop
 80011e8:	e000      	b.n	80011ec <display7SegmentLight+0x26c>
		break;
 80011ea:	bf00      	nop
	}
}
 80011ec:	bf00      	nop
 80011ee:	3730      	adds	r7, #48	; 0x30
 80011f0:	46bd      	mov	sp, r7
 80011f2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80011f6:	b004      	add	sp, #16
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	08004ef8 	.word	0x08004ef8
 8001200:	08004f08 	.word	0x08004f08
 8001204:	20000020 	.word	0x20000020
 8001208:	20000000 	.word	0x20000000
 800120c:	20000018 	.word	0x20000018
 8001210:	2000001c 	.word	0x2000001c
 8001214:	08004ed8 	.word	0x08004ed8
 8001218:	200001a8 	.word	0x200001a8
 800121c:	40010c00 	.word	0x40010c00
 8001220:	66666667 	.word	0x66666667
 8001224:	20000264 	.word	0x20000264

08001228 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a13      	ldr	r2, [pc, #76]	; (8001284 <HAL_UART_RxCpltCallback+0x5c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d11f      	bne.n	800127a <HAL_UART_RxCpltCallback+0x52>
		buffer[index_buffer++] = temp;
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <HAL_UART_RxCpltCallback+0x60>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	b2d1      	uxtb	r1, r2
 8001242:	4a11      	ldr	r2, [pc, #68]	; (8001288 <HAL_UART_RxCpltCallback+0x60>)
 8001244:	7011      	strb	r1, [r2, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <HAL_UART_RxCpltCallback+0x64>)
 800124a:	7819      	ldrb	r1, [r3, #0]
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <HAL_UART_RxCpltCallback+0x68>)
 800124e:	5499      	strb	r1, [r3, r2]
		if (index_buffer == MAX_BUFFER_SIZE)
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <HAL_UART_RxCpltCallback+0x60>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b1e      	cmp	r3, #30
 8001256:	d102      	bne.n	800125e <HAL_UART_RxCpltCallback+0x36>
			index_buffer = 0;
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <HAL_UART_RxCpltCallback+0x60>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <HAL_UART_RxCpltCallback+0x6c>)
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 8001264:	2332      	movs	r3, #50	; 0x32
 8001266:	2201      	movs	r2, #1
 8001268:	4908      	ldr	r1, [pc, #32]	; (800128c <HAL_UART_RxCpltCallback+0x64>)
 800126a:	480b      	ldr	r0, [pc, #44]	; (8001298 <HAL_UART_RxCpltCallback+0x70>)
 800126c:	f002 fba9 	bl	80039c2 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8001270:	2201      	movs	r2, #1
 8001272:	4906      	ldr	r1, [pc, #24]	; (800128c <HAL_UART_RxCpltCallback+0x64>)
 8001274:	4808      	ldr	r0, [pc, #32]	; (8001298 <HAL_UART_RxCpltCallback+0x70>)
 8001276:	f002 fc36 	bl	8003ae6 <HAL_UART_Receive_IT>
	}
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40004400 	.word	0x40004400
 8001288:	200000b9 	.word	0x200000b9
 800128c:	200000b8 	.word	0x200000b8
 8001290:	20000188 	.word	0x20000188
 8001294:	200000ba 	.word	0x200000ba
 8001298:	20000210 	.word	0x20000210

0800129c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800129c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129e:	b08f      	sub	sp, #60	; 0x3c
 80012a0:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a2:	f000 fc1b 	bl	8001adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a6:	f000 f87b 	bl	80013a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80012aa:	f000 f8bb 	bl	8001424 <MX_TIM2_Init>
  MX_GPIO_Init();
 80012ae:	f000 f9a5 	bl	80015fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012b2:	f000 f979 	bl	80015a8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80012b6:	f000 f901 	bl	80014bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80012ba:	4831      	ldr	r0, [pc, #196]	; (8001380 <main+0xe4>)
 80012bc:	f001 fc42 	bl	8002b44 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart2, &temp, 1);
 80012c0:	2201      	movs	r2, #1
 80012c2:	4930      	ldr	r1, [pc, #192]	; (8001384 <main+0xe8>)
 80012c4:	4830      	ldr	r0, [pc, #192]	; (8001388 <main+0xec>)
 80012c6:	f002 fc0e 	bl	8003ae6 <HAL_UART_Receive_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012ca:	2100      	movs	r1, #0
 80012cc:	482f      	ldr	r0, [pc, #188]	; (800138c <main+0xf0>)
 80012ce:	f001 fcdd 	bl	8002c8c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	initButton();
 80012d2:	f7fe ff3b 	bl	800014c <initButton>
	HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, GPIO_PIN_SET);
 80012d6:	2201      	movs	r2, #1
 80012d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012dc:	482c      	ldr	r0, [pc, #176]	; (8001390 <main+0xf4>)
 80012de:	f000 ffae 	bl	800223e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, GPIO_PIN_SET);
 80012e2:	2201      	movs	r2, #1
 80012e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e8:	482a      	ldr	r0, [pc, #168]	; (8001394 <main+0xf8>)
 80012ea:	f000 ffa8 	bl	800223e <HAL_GPIO_WritePin>
	while (1) {
		if (buffer_flag == 1) {
 80012ee:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <main+0xfc>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d102      	bne.n	80012fc <main+0x60>
			buffer_flag = 0;
 80012f6:	4b28      	ldr	r3, [pc, #160]	; (8001398 <main+0xfc>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
		}

		// fsm_pedestrian_run();
		// fsm_buzzer_run();

		if (status == AUTOMATIC_MODE)
 80012fc:	4b27      	ldr	r3, [pc, #156]	; (800139c <main+0x100>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b02      	cmp	r3, #2
 8001302:	d110      	bne.n	8001326 <main+0x8a>
			fsm_automatic_run(huart2);
 8001304:	4e20      	ldr	r6, [pc, #128]	; (8001388 <main+0xec>)
 8001306:	466d      	mov	r5, sp
 8001308:	f106 0410 	add.w	r4, r6, #16
 800130c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800130e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001312:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001318:	6823      	ldr	r3, [r4, #0]
 800131a:	602b      	str	r3, [r5, #0]
 800131c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001320:	f7ff f832 	bl	8000388 <fsm_automatic_run>
 8001324:	e013      	b.n	800134e <main+0xb2>
		else if (status == MANUAL_MODE)
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <main+0x100>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b03      	cmp	r3, #3
 800132c:	d10f      	bne.n	800134e <main+0xb2>
			fsm_manual_run(huart2);
 800132e:	4e16      	ldr	r6, [pc, #88]	; (8001388 <main+0xec>)
 8001330:	466d      	mov	r5, sp
 8001332:	f106 0410 	add.w	r4, r6, #16
 8001336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800133a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800133e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001342:	6823      	ldr	r3, [r4, #0]
 8001344:	602b      	str	r3, [r5, #0]
 8001346:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800134a:	f7ff f9c5 	bl	80006d8 <fsm_manual_run>

		if (buffer_flag == 1) {
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <main+0xfc>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d102      	bne.n	800135c <main+0xc0>
			buffer_flag = 0;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <main+0xfc>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
		}

		display7SegmentLight(huart2);
 800135c:	4e0a      	ldr	r6, [pc, #40]	; (8001388 <main+0xec>)
 800135e:	466d      	mov	r5, sp
 8001360:	f106 0410 	add.w	r4, r6, #16
 8001364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001368:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800136a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800136c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800136e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001370:	6823      	ldr	r3, [r4, #0]
 8001372:	602b      	str	r3, [r5, #0]
 8001374:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001378:	f7ff fe02 	bl	8000f80 <display7SegmentLight>
		if (buffer_flag == 1) {
 800137c:	e7b7      	b.n	80012ee <main+0x52>
 800137e:	bf00      	nop
 8001380:	200001c8 	.word	0x200001c8
 8001384:	200000b8 	.word	0x200000b8
 8001388:	20000210 	.word	0x20000210
 800138c:	200000f0 	.word	0x200000f0
 8001390:	40010c00 	.word	0x40010c00
 8001394:	40010800 	.word	0x40010800
 8001398:	200000ba 	.word	0x200000ba
 800139c:	20000000 	.word	0x20000000

080013a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b090      	sub	sp, #64	; 0x40
 80013a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a6:	f107 0318 	add.w	r3, r7, #24
 80013aa:	2228      	movs	r2, #40	; 0x28
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f003 f82a 	bl	8004408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c2:	2302      	movs	r3, #2
 80013c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c6:	2301      	movs	r3, #1
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ca:	2310      	movs	r3, #16
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ce:	2302      	movs	r3, #2
 80013d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80013d2:	2300      	movs	r3, #0
 80013d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80013d6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80013da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013dc:	f107 0318 	add.w	r3, r7, #24
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 ff45 	bl	8002270 <HAL_RCC_OscConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80013ec:	f000 f982 	bl	80016f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f0:	230f      	movs	r3, #15
 80013f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f4:	2302      	movs	r3, #2
 80013f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001400:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2102      	movs	r1, #2
 800140a:	4618      	mov	r0, r3
 800140c:	f001 f9b0 	bl	8002770 <HAL_RCC_ClockConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001416:	f000 f96d 	bl	80016f4 <Error_Handler>
  }
}
 800141a:	bf00      	nop
 800141c:	3740      	adds	r7, #64	; 0x40
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001438:	463b      	mov	r3, r7
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001440:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <MX_TIM2_Init+0x94>)
 8001442:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001446:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <MX_TIM2_Init+0x94>)
 800144a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800144e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <MX_TIM2_Init+0x94>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <MX_TIM2_Init+0x94>)
 8001458:	224f      	movs	r2, #79	; 0x4f
 800145a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145c:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <MX_TIM2_Init+0x94>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <MX_TIM2_Init+0x94>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001468:	4813      	ldr	r0, [pc, #76]	; (80014b8 <MX_TIM2_Init+0x94>)
 800146a:	f001 fb1b 	bl	8002aa4 <HAL_TIM_Base_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001474:	f000 f93e 	bl	80016f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800147e:	f107 0308 	add.w	r3, r7, #8
 8001482:	4619      	mov	r1, r3
 8001484:	480c      	ldr	r0, [pc, #48]	; (80014b8 <MX_TIM2_Init+0x94>)
 8001486:	f001 fe63 	bl	8003150 <HAL_TIM_ConfigClockSource>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001490:	f000 f930 	bl	80016f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800149c:	463b      	mov	r3, r7
 800149e:	4619      	mov	r1, r3
 80014a0:	4805      	ldr	r0, [pc, #20]	; (80014b8 <MX_TIM2_Init+0x94>)
 80014a2:	f002 f9d7 	bl	8003854 <HAL_TIMEx_MasterConfigSynchronization>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014ac:	f000 f922 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	200001c8 	.word	0x200001c8

080014bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08e      	sub	sp, #56	; 0x38
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	f107 0320 	add.w	r3, r7, #32
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
 80014e8:	615a      	str	r2, [r3, #20]
 80014ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014ec:	4b2c      	ldr	r3, [pc, #176]	; (80015a0 <MX_TIM3_Init+0xe4>)
 80014ee:	4a2d      	ldr	r2, [pc, #180]	; (80015a4 <MX_TIM3_Init+0xe8>)
 80014f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80014f2:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <MX_TIM3_Init+0xe4>)
 80014f4:	224f      	movs	r2, #79	; 0x4f
 80014f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f8:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <MX_TIM3_Init+0xe4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 80014fe:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <MX_TIM3_Init+0xe4>)
 8001500:	224f      	movs	r2, #79	; 0x4f
 8001502:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001504:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <MX_TIM3_Init+0xe4>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150a:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <MX_TIM3_Init+0xe4>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001510:	4823      	ldr	r0, [pc, #140]	; (80015a0 <MX_TIM3_Init+0xe4>)
 8001512:	f001 fac7 	bl	8002aa4 <HAL_TIM_Base_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800151c:	f000 f8ea 	bl	80016f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001526:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800152a:	4619      	mov	r1, r3
 800152c:	481c      	ldr	r0, [pc, #112]	; (80015a0 <MX_TIM3_Init+0xe4>)
 800152e:	f001 fe0f 	bl	8003150 <HAL_TIM_ConfigClockSource>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001538:	f000 f8dc 	bl	80016f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800153c:	4818      	ldr	r0, [pc, #96]	; (80015a0 <MX_TIM3_Init+0xe4>)
 800153e:	f001 fb4d 	bl	8002bdc <HAL_TIM_PWM_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001548:	f000 f8d4 	bl	80016f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001554:	f107 0320 	add.w	r3, r7, #32
 8001558:	4619      	mov	r1, r3
 800155a:	4811      	ldr	r0, [pc, #68]	; (80015a0 <MX_TIM3_Init+0xe4>)
 800155c:	f002 f97a 	bl	8003854 <HAL_TIMEx_MasterConfigSynchronization>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001566:	f000 f8c5 	bl	80016f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800156a:	2360      	movs	r3, #96	; 0x60
 800156c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2200      	movs	r2, #0
 800157e:	4619      	mov	r1, r3
 8001580:	4807      	ldr	r0, [pc, #28]	; (80015a0 <MX_TIM3_Init+0xe4>)
 8001582:	f001 fd27 	bl	8002fd4 <HAL_TIM_PWM_ConfigChannel>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800158c:	f000 f8b2 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001590:	4803      	ldr	r0, [pc, #12]	; (80015a0 <MX_TIM3_Init+0xe4>)
 8001592:	f000 f977 	bl	8001884 <HAL_TIM_MspPostInit>

}
 8001596:	bf00      	nop
 8001598:	3738      	adds	r7, #56	; 0x38
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200000f0 	.word	0x200000f0
 80015a4:	40000400 	.word	0x40000400

080015a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <MX_USART2_UART_Init+0x50>)
 80015b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015ce:	220c      	movs	r2, #12
 80015d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_USART2_UART_Init+0x4c>)
 80015e0:	f002 f9a2 	bl	8003928 <HAL_UART_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ea:	f000 f883 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000210 	.word	0x20000210
 80015f8:	40004400 	.word	0x40004400

080015fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001602:	f107 0308 	add.w	r3, r7, #8
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001610:	4b2f      	ldr	r3, [pc, #188]	; (80016d0 <MX_GPIO_Init+0xd4>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a2e      	ldr	r2, [pc, #184]	; (80016d0 <MX_GPIO_Init+0xd4>)
 8001616:	f043 0304 	orr.w	r3, r3, #4
 800161a:	6193      	str	r3, [r2, #24]
 800161c:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <MX_GPIO_Init+0xd4>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001628:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <MX_GPIO_Init+0xd4>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a28      	ldr	r2, [pc, #160]	; (80016d0 <MX_GPIO_Init+0xd4>)
 800162e:	f043 0308 	orr.w	r3, r3, #8
 8001632:	6193      	str	r3, [r2, #24]
 8001634:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <MX_GPIO_Init+0xd4>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG2_Pin|SEG3_Pin|D7_PEDESTRIAN_Pin|SEG4_Pin
 8001640:	2200      	movs	r2, #0
 8001642:	f64f 71a0 	movw	r1, #65440	; 0xffa0
 8001646:	4823      	ldr	r0, [pc, #140]	; (80016d4 <MX_GPIO_Init+0xd8>)
 8001648:	f000 fdf9 	bl	800223e <HAL_GPIO_WritePin>
                          |LED_1_Pin|SEG5_Pin|SEG6_Pin|LED_RED_2_Pin
                          |LED_AMBER_2_Pin|LED_GREEN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|D6_PEDESTRIAN_Pin|LED_RED_1_Pin
 800164c:	2200      	movs	r2, #0
 800164e:	f24e 71fe 	movw	r1, #59390	; 0xe7fe
 8001652:	4821      	ldr	r0, [pc, #132]	; (80016d8 <MX_GPIO_Init+0xdc>)
 8001654:	f000 fdf3 	bl	800223e <HAL_GPIO_WritePin>
                          |LED_AMBER_1_Pin|LED_GREEN_1_Pin|LED_2_Pin|LED_4_Pin
                          |LED_3_Pin|EN0_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_PEDESTRIAN_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_PEDESTRIAN_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8001658:	2313      	movs	r3, #19
 800165a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001660:	2301      	movs	r3, #1
 8001662:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	4619      	mov	r1, r3
 800166a:	481a      	ldr	r0, [pc, #104]	; (80016d4 <MX_GPIO_Init+0xd8>)
 800166c:	f000 fc56 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG2_Pin SEG3_Pin D7_PEDESTRIAN_Pin SEG4_Pin
                           LED_1_Pin SEG5_Pin SEG6_Pin LED_RED_2_Pin
                           LED_AMBER_2_Pin LED_GREEN_2_Pin */
  GPIO_InitStruct.Pin = SEG2_Pin|SEG3_Pin|D7_PEDESTRIAN_Pin|SEG4_Pin
 8001670:	f64f 73a0 	movw	r3, #65440	; 0xffa0
 8001674:	60bb      	str	r3, [r7, #8]
                          |LED_1_Pin|SEG5_Pin|SEG6_Pin|LED_RED_2_Pin
                          |LED_AMBER_2_Pin|LED_GREEN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001676:	2301      	movs	r3, #1
 8001678:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2302      	movs	r3, #2
 8001680:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 0308 	add.w	r3, r7, #8
 8001686:	4619      	mov	r1, r3
 8001688:	4812      	ldr	r0, [pc, #72]	; (80016d4 <MX_GPIO_Init+0xd8>)
 800168a:	f000 fc47 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_3_Pin BUTTON_2_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_2_1_Pin;
 800168e:	f640 0301 	movw	r3, #2049	; 0x801
 8001692:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001698:	2301      	movs	r3, #1
 800169a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	4619      	mov	r1, r3
 80016a2:	480d      	ldr	r0, [pc, #52]	; (80016d8 <MX_GPIO_Init+0xdc>)
 80016a4:	f000 fc3a 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin D6_PEDESTRIAN_Pin LED_RED_1_Pin
                           LED_AMBER_1_Pin LED_GREEN_1_Pin LED_2_Pin LED_4_Pin
                           LED_3_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|D6_PEDESTRIAN_Pin|LED_RED_1_Pin
 80016a8:	f24e 73fe 	movw	r3, #59390	; 0xe7fe
 80016ac:	60bb      	str	r3, [r7, #8]
                          |LED_AMBER_1_Pin|LED_GREEN_1_Pin|LED_2_Pin|LED_4_Pin
                          |LED_3_Pin|EN0_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ae:	2301      	movs	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2302      	movs	r3, #2
 80016b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ba:	f107 0308 	add.w	r3, r7, #8
 80016be:	4619      	mov	r1, r3
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <MX_GPIO_Init+0xdc>)
 80016c2:	f000 fc2b 	bl	8001f1c <HAL_GPIO_Init>

}
 80016c6:	bf00      	nop
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40010800 	.word	0x40010800
 80016d8:	40010c00 	.word	0x40010c00

080016dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	timerRun();
 80016e4:	f000 f82c 	bl	8001740 <timerRun>
	getKeyInput();
 80016e8:	f7fe fd6c 	bl	80001c4 <getKeyInput>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f8:	b672      	cpsid	i
}
 80016fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016fc:	e7fe      	b.n	80016fc <Error_Handler+0x8>
	...

08001700 <setTimer>:
#define TIMER_CYCLE 10

int timer_flag[NO_TIMERS + 1];
int timer_counter[NO_TIMERS + 1];

void setTimer(int flagNo, int duration) {
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
	timer_counter[flagNo] = duration / TIMER_CYCLE;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	4a09      	ldr	r2, [pc, #36]	; (8001734 <setTimer+0x34>)
 800170e:	fb82 1203 	smull	r1, r2, r2, r3
 8001712:	1092      	asrs	r2, r2, #2
 8001714:	17db      	asrs	r3, r3, #31
 8001716:	1ad2      	subs	r2, r2, r3
 8001718:	4907      	ldr	r1, [pc, #28]	; (8001738 <setTimer+0x38>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[flagNo] = 0;
 8001720:	4a06      	ldr	r2, [pc, #24]	; (800173c <setTimer+0x3c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2100      	movs	r1, #0
 8001726:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	66666667 	.word	0x66666667
 8001738:	20000254 	.word	0x20000254
 800173c:	20000264 	.word	0x20000264

08001740 <timerRun>:

void timerRun() {
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
	for (int flagNo = 1; flagNo <= NO_TIMERS; flagNo++) {
 8001746:	2301      	movs	r3, #1
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	e01c      	b.n	8001786 <timerRun+0x46>
		if (timer_counter[flagNo] > 0) {
 800174c:	4a12      	ldr	r2, [pc, #72]	; (8001798 <timerRun+0x58>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001754:	2b00      	cmp	r3, #0
 8001756:	dd13      	ble.n	8001780 <timerRun+0x40>
			timer_counter[flagNo]--;
 8001758:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <timerRun+0x58>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001760:	1e5a      	subs	r2, r3, #1
 8001762:	490d      	ldr	r1, [pc, #52]	; (8001798 <timerRun+0x58>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[flagNo] <= 0) {
 800176a:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <timerRun+0x58>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001772:	2b00      	cmp	r3, #0
 8001774:	dc04      	bgt.n	8001780 <timerRun+0x40>
				timer_flag[flagNo] = 1;
 8001776:	4a09      	ldr	r2, [pc, #36]	; (800179c <timerRun+0x5c>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2101      	movs	r1, #1
 800177c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int flagNo = 1; flagNo <= NO_TIMERS; flagNo++) {
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3301      	adds	r3, #1
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b03      	cmp	r3, #3
 800178a:	dddf      	ble.n	800174c <timerRun+0xc>
			}
		}
	}
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	20000254 	.word	0x20000254
 800179c:	20000264 	.word	0x20000264

080017a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_MspInit+0x5c>)
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	4a14      	ldr	r2, [pc, #80]	; (80017fc <HAL_MspInit+0x5c>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6193      	str	r3, [r2, #24]
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_MspInit+0x5c>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017be:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <HAL_MspInit+0x5c>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	4a0e      	ldr	r2, [pc, #56]	; (80017fc <HAL_MspInit+0x5c>)
 80017c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c8:	61d3      	str	r3, [r2, #28]
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <HAL_MspInit+0x5c>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_MspInit+0x60>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <HAL_MspInit+0x60>)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010000 	.word	0x40010000

08001804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001814:	d114      	bne.n	8001840 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_TIM_Base_MspInit+0x78>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	4a18      	ldr	r2, [pc, #96]	; (800187c <HAL_TIM_Base_MspInit+0x78>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	61d3      	str	r3, [r2, #28]
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <HAL_TIM_Base_MspInit+0x78>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	201c      	movs	r0, #28
 8001834:	f000 fa8b 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001838:	201c      	movs	r0, #28
 800183a:	f000 faa4 	bl	8001d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800183e:	e018      	b.n	8001872 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <HAL_TIM_Base_MspInit+0x7c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d113      	bne.n	8001872 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <HAL_TIM_Base_MspInit+0x78>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	4a0b      	ldr	r2, [pc, #44]	; (800187c <HAL_TIM_Base_MspInit+0x78>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	61d3      	str	r3, [r2, #28]
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_TIM_Base_MspInit+0x78>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	201d      	movs	r0, #29
 8001868:	f000 fa71 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800186c:	201d      	movs	r0, #29
 800186e:	f000 fa8a 	bl	8001d86 <HAL_NVIC_EnableIRQ>
}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	40000400 	.word	0x40000400

08001884 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a0f      	ldr	r2, [pc, #60]	; (80018dc <HAL_TIM_MspPostInit+0x58>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d117      	bne.n	80018d4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <HAL_TIM_MspPostInit+0x5c>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a0d      	ldr	r2, [pc, #52]	; (80018e0 <HAL_TIM_MspPostInit+0x5c>)
 80018aa:	f043 0304 	orr.w	r3, r3, #4
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_TIM_MspPostInit+0x5c>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018bc:	2340      	movs	r3, #64	; 0x40
 80018be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2302      	movs	r3, #2
 80018c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	4619      	mov	r1, r3
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <HAL_TIM_MspPostInit+0x60>)
 80018d0:	f000 fb24 	bl	8001f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018d4:	bf00      	nop
 80018d6:	3720      	adds	r7, #32
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40000400 	.word	0x40000400
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40010800 	.word	0x40010800

080018e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a1f      	ldr	r2, [pc, #124]	; (8001980 <HAL_UART_MspInit+0x98>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d137      	bne.n	8001978 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001908:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <HAL_UART_MspInit+0x9c>)
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	4a1d      	ldr	r2, [pc, #116]	; (8001984 <HAL_UART_MspInit+0x9c>)
 800190e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001912:	61d3      	str	r3, [r2, #28]
 8001914:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <HAL_UART_MspInit+0x9c>)
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001920:	4b18      	ldr	r3, [pc, #96]	; (8001984 <HAL_UART_MspInit+0x9c>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a17      	ldr	r2, [pc, #92]	; (8001984 <HAL_UART_MspInit+0x9c>)
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	6193      	str	r3, [r2, #24]
 800192c:	4b15      	ldr	r3, [pc, #84]	; (8001984 <HAL_UART_MspInit+0x9c>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001938:	2304      	movs	r3, #4
 800193a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	4619      	mov	r1, r3
 800194a:	480f      	ldr	r0, [pc, #60]	; (8001988 <HAL_UART_MspInit+0xa0>)
 800194c:	f000 fae6 	bl	8001f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001950:	2308      	movs	r3, #8
 8001952:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	4619      	mov	r1, r3
 8001962:	4809      	ldr	r0, [pc, #36]	; (8001988 <HAL_UART_MspInit+0xa0>)
 8001964:	f000 fada 	bl	8001f1c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001968:	2200      	movs	r2, #0
 800196a:	2100      	movs	r1, #0
 800196c:	2026      	movs	r0, #38	; 0x26
 800196e:	f000 f9ee 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001972:	2026      	movs	r0, #38	; 0x26
 8001974:	f000 fa07 	bl	8001d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001978:	bf00      	nop
 800197a:	3720      	adds	r7, #32
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40004400 	.word	0x40004400
 8001984:	40021000 	.word	0x40021000
 8001988:	40010800 	.word	0x40010800

0800198c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <NMI_Handler+0x4>

08001992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <HardFault_Handler+0x4>

08001998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <MemManage_Handler+0x4>

0800199e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a2:	e7fe      	b.n	80019a2 <BusFault_Handler+0x4>

080019a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <UsageFault_Handler+0x4>

080019aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d2:	f000 f8c9 	bl	8001b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <TIM2_IRQHandler+0x10>)
 80019e2:	f001 f9ef 	bl	8002dc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200001c8 	.word	0x200001c8

080019f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <TIM3_IRQHandler+0x10>)
 80019f6:	f001 f9e5 	bl	8002dc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200000f0 	.word	0x200000f0

08001a04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <USART2_IRQHandler+0x10>)
 8001a0a:	f002 f89d 	bl	8003b48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000210 	.word	0x20000210

08001a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a20:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <_sbrk+0x5c>)
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <_sbrk+0x60>)
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d102      	bne.n	8001a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <_sbrk+0x64>)
 8001a36:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <_sbrk+0x68>)
 8001a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <_sbrk+0x64>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d207      	bcs.n	8001a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a48:	f002 fca6 	bl	8004398 <__errno>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	220c      	movs	r2, #12
 8001a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295
 8001a56:	e009      	b.n	8001a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <_sbrk+0x64>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <_sbrk+0x64>)
 8001a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20002800 	.word	0x20002800
 8001a78:	00000400 	.word	0x00000400
 8001a7c:	200000bc 	.word	0x200000bc
 8001a80:	20000288 	.word	0x20000288

08001a84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a90:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a92:	490d      	ldr	r1, [pc, #52]	; (8001ac8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a94:	4a0d      	ldr	r2, [pc, #52]	; (8001acc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a98:	e002      	b.n	8001aa0 <LoopCopyDataInit>

08001a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9e:	3304      	adds	r3, #4

08001aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa4:	d3f9      	bcc.n	8001a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aa8:	4c0a      	ldr	r4, [pc, #40]	; (8001ad4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aac:	e001      	b.n	8001ab2 <LoopFillZerobss>

08001aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab0:	3204      	adds	r2, #4

08001ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab4:	d3fb      	bcc.n	8001aae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ab6:	f7ff ffe5 	bl	8001a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aba:	f002 fc73 	bl	80043a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001abe:	f7ff fbed 	bl	800129c <main>
  bx lr
 8001ac2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001acc:	08004f88 	.word	0x08004f88
  ldr r2, =_sbss
 8001ad0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001ad4:	20000288 	.word	0x20000288

08001ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC1_2_IRQHandler>
	...

08001adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_Init+0x28>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <HAL_Init+0x28>)
 8001ae6:	f043 0310 	orr.w	r3, r3, #16
 8001aea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aec:	2003      	movs	r0, #3
 8001aee:	f000 f923 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af2:	200f      	movs	r0, #15
 8001af4:	f000 f808 	bl	8001b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af8:	f7ff fe52 	bl	80017a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40022000 	.word	0x40022000

08001b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_InitTick+0x54>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_InitTick+0x58>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f93b 	bl	8001da2 <HAL_SYSTICK_Config>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00e      	b.n	8001b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	d80a      	bhi.n	8001b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f000 f903 	bl	8001d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b48:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <HAL_InitTick+0x5c>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e000      	b.n	8001b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000024 	.word	0x20000024
 8001b60:	2000002c 	.word	0x2000002c
 8001b64:	20000028 	.word	0x20000028

08001b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_IncTick+0x1c>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_IncTick+0x20>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	4a03      	ldr	r2, [pc, #12]	; (8001b88 <HAL_IncTick+0x20>)
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	2000002c 	.word	0x2000002c
 8001b88:	20000274 	.word	0x20000274

08001b8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b90:	4b02      	ldr	r3, [pc, #8]	; (8001b9c <HAL_GetTick+0x10>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	20000274 	.word	0x20000274

08001ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd2:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	60d3      	str	r3, [r2, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <__NVIC_GetPriorityGrouping+0x18>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	f003 0307 	and.w	r3, r3, #7
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	db0b      	blt.n	8001c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	4906      	ldr	r1, [pc, #24]	; (8001c38 <__NVIC_EnableIRQ+0x34>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	2001      	movs	r0, #1
 8001c26:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	; (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	; (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
         );
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d04:	d301      	bcc.n	8001d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00f      	b.n	8001d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <SysTick_Config+0x40>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d12:	210f      	movs	r1, #15
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f7ff ff90 	bl	8001c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <SysTick_Config+0x40>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <SysTick_Config+0x40>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff2d 	bl	8001ba0 <__NVIC_SetPriorityGrouping>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d60:	f7ff ff42 	bl	8001be8 <__NVIC_GetPriorityGrouping>
 8001d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	6978      	ldr	r0, [r7, #20]
 8001d6c:	f7ff ff90 	bl	8001c90 <NVIC_EncodePriority>
 8001d70:	4602      	mov	r2, r0
 8001d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff5f 	bl	8001c3c <__NVIC_SetPriority>
}
 8001d7e:	bf00      	nop
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff35 	bl	8001c04 <__NVIC_EnableIRQ>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ffa2 	bl	8001cf4 <SysTick_Config>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b085      	sub	sp, #20
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d008      	beq.n	8001de2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e020      	b.n	8001e24 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 020e 	bic.w	r2, r2, #14
 8001df0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0201 	bic.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e10:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
	...

08001e30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d005      	beq.n	8001e52 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2204      	movs	r2, #4
 8001e4a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	e051      	b.n	8001ef6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 020e 	bic.w	r2, r2, #14
 8001e60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0201 	bic.w	r2, r2, #1
 8001e70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a22      	ldr	r2, [pc, #136]	; (8001f00 <HAL_DMA_Abort_IT+0xd0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d029      	beq.n	8001ed0 <HAL_DMA_Abort_IT+0xa0>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a20      	ldr	r2, [pc, #128]	; (8001f04 <HAL_DMA_Abort_IT+0xd4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d022      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x9c>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1f      	ldr	r2, [pc, #124]	; (8001f08 <HAL_DMA_Abort_IT+0xd8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d01a      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x96>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1d      	ldr	r2, [pc, #116]	; (8001f0c <HAL_DMA_Abort_IT+0xdc>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d012      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0x90>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a1c      	ldr	r2, [pc, #112]	; (8001f10 <HAL_DMA_Abort_IT+0xe0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d00a      	beq.n	8001eba <HAL_DMA_Abort_IT+0x8a>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a1a      	ldr	r2, [pc, #104]	; (8001f14 <HAL_DMA_Abort_IT+0xe4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d102      	bne.n	8001eb4 <HAL_DMA_Abort_IT+0x84>
 8001eae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001eb2:	e00e      	b.n	8001ed2 <HAL_DMA_Abort_IT+0xa2>
 8001eb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eb8:	e00b      	b.n	8001ed2 <HAL_DMA_Abort_IT+0xa2>
 8001eba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ebe:	e008      	b.n	8001ed2 <HAL_DMA_Abort_IT+0xa2>
 8001ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec4:	e005      	b.n	8001ed2 <HAL_DMA_Abort_IT+0xa2>
 8001ec6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eca:	e002      	b.n	8001ed2 <HAL_DMA_Abort_IT+0xa2>
 8001ecc:	2310      	movs	r3, #16
 8001ece:	e000      	b.n	8001ed2 <HAL_DMA_Abort_IT+0xa2>
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	4a11      	ldr	r2, [pc, #68]	; (8001f18 <HAL_DMA_Abort_IT+0xe8>)
 8001ed4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	4798      	blx	r3
    } 
  }
  return status;
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40020008 	.word	0x40020008
 8001f04:	4002001c 	.word	0x4002001c
 8001f08:	40020030 	.word	0x40020030
 8001f0c:	40020044 	.word	0x40020044
 8001f10:	40020058 	.word	0x40020058
 8001f14:	4002006c 	.word	0x4002006c
 8001f18:	40020000 	.word	0x40020000

08001f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b08b      	sub	sp, #44	; 0x2c
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f26:	2300      	movs	r3, #0
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f2e:	e148      	b.n	80021c2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f30:	2201      	movs	r2, #1
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	69fa      	ldr	r2, [r7, #28]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	f040 8137 	bne.w	80021bc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4aa3      	ldr	r2, [pc, #652]	; (80021e0 <HAL_GPIO_Init+0x2c4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d05e      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
 8001f58:	4aa1      	ldr	r2, [pc, #644]	; (80021e0 <HAL_GPIO_Init+0x2c4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d875      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f5e:	4aa1      	ldr	r2, [pc, #644]	; (80021e4 <HAL_GPIO_Init+0x2c8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d058      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
 8001f64:	4a9f      	ldr	r2, [pc, #636]	; (80021e4 <HAL_GPIO_Init+0x2c8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d86f      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f6a:	4a9f      	ldr	r2, [pc, #636]	; (80021e8 <HAL_GPIO_Init+0x2cc>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d052      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
 8001f70:	4a9d      	ldr	r2, [pc, #628]	; (80021e8 <HAL_GPIO_Init+0x2cc>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d869      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f76:	4a9d      	ldr	r2, [pc, #628]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d04c      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
 8001f7c:	4a9b      	ldr	r2, [pc, #620]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d863      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f82:	4a9b      	ldr	r2, [pc, #620]	; (80021f0 <HAL_GPIO_Init+0x2d4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d046      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
 8001f88:	4a99      	ldr	r2, [pc, #612]	; (80021f0 <HAL_GPIO_Init+0x2d4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d85d      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f8e:	2b12      	cmp	r3, #18
 8001f90:	d82a      	bhi.n	8001fe8 <HAL_GPIO_Init+0xcc>
 8001f92:	2b12      	cmp	r3, #18
 8001f94:	d859      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f96:	a201      	add	r2, pc, #4	; (adr r2, 8001f9c <HAL_GPIO_Init+0x80>)
 8001f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9c:	08002017 	.word	0x08002017
 8001fa0:	08001ff1 	.word	0x08001ff1
 8001fa4:	08002003 	.word	0x08002003
 8001fa8:	08002045 	.word	0x08002045
 8001fac:	0800204b 	.word	0x0800204b
 8001fb0:	0800204b 	.word	0x0800204b
 8001fb4:	0800204b 	.word	0x0800204b
 8001fb8:	0800204b 	.word	0x0800204b
 8001fbc:	0800204b 	.word	0x0800204b
 8001fc0:	0800204b 	.word	0x0800204b
 8001fc4:	0800204b 	.word	0x0800204b
 8001fc8:	0800204b 	.word	0x0800204b
 8001fcc:	0800204b 	.word	0x0800204b
 8001fd0:	0800204b 	.word	0x0800204b
 8001fd4:	0800204b 	.word	0x0800204b
 8001fd8:	0800204b 	.word	0x0800204b
 8001fdc:	0800204b 	.word	0x0800204b
 8001fe0:	08001ff9 	.word	0x08001ff9
 8001fe4:	0800200d 	.word	0x0800200d
 8001fe8:	4a82      	ldr	r2, [pc, #520]	; (80021f4 <HAL_GPIO_Init+0x2d8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d013      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fee:	e02c      	b.n	800204a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	623b      	str	r3, [r7, #32]
          break;
 8001ff6:	e029      	b.n	800204c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	623b      	str	r3, [r7, #32]
          break;
 8002000:	e024      	b.n	800204c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	3308      	adds	r3, #8
 8002008:	623b      	str	r3, [r7, #32]
          break;
 800200a:	e01f      	b.n	800204c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	330c      	adds	r3, #12
 8002012:	623b      	str	r3, [r7, #32]
          break;
 8002014:	e01a      	b.n	800204c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d102      	bne.n	8002024 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800201e:	2304      	movs	r3, #4
 8002020:	623b      	str	r3, [r7, #32]
          break;
 8002022:	e013      	b.n	800204c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d105      	bne.n	8002038 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800202c:	2308      	movs	r3, #8
 800202e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	611a      	str	r2, [r3, #16]
          break;
 8002036:	e009      	b.n	800204c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002038:	2308      	movs	r3, #8
 800203a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	615a      	str	r2, [r3, #20]
          break;
 8002042:	e003      	b.n	800204c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002044:	2300      	movs	r3, #0
 8002046:	623b      	str	r3, [r7, #32]
          break;
 8002048:	e000      	b.n	800204c <HAL_GPIO_Init+0x130>
          break;
 800204a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2bff      	cmp	r3, #255	; 0xff
 8002050:	d801      	bhi.n	8002056 <HAL_GPIO_Init+0x13a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	e001      	b.n	800205a <HAL_GPIO_Init+0x13e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3304      	adds	r3, #4
 800205a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2bff      	cmp	r3, #255	; 0xff
 8002060:	d802      	bhi.n	8002068 <HAL_GPIO_Init+0x14c>
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	e002      	b.n	800206e <HAL_GPIO_Init+0x152>
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	3b08      	subs	r3, #8
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	210f      	movs	r1, #15
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	401a      	ands	r2, r3
 8002080:	6a39      	ldr	r1, [r7, #32]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	fa01 f303 	lsl.w	r3, r1, r3
 8002088:	431a      	orrs	r2, r3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 8090 	beq.w	80021bc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800209c:	4b56      	ldr	r3, [pc, #344]	; (80021f8 <HAL_GPIO_Init+0x2dc>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	4a55      	ldr	r2, [pc, #340]	; (80021f8 <HAL_GPIO_Init+0x2dc>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	6193      	str	r3, [r2, #24]
 80020a8:	4b53      	ldr	r3, [pc, #332]	; (80021f8 <HAL_GPIO_Init+0x2dc>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020b4:	4a51      	ldr	r2, [pc, #324]	; (80021fc <HAL_GPIO_Init+0x2e0>)
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	089b      	lsrs	r3, r3, #2
 80020ba:	3302      	adds	r3, #2
 80020bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	220f      	movs	r2, #15
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4013      	ands	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a49      	ldr	r2, [pc, #292]	; (8002200 <HAL_GPIO_Init+0x2e4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d00d      	beq.n	80020fc <HAL_GPIO_Init+0x1e0>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a48      	ldr	r2, [pc, #288]	; (8002204 <HAL_GPIO_Init+0x2e8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d007      	beq.n	80020f8 <HAL_GPIO_Init+0x1dc>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a47      	ldr	r2, [pc, #284]	; (8002208 <HAL_GPIO_Init+0x2ec>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d101      	bne.n	80020f4 <HAL_GPIO_Init+0x1d8>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e004      	b.n	80020fe <HAL_GPIO_Init+0x1e2>
 80020f4:	2303      	movs	r3, #3
 80020f6:	e002      	b.n	80020fe <HAL_GPIO_Init+0x1e2>
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <HAL_GPIO_Init+0x1e2>
 80020fc:	2300      	movs	r3, #0
 80020fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002100:	f002 0203 	and.w	r2, r2, #3
 8002104:	0092      	lsls	r2, r2, #2
 8002106:	4093      	lsls	r3, r2
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800210e:	493b      	ldr	r1, [pc, #236]	; (80021fc <HAL_GPIO_Init+0x2e0>)
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	3302      	adds	r3, #2
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d006      	beq.n	8002136 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002128:	4b38      	ldr	r3, [pc, #224]	; (800220c <HAL_GPIO_Init+0x2f0>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4937      	ldr	r1, [pc, #220]	; (800220c <HAL_GPIO_Init+0x2f0>)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	600b      	str	r3, [r1, #0]
 8002134:	e006      	b.n	8002144 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <HAL_GPIO_Init+0x2f0>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	43db      	mvns	r3, r3
 800213e:	4933      	ldr	r1, [pc, #204]	; (800220c <HAL_GPIO_Init+0x2f0>)
 8002140:	4013      	ands	r3, r2
 8002142:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d006      	beq.n	800215e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002150:	4b2e      	ldr	r3, [pc, #184]	; (800220c <HAL_GPIO_Init+0x2f0>)
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	492d      	ldr	r1, [pc, #180]	; (800220c <HAL_GPIO_Init+0x2f0>)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]
 800215c:	e006      	b.n	800216c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800215e:	4b2b      	ldr	r3, [pc, #172]	; (800220c <HAL_GPIO_Init+0x2f0>)
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	43db      	mvns	r3, r3
 8002166:	4929      	ldr	r1, [pc, #164]	; (800220c <HAL_GPIO_Init+0x2f0>)
 8002168:	4013      	ands	r3, r2
 800216a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d006      	beq.n	8002186 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002178:	4b24      	ldr	r3, [pc, #144]	; (800220c <HAL_GPIO_Init+0x2f0>)
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	4923      	ldr	r1, [pc, #140]	; (800220c <HAL_GPIO_Init+0x2f0>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	608b      	str	r3, [r1, #8]
 8002184:	e006      	b.n	8002194 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002186:	4b21      	ldr	r3, [pc, #132]	; (800220c <HAL_GPIO_Init+0x2f0>)
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	43db      	mvns	r3, r3
 800218e:	491f      	ldr	r1, [pc, #124]	; (800220c <HAL_GPIO_Init+0x2f0>)
 8002190:	4013      	ands	r3, r2
 8002192:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d006      	beq.n	80021ae <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021a0:	4b1a      	ldr	r3, [pc, #104]	; (800220c <HAL_GPIO_Init+0x2f0>)
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	4919      	ldr	r1, [pc, #100]	; (800220c <HAL_GPIO_Init+0x2f0>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	60cb      	str	r3, [r1, #12]
 80021ac:	e006      	b.n	80021bc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021ae:	4b17      	ldr	r3, [pc, #92]	; (800220c <HAL_GPIO_Init+0x2f0>)
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	4915      	ldr	r1, [pc, #84]	; (800220c <HAL_GPIO_Init+0x2f0>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	3301      	adds	r3, #1
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	fa22 f303 	lsr.w	r3, r2, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f47f aeaf 	bne.w	8001f30 <HAL_GPIO_Init+0x14>
  }
}
 80021d2:	bf00      	nop
 80021d4:	bf00      	nop
 80021d6:	372c      	adds	r7, #44	; 0x2c
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	10320000 	.word	0x10320000
 80021e4:	10310000 	.word	0x10310000
 80021e8:	10220000 	.word	0x10220000
 80021ec:	10210000 	.word	0x10210000
 80021f0:	10120000 	.word	0x10120000
 80021f4:	10110000 	.word	0x10110000
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40010000 	.word	0x40010000
 8002200:	40010800 	.word	0x40010800
 8002204:	40010c00 	.word	0x40010c00
 8002208:	40011000 	.word	0x40011000
 800220c:	40010400 	.word	0x40010400

08002210 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	887b      	ldrh	r3, [r7, #2]
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
 800222c:	e001      	b.n	8002232 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002232:	7bfb      	ldrb	r3, [r7, #15]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr

0800223e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	460b      	mov	r3, r1
 8002248:	807b      	strh	r3, [r7, #2]
 800224a:	4613      	mov	r3, r2
 800224c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800224e:	787b      	ldrb	r3, [r7, #1]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002254:	887a      	ldrh	r2, [r7, #2]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800225a:	e003      	b.n	8002264 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800225c:	887b      	ldrh	r3, [r7, #2]
 800225e:	041a      	lsls	r2, r3, #16
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	611a      	str	r2, [r3, #16]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
	...

08002270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e26c      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 8087 	beq.w	800239e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002290:	4b92      	ldr	r3, [pc, #584]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	2b04      	cmp	r3, #4
 800229a:	d00c      	beq.n	80022b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800229c:	4b8f      	ldr	r3, [pc, #572]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 030c 	and.w	r3, r3, #12
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d112      	bne.n	80022ce <HAL_RCC_OscConfig+0x5e>
 80022a8:	4b8c      	ldr	r3, [pc, #560]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b4:	d10b      	bne.n	80022ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b6:	4b89      	ldr	r3, [pc, #548]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d06c      	beq.n	800239c <HAL_RCC_OscConfig+0x12c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d168      	bne.n	800239c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e246      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x76>
 80022d8:	4b80      	ldr	r3, [pc, #512]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a7f      	ldr	r2, [pc, #508]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	e02e      	b.n	8002344 <HAL_RCC_OscConfig+0xd4>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0x98>
 80022ee:	4b7b      	ldr	r3, [pc, #492]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a7a      	ldr	r2, [pc, #488]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	4b78      	ldr	r3, [pc, #480]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a77      	ldr	r2, [pc, #476]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	e01d      	b.n	8002344 <HAL_RCC_OscConfig+0xd4>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002310:	d10c      	bne.n	800232c <HAL_RCC_OscConfig+0xbc>
 8002312:	4b72      	ldr	r3, [pc, #456]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a71      	ldr	r2, [pc, #452]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b6f      	ldr	r3, [pc, #444]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a6e      	ldr	r2, [pc, #440]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	e00b      	b.n	8002344 <HAL_RCC_OscConfig+0xd4>
 800232c:	4b6b      	ldr	r3, [pc, #428]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a6a      	ldr	r2, [pc, #424]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b68      	ldr	r3, [pc, #416]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a67      	ldr	r2, [pc, #412]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 800233e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002342:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d013      	beq.n	8002374 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7ff fc1e 	bl	8001b8c <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002354:	f7ff fc1a 	bl	8001b8c <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	; 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e1fa      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	4b5d      	ldr	r3, [pc, #372]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0xe4>
 8002372:	e014      	b.n	800239e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7ff fc0a 	bl	8001b8c <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800237c:	f7ff fc06 	bl	8001b8c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	; 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e1e6      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238e:	4b53      	ldr	r3, [pc, #332]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x10c>
 800239a:	e000      	b.n	800239e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d063      	beq.n	8002472 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023aa:	4b4c      	ldr	r3, [pc, #304]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00b      	beq.n	80023ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023b6:	4b49      	ldr	r3, [pc, #292]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d11c      	bne.n	80023fc <HAL_RCC_OscConfig+0x18c>
 80023c2:	4b46      	ldr	r3, [pc, #280]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d116      	bne.n	80023fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ce:	4b43      	ldr	r3, [pc, #268]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_RCC_OscConfig+0x176>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d001      	beq.n	80023e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e1ba      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e6:	4b3d      	ldr	r3, [pc, #244]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4939      	ldr	r1, [pc, #228]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fa:	e03a      	b.n	8002472 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d020      	beq.n	8002446 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002404:	4b36      	ldr	r3, [pc, #216]	; (80024e0 <HAL_RCC_OscConfig+0x270>)
 8002406:	2201      	movs	r2, #1
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7ff fbbf 	bl	8001b8c <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002412:	f7ff fbbb 	bl	8001b8c <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e19b      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002424:	4b2d      	ldr	r3, [pc, #180]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002430:	4b2a      	ldr	r3, [pc, #168]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4927      	ldr	r1, [pc, #156]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002440:	4313      	orrs	r3, r2
 8002442:	600b      	str	r3, [r1, #0]
 8002444:	e015      	b.n	8002472 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002446:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <HAL_RCC_OscConfig+0x270>)
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244c:	f7ff fb9e 	bl	8001b8c <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002454:	f7ff fb9a 	bl	8001b8c <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e17a      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002466:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d03a      	beq.n	80024f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d019      	beq.n	80024ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002486:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <HAL_RCC_OscConfig+0x274>)
 8002488:	2201      	movs	r2, #1
 800248a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248c:	f7ff fb7e 	bl	8001b8c <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002494:	f7ff fb7a 	bl	8001b8c <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e15a      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a6:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024b2:	2001      	movs	r0, #1
 80024b4:	f000 fad8 	bl	8002a68 <RCC_Delay>
 80024b8:	e01c      	b.n	80024f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <HAL_RCC_OscConfig+0x274>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c0:	f7ff fb64 	bl	8001b8c <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c6:	e00f      	b.n	80024e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c8:	f7ff fb60 	bl	8001b8c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d908      	bls.n	80024e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e140      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000
 80024e0:	42420000 	.word	0x42420000
 80024e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e8:	4b9e      	ldr	r3, [pc, #632]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1e9      	bne.n	80024c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80a6 	beq.w	800264e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002506:	4b97      	ldr	r3, [pc, #604]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10d      	bne.n	800252e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002512:	4b94      	ldr	r3, [pc, #592]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4a93      	ldr	r2, [pc, #588]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251c:	61d3      	str	r3, [r2, #28]
 800251e:	4b91      	ldr	r3, [pc, #580]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252a:	2301      	movs	r3, #1
 800252c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252e:	4b8e      	ldr	r3, [pc, #568]	; (8002768 <HAL_RCC_OscConfig+0x4f8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d118      	bne.n	800256c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800253a:	4b8b      	ldr	r3, [pc, #556]	; (8002768 <HAL_RCC_OscConfig+0x4f8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a8a      	ldr	r2, [pc, #552]	; (8002768 <HAL_RCC_OscConfig+0x4f8>)
 8002540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002546:	f7ff fb21 	bl	8001b8c <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254e:	f7ff fb1d 	bl	8001b8c <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b64      	cmp	r3, #100	; 0x64
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e0fd      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002560:	4b81      	ldr	r3, [pc, #516]	; (8002768 <HAL_RCC_OscConfig+0x4f8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d106      	bne.n	8002582 <HAL_RCC_OscConfig+0x312>
 8002574:	4b7b      	ldr	r3, [pc, #492]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	4a7a      	ldr	r2, [pc, #488]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6213      	str	r3, [r2, #32]
 8002580:	e02d      	b.n	80025de <HAL_RCC_OscConfig+0x36e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x334>
 800258a:	4b76      	ldr	r3, [pc, #472]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a75      	ldr	r2, [pc, #468]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	6213      	str	r3, [r2, #32]
 8002596:	4b73      	ldr	r3, [pc, #460]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4a72      	ldr	r2, [pc, #456]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	f023 0304 	bic.w	r3, r3, #4
 80025a0:	6213      	str	r3, [r2, #32]
 80025a2:	e01c      	b.n	80025de <HAL_RCC_OscConfig+0x36e>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	2b05      	cmp	r3, #5
 80025aa:	d10c      	bne.n	80025c6 <HAL_RCC_OscConfig+0x356>
 80025ac:	4b6d      	ldr	r3, [pc, #436]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	4a6c      	ldr	r2, [pc, #432]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025b2:	f043 0304 	orr.w	r3, r3, #4
 80025b6:	6213      	str	r3, [r2, #32]
 80025b8:	4b6a      	ldr	r3, [pc, #424]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	4a69      	ldr	r2, [pc, #420]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	6213      	str	r3, [r2, #32]
 80025c4:	e00b      	b.n	80025de <HAL_RCC_OscConfig+0x36e>
 80025c6:	4b67      	ldr	r3, [pc, #412]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4a66      	ldr	r2, [pc, #408]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	6213      	str	r3, [r2, #32]
 80025d2:	4b64      	ldr	r3, [pc, #400]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	4a63      	ldr	r2, [pc, #396]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025d8:	f023 0304 	bic.w	r3, r3, #4
 80025dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d015      	beq.n	8002612 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e6:	f7ff fad1 	bl	8001b8c <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ec:	e00a      	b.n	8002604 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f7ff facd 	bl	8001b8c <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e0ab      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002604:	4b57      	ldr	r3, [pc, #348]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0ee      	beq.n	80025ee <HAL_RCC_OscConfig+0x37e>
 8002610:	e014      	b.n	800263c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002612:	f7ff fabb 	bl	8001b8c <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002618:	e00a      	b.n	8002630 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261a:	f7ff fab7 	bl	8001b8c <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	f241 3288 	movw	r2, #5000	; 0x1388
 8002628:	4293      	cmp	r3, r2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e095      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002630:	4b4c      	ldr	r3, [pc, #304]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1ee      	bne.n	800261a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800263c:	7dfb      	ldrb	r3, [r7, #23]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d105      	bne.n	800264e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002642:	4b48      	ldr	r3, [pc, #288]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	4a47      	ldr	r2, [pc, #284]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800264c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8081 	beq.w	800275a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002658:	4b42      	ldr	r3, [pc, #264]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	2b08      	cmp	r3, #8
 8002662:	d061      	beq.n	8002728 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d146      	bne.n	80026fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266c:	4b3f      	ldr	r3, [pc, #252]	; (800276c <HAL_RCC_OscConfig+0x4fc>)
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002672:	f7ff fa8b 	bl	8001b8c <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267a:	f7ff fa87 	bl	8001b8c <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e067      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268c:	4b35      	ldr	r3, [pc, #212]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f0      	bne.n	800267a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a0:	d108      	bne.n	80026b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026a2:	4b30      	ldr	r3, [pc, #192]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	492d      	ldr	r1, [pc, #180]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026b4:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a19      	ldr	r1, [r3, #32]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	430b      	orrs	r3, r1
 80026c6:	4927      	ldr	r1, [pc, #156]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026cc:	4b27      	ldr	r3, [pc, #156]	; (800276c <HAL_RCC_OscConfig+0x4fc>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d2:	f7ff fa5b 	bl	8001b8c <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026da:	f7ff fa57 	bl	8001b8c <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e037      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026ec:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x46a>
 80026f8:	e02f      	b.n	800275a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fa:	4b1c      	ldr	r3, [pc, #112]	; (800276c <HAL_RCC_OscConfig+0x4fc>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7ff fa44 	bl	8001b8c <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002708:	f7ff fa40 	bl	8001b8c <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e020      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x498>
 8002726:	e018      	b.n	800275a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e013      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	429a      	cmp	r2, r3
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002752:	429a      	cmp	r2, r3
 8002754:	d001      	beq.n	800275a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000
 8002768:	40007000 	.word	0x40007000
 800276c:	42420060 	.word	0x42420060

08002770 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0d0      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002784:	4b6a      	ldr	r3, [pc, #424]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d910      	bls.n	80027b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002792:	4b67      	ldr	r3, [pc, #412]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 0207 	bic.w	r2, r3, #7
 800279a:	4965      	ldr	r1, [pc, #404]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b63      	ldr	r3, [pc, #396]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0b8      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d020      	beq.n	8002802 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027cc:	4b59      	ldr	r3, [pc, #356]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4a58      	ldr	r2, [pc, #352]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027e4:	4b53      	ldr	r3, [pc, #332]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a52      	ldr	r2, [pc, #328]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f0:	4b50      	ldr	r3, [pc, #320]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	494d      	ldr	r1, [pc, #308]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d040      	beq.n	8002890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d107      	bne.n	8002826 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002816:	4b47      	ldr	r3, [pc, #284]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d115      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e07f      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282e:	4b41      	ldr	r3, [pc, #260]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d109      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e073      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283e:	4b3d      	ldr	r3, [pc, #244]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e06b      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800284e:	4b39      	ldr	r3, [pc, #228]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f023 0203 	bic.w	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	4936      	ldr	r1, [pc, #216]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002860:	f7ff f994 	bl	8001b8c <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	e00a      	b.n	800287e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002868:	f7ff f990 	bl	8001b8c <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	; 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e053      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	4b2d      	ldr	r3, [pc, #180]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 020c 	and.w	r2, r3, #12
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	429a      	cmp	r2, r3
 800288e:	d1eb      	bne.n	8002868 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002890:	4b27      	ldr	r3, [pc, #156]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d210      	bcs.n	80028c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	4b24      	ldr	r3, [pc, #144]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 0207 	bic.w	r2, r3, #7
 80028a6:	4922      	ldr	r1, [pc, #136]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ae:	4b20      	ldr	r3, [pc, #128]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e032      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028cc:	4b19      	ldr	r3, [pc, #100]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4916      	ldr	r1, [pc, #88]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ea:	4b12      	ldr	r3, [pc, #72]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	490e      	ldr	r1, [pc, #56]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028fe:	f000 f821 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 8002902:	4602      	mov	r2, r0
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	490a      	ldr	r1, [pc, #40]	; (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 8002910:	5ccb      	ldrb	r3, [r1, r3]
 8002912:	fa22 f303 	lsr.w	r3, r2, r3
 8002916:	4a09      	ldr	r2, [pc, #36]	; (800293c <HAL_RCC_ClockConfig+0x1cc>)
 8002918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_RCC_ClockConfig+0x1d0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff f8f2 	bl	8001b08 <HAL_InitTick>

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40022000 	.word	0x40022000
 8002934:	40021000 	.word	0x40021000
 8002938:	08004f34 	.word	0x08004f34
 800293c:	20000024 	.word	0x20000024
 8002940:	20000028 	.word	0x20000028

08002944 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002944:	b490      	push	{r4, r7}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800294a:	4b2a      	ldr	r3, [pc, #168]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800294c:	1d3c      	adds	r4, r7, #4
 800294e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002950:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002954:	f240 2301 	movw	r3, #513	; 0x201
 8002958:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	2300      	movs	r3, #0
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800296e:	4b22      	ldr	r3, [pc, #136]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b04      	cmp	r3, #4
 800297c:	d002      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0x40>
 800297e:	2b08      	cmp	r3, #8
 8002980:	d003      	beq.n	800298a <HAL_RCC_GetSysClockFreq+0x46>
 8002982:	e02d      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002984:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002986:	623b      	str	r3, [r7, #32]
      break;
 8002988:	e02d      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	0c9b      	lsrs	r3, r3, #18
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002996:	4413      	add	r3, r2
 8002998:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800299c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d013      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029a8:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	0c5b      	lsrs	r3, r3, #17
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029b6:	4413      	add	r3, r2
 80029b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	4a0e      	ldr	r2, [pc, #56]	; (80029fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80029c2:	fb02 f203 	mul.w	r2, r2, r3
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
 80029ce:	e004      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	4a0b      	ldr	r2, [pc, #44]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029d4:	fb02 f303 	mul.w	r3, r2, r3
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	623b      	str	r3, [r7, #32]
      break;
 80029de:	e002      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029e0:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80029e2:	623b      	str	r3, [r7, #32]
      break;
 80029e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e6:	6a3b      	ldr	r3, [r7, #32]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3728      	adds	r7, #40	; 0x28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc90      	pop	{r4, r7}
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	08004f24 	.word	0x08004f24
 80029f8:	40021000 	.word	0x40021000
 80029fc:	007a1200 	.word	0x007a1200
 8002a00:	003d0900 	.word	0x003d0900

08002a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a08:	4b02      	ldr	r3, [pc, #8]	; (8002a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	20000024 	.word	0x20000024

08002a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a1c:	f7ff fff2 	bl	8002a04 <HAL_RCC_GetHCLKFreq>
 8002a20:	4602      	mov	r2, r0
 8002a22:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	4903      	ldr	r1, [pc, #12]	; (8002a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a2e:	5ccb      	ldrb	r3, [r1, r3]
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	08004f44 	.word	0x08004f44

08002a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a44:	f7ff ffde 	bl	8002a04 <HAL_RCC_GetHCLKFreq>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	0adb      	lsrs	r3, r3, #11
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	4903      	ldr	r1, [pc, #12]	; (8002a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a56:	5ccb      	ldrb	r3, [r1, r3]
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40021000 	.word	0x40021000
 8002a64:	08004f44 	.word	0x08004f44

08002a68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <RCC_Delay+0x34>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <RCC_Delay+0x38>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	0a5b      	lsrs	r3, r3, #9
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	fb02 f303 	mul.w	r3, r2, r3
 8002a82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a84:	bf00      	nop
  }
  while (Delay --);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1e5a      	subs	r2, r3, #1
 8002a8a:	60fa      	str	r2, [r7, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f9      	bne.n	8002a84 <RCC_Delay+0x1c>
}
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	20000024 	.word	0x20000024
 8002aa0:	10624dd3 	.word	0x10624dd3

08002aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e041      	b.n	8002b3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7fe fe9a 	bl	8001804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3304      	adds	r3, #4
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	f000 fc1c 	bl	8003320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d001      	beq.n	8002b5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e035      	b.n	8002bc8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a16      	ldr	r2, [pc, #88]	; (8002bd4 <HAL_TIM_Base_Start_IT+0x90>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d009      	beq.n	8002b92 <HAL_TIM_Base_Start_IT+0x4e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b86:	d004      	beq.n	8002b92 <HAL_TIM_Base_Start_IT+0x4e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a12      	ldr	r2, [pc, #72]	; (8002bd8 <HAL_TIM_Base_Start_IT+0x94>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d111      	bne.n	8002bb6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b06      	cmp	r3, #6
 8002ba2:	d010      	beq.n	8002bc6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb4:	e007      	b.n	8002bc6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 0201 	orr.w	r2, r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40012c00 	.word	0x40012c00
 8002bd8:	40000400 	.word	0x40000400

08002bdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e041      	b.n	8002c72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f839 	bl	8002c7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3304      	adds	r3, #4
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	f000 fb80 	bl	8003320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d109      	bne.n	8002cb0 <HAL_TIM_PWM_Start+0x24>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	bf14      	ite	ne
 8002ca8:	2301      	movne	r3, #1
 8002caa:	2300      	moveq	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	e022      	b.n	8002cf6 <HAL_TIM_PWM_Start+0x6a>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d109      	bne.n	8002cca <HAL_TIM_PWM_Start+0x3e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	bf14      	ite	ne
 8002cc2:	2301      	movne	r3, #1
 8002cc4:	2300      	moveq	r3, #0
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	e015      	b.n	8002cf6 <HAL_TIM_PWM_Start+0x6a>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d109      	bne.n	8002ce4 <HAL_TIM_PWM_Start+0x58>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	bf14      	ite	ne
 8002cdc:	2301      	movne	r3, #1
 8002cde:	2300      	moveq	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	e008      	b.n	8002cf6 <HAL_TIM_PWM_Start+0x6a>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	bf14      	ite	ne
 8002cf0:	2301      	movne	r3, #1
 8002cf2:	2300      	moveq	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e059      	b.n	8002db2 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d104      	bne.n	8002d0e <HAL_TIM_PWM_Start+0x82>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d0c:	e013      	b.n	8002d36 <HAL_TIM_PWM_Start+0xaa>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d104      	bne.n	8002d1e <HAL_TIM_PWM_Start+0x92>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d1c:	e00b      	b.n	8002d36 <HAL_TIM_PWM_Start+0xaa>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d104      	bne.n	8002d2e <HAL_TIM_PWM_Start+0xa2>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d2c:	e003      	b.n	8002d36 <HAL_TIM_PWM_Start+0xaa>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2202      	movs	r2, #2
 8002d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	6839      	ldr	r1, [r7, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fd64 	bl	800380c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a1c      	ldr	r2, [pc, #112]	; (8002dbc <HAL_TIM_PWM_Start+0x130>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d107      	bne.n	8002d5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a16      	ldr	r2, [pc, #88]	; (8002dbc <HAL_TIM_PWM_Start+0x130>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d009      	beq.n	8002d7c <HAL_TIM_PWM_Start+0xf0>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d70:	d004      	beq.n	8002d7c <HAL_TIM_PWM_Start+0xf0>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a12      	ldr	r2, [pc, #72]	; (8002dc0 <HAL_TIM_PWM_Start+0x134>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d111      	bne.n	8002da0 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2b06      	cmp	r3, #6
 8002d8c:	d010      	beq.n	8002db0 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f042 0201 	orr.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d9e:	e007      	b.n	8002db0 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40012c00 	.word	0x40012c00
 8002dc0:	40000400 	.word	0x40000400

08002dc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d122      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d11b      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0202 	mvn.w	r2, #2
 8002df0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fa6f 	bl	80032ea <HAL_TIM_IC_CaptureCallback>
 8002e0c:	e005      	b.n	8002e1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fa62 	bl	80032d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fa71 	bl	80032fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d122      	bne.n	8002e74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d11b      	bne.n	8002e74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0204 	mvn.w	r2, #4
 8002e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fa45 	bl	80032ea <HAL_TIM_IC_CaptureCallback>
 8002e60:	e005      	b.n	8002e6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fa38 	bl	80032d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fa47 	bl	80032fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d122      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d11b      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0208 	mvn.w	r2, #8
 8002e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2204      	movs	r2, #4
 8002e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fa1b 	bl	80032ea <HAL_TIM_IC_CaptureCallback>
 8002eb4:	e005      	b.n	8002ec2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fa0e 	bl	80032d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 fa1d 	bl	80032fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	2b10      	cmp	r3, #16
 8002ed4:	d122      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b10      	cmp	r3, #16
 8002ee2:	d11b      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0210 	mvn.w	r2, #16
 8002eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2208      	movs	r2, #8
 8002ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f9f1 	bl	80032ea <HAL_TIM_IC_CaptureCallback>
 8002f08:	e005      	b.n	8002f16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f9e4 	bl	80032d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f9f3 	bl	80032fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d10e      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d107      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0201 	mvn.w	r2, #1
 8002f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fe fbca 	bl	80016dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d10e      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f60:	2b80      	cmp	r3, #128	; 0x80
 8002f62:	d107      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fcd1 	bl	8003916 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7e:	2b40      	cmp	r3, #64	; 0x40
 8002f80:	d10e      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8c:	2b40      	cmp	r3, #64	; 0x40
 8002f8e:	d107      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f9b7 	bl	800330e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d10e      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d107      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f06f 0220 	mvn.w	r2, #32
 8002fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fc9c 	bl	8003904 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e0ac      	b.n	8003148 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	f200 809f 	bhi.w	800313c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002ffe:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	08003039 	.word	0x08003039
 8003008:	0800313d 	.word	0x0800313d
 800300c:	0800313d 	.word	0x0800313d
 8003010:	0800313d 	.word	0x0800313d
 8003014:	08003079 	.word	0x08003079
 8003018:	0800313d 	.word	0x0800313d
 800301c:	0800313d 	.word	0x0800313d
 8003020:	0800313d 	.word	0x0800313d
 8003024:	080030bb 	.word	0x080030bb
 8003028:	0800313d 	.word	0x0800313d
 800302c:	0800313d 	.word	0x0800313d
 8003030:	0800313d 	.word	0x0800313d
 8003034:	080030fb 	.word	0x080030fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	4618      	mov	r0, r3
 8003040:	f000 f9c6 	bl	80033d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0208 	orr.w	r2, r2, #8
 8003052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699a      	ldr	r2, [r3, #24]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0204 	bic.w	r2, r2, #4
 8003062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6999      	ldr	r1, [r3, #24]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	619a      	str	r2, [r3, #24]
      break;
 8003076:	e062      	b.n	800313e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fa0c 	bl	800349c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6999      	ldr	r1, [r3, #24]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	021a      	lsls	r2, r3, #8
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	619a      	str	r2, [r3, #24]
      break;
 80030b8:	e041      	b.n	800313e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68b9      	ldr	r1, [r7, #8]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fa55 	bl	8003570 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69da      	ldr	r2, [r3, #28]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0208 	orr.w	r2, r2, #8
 80030d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	69da      	ldr	r2, [r3, #28]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0204 	bic.w	r2, r2, #4
 80030e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	69d9      	ldr	r1, [r3, #28]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	61da      	str	r2, [r3, #28]
      break;
 80030f8:	e021      	b.n	800313e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fa9f 	bl	8003644 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	69da      	ldr	r2, [r3, #28]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69da      	ldr	r2, [r3, #28]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69d9      	ldr	r1, [r3, #28]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	021a      	lsls	r2, r3, #8
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	61da      	str	r2, [r3, #28]
      break;
 800313a:	e000      	b.n	800313e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800313c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_TIM_ConfigClockSource+0x18>
 8003164:	2302      	movs	r3, #2
 8003166:	e0b3      	b.n	80032d0 <HAL_TIM_ConfigClockSource+0x180>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003186:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800318e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a0:	d03e      	beq.n	8003220 <HAL_TIM_ConfigClockSource+0xd0>
 80031a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a6:	f200 8087 	bhi.w	80032b8 <HAL_TIM_ConfigClockSource+0x168>
 80031aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ae:	f000 8085 	beq.w	80032bc <HAL_TIM_ConfigClockSource+0x16c>
 80031b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b6:	d87f      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x168>
 80031b8:	2b70      	cmp	r3, #112	; 0x70
 80031ba:	d01a      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0xa2>
 80031bc:	2b70      	cmp	r3, #112	; 0x70
 80031be:	d87b      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x168>
 80031c0:	2b60      	cmp	r3, #96	; 0x60
 80031c2:	d050      	beq.n	8003266 <HAL_TIM_ConfigClockSource+0x116>
 80031c4:	2b60      	cmp	r3, #96	; 0x60
 80031c6:	d877      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x168>
 80031c8:	2b50      	cmp	r3, #80	; 0x50
 80031ca:	d03c      	beq.n	8003246 <HAL_TIM_ConfigClockSource+0xf6>
 80031cc:	2b50      	cmp	r3, #80	; 0x50
 80031ce:	d873      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x168>
 80031d0:	2b40      	cmp	r3, #64	; 0x40
 80031d2:	d058      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x136>
 80031d4:	2b40      	cmp	r3, #64	; 0x40
 80031d6:	d86f      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x168>
 80031d8:	2b30      	cmp	r3, #48	; 0x30
 80031da:	d064      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0x156>
 80031dc:	2b30      	cmp	r3, #48	; 0x30
 80031de:	d86b      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x168>
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d060      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0x156>
 80031e4:	2b20      	cmp	r3, #32
 80031e6:	d867      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x168>
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d05c      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0x156>
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d05a      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80031f0:	e062      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	6899      	ldr	r1, [r3, #8]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f000 fae4 	bl	80037ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003214:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	609a      	str	r2, [r3, #8]
      break;
 800321e:	e04e      	b.n	80032be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	6899      	ldr	r1, [r3, #8]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f000 facd 	bl	80037ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003242:	609a      	str	r2, [r3, #8]
      break;
 8003244:	e03b      	b.n	80032be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6818      	ldr	r0, [r3, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	6859      	ldr	r1, [r3, #4]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	461a      	mov	r2, r3
 8003254:	f000 fa44 	bl	80036e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2150      	movs	r1, #80	; 0x50
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fa9b 	bl	800379a <TIM_ITRx_SetConfig>
      break;
 8003264:	e02b      	b.n	80032be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6859      	ldr	r1, [r3, #4]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	461a      	mov	r2, r3
 8003274:	f000 fa62 	bl	800373c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2160      	movs	r1, #96	; 0x60
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fa8b 	bl	800379a <TIM_ITRx_SetConfig>
      break;
 8003284:	e01b      	b.n	80032be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	6859      	ldr	r1, [r3, #4]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	461a      	mov	r2, r3
 8003294:	f000 fa24 	bl	80036e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2140      	movs	r1, #64	; 0x40
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fa7b 	bl	800379a <TIM_ITRx_SetConfig>
      break;
 80032a4:	e00b      	b.n	80032be <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4619      	mov	r1, r3
 80032b0:	4610      	mov	r0, r2
 80032b2:	f000 fa72 	bl	800379a <TIM_ITRx_SetConfig>
        break;
 80032b6:	e002      	b.n	80032be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80032b8:	bf00      	nop
 80032ba:	e000      	b.n	80032be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80032bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr

080032ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	bc80      	pop	{r7}
 800330c:	4770      	bx	lr

0800330e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a25      	ldr	r2, [pc, #148]	; (80033c8 <TIM_Base_SetConfig+0xa8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d007      	beq.n	8003348 <TIM_Base_SetConfig+0x28>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800333e:	d003      	beq.n	8003348 <TIM_Base_SetConfig+0x28>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a22      	ldr	r2, [pc, #136]	; (80033cc <TIM_Base_SetConfig+0xac>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d108      	bne.n	800335a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a1a      	ldr	r2, [pc, #104]	; (80033c8 <TIM_Base_SetConfig+0xa8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <TIM_Base_SetConfig+0x52>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003368:	d003      	beq.n	8003372 <TIM_Base_SetConfig+0x52>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a17      	ldr	r2, [pc, #92]	; (80033cc <TIM_Base_SetConfig+0xac>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d108      	bne.n	8003384 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a07      	ldr	r2, [pc, #28]	; (80033c8 <TIM_Base_SetConfig+0xa8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d103      	bne.n	80033b8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	615a      	str	r2, [r3, #20]
}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr
 80033c8:	40012c00 	.word	0x40012c00
 80033cc:	40000400 	.word	0x40000400

080033d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	f023 0201 	bic.w	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0303 	bic.w	r3, r3, #3
 8003406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f023 0302 	bic.w	r3, r3, #2
 8003418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a1c      	ldr	r2, [pc, #112]	; (8003498 <TIM_OC1_SetConfig+0xc8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d10c      	bne.n	8003446 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f023 0308 	bic.w	r3, r3, #8
 8003432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f023 0304 	bic.w	r3, r3, #4
 8003444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a13      	ldr	r2, [pc, #76]	; (8003498 <TIM_OC1_SetConfig+0xc8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d111      	bne.n	8003472 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800345c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	621a      	str	r2, [r3, #32]
}
 800348c:	bf00      	nop
 800348e:	371c      	adds	r7, #28
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40012c00 	.word	0x40012c00

0800349c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	f023 0210 	bic.w	r2, r3, #16
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	021b      	lsls	r3, r3, #8
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f023 0320 	bic.w	r3, r3, #32
 80034e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a1d      	ldr	r2, [pc, #116]	; (800356c <TIM_OC2_SetConfig+0xd0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d10d      	bne.n	8003518 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003516:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a14      	ldr	r2, [pc, #80]	; (800356c <TIM_OC2_SetConfig+0xd0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d113      	bne.n	8003548 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003526:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800352e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	621a      	str	r2, [r3, #32]
}
 8003562:	bf00      	nop
 8003564:	371c      	adds	r7, #28
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr
 800356c:	40012c00 	.word	0x40012c00

08003570 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0303 	bic.w	r3, r3, #3
 80035a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	021b      	lsls	r3, r3, #8
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a1d      	ldr	r2, [pc, #116]	; (8003640 <TIM_OC3_SetConfig+0xd0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d10d      	bne.n	80035ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	021b      	lsls	r3, r3, #8
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a14      	ldr	r2, [pc, #80]	; (8003640 <TIM_OC3_SetConfig+0xd0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d113      	bne.n	800361a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	621a      	str	r2, [r3, #32]
}
 8003634:	bf00      	nop
 8003636:	371c      	adds	r7, #28
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40012c00 	.word	0x40012c00

08003644 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800368e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	031b      	lsls	r3, r3, #12
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a0f      	ldr	r2, [pc, #60]	; (80036dc <TIM_OC4_SetConfig+0x98>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d109      	bne.n	80036b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	019b      	lsls	r3, r3, #6
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	621a      	str	r2, [r3, #32]
}
 80036d2:	bf00      	nop
 80036d4:	371c      	adds	r7, #28
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr
 80036dc:	40012c00 	.word	0x40012c00

080036e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	f023 0201 	bic.w	r2, r3, #1
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800370a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	4313      	orrs	r3, r2
 8003714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f023 030a 	bic.w	r3, r3, #10
 800371c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	621a      	str	r2, [r3, #32]
}
 8003732:	bf00      	nop
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr

0800373c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	f023 0210 	bic.w	r2, r3, #16
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003766:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	031b      	lsls	r3, r3, #12
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003778:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	621a      	str	r2, [r3, #32]
}
 8003790:	bf00      	nop
 8003792:	371c      	adds	r7, #28
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr

0800379a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f043 0307 	orr.w	r3, r3, #7
 80037bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	609a      	str	r2, [r3, #8]
}
 80037c4:	bf00      	nop
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr

080037ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b087      	sub	sp, #28
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	607a      	str	r2, [r7, #4]
 80037da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	021a      	lsls	r2, r3, #8
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	431a      	orrs	r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	609a      	str	r2, [r3, #8]
}
 8003802:	bf00      	nop
 8003804:	371c      	adds	r7, #28
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr

0800380c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	2201      	movs	r2, #1
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a1a      	ldr	r2, [r3, #32]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	43db      	mvns	r3, r3
 800382e:	401a      	ands	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a1a      	ldr	r2, [r3, #32]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f003 031f 	and.w	r3, r3, #31
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	fa01 f303 	lsl.w	r3, r1, r3
 8003844:	431a      	orrs	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	621a      	str	r2, [r3, #32]
}
 800384a:	bf00      	nop
 800384c:	371c      	adds	r7, #28
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003868:	2302      	movs	r3, #2
 800386a:	e041      	b.n	80038f0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003892:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a14      	ldr	r2, [pc, #80]	; (80038fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d009      	beq.n	80038c4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b8:	d004      	beq.n	80038c4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a10      	ldr	r2, [pc, #64]	; (8003900 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d10c      	bne.n	80038de <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40012c00 	.word	0x40012c00
 8003900:	40000400 	.word	0x40000400

08003904 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr

08003916 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr

08003928 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e03f      	b.n	80039ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fd ffca 	bl	80018e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2224      	movs	r2, #36	; 0x24
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800396a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fc85 	bl	800427c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003980:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695a      	ldr	r2, [r3, #20]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003990:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b08a      	sub	sp, #40	; 0x28
 80039c6:	af02      	add	r7, sp, #8
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	4613      	mov	r3, r2
 80039d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d17c      	bne.n	8003adc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_UART_Transmit+0x2c>
 80039e8:	88fb      	ldrh	r3, [r7, #6]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e075      	b.n	8003ade <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_UART_Transmit+0x3e>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e06e      	b.n	8003ade <HAL_UART_Transmit+0x11c>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2221      	movs	r2, #33	; 0x21
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a16:	f7fe f8b9 	bl	8001b8c <HAL_GetTick>
 8003a1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	88fa      	ldrh	r2, [r7, #6]
 8003a26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a30:	d108      	bne.n	8003a44 <HAL_UART_Transmit+0x82>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d104      	bne.n	8003a44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	e003      	b.n	8003a4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a54:	e02a      	b.n	8003aac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2180      	movs	r1, #128	; 0x80
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 fa38 	bl	8003ed6 <UART_WaitOnFlagUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e036      	b.n	8003ade <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10b      	bne.n	8003a8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	3302      	adds	r3, #2
 8003a8a:	61bb      	str	r3, [r7, #24]
 8003a8c:	e007      	b.n	8003a9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	781a      	ldrb	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1cf      	bne.n	8003a56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2200      	movs	r2, #0
 8003abe:	2140      	movs	r1, #64	; 0x40
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 fa08 	bl	8003ed6 <UART_WaitOnFlagUntilTimeout>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e006      	b.n	8003ade <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	e000      	b.n	8003ade <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003adc:	2302      	movs	r3, #2
  }
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3720      	adds	r7, #32
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	4613      	mov	r3, r2
 8003af2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d11d      	bne.n	8003b3c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <HAL_UART_Receive_IT+0x26>
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e016      	b.n	8003b3e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_UART_Receive_IT+0x38>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e00f      	b.n	8003b3e <HAL_UART_Receive_IT+0x58>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003b2c:	88fb      	ldrh	r3, [r7, #6]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 fa19 	bl	8003f6a <UART_Start_Receive_IT>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	e000      	b.n	8003b3e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003b3c:	2302      	movs	r3, #2
  }
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08a      	sub	sp, #40	; 0x28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10d      	bne.n	8003b9a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <HAL_UART_IRQHandler+0x52>
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 fac9 	bl	800412a <UART_Receive_IT>
      return;
 8003b98:	e17b      	b.n	8003e92 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80b1 	beq.w	8003d04 <HAL_UART_IRQHandler+0x1bc>
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d105      	bne.n	8003bb8 <HAL_UART_IRQHandler+0x70>
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 80a6 	beq.w	8003d04 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <HAL_UART_IRQHandler+0x90>
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	f043 0201 	orr.w	r2, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <HAL_UART_IRQHandler+0xb0>
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	f043 0202 	orr.w	r2, r3, #2
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_UART_IRQHandler+0xd0>
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	f043 0204 	orr.w	r2, r3, #4
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00f      	beq.n	8003c42 <HAL_UART_IRQHandler+0xfa>
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d104      	bne.n	8003c36 <HAL_UART_IRQHandler+0xee>
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d005      	beq.n	8003c42 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f043 0208 	orr.w	r2, r3, #8
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 811e 	beq.w	8003e88 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d007      	beq.n	8003c66 <HAL_UART_IRQHandler+0x11e>
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 fa62 	bl	800412a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bf14      	ite	ne
 8003c74:	2301      	movne	r3, #1
 8003c76:	2300      	moveq	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d102      	bne.n	8003c8e <HAL_UART_IRQHandler+0x146>
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d031      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f9a4 	bl	8003fdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d023      	beq.n	8003cea <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d013      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbe:	4a76      	ldr	r2, [pc, #472]	; (8003e98 <HAL_UART_IRQHandler+0x350>)
 8003cc0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe f8b2 	bl	8001e30 <HAL_DMA_Abort_IT>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d016      	beq.n	8003d00 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cdc:	4610      	mov	r0, r2
 8003cde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce0:	e00e      	b.n	8003d00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f8e3 	bl	8003eae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce8:	e00a      	b.n	8003d00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f8df 	bl	8003eae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf0:	e006      	b.n	8003d00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f8db 	bl	8003eae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003cfe:	e0c3      	b.n	8003e88 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d00:	bf00      	nop
    return;
 8003d02:	e0c1      	b.n	8003e88 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	f040 80a1 	bne.w	8003e50 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	f003 0310 	and.w	r3, r3, #16
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 809b 	beq.w	8003e50 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	f003 0310 	and.w	r3, r3, #16
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8095 	beq.w	8003e50 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d04e      	beq.n	8003de8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003d54:	8a3b      	ldrh	r3, [r7, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 8098 	beq.w	8003e8c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d60:	8a3a      	ldrh	r2, [r7, #16]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	f080 8092 	bcs.w	8003e8c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8a3a      	ldrh	r2, [r7, #16]
 8003d6c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	2b20      	cmp	r3, #32
 8003d76:	d02b      	beq.n	8003dd0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d86:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695a      	ldr	r2, [r3, #20]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0201 	bic.w	r2, r2, #1
 8003d96:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003da6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0210 	bic.w	r2, r2, #16
 8003dc4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fd fff5 	bl	8001dba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	4619      	mov	r1, r3
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f86d 	bl	8003ec0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003de6:	e051      	b.n	8003e8c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d047      	beq.n	8003e90 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003e00:	8a7b      	ldrh	r3, [r7, #18]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d044      	beq.n	8003e90 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e14:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695a      	ldr	r2, [r3, #20]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0201 	bic.w	r2, r2, #1
 8003e24:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0210 	bic.w	r2, r2, #16
 8003e42:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e44:	8a7b      	ldrh	r3, [r7, #18]
 8003e46:	4619      	mov	r1, r3
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f839 	bl	8003ec0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e4e:	e01f      	b.n	8003e90 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d008      	beq.n	8003e6c <HAL_UART_IRQHandler+0x324>
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f8f9 	bl	800405c <UART_Transmit_IT>
    return;
 8003e6a:	e012      	b.n	8003e92 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00d      	beq.n	8003e92 <HAL_UART_IRQHandler+0x34a>
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f93a 	bl	80040fa <UART_EndTransmit_IT>
    return;
 8003e86:	e004      	b.n	8003e92 <HAL_UART_IRQHandler+0x34a>
    return;
 8003e88:	bf00      	nop
 8003e8a:	e002      	b.n	8003e92 <HAL_UART_IRQHandler+0x34a>
      return;
 8003e8c:	bf00      	nop
 8003e8e:	e000      	b.n	8003e92 <HAL_UART_IRQHandler+0x34a>
      return;
 8003e90:	bf00      	nop
  }
}
 8003e92:	3728      	adds	r7, #40	; 0x28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	08004035 	.word	0x08004035

08003e9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr

08003eae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bc80      	pop	{r7}
 8003ed4:	4770      	bx	lr

08003ed6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b084      	sub	sp, #16
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	60f8      	str	r0, [r7, #12]
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	603b      	str	r3, [r7, #0]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee6:	e02c      	b.n	8003f42 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eee:	d028      	beq.n	8003f42 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d007      	beq.n	8003f06 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ef6:	f7fd fe49 	bl	8001b8c <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d21d      	bcs.n	8003f42 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f14:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0201 	bic.w	r2, r2, #1
 8003f24:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e00f      	b.n	8003f62 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	bf0c      	ite	eq
 8003f52:	2301      	moveq	r3, #1
 8003f54:	2300      	movne	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	79fb      	ldrb	r3, [r7, #7]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d0c3      	beq.n	8003ee8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b085      	sub	sp, #20
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	4613      	mov	r3, r2
 8003f76:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	88fa      	ldrh	r2, [r7, #6]
 8003f82:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	88fa      	ldrh	r2, [r7, #6]
 8003f88:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2222      	movs	r2, #34	; 0x22
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fae:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0220 	orr.w	r2, r2, #32
 8003fce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr

08003fdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ff2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
 8004002:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	2b01      	cmp	r3, #1
 800400a:	d107      	bne.n	800401c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0210 	bic.w	r2, r2, #16
 800401a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	631a      	str	r2, [r3, #48]	; 0x30
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr

08004034 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f7ff ff2d 	bl	8003eae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004054:	bf00      	nop
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b21      	cmp	r3, #33	; 0x21
 800406e:	d13e      	bne.n	80040ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004078:	d114      	bne.n	80040a4 <UART_Transmit_IT+0x48>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d110      	bne.n	80040a4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	461a      	mov	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004096:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	1c9a      	adds	r2, r3, #2
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	621a      	str	r2, [r3, #32]
 80040a2:	e008      	b.n	80040b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	1c59      	adds	r1, r3, #1
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6211      	str	r1, [r2, #32]
 80040ae:	781a      	ldrb	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29b      	uxth	r3, r3
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	4619      	mov	r1, r3
 80040c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10f      	bne.n	80040ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	e000      	b.n	80040f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040ee:	2302      	movs	r3, #2
  }
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr

080040fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b082      	sub	sp, #8
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004110:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7ff febe 	bl	8003e9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b086      	sub	sp, #24
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b22      	cmp	r3, #34	; 0x22
 800413c:	f040 8099 	bne.w	8004272 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004148:	d117      	bne.n	800417a <UART_Receive_IT+0x50>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d113      	bne.n	800417a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	b29b      	uxth	r3, r3
 8004164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004168:	b29a      	uxth	r2, r3
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	1c9a      	adds	r2, r3, #2
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	629a      	str	r2, [r3, #40]	; 0x28
 8004178:	e026      	b.n	80041c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004180:	2300      	movs	r3, #0
 8004182:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800418c:	d007      	beq.n	800419e <UART_Receive_IT+0x74>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10a      	bne.n	80041ac <UART_Receive_IT+0x82>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	701a      	strb	r2, [r3, #0]
 80041aa:	e008      	b.n	80041be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	4619      	mov	r1, r3
 80041d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d148      	bne.n	800426e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0220 	bic.w	r2, r2, #32
 80041ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695a      	ldr	r2, [r3, #20]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0201 	bic.w	r2, r2, #1
 800420a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	2b01      	cmp	r3, #1
 800421a:	d123      	bne.n	8004264 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0210 	bic.w	r2, r2, #16
 8004230:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0310 	and.w	r3, r3, #16
 800423c:	2b10      	cmp	r3, #16
 800423e:	d10a      	bne.n	8004256 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800425a:	4619      	mov	r1, r3
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7ff fe2f 	bl	8003ec0 <HAL_UARTEx_RxEventCallback>
 8004262:	e002      	b.n	800426a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7fc ffdf 	bl	8001228 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	e002      	b.n	8004274 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800426e:	2300      	movs	r3, #0
 8004270:	e000      	b.n	8004274 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004272:	2302      	movs	r3, #2
  }
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042b6:	f023 030c 	bic.w	r3, r3, #12
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6812      	ldr	r2, [r2, #0]
 80042be:	68b9      	ldr	r1, [r7, #8]
 80042c0:	430b      	orrs	r3, r1
 80042c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699a      	ldr	r2, [r3, #24]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a2c      	ldr	r2, [pc, #176]	; (8004390 <UART_SetConfig+0x114>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d103      	bne.n	80042ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042e4:	f7fe fbac 	bl	8002a40 <HAL_RCC_GetPCLK2Freq>
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	e002      	b.n	80042f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042ec:	f7fe fb94 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 80042f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	4613      	mov	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	009a      	lsls	r2, r3, #2
 80042fc:	441a      	add	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	fbb2 f3f3 	udiv	r3, r2, r3
 8004308:	4a22      	ldr	r2, [pc, #136]	; (8004394 <UART_SetConfig+0x118>)
 800430a:	fba2 2303 	umull	r2, r3, r2, r3
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	0119      	lsls	r1, r3, #4
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	009a      	lsls	r2, r3, #2
 800431c:	441a      	add	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	fbb2 f2f3 	udiv	r2, r2, r3
 8004328:	4b1a      	ldr	r3, [pc, #104]	; (8004394 <UART_SetConfig+0x118>)
 800432a:	fba3 0302 	umull	r0, r3, r3, r2
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	2064      	movs	r0, #100	; 0x64
 8004332:	fb00 f303 	mul.w	r3, r0, r3
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	3332      	adds	r3, #50	; 0x32
 800433c:	4a15      	ldr	r2, [pc, #84]	; (8004394 <UART_SetConfig+0x118>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004348:	4419      	add	r1, r3
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	009a      	lsls	r2, r3, #2
 8004354:	441a      	add	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004360:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <UART_SetConfig+0x118>)
 8004362:	fba3 0302 	umull	r0, r3, r3, r2
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	2064      	movs	r0, #100	; 0x64
 800436a:	fb00 f303 	mul.w	r3, r0, r3
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	3332      	adds	r3, #50	; 0x32
 8004374:	4a07      	ldr	r2, [pc, #28]	; (8004394 <UART_SetConfig+0x118>)
 8004376:	fba2 2303 	umull	r2, r3, r2, r3
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	f003 020f 	and.w	r2, r3, #15
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	440a      	add	r2, r1
 8004386:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004388:	bf00      	nop
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40013800 	.word	0x40013800
 8004394:	51eb851f 	.word	0x51eb851f

08004398 <__errno>:
 8004398:	4b01      	ldr	r3, [pc, #4]	; (80043a0 <__errno+0x8>)
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	20000030 	.word	0x20000030

080043a4 <__libc_init_array>:
 80043a4:	b570      	push	{r4, r5, r6, lr}
 80043a6:	2600      	movs	r6, #0
 80043a8:	4d0c      	ldr	r5, [pc, #48]	; (80043dc <__libc_init_array+0x38>)
 80043aa:	4c0d      	ldr	r4, [pc, #52]	; (80043e0 <__libc_init_array+0x3c>)
 80043ac:	1b64      	subs	r4, r4, r5
 80043ae:	10a4      	asrs	r4, r4, #2
 80043b0:	42a6      	cmp	r6, r4
 80043b2:	d109      	bne.n	80043c8 <__libc_init_array+0x24>
 80043b4:	f000 fc5c 	bl	8004c70 <_init>
 80043b8:	2600      	movs	r6, #0
 80043ba:	4d0a      	ldr	r5, [pc, #40]	; (80043e4 <__libc_init_array+0x40>)
 80043bc:	4c0a      	ldr	r4, [pc, #40]	; (80043e8 <__libc_init_array+0x44>)
 80043be:	1b64      	subs	r4, r4, r5
 80043c0:	10a4      	asrs	r4, r4, #2
 80043c2:	42a6      	cmp	r6, r4
 80043c4:	d105      	bne.n	80043d2 <__libc_init_array+0x2e>
 80043c6:	bd70      	pop	{r4, r5, r6, pc}
 80043c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043cc:	4798      	blx	r3
 80043ce:	3601      	adds	r6, #1
 80043d0:	e7ee      	b.n	80043b0 <__libc_init_array+0xc>
 80043d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d6:	4798      	blx	r3
 80043d8:	3601      	adds	r6, #1
 80043da:	e7f2      	b.n	80043c2 <__libc_init_array+0x1e>
 80043dc:	08004f80 	.word	0x08004f80
 80043e0:	08004f80 	.word	0x08004f80
 80043e4:	08004f80 	.word	0x08004f80
 80043e8:	08004f84 	.word	0x08004f84

080043ec <memcpy>:
 80043ec:	440a      	add	r2, r1
 80043ee:	4291      	cmp	r1, r2
 80043f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80043f4:	d100      	bne.n	80043f8 <memcpy+0xc>
 80043f6:	4770      	bx	lr
 80043f8:	b510      	push	{r4, lr}
 80043fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043fe:	4291      	cmp	r1, r2
 8004400:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004404:	d1f9      	bne.n	80043fa <memcpy+0xe>
 8004406:	bd10      	pop	{r4, pc}

08004408 <memset>:
 8004408:	4603      	mov	r3, r0
 800440a:	4402      	add	r2, r0
 800440c:	4293      	cmp	r3, r2
 800440e:	d100      	bne.n	8004412 <memset+0xa>
 8004410:	4770      	bx	lr
 8004412:	f803 1b01 	strb.w	r1, [r3], #1
 8004416:	e7f9      	b.n	800440c <memset+0x4>

08004418 <siprintf>:
 8004418:	b40e      	push	{r1, r2, r3}
 800441a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800441e:	b500      	push	{lr}
 8004420:	b09c      	sub	sp, #112	; 0x70
 8004422:	ab1d      	add	r3, sp, #116	; 0x74
 8004424:	9002      	str	r0, [sp, #8]
 8004426:	9006      	str	r0, [sp, #24]
 8004428:	9107      	str	r1, [sp, #28]
 800442a:	9104      	str	r1, [sp, #16]
 800442c:	4808      	ldr	r0, [pc, #32]	; (8004450 <siprintf+0x38>)
 800442e:	4909      	ldr	r1, [pc, #36]	; (8004454 <siprintf+0x3c>)
 8004430:	f853 2b04 	ldr.w	r2, [r3], #4
 8004434:	9105      	str	r1, [sp, #20]
 8004436:	6800      	ldr	r0, [r0, #0]
 8004438:	a902      	add	r1, sp, #8
 800443a:	9301      	str	r3, [sp, #4]
 800443c:	f000 f868 	bl	8004510 <_svfiprintf_r>
 8004440:	2200      	movs	r2, #0
 8004442:	9b02      	ldr	r3, [sp, #8]
 8004444:	701a      	strb	r2, [r3, #0]
 8004446:	b01c      	add	sp, #112	; 0x70
 8004448:	f85d eb04 	ldr.w	lr, [sp], #4
 800444c:	b003      	add	sp, #12
 800444e:	4770      	bx	lr
 8004450:	20000030 	.word	0x20000030
 8004454:	ffff0208 	.word	0xffff0208

08004458 <__ssputs_r>:
 8004458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800445c:	688e      	ldr	r6, [r1, #8]
 800445e:	4682      	mov	sl, r0
 8004460:	429e      	cmp	r6, r3
 8004462:	460c      	mov	r4, r1
 8004464:	4690      	mov	r8, r2
 8004466:	461f      	mov	r7, r3
 8004468:	d838      	bhi.n	80044dc <__ssputs_r+0x84>
 800446a:	898a      	ldrh	r2, [r1, #12]
 800446c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004470:	d032      	beq.n	80044d8 <__ssputs_r+0x80>
 8004472:	6825      	ldr	r5, [r4, #0]
 8004474:	6909      	ldr	r1, [r1, #16]
 8004476:	3301      	adds	r3, #1
 8004478:	eba5 0901 	sub.w	r9, r5, r1
 800447c:	6965      	ldr	r5, [r4, #20]
 800447e:	444b      	add	r3, r9
 8004480:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004484:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004488:	106d      	asrs	r5, r5, #1
 800448a:	429d      	cmp	r5, r3
 800448c:	bf38      	it	cc
 800448e:	461d      	movcc	r5, r3
 8004490:	0553      	lsls	r3, r2, #21
 8004492:	d531      	bpl.n	80044f8 <__ssputs_r+0xa0>
 8004494:	4629      	mov	r1, r5
 8004496:	f000 fb45 	bl	8004b24 <_malloc_r>
 800449a:	4606      	mov	r6, r0
 800449c:	b950      	cbnz	r0, 80044b4 <__ssputs_r+0x5c>
 800449e:	230c      	movs	r3, #12
 80044a0:	f04f 30ff 	mov.w	r0, #4294967295
 80044a4:	f8ca 3000 	str.w	r3, [sl]
 80044a8:	89a3      	ldrh	r3, [r4, #12]
 80044aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ae:	81a3      	strh	r3, [r4, #12]
 80044b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b4:	464a      	mov	r2, r9
 80044b6:	6921      	ldr	r1, [r4, #16]
 80044b8:	f7ff ff98 	bl	80043ec <memcpy>
 80044bc:	89a3      	ldrh	r3, [r4, #12]
 80044be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80044c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c6:	81a3      	strh	r3, [r4, #12]
 80044c8:	6126      	str	r6, [r4, #16]
 80044ca:	444e      	add	r6, r9
 80044cc:	6026      	str	r6, [r4, #0]
 80044ce:	463e      	mov	r6, r7
 80044d0:	6165      	str	r5, [r4, #20]
 80044d2:	eba5 0509 	sub.w	r5, r5, r9
 80044d6:	60a5      	str	r5, [r4, #8]
 80044d8:	42be      	cmp	r6, r7
 80044da:	d900      	bls.n	80044de <__ssputs_r+0x86>
 80044dc:	463e      	mov	r6, r7
 80044de:	4632      	mov	r2, r6
 80044e0:	4641      	mov	r1, r8
 80044e2:	6820      	ldr	r0, [r4, #0]
 80044e4:	f000 fab8 	bl	8004a58 <memmove>
 80044e8:	68a3      	ldr	r3, [r4, #8]
 80044ea:	6822      	ldr	r2, [r4, #0]
 80044ec:	1b9b      	subs	r3, r3, r6
 80044ee:	4432      	add	r2, r6
 80044f0:	2000      	movs	r0, #0
 80044f2:	60a3      	str	r3, [r4, #8]
 80044f4:	6022      	str	r2, [r4, #0]
 80044f6:	e7db      	b.n	80044b0 <__ssputs_r+0x58>
 80044f8:	462a      	mov	r2, r5
 80044fa:	f000 fb6d 	bl	8004bd8 <_realloc_r>
 80044fe:	4606      	mov	r6, r0
 8004500:	2800      	cmp	r0, #0
 8004502:	d1e1      	bne.n	80044c8 <__ssputs_r+0x70>
 8004504:	4650      	mov	r0, sl
 8004506:	6921      	ldr	r1, [r4, #16]
 8004508:	f000 fac0 	bl	8004a8c <_free_r>
 800450c:	e7c7      	b.n	800449e <__ssputs_r+0x46>
	...

08004510 <_svfiprintf_r>:
 8004510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004514:	4698      	mov	r8, r3
 8004516:	898b      	ldrh	r3, [r1, #12]
 8004518:	4607      	mov	r7, r0
 800451a:	061b      	lsls	r3, r3, #24
 800451c:	460d      	mov	r5, r1
 800451e:	4614      	mov	r4, r2
 8004520:	b09d      	sub	sp, #116	; 0x74
 8004522:	d50e      	bpl.n	8004542 <_svfiprintf_r+0x32>
 8004524:	690b      	ldr	r3, [r1, #16]
 8004526:	b963      	cbnz	r3, 8004542 <_svfiprintf_r+0x32>
 8004528:	2140      	movs	r1, #64	; 0x40
 800452a:	f000 fafb 	bl	8004b24 <_malloc_r>
 800452e:	6028      	str	r0, [r5, #0]
 8004530:	6128      	str	r0, [r5, #16]
 8004532:	b920      	cbnz	r0, 800453e <_svfiprintf_r+0x2e>
 8004534:	230c      	movs	r3, #12
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	f04f 30ff 	mov.w	r0, #4294967295
 800453c:	e0d1      	b.n	80046e2 <_svfiprintf_r+0x1d2>
 800453e:	2340      	movs	r3, #64	; 0x40
 8004540:	616b      	str	r3, [r5, #20]
 8004542:	2300      	movs	r3, #0
 8004544:	9309      	str	r3, [sp, #36]	; 0x24
 8004546:	2320      	movs	r3, #32
 8004548:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800454c:	2330      	movs	r3, #48	; 0x30
 800454e:	f04f 0901 	mov.w	r9, #1
 8004552:	f8cd 800c 	str.w	r8, [sp, #12]
 8004556:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80046fc <_svfiprintf_r+0x1ec>
 800455a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800455e:	4623      	mov	r3, r4
 8004560:	469a      	mov	sl, r3
 8004562:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004566:	b10a      	cbz	r2, 800456c <_svfiprintf_r+0x5c>
 8004568:	2a25      	cmp	r2, #37	; 0x25
 800456a:	d1f9      	bne.n	8004560 <_svfiprintf_r+0x50>
 800456c:	ebba 0b04 	subs.w	fp, sl, r4
 8004570:	d00b      	beq.n	800458a <_svfiprintf_r+0x7a>
 8004572:	465b      	mov	r3, fp
 8004574:	4622      	mov	r2, r4
 8004576:	4629      	mov	r1, r5
 8004578:	4638      	mov	r0, r7
 800457a:	f7ff ff6d 	bl	8004458 <__ssputs_r>
 800457e:	3001      	adds	r0, #1
 8004580:	f000 80aa 	beq.w	80046d8 <_svfiprintf_r+0x1c8>
 8004584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004586:	445a      	add	r2, fp
 8004588:	9209      	str	r2, [sp, #36]	; 0x24
 800458a:	f89a 3000 	ldrb.w	r3, [sl]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 80a2 	beq.w	80046d8 <_svfiprintf_r+0x1c8>
 8004594:	2300      	movs	r3, #0
 8004596:	f04f 32ff 	mov.w	r2, #4294967295
 800459a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800459e:	f10a 0a01 	add.w	sl, sl, #1
 80045a2:	9304      	str	r3, [sp, #16]
 80045a4:	9307      	str	r3, [sp, #28]
 80045a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045aa:	931a      	str	r3, [sp, #104]	; 0x68
 80045ac:	4654      	mov	r4, sl
 80045ae:	2205      	movs	r2, #5
 80045b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045b4:	4851      	ldr	r0, [pc, #324]	; (80046fc <_svfiprintf_r+0x1ec>)
 80045b6:	f000 fa41 	bl	8004a3c <memchr>
 80045ba:	9a04      	ldr	r2, [sp, #16]
 80045bc:	b9d8      	cbnz	r0, 80045f6 <_svfiprintf_r+0xe6>
 80045be:	06d0      	lsls	r0, r2, #27
 80045c0:	bf44      	itt	mi
 80045c2:	2320      	movmi	r3, #32
 80045c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045c8:	0711      	lsls	r1, r2, #28
 80045ca:	bf44      	itt	mi
 80045cc:	232b      	movmi	r3, #43	; 0x2b
 80045ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045d2:	f89a 3000 	ldrb.w	r3, [sl]
 80045d6:	2b2a      	cmp	r3, #42	; 0x2a
 80045d8:	d015      	beq.n	8004606 <_svfiprintf_r+0xf6>
 80045da:	4654      	mov	r4, sl
 80045dc:	2000      	movs	r0, #0
 80045de:	f04f 0c0a 	mov.w	ip, #10
 80045e2:	9a07      	ldr	r2, [sp, #28]
 80045e4:	4621      	mov	r1, r4
 80045e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045ea:	3b30      	subs	r3, #48	; 0x30
 80045ec:	2b09      	cmp	r3, #9
 80045ee:	d94e      	bls.n	800468e <_svfiprintf_r+0x17e>
 80045f0:	b1b0      	cbz	r0, 8004620 <_svfiprintf_r+0x110>
 80045f2:	9207      	str	r2, [sp, #28]
 80045f4:	e014      	b.n	8004620 <_svfiprintf_r+0x110>
 80045f6:	eba0 0308 	sub.w	r3, r0, r8
 80045fa:	fa09 f303 	lsl.w	r3, r9, r3
 80045fe:	4313      	orrs	r3, r2
 8004600:	46a2      	mov	sl, r4
 8004602:	9304      	str	r3, [sp, #16]
 8004604:	e7d2      	b.n	80045ac <_svfiprintf_r+0x9c>
 8004606:	9b03      	ldr	r3, [sp, #12]
 8004608:	1d19      	adds	r1, r3, #4
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	9103      	str	r1, [sp, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	bfbb      	ittet	lt
 8004612:	425b      	neglt	r3, r3
 8004614:	f042 0202 	orrlt.w	r2, r2, #2
 8004618:	9307      	strge	r3, [sp, #28]
 800461a:	9307      	strlt	r3, [sp, #28]
 800461c:	bfb8      	it	lt
 800461e:	9204      	strlt	r2, [sp, #16]
 8004620:	7823      	ldrb	r3, [r4, #0]
 8004622:	2b2e      	cmp	r3, #46	; 0x2e
 8004624:	d10c      	bne.n	8004640 <_svfiprintf_r+0x130>
 8004626:	7863      	ldrb	r3, [r4, #1]
 8004628:	2b2a      	cmp	r3, #42	; 0x2a
 800462a:	d135      	bne.n	8004698 <_svfiprintf_r+0x188>
 800462c:	9b03      	ldr	r3, [sp, #12]
 800462e:	3402      	adds	r4, #2
 8004630:	1d1a      	adds	r2, r3, #4
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	9203      	str	r2, [sp, #12]
 8004636:	2b00      	cmp	r3, #0
 8004638:	bfb8      	it	lt
 800463a:	f04f 33ff 	movlt.w	r3, #4294967295
 800463e:	9305      	str	r3, [sp, #20]
 8004640:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800470c <_svfiprintf_r+0x1fc>
 8004644:	2203      	movs	r2, #3
 8004646:	4650      	mov	r0, sl
 8004648:	7821      	ldrb	r1, [r4, #0]
 800464a:	f000 f9f7 	bl	8004a3c <memchr>
 800464e:	b140      	cbz	r0, 8004662 <_svfiprintf_r+0x152>
 8004650:	2340      	movs	r3, #64	; 0x40
 8004652:	eba0 000a 	sub.w	r0, r0, sl
 8004656:	fa03 f000 	lsl.w	r0, r3, r0
 800465a:	9b04      	ldr	r3, [sp, #16]
 800465c:	3401      	adds	r4, #1
 800465e:	4303      	orrs	r3, r0
 8004660:	9304      	str	r3, [sp, #16]
 8004662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004666:	2206      	movs	r2, #6
 8004668:	4825      	ldr	r0, [pc, #148]	; (8004700 <_svfiprintf_r+0x1f0>)
 800466a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800466e:	f000 f9e5 	bl	8004a3c <memchr>
 8004672:	2800      	cmp	r0, #0
 8004674:	d038      	beq.n	80046e8 <_svfiprintf_r+0x1d8>
 8004676:	4b23      	ldr	r3, [pc, #140]	; (8004704 <_svfiprintf_r+0x1f4>)
 8004678:	bb1b      	cbnz	r3, 80046c2 <_svfiprintf_r+0x1b2>
 800467a:	9b03      	ldr	r3, [sp, #12]
 800467c:	3307      	adds	r3, #7
 800467e:	f023 0307 	bic.w	r3, r3, #7
 8004682:	3308      	adds	r3, #8
 8004684:	9303      	str	r3, [sp, #12]
 8004686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004688:	4433      	add	r3, r6
 800468a:	9309      	str	r3, [sp, #36]	; 0x24
 800468c:	e767      	b.n	800455e <_svfiprintf_r+0x4e>
 800468e:	460c      	mov	r4, r1
 8004690:	2001      	movs	r0, #1
 8004692:	fb0c 3202 	mla	r2, ip, r2, r3
 8004696:	e7a5      	b.n	80045e4 <_svfiprintf_r+0xd4>
 8004698:	2300      	movs	r3, #0
 800469a:	f04f 0c0a 	mov.w	ip, #10
 800469e:	4619      	mov	r1, r3
 80046a0:	3401      	adds	r4, #1
 80046a2:	9305      	str	r3, [sp, #20]
 80046a4:	4620      	mov	r0, r4
 80046a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046aa:	3a30      	subs	r2, #48	; 0x30
 80046ac:	2a09      	cmp	r2, #9
 80046ae:	d903      	bls.n	80046b8 <_svfiprintf_r+0x1a8>
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0c5      	beq.n	8004640 <_svfiprintf_r+0x130>
 80046b4:	9105      	str	r1, [sp, #20]
 80046b6:	e7c3      	b.n	8004640 <_svfiprintf_r+0x130>
 80046b8:	4604      	mov	r4, r0
 80046ba:	2301      	movs	r3, #1
 80046bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80046c0:	e7f0      	b.n	80046a4 <_svfiprintf_r+0x194>
 80046c2:	ab03      	add	r3, sp, #12
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	462a      	mov	r2, r5
 80046c8:	4638      	mov	r0, r7
 80046ca:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <_svfiprintf_r+0x1f8>)
 80046cc:	a904      	add	r1, sp, #16
 80046ce:	f3af 8000 	nop.w
 80046d2:	1c42      	adds	r2, r0, #1
 80046d4:	4606      	mov	r6, r0
 80046d6:	d1d6      	bne.n	8004686 <_svfiprintf_r+0x176>
 80046d8:	89ab      	ldrh	r3, [r5, #12]
 80046da:	065b      	lsls	r3, r3, #25
 80046dc:	f53f af2c 	bmi.w	8004538 <_svfiprintf_r+0x28>
 80046e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046e2:	b01d      	add	sp, #116	; 0x74
 80046e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e8:	ab03      	add	r3, sp, #12
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	462a      	mov	r2, r5
 80046ee:	4638      	mov	r0, r7
 80046f0:	4b05      	ldr	r3, [pc, #20]	; (8004708 <_svfiprintf_r+0x1f8>)
 80046f2:	a904      	add	r1, sp, #16
 80046f4:	f000 f87c 	bl	80047f0 <_printf_i>
 80046f8:	e7eb      	b.n	80046d2 <_svfiprintf_r+0x1c2>
 80046fa:	bf00      	nop
 80046fc:	08004f4c 	.word	0x08004f4c
 8004700:	08004f56 	.word	0x08004f56
 8004704:	00000000 	.word	0x00000000
 8004708:	08004459 	.word	0x08004459
 800470c:	08004f52 	.word	0x08004f52

08004710 <_printf_common>:
 8004710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004714:	4616      	mov	r6, r2
 8004716:	4699      	mov	r9, r3
 8004718:	688a      	ldr	r2, [r1, #8]
 800471a:	690b      	ldr	r3, [r1, #16]
 800471c:	4607      	mov	r7, r0
 800471e:	4293      	cmp	r3, r2
 8004720:	bfb8      	it	lt
 8004722:	4613      	movlt	r3, r2
 8004724:	6033      	str	r3, [r6, #0]
 8004726:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800472a:	460c      	mov	r4, r1
 800472c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004730:	b10a      	cbz	r2, 8004736 <_printf_common+0x26>
 8004732:	3301      	adds	r3, #1
 8004734:	6033      	str	r3, [r6, #0]
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	0699      	lsls	r1, r3, #26
 800473a:	bf42      	ittt	mi
 800473c:	6833      	ldrmi	r3, [r6, #0]
 800473e:	3302      	addmi	r3, #2
 8004740:	6033      	strmi	r3, [r6, #0]
 8004742:	6825      	ldr	r5, [r4, #0]
 8004744:	f015 0506 	ands.w	r5, r5, #6
 8004748:	d106      	bne.n	8004758 <_printf_common+0x48>
 800474a:	f104 0a19 	add.w	sl, r4, #25
 800474e:	68e3      	ldr	r3, [r4, #12]
 8004750:	6832      	ldr	r2, [r6, #0]
 8004752:	1a9b      	subs	r3, r3, r2
 8004754:	42ab      	cmp	r3, r5
 8004756:	dc28      	bgt.n	80047aa <_printf_common+0x9a>
 8004758:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800475c:	1e13      	subs	r3, r2, #0
 800475e:	6822      	ldr	r2, [r4, #0]
 8004760:	bf18      	it	ne
 8004762:	2301      	movne	r3, #1
 8004764:	0692      	lsls	r2, r2, #26
 8004766:	d42d      	bmi.n	80047c4 <_printf_common+0xb4>
 8004768:	4649      	mov	r1, r9
 800476a:	4638      	mov	r0, r7
 800476c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004770:	47c0      	blx	r8
 8004772:	3001      	adds	r0, #1
 8004774:	d020      	beq.n	80047b8 <_printf_common+0xa8>
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	68e5      	ldr	r5, [r4, #12]
 800477a:	f003 0306 	and.w	r3, r3, #6
 800477e:	2b04      	cmp	r3, #4
 8004780:	bf18      	it	ne
 8004782:	2500      	movne	r5, #0
 8004784:	6832      	ldr	r2, [r6, #0]
 8004786:	f04f 0600 	mov.w	r6, #0
 800478a:	68a3      	ldr	r3, [r4, #8]
 800478c:	bf08      	it	eq
 800478e:	1aad      	subeq	r5, r5, r2
 8004790:	6922      	ldr	r2, [r4, #16]
 8004792:	bf08      	it	eq
 8004794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004798:	4293      	cmp	r3, r2
 800479a:	bfc4      	itt	gt
 800479c:	1a9b      	subgt	r3, r3, r2
 800479e:	18ed      	addgt	r5, r5, r3
 80047a0:	341a      	adds	r4, #26
 80047a2:	42b5      	cmp	r5, r6
 80047a4:	d11a      	bne.n	80047dc <_printf_common+0xcc>
 80047a6:	2000      	movs	r0, #0
 80047a8:	e008      	b.n	80047bc <_printf_common+0xac>
 80047aa:	2301      	movs	r3, #1
 80047ac:	4652      	mov	r2, sl
 80047ae:	4649      	mov	r1, r9
 80047b0:	4638      	mov	r0, r7
 80047b2:	47c0      	blx	r8
 80047b4:	3001      	adds	r0, #1
 80047b6:	d103      	bne.n	80047c0 <_printf_common+0xb0>
 80047b8:	f04f 30ff 	mov.w	r0, #4294967295
 80047bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047c0:	3501      	adds	r5, #1
 80047c2:	e7c4      	b.n	800474e <_printf_common+0x3e>
 80047c4:	2030      	movs	r0, #48	; 0x30
 80047c6:	18e1      	adds	r1, r4, r3
 80047c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047d2:	4422      	add	r2, r4
 80047d4:	3302      	adds	r3, #2
 80047d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047da:	e7c5      	b.n	8004768 <_printf_common+0x58>
 80047dc:	2301      	movs	r3, #1
 80047de:	4622      	mov	r2, r4
 80047e0:	4649      	mov	r1, r9
 80047e2:	4638      	mov	r0, r7
 80047e4:	47c0      	blx	r8
 80047e6:	3001      	adds	r0, #1
 80047e8:	d0e6      	beq.n	80047b8 <_printf_common+0xa8>
 80047ea:	3601      	adds	r6, #1
 80047ec:	e7d9      	b.n	80047a2 <_printf_common+0x92>
	...

080047f0 <_printf_i>:
 80047f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047f4:	460c      	mov	r4, r1
 80047f6:	7e27      	ldrb	r7, [r4, #24]
 80047f8:	4691      	mov	r9, r2
 80047fa:	2f78      	cmp	r7, #120	; 0x78
 80047fc:	4680      	mov	r8, r0
 80047fe:	469a      	mov	sl, r3
 8004800:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004802:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004806:	d807      	bhi.n	8004818 <_printf_i+0x28>
 8004808:	2f62      	cmp	r7, #98	; 0x62
 800480a:	d80a      	bhi.n	8004822 <_printf_i+0x32>
 800480c:	2f00      	cmp	r7, #0
 800480e:	f000 80d9 	beq.w	80049c4 <_printf_i+0x1d4>
 8004812:	2f58      	cmp	r7, #88	; 0x58
 8004814:	f000 80a4 	beq.w	8004960 <_printf_i+0x170>
 8004818:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800481c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004820:	e03a      	b.n	8004898 <_printf_i+0xa8>
 8004822:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004826:	2b15      	cmp	r3, #21
 8004828:	d8f6      	bhi.n	8004818 <_printf_i+0x28>
 800482a:	a001      	add	r0, pc, #4	; (adr r0, 8004830 <_printf_i+0x40>)
 800482c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004830:	08004889 	.word	0x08004889
 8004834:	0800489d 	.word	0x0800489d
 8004838:	08004819 	.word	0x08004819
 800483c:	08004819 	.word	0x08004819
 8004840:	08004819 	.word	0x08004819
 8004844:	08004819 	.word	0x08004819
 8004848:	0800489d 	.word	0x0800489d
 800484c:	08004819 	.word	0x08004819
 8004850:	08004819 	.word	0x08004819
 8004854:	08004819 	.word	0x08004819
 8004858:	08004819 	.word	0x08004819
 800485c:	080049ab 	.word	0x080049ab
 8004860:	080048cd 	.word	0x080048cd
 8004864:	0800498d 	.word	0x0800498d
 8004868:	08004819 	.word	0x08004819
 800486c:	08004819 	.word	0x08004819
 8004870:	080049cd 	.word	0x080049cd
 8004874:	08004819 	.word	0x08004819
 8004878:	080048cd 	.word	0x080048cd
 800487c:	08004819 	.word	0x08004819
 8004880:	08004819 	.word	0x08004819
 8004884:	08004995 	.word	0x08004995
 8004888:	680b      	ldr	r3, [r1, #0]
 800488a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800488e:	1d1a      	adds	r2, r3, #4
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	600a      	str	r2, [r1, #0]
 8004894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004898:	2301      	movs	r3, #1
 800489a:	e0a4      	b.n	80049e6 <_printf_i+0x1f6>
 800489c:	6825      	ldr	r5, [r4, #0]
 800489e:	6808      	ldr	r0, [r1, #0]
 80048a0:	062e      	lsls	r6, r5, #24
 80048a2:	f100 0304 	add.w	r3, r0, #4
 80048a6:	d50a      	bpl.n	80048be <_printf_i+0xce>
 80048a8:	6805      	ldr	r5, [r0, #0]
 80048aa:	600b      	str	r3, [r1, #0]
 80048ac:	2d00      	cmp	r5, #0
 80048ae:	da03      	bge.n	80048b8 <_printf_i+0xc8>
 80048b0:	232d      	movs	r3, #45	; 0x2d
 80048b2:	426d      	negs	r5, r5
 80048b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048b8:	230a      	movs	r3, #10
 80048ba:	485e      	ldr	r0, [pc, #376]	; (8004a34 <_printf_i+0x244>)
 80048bc:	e019      	b.n	80048f2 <_printf_i+0x102>
 80048be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80048c2:	6805      	ldr	r5, [r0, #0]
 80048c4:	600b      	str	r3, [r1, #0]
 80048c6:	bf18      	it	ne
 80048c8:	b22d      	sxthne	r5, r5
 80048ca:	e7ef      	b.n	80048ac <_printf_i+0xbc>
 80048cc:	680b      	ldr	r3, [r1, #0]
 80048ce:	6825      	ldr	r5, [r4, #0]
 80048d0:	1d18      	adds	r0, r3, #4
 80048d2:	6008      	str	r0, [r1, #0]
 80048d4:	0628      	lsls	r0, r5, #24
 80048d6:	d501      	bpl.n	80048dc <_printf_i+0xec>
 80048d8:	681d      	ldr	r5, [r3, #0]
 80048da:	e002      	b.n	80048e2 <_printf_i+0xf2>
 80048dc:	0669      	lsls	r1, r5, #25
 80048de:	d5fb      	bpl.n	80048d8 <_printf_i+0xe8>
 80048e0:	881d      	ldrh	r5, [r3, #0]
 80048e2:	2f6f      	cmp	r7, #111	; 0x6f
 80048e4:	bf0c      	ite	eq
 80048e6:	2308      	moveq	r3, #8
 80048e8:	230a      	movne	r3, #10
 80048ea:	4852      	ldr	r0, [pc, #328]	; (8004a34 <_printf_i+0x244>)
 80048ec:	2100      	movs	r1, #0
 80048ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048f2:	6866      	ldr	r6, [r4, #4]
 80048f4:	2e00      	cmp	r6, #0
 80048f6:	bfa8      	it	ge
 80048f8:	6821      	ldrge	r1, [r4, #0]
 80048fa:	60a6      	str	r6, [r4, #8]
 80048fc:	bfa4      	itt	ge
 80048fe:	f021 0104 	bicge.w	r1, r1, #4
 8004902:	6021      	strge	r1, [r4, #0]
 8004904:	b90d      	cbnz	r5, 800490a <_printf_i+0x11a>
 8004906:	2e00      	cmp	r6, #0
 8004908:	d04d      	beq.n	80049a6 <_printf_i+0x1b6>
 800490a:	4616      	mov	r6, r2
 800490c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004910:	fb03 5711 	mls	r7, r3, r1, r5
 8004914:	5dc7      	ldrb	r7, [r0, r7]
 8004916:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800491a:	462f      	mov	r7, r5
 800491c:	42bb      	cmp	r3, r7
 800491e:	460d      	mov	r5, r1
 8004920:	d9f4      	bls.n	800490c <_printf_i+0x11c>
 8004922:	2b08      	cmp	r3, #8
 8004924:	d10b      	bne.n	800493e <_printf_i+0x14e>
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	07df      	lsls	r7, r3, #31
 800492a:	d508      	bpl.n	800493e <_printf_i+0x14e>
 800492c:	6923      	ldr	r3, [r4, #16]
 800492e:	6861      	ldr	r1, [r4, #4]
 8004930:	4299      	cmp	r1, r3
 8004932:	bfde      	ittt	le
 8004934:	2330      	movle	r3, #48	; 0x30
 8004936:	f806 3c01 	strble.w	r3, [r6, #-1]
 800493a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800493e:	1b92      	subs	r2, r2, r6
 8004940:	6122      	str	r2, [r4, #16]
 8004942:	464b      	mov	r3, r9
 8004944:	4621      	mov	r1, r4
 8004946:	4640      	mov	r0, r8
 8004948:	f8cd a000 	str.w	sl, [sp]
 800494c:	aa03      	add	r2, sp, #12
 800494e:	f7ff fedf 	bl	8004710 <_printf_common>
 8004952:	3001      	adds	r0, #1
 8004954:	d14c      	bne.n	80049f0 <_printf_i+0x200>
 8004956:	f04f 30ff 	mov.w	r0, #4294967295
 800495a:	b004      	add	sp, #16
 800495c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004960:	4834      	ldr	r0, [pc, #208]	; (8004a34 <_printf_i+0x244>)
 8004962:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004966:	680e      	ldr	r6, [r1, #0]
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	f856 5b04 	ldr.w	r5, [r6], #4
 800496e:	061f      	lsls	r7, r3, #24
 8004970:	600e      	str	r6, [r1, #0]
 8004972:	d514      	bpl.n	800499e <_printf_i+0x1ae>
 8004974:	07d9      	lsls	r1, r3, #31
 8004976:	bf44      	itt	mi
 8004978:	f043 0320 	orrmi.w	r3, r3, #32
 800497c:	6023      	strmi	r3, [r4, #0]
 800497e:	b91d      	cbnz	r5, 8004988 <_printf_i+0x198>
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	f023 0320 	bic.w	r3, r3, #32
 8004986:	6023      	str	r3, [r4, #0]
 8004988:	2310      	movs	r3, #16
 800498a:	e7af      	b.n	80048ec <_printf_i+0xfc>
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	f043 0320 	orr.w	r3, r3, #32
 8004992:	6023      	str	r3, [r4, #0]
 8004994:	2378      	movs	r3, #120	; 0x78
 8004996:	4828      	ldr	r0, [pc, #160]	; (8004a38 <_printf_i+0x248>)
 8004998:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800499c:	e7e3      	b.n	8004966 <_printf_i+0x176>
 800499e:	065e      	lsls	r6, r3, #25
 80049a0:	bf48      	it	mi
 80049a2:	b2ad      	uxthmi	r5, r5
 80049a4:	e7e6      	b.n	8004974 <_printf_i+0x184>
 80049a6:	4616      	mov	r6, r2
 80049a8:	e7bb      	b.n	8004922 <_printf_i+0x132>
 80049aa:	680b      	ldr	r3, [r1, #0]
 80049ac:	6826      	ldr	r6, [r4, #0]
 80049ae:	1d1d      	adds	r5, r3, #4
 80049b0:	6960      	ldr	r0, [r4, #20]
 80049b2:	600d      	str	r5, [r1, #0]
 80049b4:	0635      	lsls	r5, r6, #24
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	d501      	bpl.n	80049be <_printf_i+0x1ce>
 80049ba:	6018      	str	r0, [r3, #0]
 80049bc:	e002      	b.n	80049c4 <_printf_i+0x1d4>
 80049be:	0671      	lsls	r1, r6, #25
 80049c0:	d5fb      	bpl.n	80049ba <_printf_i+0x1ca>
 80049c2:	8018      	strh	r0, [r3, #0]
 80049c4:	2300      	movs	r3, #0
 80049c6:	4616      	mov	r6, r2
 80049c8:	6123      	str	r3, [r4, #16]
 80049ca:	e7ba      	b.n	8004942 <_printf_i+0x152>
 80049cc:	680b      	ldr	r3, [r1, #0]
 80049ce:	1d1a      	adds	r2, r3, #4
 80049d0:	600a      	str	r2, [r1, #0]
 80049d2:	681e      	ldr	r6, [r3, #0]
 80049d4:	2100      	movs	r1, #0
 80049d6:	4630      	mov	r0, r6
 80049d8:	6862      	ldr	r2, [r4, #4]
 80049da:	f000 f82f 	bl	8004a3c <memchr>
 80049de:	b108      	cbz	r0, 80049e4 <_printf_i+0x1f4>
 80049e0:	1b80      	subs	r0, r0, r6
 80049e2:	6060      	str	r0, [r4, #4]
 80049e4:	6863      	ldr	r3, [r4, #4]
 80049e6:	6123      	str	r3, [r4, #16]
 80049e8:	2300      	movs	r3, #0
 80049ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ee:	e7a8      	b.n	8004942 <_printf_i+0x152>
 80049f0:	4632      	mov	r2, r6
 80049f2:	4649      	mov	r1, r9
 80049f4:	4640      	mov	r0, r8
 80049f6:	6923      	ldr	r3, [r4, #16]
 80049f8:	47d0      	blx	sl
 80049fa:	3001      	adds	r0, #1
 80049fc:	d0ab      	beq.n	8004956 <_printf_i+0x166>
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	079b      	lsls	r3, r3, #30
 8004a02:	d413      	bmi.n	8004a2c <_printf_i+0x23c>
 8004a04:	68e0      	ldr	r0, [r4, #12]
 8004a06:	9b03      	ldr	r3, [sp, #12]
 8004a08:	4298      	cmp	r0, r3
 8004a0a:	bfb8      	it	lt
 8004a0c:	4618      	movlt	r0, r3
 8004a0e:	e7a4      	b.n	800495a <_printf_i+0x16a>
 8004a10:	2301      	movs	r3, #1
 8004a12:	4632      	mov	r2, r6
 8004a14:	4649      	mov	r1, r9
 8004a16:	4640      	mov	r0, r8
 8004a18:	47d0      	blx	sl
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	d09b      	beq.n	8004956 <_printf_i+0x166>
 8004a1e:	3501      	adds	r5, #1
 8004a20:	68e3      	ldr	r3, [r4, #12]
 8004a22:	9903      	ldr	r1, [sp, #12]
 8004a24:	1a5b      	subs	r3, r3, r1
 8004a26:	42ab      	cmp	r3, r5
 8004a28:	dcf2      	bgt.n	8004a10 <_printf_i+0x220>
 8004a2a:	e7eb      	b.n	8004a04 <_printf_i+0x214>
 8004a2c:	2500      	movs	r5, #0
 8004a2e:	f104 0619 	add.w	r6, r4, #25
 8004a32:	e7f5      	b.n	8004a20 <_printf_i+0x230>
 8004a34:	08004f5d 	.word	0x08004f5d
 8004a38:	08004f6e 	.word	0x08004f6e

08004a3c <memchr>:
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	b510      	push	{r4, lr}
 8004a40:	b2c9      	uxtb	r1, r1
 8004a42:	4402      	add	r2, r0
 8004a44:	4293      	cmp	r3, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	d101      	bne.n	8004a4e <memchr+0x12>
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	e003      	b.n	8004a56 <memchr+0x1a>
 8004a4e:	7804      	ldrb	r4, [r0, #0]
 8004a50:	3301      	adds	r3, #1
 8004a52:	428c      	cmp	r4, r1
 8004a54:	d1f6      	bne.n	8004a44 <memchr+0x8>
 8004a56:	bd10      	pop	{r4, pc}

08004a58 <memmove>:
 8004a58:	4288      	cmp	r0, r1
 8004a5a:	b510      	push	{r4, lr}
 8004a5c:	eb01 0402 	add.w	r4, r1, r2
 8004a60:	d902      	bls.n	8004a68 <memmove+0x10>
 8004a62:	4284      	cmp	r4, r0
 8004a64:	4623      	mov	r3, r4
 8004a66:	d807      	bhi.n	8004a78 <memmove+0x20>
 8004a68:	1e43      	subs	r3, r0, #1
 8004a6a:	42a1      	cmp	r1, r4
 8004a6c:	d008      	beq.n	8004a80 <memmove+0x28>
 8004a6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a76:	e7f8      	b.n	8004a6a <memmove+0x12>
 8004a78:	4601      	mov	r1, r0
 8004a7a:	4402      	add	r2, r0
 8004a7c:	428a      	cmp	r2, r1
 8004a7e:	d100      	bne.n	8004a82 <memmove+0x2a>
 8004a80:	bd10      	pop	{r4, pc}
 8004a82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a8a:	e7f7      	b.n	8004a7c <memmove+0x24>

08004a8c <_free_r>:
 8004a8c:	b538      	push	{r3, r4, r5, lr}
 8004a8e:	4605      	mov	r5, r0
 8004a90:	2900      	cmp	r1, #0
 8004a92:	d043      	beq.n	8004b1c <_free_r+0x90>
 8004a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a98:	1f0c      	subs	r4, r1, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bfb8      	it	lt
 8004a9e:	18e4      	addlt	r4, r4, r3
 8004aa0:	f000 f8d0 	bl	8004c44 <__malloc_lock>
 8004aa4:	4a1e      	ldr	r2, [pc, #120]	; (8004b20 <_free_r+0x94>)
 8004aa6:	6813      	ldr	r3, [r2, #0]
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	b933      	cbnz	r3, 8004aba <_free_r+0x2e>
 8004aac:	6063      	str	r3, [r4, #4]
 8004aae:	6014      	str	r4, [r2, #0]
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ab6:	f000 b8cb 	b.w	8004c50 <__malloc_unlock>
 8004aba:	42a3      	cmp	r3, r4
 8004abc:	d90a      	bls.n	8004ad4 <_free_r+0x48>
 8004abe:	6821      	ldr	r1, [r4, #0]
 8004ac0:	1862      	adds	r2, r4, r1
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	bf01      	itttt	eq
 8004ac6:	681a      	ldreq	r2, [r3, #0]
 8004ac8:	685b      	ldreq	r3, [r3, #4]
 8004aca:	1852      	addeq	r2, r2, r1
 8004acc:	6022      	streq	r2, [r4, #0]
 8004ace:	6063      	str	r3, [r4, #4]
 8004ad0:	6004      	str	r4, [r0, #0]
 8004ad2:	e7ed      	b.n	8004ab0 <_free_r+0x24>
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	b10b      	cbz	r3, 8004ade <_free_r+0x52>
 8004ada:	42a3      	cmp	r3, r4
 8004adc:	d9fa      	bls.n	8004ad4 <_free_r+0x48>
 8004ade:	6811      	ldr	r1, [r2, #0]
 8004ae0:	1850      	adds	r0, r2, r1
 8004ae2:	42a0      	cmp	r0, r4
 8004ae4:	d10b      	bne.n	8004afe <_free_r+0x72>
 8004ae6:	6820      	ldr	r0, [r4, #0]
 8004ae8:	4401      	add	r1, r0
 8004aea:	1850      	adds	r0, r2, r1
 8004aec:	4283      	cmp	r3, r0
 8004aee:	6011      	str	r1, [r2, #0]
 8004af0:	d1de      	bne.n	8004ab0 <_free_r+0x24>
 8004af2:	6818      	ldr	r0, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	4401      	add	r1, r0
 8004af8:	6011      	str	r1, [r2, #0]
 8004afa:	6053      	str	r3, [r2, #4]
 8004afc:	e7d8      	b.n	8004ab0 <_free_r+0x24>
 8004afe:	d902      	bls.n	8004b06 <_free_r+0x7a>
 8004b00:	230c      	movs	r3, #12
 8004b02:	602b      	str	r3, [r5, #0]
 8004b04:	e7d4      	b.n	8004ab0 <_free_r+0x24>
 8004b06:	6820      	ldr	r0, [r4, #0]
 8004b08:	1821      	adds	r1, r4, r0
 8004b0a:	428b      	cmp	r3, r1
 8004b0c:	bf01      	itttt	eq
 8004b0e:	6819      	ldreq	r1, [r3, #0]
 8004b10:	685b      	ldreq	r3, [r3, #4]
 8004b12:	1809      	addeq	r1, r1, r0
 8004b14:	6021      	streq	r1, [r4, #0]
 8004b16:	6063      	str	r3, [r4, #4]
 8004b18:	6054      	str	r4, [r2, #4]
 8004b1a:	e7c9      	b.n	8004ab0 <_free_r+0x24>
 8004b1c:	bd38      	pop	{r3, r4, r5, pc}
 8004b1e:	bf00      	nop
 8004b20:	200000c0 	.word	0x200000c0

08004b24 <_malloc_r>:
 8004b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b26:	1ccd      	adds	r5, r1, #3
 8004b28:	f025 0503 	bic.w	r5, r5, #3
 8004b2c:	3508      	adds	r5, #8
 8004b2e:	2d0c      	cmp	r5, #12
 8004b30:	bf38      	it	cc
 8004b32:	250c      	movcc	r5, #12
 8004b34:	2d00      	cmp	r5, #0
 8004b36:	4606      	mov	r6, r0
 8004b38:	db01      	blt.n	8004b3e <_malloc_r+0x1a>
 8004b3a:	42a9      	cmp	r1, r5
 8004b3c:	d903      	bls.n	8004b46 <_malloc_r+0x22>
 8004b3e:	230c      	movs	r3, #12
 8004b40:	6033      	str	r3, [r6, #0]
 8004b42:	2000      	movs	r0, #0
 8004b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b46:	f000 f87d 	bl	8004c44 <__malloc_lock>
 8004b4a:	4921      	ldr	r1, [pc, #132]	; (8004bd0 <_malloc_r+0xac>)
 8004b4c:	680a      	ldr	r2, [r1, #0]
 8004b4e:	4614      	mov	r4, r2
 8004b50:	b99c      	cbnz	r4, 8004b7a <_malloc_r+0x56>
 8004b52:	4f20      	ldr	r7, [pc, #128]	; (8004bd4 <_malloc_r+0xb0>)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	b923      	cbnz	r3, 8004b62 <_malloc_r+0x3e>
 8004b58:	4621      	mov	r1, r4
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	f000 f862 	bl	8004c24 <_sbrk_r>
 8004b60:	6038      	str	r0, [r7, #0]
 8004b62:	4629      	mov	r1, r5
 8004b64:	4630      	mov	r0, r6
 8004b66:	f000 f85d 	bl	8004c24 <_sbrk_r>
 8004b6a:	1c43      	adds	r3, r0, #1
 8004b6c:	d123      	bne.n	8004bb6 <_malloc_r+0x92>
 8004b6e:	230c      	movs	r3, #12
 8004b70:	4630      	mov	r0, r6
 8004b72:	6033      	str	r3, [r6, #0]
 8004b74:	f000 f86c 	bl	8004c50 <__malloc_unlock>
 8004b78:	e7e3      	b.n	8004b42 <_malloc_r+0x1e>
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	1b5b      	subs	r3, r3, r5
 8004b7e:	d417      	bmi.n	8004bb0 <_malloc_r+0x8c>
 8004b80:	2b0b      	cmp	r3, #11
 8004b82:	d903      	bls.n	8004b8c <_malloc_r+0x68>
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	441c      	add	r4, r3
 8004b88:	6025      	str	r5, [r4, #0]
 8004b8a:	e004      	b.n	8004b96 <_malloc_r+0x72>
 8004b8c:	6863      	ldr	r3, [r4, #4]
 8004b8e:	42a2      	cmp	r2, r4
 8004b90:	bf0c      	ite	eq
 8004b92:	600b      	streq	r3, [r1, #0]
 8004b94:	6053      	strne	r3, [r2, #4]
 8004b96:	4630      	mov	r0, r6
 8004b98:	f000 f85a 	bl	8004c50 <__malloc_unlock>
 8004b9c:	f104 000b 	add.w	r0, r4, #11
 8004ba0:	1d23      	adds	r3, r4, #4
 8004ba2:	f020 0007 	bic.w	r0, r0, #7
 8004ba6:	1ac2      	subs	r2, r0, r3
 8004ba8:	d0cc      	beq.n	8004b44 <_malloc_r+0x20>
 8004baa:	1a1b      	subs	r3, r3, r0
 8004bac:	50a3      	str	r3, [r4, r2]
 8004bae:	e7c9      	b.n	8004b44 <_malloc_r+0x20>
 8004bb0:	4622      	mov	r2, r4
 8004bb2:	6864      	ldr	r4, [r4, #4]
 8004bb4:	e7cc      	b.n	8004b50 <_malloc_r+0x2c>
 8004bb6:	1cc4      	adds	r4, r0, #3
 8004bb8:	f024 0403 	bic.w	r4, r4, #3
 8004bbc:	42a0      	cmp	r0, r4
 8004bbe:	d0e3      	beq.n	8004b88 <_malloc_r+0x64>
 8004bc0:	1a21      	subs	r1, r4, r0
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	f000 f82e 	bl	8004c24 <_sbrk_r>
 8004bc8:	3001      	adds	r0, #1
 8004bca:	d1dd      	bne.n	8004b88 <_malloc_r+0x64>
 8004bcc:	e7cf      	b.n	8004b6e <_malloc_r+0x4a>
 8004bce:	bf00      	nop
 8004bd0:	200000c0 	.word	0x200000c0
 8004bd4:	200000c4 	.word	0x200000c4

08004bd8 <_realloc_r>:
 8004bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bda:	4607      	mov	r7, r0
 8004bdc:	4614      	mov	r4, r2
 8004bde:	460e      	mov	r6, r1
 8004be0:	b921      	cbnz	r1, 8004bec <_realloc_r+0x14>
 8004be2:	4611      	mov	r1, r2
 8004be4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004be8:	f7ff bf9c 	b.w	8004b24 <_malloc_r>
 8004bec:	b922      	cbnz	r2, 8004bf8 <_realloc_r+0x20>
 8004bee:	f7ff ff4d 	bl	8004a8c <_free_r>
 8004bf2:	4625      	mov	r5, r4
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bf8:	f000 f830 	bl	8004c5c <_malloc_usable_size_r>
 8004bfc:	42a0      	cmp	r0, r4
 8004bfe:	d20f      	bcs.n	8004c20 <_realloc_r+0x48>
 8004c00:	4621      	mov	r1, r4
 8004c02:	4638      	mov	r0, r7
 8004c04:	f7ff ff8e 	bl	8004b24 <_malloc_r>
 8004c08:	4605      	mov	r5, r0
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	d0f2      	beq.n	8004bf4 <_realloc_r+0x1c>
 8004c0e:	4631      	mov	r1, r6
 8004c10:	4622      	mov	r2, r4
 8004c12:	f7ff fbeb 	bl	80043ec <memcpy>
 8004c16:	4631      	mov	r1, r6
 8004c18:	4638      	mov	r0, r7
 8004c1a:	f7ff ff37 	bl	8004a8c <_free_r>
 8004c1e:	e7e9      	b.n	8004bf4 <_realloc_r+0x1c>
 8004c20:	4635      	mov	r5, r6
 8004c22:	e7e7      	b.n	8004bf4 <_realloc_r+0x1c>

08004c24 <_sbrk_r>:
 8004c24:	b538      	push	{r3, r4, r5, lr}
 8004c26:	2300      	movs	r3, #0
 8004c28:	4d05      	ldr	r5, [pc, #20]	; (8004c40 <_sbrk_r+0x1c>)
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	4608      	mov	r0, r1
 8004c2e:	602b      	str	r3, [r5, #0]
 8004c30:	f7fc fef2 	bl	8001a18 <_sbrk>
 8004c34:	1c43      	adds	r3, r0, #1
 8004c36:	d102      	bne.n	8004c3e <_sbrk_r+0x1a>
 8004c38:	682b      	ldr	r3, [r5, #0]
 8004c3a:	b103      	cbz	r3, 8004c3e <_sbrk_r+0x1a>
 8004c3c:	6023      	str	r3, [r4, #0]
 8004c3e:	bd38      	pop	{r3, r4, r5, pc}
 8004c40:	20000278 	.word	0x20000278

08004c44 <__malloc_lock>:
 8004c44:	4801      	ldr	r0, [pc, #4]	; (8004c4c <__malloc_lock+0x8>)
 8004c46:	f000 b811 	b.w	8004c6c <__retarget_lock_acquire_recursive>
 8004c4a:	bf00      	nop
 8004c4c:	20000280 	.word	0x20000280

08004c50 <__malloc_unlock>:
 8004c50:	4801      	ldr	r0, [pc, #4]	; (8004c58 <__malloc_unlock+0x8>)
 8004c52:	f000 b80c 	b.w	8004c6e <__retarget_lock_release_recursive>
 8004c56:	bf00      	nop
 8004c58:	20000280 	.word	0x20000280

08004c5c <_malloc_usable_size_r>:
 8004c5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c60:	1f18      	subs	r0, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	bfbc      	itt	lt
 8004c66:	580b      	ldrlt	r3, [r1, r0]
 8004c68:	18c0      	addlt	r0, r0, r3
 8004c6a:	4770      	bx	lr

08004c6c <__retarget_lock_acquire_recursive>:
 8004c6c:	4770      	bx	lr

08004c6e <__retarget_lock_release_recursive>:
 8004c6e:	4770      	bx	lr

08004c70 <_init>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	bf00      	nop
 8004c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c76:	bc08      	pop	{r3}
 8004c78:	469e      	mov	lr, r3
 8004c7a:	4770      	bx	lr

08004c7c <_fini>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	bf00      	nop
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr
