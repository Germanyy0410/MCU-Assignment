
assignment-simulation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004614  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08004720  08004720  00014720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a18  08004a18  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08004a18  08004a18  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a18  08004a18  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a18  08004a18  00014a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a1c  08004a1c  00014a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08004a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000098  08004ab8  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08004ab8  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011871  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b6f  00000000  00000000  00031932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  000344a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  00035218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001909c  00000000  00000000  00035e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010571  00000000  00000000  0004eef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089094  00000000  00000000  0005f465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e84f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003980  00000000  00000000  000e854c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08004708 	.word	0x08004708

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08004708 	.word	0x08004708

0800014c <initButton>:
int button_flag[NO_BUTTONS + 1];
int TimerForKeyPress[NO_BUTTONS + 1];

int Button1PressCounter = 1;    /* INITIALLY, MODE = 1 */

void initButton() {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (int i = 1; i <= NO_BUTTONS; i++) {
 8000152:	2301      	movs	r3, #1
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e020      	b.n	800019a <initButton+0x4e>
		KeyReg0[i] = NORMAL_STATE;
 8000158:	4a14      	ldr	r2, [pc, #80]	; (80001ac <initButton+0x60>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2101      	movs	r1, #1
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg1[i] = NORMAL_STATE;
 8000162:	4a13      	ldr	r2, [pc, #76]	; (80001b0 <initButton+0x64>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2101      	movs	r1, #1
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg2[i] = NORMAL_STATE;
 800016c:	4a11      	ldr	r2, [pc, #68]	; (80001b4 <initButton+0x68>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2101      	movs	r1, #1
 8000172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg3[i] = NORMAL_STATE; 
 8000176:	4a10      	ldr	r2, [pc, #64]	; (80001b8 <initButton+0x6c>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2101      	movs	r1, #1
 800017c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		button_flag[i] = 0;
 8000180:	4a0e      	ldr	r2, [pc, #56]	; (80001bc <initButton+0x70>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2100      	movs	r1, #0
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		TimerForKeyPress[i] = 200;
 800018a:	4a0d      	ldr	r2, [pc, #52]	; (80001c0 <initButton+0x74>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	21c8      	movs	r1, #200	; 0xc8
 8000190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 1; i <= NO_BUTTONS; i++) {
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	3301      	adds	r3, #1
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b04      	cmp	r3, #4
 800019e:	dddb      	ble.n	8000158 <initButton+0xc>
	}
}
 80001a0:	bf00      	nop
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	200000e8 	.word	0x200000e8
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	20000138 	.word	0x20000138
 80001b8:	200000d4 	.word	0x200000d4
 80001bc:	20000124 	.word	0x20000124
 80001c0:	20000110 	.word	0x20000110

080001c4 <getKeyInput>:

void getKeyInput() {
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
    for (int i = 1; i <= NO_BUTTONS; i++) {
 80001ca:	2301      	movs	r3, #1
 80001cc:	607b      	str	r3, [r7, #4]
 80001ce:	e099      	b.n	8000304 <getKeyInput+0x140>
        KeyReg0[i] = KeyReg1[i];
 80001d0:	4a51      	ldr	r2, [pc, #324]	; (8000318 <getKeyInput+0x154>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d8:	4950      	ldr	r1, [pc, #320]	; (800031c <getKeyInput+0x158>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg1[i] = KeyReg2[i];
 80001e0:	4a4f      	ldr	r2, [pc, #316]	; (8000320 <getKeyInput+0x15c>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e8:	494b      	ldr	r1, [pc, #300]	; (8000318 <getKeyInput+0x154>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        if (i == 1) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d109      	bne.n	800020a <getKeyInput+0x46>
 80001f6:	2102      	movs	r1, #2
 80001f8:	484a      	ldr	r0, [pc, #296]	; (8000324 <getKeyInput+0x160>)
 80001fa:	f002 f8b3 	bl	8002364 <HAL_GPIO_ReadPin>
 80001fe:	4603      	mov	r3, r0
 8000200:	4619      	mov	r1, r3
 8000202:	4a47      	ldr	r2, [pc, #284]	; (8000320 <getKeyInput+0x15c>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 2) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_2_1_GPIO_Port, BUTTON_2_1_Pin);
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b02      	cmp	r3, #2
 800020e:	d10a      	bne.n	8000226 <getKeyInput+0x62>
 8000210:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000214:	4844      	ldr	r0, [pc, #272]	; (8000328 <getKeyInput+0x164>)
 8000216:	f002 f8a5 	bl	8002364 <HAL_GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	4619      	mov	r1, r3
 800021e:	4a40      	ldr	r2, [pc, #256]	; (8000320 <getKeyInput+0x15c>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 3) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2b03      	cmp	r3, #3
 800022a:	d109      	bne.n	8000240 <getKeyInput+0x7c>
 800022c:	2101      	movs	r1, #1
 800022e:	483e      	ldr	r0, [pc, #248]	; (8000328 <getKeyInput+0x164>)
 8000230:	f002 f898 	bl	8002364 <HAL_GPIO_ReadPin>
 8000234:	4603      	mov	r3, r0
 8000236:	4619      	mov	r1, r3
 8000238:	4a39      	ldr	r2, [pc, #228]	; (8000320 <getKeyInput+0x15c>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 4) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_PEDESTRIAN_GPIO_Port, BUTTON_PEDESTRIAN_Pin);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2b04      	cmp	r3, #4
 8000244:	d109      	bne.n	800025a <getKeyInput+0x96>
 8000246:	2101      	movs	r1, #1
 8000248:	4836      	ldr	r0, [pc, #216]	; (8000324 <getKeyInput+0x160>)
 800024a:	f002 f88b 	bl	8002364 <HAL_GPIO_ReadPin>
 800024e:	4603      	mov	r3, r0
 8000250:	4619      	mov	r1, r3
 8000252:	4a33      	ldr	r2, [pc, #204]	; (8000320 <getKeyInput+0x15c>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 800025a:	4a30      	ldr	r2, [pc, #192]	; (800031c <getKeyInput+0x158>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000262:	492d      	ldr	r1, [pc, #180]	; (8000318 <getKeyInput+0x154>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800026a:	429a      	cmp	r2, r3
 800026c:	d147      	bne.n	80002fe <getKeyInput+0x13a>
 800026e:	4a2a      	ldr	r2, [pc, #168]	; (8000318 <getKeyInput+0x154>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000276:	492a      	ldr	r1, [pc, #168]	; (8000320 <getKeyInput+0x15c>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800027e:	429a      	cmp	r2, r3
 8000280:	d13d      	bne.n	80002fe <getKeyInput+0x13a>
            if (KeyReg3[i] != KeyReg2[i]) {
 8000282:	4a2a      	ldr	r2, [pc, #168]	; (800032c <getKeyInput+0x168>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800028a:	4925      	ldr	r1, [pc, #148]	; (8000320 <getKeyInput+0x15c>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000292:	429a      	cmp	r2, r3
 8000294:	d016      	beq.n	80002c4 <getKeyInput+0x100>
                KeyReg3[i] = KeyReg2[i];
 8000296:	4a22      	ldr	r2, [pc, #136]	; (8000320 <getKeyInput+0x15c>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800029e:	4923      	ldr	r1, [pc, #140]	; (800032c <getKeyInput+0x168>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                if (KeyReg2[i] == PRESSED_STATE) {
 80002a6:	4a1e      	ldr	r2, [pc, #120]	; (8000320 <getKeyInput+0x15c>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d125      	bne.n	80002fe <getKeyInput+0x13a>
                    subKeyProcess(i);
 80002b2:	6878      	ldr	r0, [r7, #4]
 80002b4:	f000 f858 	bl	8000368 <subKeyProcess>
                    TimerForKeyPress[i] = 200;
 80002b8:	4a1d      	ldr	r2, [pc, #116]	; (8000330 <getKeyInput+0x16c>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	21c8      	movs	r1, #200	; 0xc8
 80002be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002c2:	e01c      	b.n	80002fe <getKeyInput+0x13a>
                }
            } else {
                TimerForKeyPress[i]--;
 80002c4:	4a1a      	ldr	r2, [pc, #104]	; (8000330 <getKeyInput+0x16c>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002cc:	1e5a      	subs	r2, r3, #1
 80002ce:	4918      	ldr	r1, [pc, #96]	; (8000330 <getKeyInput+0x16c>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TimerForKeyPress[i] == 0) {
 80002d6:	4a16      	ldr	r2, [pc, #88]	; (8000330 <getKeyInput+0x16c>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d10d      	bne.n	80002fe <getKeyInput+0x13a>
                    if (KeyReg2[i] == PRESSED_STATE) {
 80002e2:	4a0f      	ldr	r2, [pc, #60]	; (8000320 <getKeyInput+0x15c>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d102      	bne.n	80002f4 <getKeyInput+0x130>
                        subKeyProcess(i);
 80002ee:	6878      	ldr	r0, [r7, #4]
 80002f0:	f000 f83a 	bl	8000368 <subKeyProcess>
                    }

                    TimerForKeyPress[i] = 200;
 80002f4:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <getKeyInput+0x16c>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	21c8      	movs	r1, #200	; 0xc8
 80002fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 1; i <= NO_BUTTONS; i++) {
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3301      	adds	r3, #1
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2b04      	cmp	r3, #4
 8000308:	f77f af62 	ble.w	80001d0 <getKeyInput+0xc>
                }
            }
        }
    }
}
 800030c:	bf00      	nop
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	200000fc 	.word	0x200000fc
 800031c:	200000e8 	.word	0x200000e8
 8000320:	20000138 	.word	0x20000138
 8000324:	40010800 	.word	0x40010800
 8000328:	40010c00 	.word	0x40010c00
 800032c:	200000d4 	.word	0x200000d4
 8000330:	20000110 	.word	0x20000110

08000334 <isButtonPressed>:

int isButtonPressed(int index) {
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
//	if (index > NO_BUTTONS)
//		return 0;

	if (button_flag[index]) {
 800033c:	4a09      	ldr	r2, [pc, #36]	; (8000364 <isButtonPressed+0x30>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d006      	beq.n	8000356 <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000348:	4a06      	ldr	r2, [pc, #24]	; (8000364 <isButtonPressed+0x30>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	2100      	movs	r1, #0
 800034e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000352:	2301      	movs	r3, #1
 8000354:	e000      	b.n	8000358 <isButtonPressed+0x24>
	}
	return 0;
 8000356:	2300      	movs	r3, #0
}
 8000358:	4618      	mov	r0, r3
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	20000124 	.word	0x20000124

08000368 <subKeyProcess>:

void subKeyProcess(int index) {
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000370:	4a04      	ldr	r2, [pc, #16]	; (8000384 <subKeyProcess+0x1c>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	2101      	movs	r1, #1
 8000376:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	20000124 	.word	0x20000124

08000388 <fsm_automatic_run>:
 *      Author: ProX
 */

#include "fsm_automatic.h"

void fsm_automatic_run(void) {
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
    /* CHANGE TO MANUAL MODE WHEN BUTTON1 IS PRESSED */
    if (isButtonPressed(1)) {
 800038c:	2001      	movs	r0, #1
 800038e:	f7ff ffd1 	bl	8000334 <isButtonPressed>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d006      	beq.n	80003a6 <fsm_automatic_run+0x1e>
    	status = MANUAL_MODE;
 8000398:	4b99      	ldr	r3, [pc, #612]	; (8000600 <fsm_automatic_run+0x278>)
 800039a:	2203      	movs	r2, #3
 800039c:	601a      	str	r2, [r3, #0]
		traffic_status = INIT;
 800039e:	4b99      	ldr	r3, [pc, #612]	; (8000604 <fsm_automatic_run+0x27c>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	601a      	str	r2, [r3, #0]
		return;
 80003a4:	e12a      	b.n	80005fc <fsm_automatic_run+0x274>
    }

    switch (traffic_status) {
 80003a6:	4b97      	ldr	r3, [pc, #604]	; (8000604 <fsm_automatic_run+0x27c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d04e      	beq.n	800044c <fsm_automatic_run+0xc4>
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	f340 8124 	ble.w	80005fc <fsm_automatic_run+0x274>
 80003b4:	2b50      	cmp	r3, #80	; 0x50
 80003b6:	f300 8121 	bgt.w	80005fc <fsm_automatic_run+0x274>
 80003ba:	2b32      	cmp	r3, #50	; 0x32
 80003bc:	f2c0 811e 	blt.w	80005fc <fsm_automatic_run+0x274>
 80003c0:	3b32      	subs	r3, #50	; 0x32
 80003c2:	2b1e      	cmp	r3, #30
 80003c4:	f200 811a 	bhi.w	80005fc <fsm_automatic_run+0x274>
 80003c8:	a201      	add	r2, pc, #4	; (adr r2, 80003d0 <fsm_automatic_run+0x48>)
 80003ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ce:	bf00      	nop
 80003d0:	080004a3 	.word	0x080004a3
 80003d4:	080005fd 	.word	0x080005fd
 80003d8:	080005fd 	.word	0x080005fd
 80003dc:	080005fd 	.word	0x080005fd
 80003e0:	080005fd 	.word	0x080005fd
 80003e4:	080005fd 	.word	0x080005fd
 80003e8:	080005fd 	.word	0x080005fd
 80003ec:	080005fd 	.word	0x080005fd
 80003f0:	080005fd 	.word	0x080005fd
 80003f4:	080005fd 	.word	0x080005fd
 80003f8:	080004e7 	.word	0x080004e7
 80003fc:	080005fd 	.word	0x080005fd
 8000400:	080005fd 	.word	0x080005fd
 8000404:	080005fd 	.word	0x080005fd
 8000408:	080005fd 	.word	0x080005fd
 800040c:	080005fd 	.word	0x080005fd
 8000410:	080005fd 	.word	0x080005fd
 8000414:	080005fd 	.word	0x080005fd
 8000418:	080005fd 	.word	0x080005fd
 800041c:	080005fd 	.word	0x080005fd
 8000420:	08000545 	.word	0x08000545
 8000424:	080005fd 	.word	0x080005fd
 8000428:	080005fd 	.word	0x080005fd
 800042c:	080005fd 	.word	0x080005fd
 8000430:	080005fd 	.word	0x080005fd
 8000434:	080005fd 	.word	0x080005fd
 8000438:	080005fd 	.word	0x080005fd
 800043c:	080005fd 	.word	0x080005fd
 8000440:	080005fd 	.word	0x080005fd
 8000444:	080005fd 	.word	0x080005fd
 8000448:	08000587 	.word	0x08000587
    case INIT:
    	resetLights();
 800044c:	f000 fb5c 	bl	8000b08 <resetLights>
    	/* INACTIVE pedestrian light when in INIT state */
    	pedestrian_status = PEDESTRIAN_INACTIVE;
 8000450:	4b6d      	ldr	r3, [pc, #436]	; (8000608 <fsm_automatic_run+0x280>)
 8000452:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000456:	601a      	str	r2, [r3, #0]

        traffic_status = RED_GREEN;
 8000458:	4b6a      	ldr	r3, [pc, #424]	; (8000604 <fsm_automatic_run+0x27c>)
 800045a:	2232      	movs	r2, #50	; 0x32
 800045c:	601a      	str	r2, [r3, #0]
        setTimer(1, green_counter);
 800045e:	4b6b      	ldr	r3, [pc, #428]	; (800060c <fsm_automatic_run+0x284>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4619      	mov	r1, r3
 8000464:	2001      	movs	r0, #1
 8000466:	f000 ff8f 	bl	8001388 <setTimer>

		setTimer(3, 250); 		// timer 3 for counting light
 800046a:	21fa      	movs	r1, #250	; 0xfa
 800046c:	2003      	movs	r0, #3
 800046e:	f000 ff8b 	bl	8001388 <setTimer>

        counter_light_1 = red_counter / 1000;
 8000472:	4b67      	ldr	r3, [pc, #412]	; (8000610 <fsm_automatic_run+0x288>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a67      	ldr	r2, [pc, #412]	; (8000614 <fsm_automatic_run+0x28c>)
 8000478:	fb82 1203 	smull	r1, r2, r2, r3
 800047c:	1192      	asrs	r2, r2, #6
 800047e:	17db      	asrs	r3, r3, #31
 8000480:	1ad3      	subs	r3, r2, r3
 8000482:	4a65      	ldr	r2, [pc, #404]	; (8000618 <fsm_automatic_run+0x290>)
 8000484:	6013      	str	r3, [r2, #0]
        counter_light_2 = green_counter / 1000;
 8000486:	4b61      	ldr	r3, [pc, #388]	; (800060c <fsm_automatic_run+0x284>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a62      	ldr	r2, [pc, #392]	; (8000614 <fsm_automatic_run+0x28c>)
 800048c:	fb82 1203 	smull	r1, r2, r2, r3
 8000490:	1192      	asrs	r2, r2, #6
 8000492:	17db      	asrs	r3, r3, #31
 8000494:	1ad3      	subs	r3, r2, r3
 8000496:	4a61      	ldr	r2, [pc, #388]	; (800061c <fsm_automatic_run+0x294>)
 8000498:	6013      	str	r3, [r2, #0]
        counter_lights = 1;
 800049a:	4b61      	ldr	r3, [pc, #388]	; (8000620 <fsm_automatic_run+0x298>)
 800049c:	2201      	movs	r2, #1
 800049e:	601a      	str	r2, [r3, #0]

        break;
 80004a0:	e0ac      	b.n	80005fc <fsm_automatic_run+0x274>

    case RED_GREEN:
    	setRedLight1(0);
 80004a2:	2000      	movs	r0, #0
 80004a4:	f000 fb7c 	bl	8000ba0 <setRedLight1>
    	setGreenLight2(0);
 80004a8:	2000      	movs	r0, #0
 80004aa:	f000 fbf1 	bl	8000c90 <setGreenLight2>

        if (timer_flag[1] == 1) {
 80004ae:	4b5d      	ldr	r3, [pc, #372]	; (8000624 <fsm_automatic_run+0x29c>)
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	f040 809b 	bne.w	80005ee <fsm_automatic_run+0x266>
            traffic_status = RED_AMBER;
 80004b8:	4b52      	ldr	r3, [pc, #328]	; (8000604 <fsm_automatic_run+0x27c>)
 80004ba:	223c      	movs	r2, #60	; 0x3c
 80004bc:	601a      	str	r2, [r3, #0]
            setTimer(1, amber_counter);
 80004be:	4b5a      	ldr	r3, [pc, #360]	; (8000628 <fsm_automatic_run+0x2a0>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4619      	mov	r1, r3
 80004c4:	2001      	movs	r0, #1
 80004c6:	f000 ff5f 	bl	8001388 <setTimer>

            uartOneTimeFlag = 0;
 80004ca:	4b58      	ldr	r3, [pc, #352]	; (800062c <fsm_automatic_run+0x2a4>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]

            counter_light_2 = amber_counter / 1000;
 80004d0:	4b55      	ldr	r3, [pc, #340]	; (8000628 <fsm_automatic_run+0x2a0>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a4f      	ldr	r2, [pc, #316]	; (8000614 <fsm_automatic_run+0x28c>)
 80004d6:	fb82 1203 	smull	r1, r2, r2, r3
 80004da:	1192      	asrs	r2, r2, #6
 80004dc:	17db      	asrs	r3, r3, #31
 80004de:	1ad3      	subs	r3, r2, r3
 80004e0:	4a4e      	ldr	r2, [pc, #312]	; (800061c <fsm_automatic_run+0x294>)
 80004e2:	6013      	str	r3, [r2, #0]
        }    

        break;
 80004e4:	e083      	b.n	80005ee <fsm_automatic_run+0x266>

    case RED_AMBER:
    	setRedLight1(0);
 80004e6:	2000      	movs	r0, #0
 80004e8:	f000 fb5a 	bl	8000ba0 <setRedLight1>
    	setAmberLight2(0);
 80004ec:	2000      	movs	r0, #0
 80004ee:	f000 fbed 	bl	8000ccc <setAmberLight2>

        if (timer_flag[1] == 1) {
 80004f2:	4b4c      	ldr	r3, [pc, #304]	; (8000624 <fsm_automatic_run+0x29c>)
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d17b      	bne.n	80005f2 <fsm_automatic_run+0x26a>
            traffic_status = GREEN_RED;
 80004fa:	4b42      	ldr	r3, [pc, #264]	; (8000604 <fsm_automatic_run+0x27c>)
 80004fc:	2246      	movs	r2, #70	; 0x46
 80004fe:	601a      	str	r2, [r3, #0]
            setTimer(1, green_counter);
 8000500:	4b42      	ldr	r3, [pc, #264]	; (800060c <fsm_automatic_run+0x284>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4619      	mov	r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	f000 ff3e 	bl	8001388 <setTimer>

            uartOneTimeFlag = 0;
 800050c:	4b47      	ldr	r3, [pc, #284]	; (800062c <fsm_automatic_run+0x2a4>)
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]

            counter_light_1 = green_counter / 1000;
 8000512:	4b3e      	ldr	r3, [pc, #248]	; (800060c <fsm_automatic_run+0x284>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a3f      	ldr	r2, [pc, #252]	; (8000614 <fsm_automatic_run+0x28c>)
 8000518:	fb82 1203 	smull	r1, r2, r2, r3
 800051c:	1192      	asrs	r2, r2, #6
 800051e:	17db      	asrs	r3, r3, #31
 8000520:	1ad3      	subs	r3, r2, r3
 8000522:	4a3d      	ldr	r2, [pc, #244]	; (8000618 <fsm_automatic_run+0x290>)
 8000524:	6013      	str	r3, [r2, #0]
            counter_light_2 = red_counter / 1000;
 8000526:	4b3a      	ldr	r3, [pc, #232]	; (8000610 <fsm_automatic_run+0x288>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a3a      	ldr	r2, [pc, #232]	; (8000614 <fsm_automatic_run+0x28c>)
 800052c:	fb82 1203 	smull	r1, r2, r2, r3
 8000530:	1192      	asrs	r2, r2, #6
 8000532:	17db      	asrs	r3, r3, #31
 8000534:	1ad3      	subs	r3, r2, r3
 8000536:	4a39      	ldr	r2, [pc, #228]	; (800061c <fsm_automatic_run+0x294>)
 8000538:	6013      	str	r3, [r2, #0]

            /* INACTIVE pedestrian light when traffic light is backing to GREEN_RED mode */
            pedestrian_status = PEDESTRIAN_INACTIVE;
 800053a:	4b33      	ldr	r3, [pc, #204]	; (8000608 <fsm_automatic_run+0x280>)
 800053c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000540:	601a      	str	r2, [r3, #0]
        }

        break;
 8000542:	e056      	b.n	80005f2 <fsm_automatic_run+0x26a>

    case GREEN_RED:
    	setGreenLight1(0);
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fb49 	bl	8000bdc <setGreenLight1>
    	setRedLight2(0);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 fb82 	bl	8000c54 <setRedLight2>

        if (timer_flag[1] == 1) {
 8000550:	4b34      	ldr	r3, [pc, #208]	; (8000624 <fsm_automatic_run+0x29c>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d14e      	bne.n	80005f6 <fsm_automatic_run+0x26e>
            traffic_status = AMBER_RED;
 8000558:	4b2a      	ldr	r3, [pc, #168]	; (8000604 <fsm_automatic_run+0x27c>)
 800055a:	2250      	movs	r2, #80	; 0x50
 800055c:	601a      	str	r2, [r3, #0]
            setTimer(1, amber_counter);
 800055e:	4b32      	ldr	r3, [pc, #200]	; (8000628 <fsm_automatic_run+0x2a0>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4619      	mov	r1, r3
 8000564:	2001      	movs	r0, #1
 8000566:	f000 ff0f 	bl	8001388 <setTimer>

            uartOneTimeFlag = 0;
 800056a:	4b30      	ldr	r3, [pc, #192]	; (800062c <fsm_automatic_run+0x2a4>)
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]

            counter_light_1 = amber_counter / 1000;
 8000570:	4b2d      	ldr	r3, [pc, #180]	; (8000628 <fsm_automatic_run+0x2a0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a27      	ldr	r2, [pc, #156]	; (8000614 <fsm_automatic_run+0x28c>)
 8000576:	fb82 1203 	smull	r1, r2, r2, r3
 800057a:	1192      	asrs	r2, r2, #6
 800057c:	17db      	asrs	r3, r3, #31
 800057e:	1ad3      	subs	r3, r2, r3
 8000580:	4a25      	ldr	r2, [pc, #148]	; (8000618 <fsm_automatic_run+0x290>)
 8000582:	6013      	str	r3, [r2, #0]
        }

        break;
 8000584:	e037      	b.n	80005f6 <fsm_automatic_run+0x26e>

    case AMBER_RED:
    	setAmberLight1(0);
 8000586:	2000      	movs	r0, #0
 8000588:	f000 fb46 	bl	8000c18 <setAmberLight1>
    	setRedLight2(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fb61 	bl	8000c54 <setRedLight2>

        if (timer_flag[1] == 1) {
 8000592:	4b24      	ldr	r3, [pc, #144]	; (8000624 <fsm_automatic_run+0x29c>)
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d12f      	bne.n	80005fa <fsm_automatic_run+0x272>
            traffic_status = RED_GREEN;
 800059a:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <fsm_automatic_run+0x27c>)
 800059c:	2232      	movs	r2, #50	; 0x32
 800059e:	601a      	str	r2, [r3, #0]
            setTimer(1, green_counter);
 80005a0:	4b1a      	ldr	r3, [pc, #104]	; (800060c <fsm_automatic_run+0x284>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4619      	mov	r1, r3
 80005a6:	2001      	movs	r0, #1
 80005a8:	f000 feee 	bl	8001388 <setTimer>

            uartOneTimeFlag = 0;
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <fsm_automatic_run+0x2a4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]

            counter_light_1 = red_counter / 1000;
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <fsm_automatic_run+0x288>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a17      	ldr	r2, [pc, #92]	; (8000614 <fsm_automatic_run+0x28c>)
 80005b8:	fb82 1203 	smull	r1, r2, r2, r3
 80005bc:	1192      	asrs	r2, r2, #6
 80005be:	17db      	asrs	r3, r3, #31
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	4a15      	ldr	r2, [pc, #84]	; (8000618 <fsm_automatic_run+0x290>)
 80005c4:	6013      	str	r3, [r2, #0]
            counter_light_2 = green_counter / 1000;
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <fsm_automatic_run+0x284>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <fsm_automatic_run+0x28c>)
 80005cc:	fb82 1203 	smull	r1, r2, r2, r3
 80005d0:	1192      	asrs	r2, r2, #6
 80005d2:	17db      	asrs	r3, r3, #31
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	4a11      	ldr	r2, [pc, #68]	; (800061c <fsm_automatic_run+0x294>)
 80005d8:	6013      	str	r3, [r2, #0]

            /* If the pedestrian light is PEDESTRIAN_RED, change to PEDESTRIAN_GREEN when the traffic light is backing to RED_GREEN mode */
            /* If the pedestrian light is INACTIVE => no change */
            if(pedestrian_status == PEDESTRIAN_RED){
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <fsm_automatic_run+0x280>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80005e2:	d10a      	bne.n	80005fa <fsm_automatic_run+0x272>
            	pedestrian_status = PEDESTRIAN_GREEN;
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <fsm_automatic_run+0x280>)
 80005e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005ea:	601a      	str	r2, [r3, #0]
            }
        }
        break;
 80005ec:	e005      	b.n	80005fa <fsm_automatic_run+0x272>
        break;
 80005ee:	bf00      	nop
 80005f0:	e004      	b.n	80005fc <fsm_automatic_run+0x274>
        break;
 80005f2:	bf00      	nop
 80005f4:	e002      	b.n	80005fc <fsm_automatic_run+0x274>
        break;
 80005f6:	bf00      	nop
 80005f8:	e000      	b.n	80005fc <fsm_automatic_run+0x274>
        break;
 80005fa:	bf00      	nop
    }
}
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000000 	.word	0x20000000
 8000604:	2000000c 	.word	0x2000000c
 8000608:	20000004 	.word	0x20000004
 800060c:	20000018 	.word	0x20000018
 8000610:	20000010 	.word	0x20000010
 8000614:	10624dd3 	.word	0x10624dd3
 8000618:	2000001c 	.word	0x2000001c
 800061c:	20000020 	.word	0x20000020
 8000620:	20000024 	.word	0x20000024
 8000624:	20000228 	.word	0x20000228
 8000628:	20000014 	.word	0x20000014
 800062c:	200000c0 	.word	0x200000c0

08000630 <fsm_manual_run>:

#include "fsm_manual.h"

int blink = 0;

void fsm_manual_run(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	/* OUT OF TIME FOR MANUAL EVENTS */
	if (timer_flag[1] == 1) {
 8000634:	4ba4      	ldr	r3, [pc, #656]	; (80008c8 <fsm_manual_run+0x298>)
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d105      	bne.n	8000648 <fsm_manual_run+0x18>
		status = AUTOMATIC_MODE;
 800063c:	4ba3      	ldr	r3, [pc, #652]	; (80008cc <fsm_manual_run+0x29c>)
 800063e:	2202      	movs	r2, #2
 8000640:	601a      	str	r2, [r3, #0]
		traffic_status = INIT;
 8000642:	4ba3      	ldr	r3, [pc, #652]	; (80008d0 <fsm_manual_run+0x2a0>)
 8000644:	2201      	movs	r2, #1
 8000646:	601a      	str	r2, [r3, #0]
	}

	if (timer_flag[2] == 1) { // using timer2 to blink the led
 8000648:	4b9f      	ldr	r3, [pc, #636]	; (80008c8 <fsm_manual_run+0x298>)
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d10a      	bne.n	8000666 <fsm_manual_run+0x36>
		blink = 1 - blink;
 8000650:	4ba0      	ldr	r3, [pc, #640]	; (80008d4 <fsm_manual_run+0x2a4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f1c3 0301 	rsb	r3, r3, #1
 8000658:	4a9e      	ldr	r2, [pc, #632]	; (80008d4 <fsm_manual_run+0x2a4>)
 800065a:	6013      	str	r3, [r2, #0]
		setTimer(2, 500); // toggle every 500ms, this would get f = 2Hz for blinking the led
 800065c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000660:	2002      	movs	r0, #2
 8000662:	f000 fe91 	bl	8001388 <setTimer>
	}

	switch (traffic_status) {
 8000666:	4b9a      	ldr	r3, [pc, #616]	; (80008d0 <fsm_manual_run+0x2a0>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	3b01      	subs	r3, #1
 800066c:	2b03      	cmp	r3, #3
 800066e:	f200 819e 	bhi.w	80009ae <fsm_manual_run+0x37e>
 8000672:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <fsm_manual_run+0x48>)
 8000674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000678:	08000689 	.word	0x08000689
 800067c:	080006dd 	.word	0x080006dd
 8000680:	080007cd 	.word	0x080007cd
 8000684:	08000901 	.word	0x08000901
	case INIT:
		// change traffic state to MAN_RED when change from AUTOMATIC to MANUAL
		traffic_status = MAN_RED;
 8000688:	4b91      	ldr	r3, [pc, #580]	; (80008d0 <fsm_manual_run+0x2a0>)
 800068a:	2202      	movs	r2, #2
 800068c:	601a      	str	r2, [r3, #0]

		time_modify_counter = red_counter; // update temporary counter storing red led delay
 800068e:	4b92      	ldr	r3, [pc, #584]	; (80008d8 <fsm_manual_run+0x2a8>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a92      	ldr	r2, [pc, #584]	; (80008dc <fsm_manual_run+0x2ac>)
 8000694:	6013      	str	r3, [r2, #0]
		counter_light_1 = red_counter / 1000; 		// counter light 1 show the value of current manual light
 8000696:	4b90      	ldr	r3, [pc, #576]	; (80008d8 <fsm_manual_run+0x2a8>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a91      	ldr	r2, [pc, #580]	; (80008e0 <fsm_manual_run+0x2b0>)
 800069c:	fb82 1203 	smull	r1, r2, r2, r3
 80006a0:	1192      	asrs	r2, r2, #6
 80006a2:	17db      	asrs	r3, r3, #31
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	4a8f      	ldr	r2, [pc, #572]	; (80008e4 <fsm_manual_run+0x2b4>)
 80006a8:	6013      	str	r3, [r2, #0]
		counter_light_2 = traffic_status;					// counter light 2 show the mode
 80006aa:	4b89      	ldr	r3, [pc, #548]	; (80008d0 <fsm_manual_run+0x2a0>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a8e      	ldr	r2, [pc, #568]	; (80008e8 <fsm_manual_run+0x2b8>)
 80006b0:	6013      	str	r3, [r2, #0]

        uartOneTimeFlag = 0;
 80006b2:	4b8e      	ldr	r3, [pc, #568]	; (80008ec <fsm_manual_run+0x2bc>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]

		setTimer(1, 5000);				// reuse timer 0 to 5 seconds for manual event
 80006b8:	f241 3188 	movw	r1, #5000	; 0x1388
 80006bc:	2001      	movs	r0, #1
 80006be:	f000 fe63 	bl	8001388 <setTimer>
		setTimer(2, 500); 				// set timer 1 for led blinking
 80006c2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006c6:	2002      	movs	r0, #2
 80006c8:	f000 fe5e 	bl	8001388 <setTimer>
		setTimer(3, 250);				// timer 3 still counting 7-seg light
 80006cc:	21fa      	movs	r1, #250	; 0xfa
 80006ce:	2003      	movs	r0, #3
 80006d0:	f000 fe5a 	bl	8001388 <setTimer>
		counter_lights = 1;				// reset counter for switching 7-seg lights
 80006d4:	4b86      	ldr	r3, [pc, #536]	; (80008f0 <fsm_manual_run+0x2c0>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	601a      	str	r2, [r3, #0]

		break;
 80006da:	e16f      	b.n	80009bc <fsm_manual_run+0x38c>
	case MAN_RED:
		/* BLINK LEDs */
		setRedLight1(blink);
 80006dc:	4b7d      	ldr	r3, [pc, #500]	; (80008d4 <fsm_manual_run+0x2a4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fa5d 	bl	8000ba0 <setRedLight1>
		setRedLight2(blink);
 80006e6:	4b7b      	ldr	r3, [pc, #492]	; (80008d4 <fsm_manual_run+0x2a4>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fab2 	bl	8000c54 <setRedLight2>

		/* CHANGE MODE = 3 (MAN_AMBER) WHEN BUTTON1 IS PRESSED */
		if (isButtonPressed(1)) {
 80006f0:	2001      	movs	r0, #1
 80006f2:	f7ff fe1f 	bl	8000334 <isButtonPressed>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d028      	beq.n	800074e <fsm_manual_run+0x11e>
			traffic_status = MAN_AMBER;
 80006fc:	4b74      	ldr	r3, [pc, #464]	; (80008d0 <fsm_manual_run+0x2a0>)
 80006fe:	2203      	movs	r2, #3
 8000700:	601a      	str	r2, [r3, #0]

			time_modify_counter = amber_counter;	// update temporary counter storing red led delay
 8000702:	4b7c      	ldr	r3, [pc, #496]	; (80008f4 <fsm_manual_run+0x2c4>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a75      	ldr	r2, [pc, #468]	; (80008dc <fsm_manual_run+0x2ac>)
 8000708:	6013      	str	r3, [r2, #0]
			counter_light_1 = amber_counter / 1000;	// counter light 1 show the value of current manual light
 800070a:	4b7a      	ldr	r3, [pc, #488]	; (80008f4 <fsm_manual_run+0x2c4>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a74      	ldr	r2, [pc, #464]	; (80008e0 <fsm_manual_run+0x2b0>)
 8000710:	fb82 1203 	smull	r1, r2, r2, r3
 8000714:	1192      	asrs	r2, r2, #6
 8000716:	17db      	asrs	r3, r3, #31
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	4a72      	ldr	r2, [pc, #456]	; (80008e4 <fsm_manual_run+0x2b4>)
 800071c:	6013      	str	r3, [r2, #0]
			counter_light_2 = traffic_status;				// counter light 2 show the mode
 800071e:	4b6c      	ldr	r3, [pc, #432]	; (80008d0 <fsm_manual_run+0x2a0>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a71      	ldr	r2, [pc, #452]	; (80008e8 <fsm_manual_run+0x2b8>)
 8000724:	6013      	str	r3, [r2, #0]

            uartOneTimeFlag = 0;
 8000726:	4b71      	ldr	r3, [pc, #452]	; (80008ec <fsm_manual_run+0x2bc>)
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]

			setTimer(1, 5000);			// reuse timer 0 to 5 seconds for manual event
 800072c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000730:	2001      	movs	r0, #1
 8000732:	f000 fe29 	bl	8001388 <setTimer>
			setTimer(2, 500); 			// set timer 1 for led blinking
 8000736:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800073a:	2002      	movs	r0, #2
 800073c:	f000 fe24 	bl	8001388 <setTimer>
			setTimer(3, 250);			// timer 3 still counting 7-seg light
 8000740:	21fa      	movs	r1, #250	; 0xfa
 8000742:	2003      	movs	r0, #3
 8000744:	f000 fe20 	bl	8001388 <setTimer>
			counter_lights = 1;			// reset counter for switching 7-seg lights
 8000748:	4b69      	ldr	r3, [pc, #420]	; (80008f0 <fsm_manual_run+0x2c0>)
 800074a:	2201      	movs	r2, #1
 800074c:	601a      	str	r2, [r3, #0]
		}

		if (isButtonPressed(2) == 1) { // increasing 7-segment light counter
 800074e:	2002      	movs	r0, #2
 8000750:	f7ff fdf0 	bl	8000334 <isButtonPressed>
 8000754:	4603      	mov	r3, r0
 8000756:	2b01      	cmp	r3, #1
 8000758:	d113      	bne.n	8000782 <fsm_manual_run+0x152>
			time_modify_counter += UPDATED_TIME;
 800075a:	4b60      	ldr	r3, [pc, #384]	; (80008dc <fsm_manual_run+0x2ac>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000762:	4a5e      	ldr	r2, [pc, #376]	; (80008dc <fsm_manual_run+0x2ac>)
 8000764:	6013      	str	r3, [r2, #0]
			if (time_modify_counter > MAX_TIME)
 8000766:	4b5d      	ldr	r3, [pc, #372]	; (80008dc <fsm_manual_run+0x2ac>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a63      	ldr	r2, [pc, #396]	; (80008f8 <fsm_manual_run+0x2c8>)
 800076c:	4293      	cmp	r3, r2
 800076e:	dd03      	ble.n	8000778 <fsm_manual_run+0x148>
				time_modify_counter = 1000; // 1 second
 8000770:	4b5a      	ldr	r3, [pc, #360]	; (80008dc <fsm_manual_run+0x2ac>)
 8000772:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000776:	601a      	str	r2, [r3, #0]
			setTimer(1, 5000); // set 5 seconds for manual events
 8000778:	f241 3188 	movw	r1, #5000	; 0x1388
 800077c:	2001      	movs	r0, #1
 800077e:	f000 fe03 	bl	8001388 <setTimer>
		}

		if (isButtonPressed(3) == 1) { // set the new value for 7-segment light counter
 8000782:	2003      	movs	r0, #3
 8000784:	f7ff fdd6 	bl	8000334 <isButtonPressed>
 8000788:	4603      	mov	r3, r0
 800078a:	2b01      	cmp	r3, #1
 800078c:	f040 8111 	bne.w	80009b2 <fsm_manual_run+0x382>
			red_counter = time_modify_counter;
 8000790:	4b52      	ldr	r3, [pc, #328]	; (80008dc <fsm_manual_run+0x2ac>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a50      	ldr	r2, [pc, #320]	; (80008d8 <fsm_manual_run+0x2a8>)
 8000796:	6013      	str	r3, [r2, #0]
			green_counter = red_counter - amber_counter;
 8000798:	4b4f      	ldr	r3, [pc, #316]	; (80008d8 <fsm_manual_run+0x2a8>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b55      	ldr	r3, [pc, #340]	; (80008f4 <fsm_manual_run+0x2c4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	4a56      	ldr	r2, [pc, #344]	; (80008fc <fsm_manual_run+0x2cc>)
 80007a4:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);								// set 5 seconds for manual events
 80007a6:	f241 3188 	movw	r1, #5000	; 0x1388
 80007aa:	2001      	movs	r0, #1
 80007ac:	f000 fdec 	bl	8001388 <setTimer>
			counter_light_1 = red_counter / 1000; // counter light 1 show the value of current manual light
 80007b0:	4b49      	ldr	r3, [pc, #292]	; (80008d8 <fsm_manual_run+0x2a8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a4a      	ldr	r2, [pc, #296]	; (80008e0 <fsm_manual_run+0x2b0>)
 80007b6:	fb82 1203 	smull	r1, r2, r2, r3
 80007ba:	1192      	asrs	r2, r2, #6
 80007bc:	17db      	asrs	r3, r3, #31
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	4a48      	ldr	r2, [pc, #288]	; (80008e4 <fsm_manual_run+0x2b4>)
 80007c2:	6013      	str	r3, [r2, #0]
			counter_lights = 1;								// reset counter for switching 7-seg lights
 80007c4:	4b4a      	ldr	r3, [pc, #296]	; (80008f0 <fsm_manual_run+0x2c0>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	601a      	str	r2, [r3, #0]
		}
		break;
 80007ca:	e0f2      	b.n	80009b2 <fsm_manual_run+0x382>

	case MAN_AMBER:
		/* BLINK LEDs */
		setAmberLight1(blink);
 80007cc:	4b41      	ldr	r3, [pc, #260]	; (80008d4 <fsm_manual_run+0x2a4>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 fa21 	bl	8000c18 <setAmberLight1>
		setAmberLight2(blink);
 80007d6:	4b3f      	ldr	r3, [pc, #252]	; (80008d4 <fsm_manual_run+0x2a4>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fa76 	bl	8000ccc <setAmberLight2>

		/* CHANGE MODE = 4 (MAN_GREEN) WHEN BUTTON1 IS PRESSED */
		if (isButtonPressed(1)) {
 80007e0:	2001      	movs	r0, #1
 80007e2:	f7ff fda7 	bl	8000334 <isButtonPressed>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d02e      	beq.n	800084a <fsm_manual_run+0x21a>
			traffic_status = MAN_GREEN;
 80007ec:	4b38      	ldr	r3, [pc, #224]	; (80008d0 <fsm_manual_run+0x2a0>)
 80007ee:	2204      	movs	r2, #4
 80007f0:	601a      	str	r2, [r3, #0]

			time_modify_counter = green_counter / 1000;	// update temporary counter storing red led delay
 80007f2:	4b42      	ldr	r3, [pc, #264]	; (80008fc <fsm_manual_run+0x2cc>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a3a      	ldr	r2, [pc, #232]	; (80008e0 <fsm_manual_run+0x2b0>)
 80007f8:	fb82 1203 	smull	r1, r2, r2, r3
 80007fc:	1192      	asrs	r2, r2, #6
 80007fe:	17db      	asrs	r3, r3, #31
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	4a36      	ldr	r2, [pc, #216]	; (80008dc <fsm_manual_run+0x2ac>)
 8000804:	6013      	str	r3, [r2, #0]
			counter_light_1 = green_counter / 1000;			// counter light 1 show the value of current manual light
 8000806:	4b3d      	ldr	r3, [pc, #244]	; (80008fc <fsm_manual_run+0x2cc>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a35      	ldr	r2, [pc, #212]	; (80008e0 <fsm_manual_run+0x2b0>)
 800080c:	fb82 1203 	smull	r1, r2, r2, r3
 8000810:	1192      	asrs	r2, r2, #6
 8000812:	17db      	asrs	r3, r3, #31
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	4a33      	ldr	r2, [pc, #204]	; (80008e4 <fsm_manual_run+0x2b4>)
 8000818:	6013      	str	r3, [r2, #0]
			counter_light_2 = traffic_status;						// counter light 2 show the mode
 800081a:	4b2d      	ldr	r3, [pc, #180]	; (80008d0 <fsm_manual_run+0x2a0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a32      	ldr	r2, [pc, #200]	; (80008e8 <fsm_manual_run+0x2b8>)
 8000820:	6013      	str	r3, [r2, #0]

            uartOneTimeFlag = 0;
 8000822:	4b32      	ldr	r3, [pc, #200]	; (80008ec <fsm_manual_run+0x2bc>)
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]

			setTimer(1, 5000);				// reuse timer 0 to 5 seconds for manual event
 8000828:	f241 3188 	movw	r1, #5000	; 0x1388
 800082c:	2001      	movs	r0, #1
 800082e:	f000 fdab 	bl	8001388 <setTimer>
			setTimer(2, 500); 				// set timer 1 for led blinking
 8000832:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000836:	2002      	movs	r0, #2
 8000838:	f000 fda6 	bl	8001388 <setTimer>
			setTimer(3, 250);				// timer 3 still counting 7-seg light
 800083c:	21fa      	movs	r1, #250	; 0xfa
 800083e:	2003      	movs	r0, #3
 8000840:	f000 fda2 	bl	8001388 <setTimer>
			counter_lights = 1;				// reset counter for switching 7-seg lights
 8000844:	4b2a      	ldr	r3, [pc, #168]	; (80008f0 <fsm_manual_run+0x2c0>)
 8000846:	2201      	movs	r2, #1
 8000848:	601a      	str	r2, [r3, #0]
		}

		if (isButtonPressed(2) == 1) { // increasing 7-segment light counter
 800084a:	2002      	movs	r0, #2
 800084c:	f7ff fd72 	bl	8000334 <isButtonPressed>
 8000850:	4603      	mov	r3, r0
 8000852:	2b01      	cmp	r3, #1
 8000854:	d113      	bne.n	800087e <fsm_manual_run+0x24e>
			time_modify_counter += UPDATED_TIME;
 8000856:	4b21      	ldr	r3, [pc, #132]	; (80008dc <fsm_manual_run+0x2ac>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800085e:	4a1f      	ldr	r2, [pc, #124]	; (80008dc <fsm_manual_run+0x2ac>)
 8000860:	6013      	str	r3, [r2, #0]
			if (time_modify_counter > MAX_TIME)
 8000862:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <fsm_manual_run+0x2ac>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a24      	ldr	r2, [pc, #144]	; (80008f8 <fsm_manual_run+0x2c8>)
 8000868:	4293      	cmp	r3, r2
 800086a:	dd03      	ble.n	8000874 <fsm_manual_run+0x244>
				time_modify_counter = 1000; // 1 second
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <fsm_manual_run+0x2ac>)
 800086e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000872:	601a      	str	r2, [r3, #0]
			setTimer(1, 5000); // set 5 seconds for manual events
 8000874:	f241 3188 	movw	r1, #5000	; 0x1388
 8000878:	2001      	movs	r0, #1
 800087a:	f000 fd85 	bl	8001388 <setTimer>
		}

		if (isButtonPressed(3) == 1) { // set the new value for 7-segment light counter
 800087e:	2003      	movs	r0, #3
 8000880:	f7ff fd58 	bl	8000334 <isButtonPressed>
 8000884:	4603      	mov	r3, r0
 8000886:	2b01      	cmp	r3, #1
 8000888:	f040 8095 	bne.w	80009b6 <fsm_manual_run+0x386>
			amber_counter = time_modify_counter;
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <fsm_manual_run+0x2ac>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <fsm_manual_run+0x2c4>)
 8000892:	6013      	str	r3, [r2, #0]
			red_counter = amber_counter + green_counter;
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <fsm_manual_run+0x2c4>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <fsm_manual_run+0x2cc>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4413      	add	r3, r2
 800089e:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <fsm_manual_run+0x2a8>)
 80008a0:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);									// set 5 seconds for manual events
 80008a2:	f241 3188 	movw	r1, #5000	; 0x1388
 80008a6:	2001      	movs	r0, #1
 80008a8:	f000 fd6e 	bl	8001388 <setTimer>
			counter_light_1 = amber_counter / 1000; // counter light 1 show the value of current manual light
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <fsm_manual_run+0x2c4>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <fsm_manual_run+0x2b0>)
 80008b2:	fb82 1203 	smull	r1, r2, r2, r3
 80008b6:	1192      	asrs	r2, r2, #6
 80008b8:	17db      	asrs	r3, r3, #31
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	4a09      	ldr	r2, [pc, #36]	; (80008e4 <fsm_manual_run+0x2b4>)
 80008be:	6013      	str	r3, [r2, #0]
			counter_lights = 1;									// reset counter for switching 7-seg lights
 80008c0:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <fsm_manual_run+0x2c0>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	601a      	str	r2, [r3, #0]
		}

		break;
 80008c6:	e076      	b.n	80009b6 <fsm_manual_run+0x386>
 80008c8:	20000228 	.word	0x20000228
 80008cc:	20000000 	.word	0x20000000
 80008d0:	2000000c 	.word	0x2000000c
 80008d4:	200000b4 	.word	0x200000b4
 80008d8:	20000010 	.word	0x20000010
 80008dc:	200000b8 	.word	0x200000b8
 80008e0:	10624dd3 	.word	0x10624dd3
 80008e4:	2000001c 	.word	0x2000001c
 80008e8:	20000020 	.word	0x20000020
 80008ec:	200000c0 	.word	0x200000c0
 80008f0:	20000024 	.word	0x20000024
 80008f4:	20000014 	.word	0x20000014
 80008f8:	000182b8 	.word	0x000182b8
 80008fc:	20000018 	.word	0x20000018

	case MAN_GREEN:
		/* BLINK LEDs */
		setGreenLight1(blink);
 8000900:	4b2f      	ldr	r3, [pc, #188]	; (80009c0 <fsm_manual_run+0x390>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f000 f969 	bl	8000bdc <setGreenLight1>
		setGreenLight2(blink);
 800090a:	4b2d      	ldr	r3, [pc, #180]	; (80009c0 <fsm_manual_run+0x390>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f000 f9be 	bl	8000c90 <setGreenLight2>

		/* CHANGE MODE = 1 (AUTOMATIC) WHEN BUTTON1 IS PRESSED */
		if (isButtonPressed(1)) {
 8000914:	2001      	movs	r0, #1
 8000916:	f7ff fd0d 	bl	8000334 <isButtonPressed>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d008      	beq.n	8000932 <fsm_manual_run+0x302>
			status = AUTOMATIC_MODE;
 8000920:	4b28      	ldr	r3, [pc, #160]	; (80009c4 <fsm_manual_run+0x394>)
 8000922:	2202      	movs	r2, #2
 8000924:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 8000926:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <fsm_manual_run+0x398>)
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]
            uartOneTimeFlag = 0;
 800092c:	4b27      	ldr	r3, [pc, #156]	; (80009cc <fsm_manual_run+0x39c>)
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
		}

		if (isButtonPressed(2) == 1) { // increasing 7-segment light counter
 8000932:	2002      	movs	r0, #2
 8000934:	f7ff fcfe 	bl	8000334 <isButtonPressed>
 8000938:	4603      	mov	r3, r0
 800093a:	2b01      	cmp	r3, #1
 800093c:	d113      	bne.n	8000966 <fsm_manual_run+0x336>
			time_modify_counter += UPDATED_TIME;
 800093e:	4b24      	ldr	r3, [pc, #144]	; (80009d0 <fsm_manual_run+0x3a0>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000946:	4a22      	ldr	r2, [pc, #136]	; (80009d0 <fsm_manual_run+0x3a0>)
 8000948:	6013      	str	r3, [r2, #0]
			if (time_modify_counter > MAX_TIME)
 800094a:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <fsm_manual_run+0x3a0>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a21      	ldr	r2, [pc, #132]	; (80009d4 <fsm_manual_run+0x3a4>)
 8000950:	4293      	cmp	r3, r2
 8000952:	dd03      	ble.n	800095c <fsm_manual_run+0x32c>
				time_modify_counter = 1000; // 1 second
 8000954:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <fsm_manual_run+0x3a0>)
 8000956:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800095a:	601a      	str	r2, [r3, #0]
			setTimer(1, 5000); // set 5 seconds for manual events
 800095c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000960:	2001      	movs	r0, #1
 8000962:	f000 fd11 	bl	8001388 <setTimer>
		}

		if (isButtonPressed(3) == 1) { // set the new value for 7-segment light counter
 8000966:	2003      	movs	r0, #3
 8000968:	f7ff fce4 	bl	8000334 <isButtonPressed>
 800096c:	4603      	mov	r3, r0
 800096e:	2b01      	cmp	r3, #1
 8000970:	d123      	bne.n	80009ba <fsm_manual_run+0x38a>
			green_counter = time_modify_counter;
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <fsm_manual_run+0x3a0>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a18      	ldr	r2, [pc, #96]	; (80009d8 <fsm_manual_run+0x3a8>)
 8000978:	6013      	str	r3, [r2, #0]
			red_counter = amber_counter + green_counter;
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <fsm_manual_run+0x3ac>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <fsm_manual_run+0x3a8>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4413      	add	r3, r2
 8000984:	4a16      	ldr	r2, [pc, #88]	; (80009e0 <fsm_manual_run+0x3b0>)
 8000986:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);									// set 5 seconds for manual events
 8000988:	f241 3188 	movw	r1, #5000	; 0x1388
 800098c:	2001      	movs	r0, #1
 800098e:	f000 fcfb 	bl	8001388 <setTimer>
			counter_light_1 = green_counter / 1000; // counter light 1 show the value of current manual light
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <fsm_manual_run+0x3a8>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a13      	ldr	r2, [pc, #76]	; (80009e4 <fsm_manual_run+0x3b4>)
 8000998:	fb82 1203 	smull	r1, r2, r2, r3
 800099c:	1192      	asrs	r2, r2, #6
 800099e:	17db      	asrs	r3, r3, #31
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	4a11      	ldr	r2, [pc, #68]	; (80009e8 <fsm_manual_run+0x3b8>)
 80009a4:	6013      	str	r3, [r2, #0]
			counter_lights = 1;									// reset counter for switching 7-seg lights
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <fsm_manual_run+0x3bc>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	601a      	str	r2, [r3, #0]
		}

		break;
 80009ac:	e005      	b.n	80009ba <fsm_manual_run+0x38a>
	default:
		break;
 80009ae:	bf00      	nop
 80009b0:	e004      	b.n	80009bc <fsm_manual_run+0x38c>
		break;
 80009b2:	bf00      	nop
 80009b4:	e002      	b.n	80009bc <fsm_manual_run+0x38c>
		break;
 80009b6:	bf00      	nop
 80009b8:	e000      	b.n	80009bc <fsm_manual_run+0x38c>
		break;
 80009ba:	bf00      	nop
	}
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200000b4 	.word	0x200000b4
 80009c4:	20000000 	.word	0x20000000
 80009c8:	2000000c 	.word	0x2000000c
 80009cc:	200000c0 	.word	0x200000c0
 80009d0:	200000b8 	.word	0x200000b8
 80009d4:	000182b8 	.word	0x000182b8
 80009d8:	20000018 	.word	0x20000018
 80009dc:	20000014 	.word	0x20000014
 80009e0:	20000010 	.word	0x20000010
 80009e4:	10624dd3 	.word	0x10624dd3
 80009e8:	2000001c 	.word	0x2000001c
 80009ec:	20000024 	.word	0x20000024

080009f0 <PedestrianRed>:
 *      Author: ProX
 */

#include "fsm_pedestrian.h"

void PedestrianRed() {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, 1);
 80009f4:	2201      	movs	r2, #1
 80009f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <PedestrianRed+0x20>)
 80009fc:	f001 fcc9 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a06:	4803      	ldr	r0, [pc, #12]	; (8000a14 <PedestrianRed+0x24>)
 8000a08:	f001 fcc3 	bl	8002392 <HAL_GPIO_WritePin>
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40010c00 	.word	0x40010c00
 8000a14:	40010800 	.word	0x40010800

08000a18 <PedestrianGreen>:

void PedestrianGreen() {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <PedestrianGreen+0x20>)
 8000a24:	f001 fcb5 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, 1);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2e:	4803      	ldr	r0, [pc, #12]	; (8000a3c <PedestrianGreen+0x24>)
 8000a30:	f001 fcaf 	bl	8002392 <HAL_GPIO_WritePin>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40010c00 	.word	0x40010c00
 8000a3c:	40010800 	.word	0x40010800

08000a40 <PedestrianInvalid>:

void PedestrianInvalid() {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, 1);
 8000a44:	2201      	movs	r2, #1
 8000a46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <PedestrianInvalid+0x20>)
 8000a4c:	f001 fca1 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, 1);
 8000a50:	2201      	movs	r2, #1
 8000a52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a56:	4803      	ldr	r0, [pc, #12]	; (8000a64 <PedestrianInvalid+0x24>)
 8000a58:	f001 fc9b 	bl	8002392 <HAL_GPIO_WritePin>
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40010c00 	.word	0x40010c00
 8000a64:	40010800 	.word	0x40010800

08000a68 <fsm_pedestrian_run>:

void fsm_pedestrian_run(void) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	switch (pedestrian_status) {
 8000a6c:	4b23      	ldr	r3, [pc, #140]	; (8000afc <fsm_pedestrian_run+0x94>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000a74:	d03c      	beq.n	8000af0 <fsm_pedestrian_run+0x88>
 8000a76:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000a7a:	dc3d      	bgt.n	8000af8 <fsm_pedestrian_run+0x90>
 8000a7c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000a80:	d003      	beq.n	8000a8a <fsm_pedestrian_run+0x22>
 8000a82:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a86:	d02d      	beq.n	8000ae4 <fsm_pedestrian_run+0x7c>

	case PEDESTRIAN_RED:
		PedestrianRed();
		break;
	}
}
 8000a88:	e036      	b.n	8000af8 <fsm_pedestrian_run+0x90>
		PedestrianInvalid();
 8000a8a:	f7ff ffd9 	bl	8000a40 <PedestrianInvalid>
		buzzer_status = OFF;
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <fsm_pedestrian_run+0x98>)
 8000a90:	2209      	movs	r2, #9
 8000a92:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(4)) {
 8000a94:	2004      	movs	r0, #4
 8000a96:	f7ff fc4d 	bl	8000334 <isButtonPressed>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d02a      	beq.n	8000af6 <fsm_pedestrian_run+0x8e>
			PedestrianGreen();
 8000aa0:	f7ff ffba 	bl	8000a18 <PedestrianGreen>
			if (traffic_status == RED_AMBER || traffic_status == RED_GREEN) {
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <fsm_pedestrian_run+0x9c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b3c      	cmp	r3, #60	; 0x3c
 8000aaa:	d003      	beq.n	8000ab4 <fsm_pedestrian_run+0x4c>
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <fsm_pedestrian_run+0x9c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b32      	cmp	r3, #50	; 0x32
 8000ab2:	d104      	bne.n	8000abe <fsm_pedestrian_run+0x56>
				pedestrian_status = PEDESTRIAN_GREEN;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <fsm_pedestrian_run+0x94>)
 8000ab6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	e011      	b.n	8000ae2 <fsm_pedestrian_run+0x7a>
			else if (traffic_status == GREEN_RED || traffic_status == AMBER_RED) {
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <fsm_pedestrian_run+0x9c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2b46      	cmp	r3, #70	; 0x46
 8000ac4:	d003      	beq.n	8000ace <fsm_pedestrian_run+0x66>
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <fsm_pedestrian_run+0x9c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b50      	cmp	r3, #80	; 0x50
 8000acc:	d104      	bne.n	8000ad8 <fsm_pedestrian_run+0x70>
				pedestrian_status = PEDESTRIAN_RED;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <fsm_pedestrian_run+0x94>)
 8000ad0:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	e004      	b.n	8000ae2 <fsm_pedestrian_run+0x7a>
				pedestrian_status = PEDESTRIAN_INACTIVE;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <fsm_pedestrian_run+0x94>)
 8000ada:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000ade:	601a      	str	r2, [r3, #0]
		break;
 8000ae0:	e009      	b.n	8000af6 <fsm_pedestrian_run+0x8e>
 8000ae2:	e008      	b.n	8000af6 <fsm_pedestrian_run+0x8e>
		PedestrianGreen();
 8000ae4:	f7ff ff98 	bl	8000a18 <PedestrianGreen>
		buzzer_status = ON;
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <fsm_pedestrian_run+0x98>)
 8000aea:	2207      	movs	r2, #7
 8000aec:	601a      	str	r2, [r3, #0]
		break;
 8000aee:	e003      	b.n	8000af8 <fsm_pedestrian_run+0x90>
		PedestrianRed();
 8000af0:	f7ff ff7e 	bl	80009f0 <PedestrianRed>
		break;
 8000af4:	e000      	b.n	8000af8 <fsm_pedestrian_run+0x90>
		break;
 8000af6:	bf00      	nop
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000004 	.word	0x20000004
 8000b00:	20000008 	.word	0x20000008
 8000b04:	2000000c 	.word	0x2000000c

08000b08 <resetLights>:
 */

#include "graphics.h"

void resetLights()
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	time_modify_counter = 0;
 8000b0c:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <resetLights+0x88>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
	traffic_status = INIT;
 8000b12:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <resetLights+0x8c>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1e:	481e      	ldr	r0, [pc, #120]	; (8000b98 <resetLights+0x90>)
 8000b20:	f001 fc37 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b2a:	481b      	ldr	r0, [pc, #108]	; (8000b98 <resetLights+0x90>)
 8000b2c:	f001 fc31 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b36:	4818      	ldr	r0, [pc, #96]	; (8000b98 <resetLights+0x90>)
 8000b38:	f001 fc2b 	bl	8002392 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b42:	4816      	ldr	r0, [pc, #88]	; (8000b9c <resetLights+0x94>)
 8000b44:	f001 fc25 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b4e:	4813      	ldr	r0, [pc, #76]	; (8000b9c <resetLights+0x94>)
 8000b50:	f001 fc1f 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b5a:	4810      	ldr	r0, [pc, #64]	; (8000b9c <resetLights+0x94>)
 8000b5c:	f001 fc19 	bl	8002392 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2140      	movs	r1, #64	; 0x40
 8000b64:	480c      	ldr	r0, [pc, #48]	; (8000b98 <resetLights+0x90>)
 8000b66:	f001 fc14 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2180      	movs	r1, #128	; 0x80
 8000b6e:	480a      	ldr	r0, [pc, #40]	; (8000b98 <resetLights+0x90>)
 8000b70:	f001 fc0f 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7a:	4807      	ldr	r0, [pc, #28]	; (8000b98 <resetLights+0x90>)
 8000b7c:	f001 fc09 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b86:	4804      	ldr	r0, [pc, #16]	; (8000b98 <resetLights+0x90>)
 8000b88:	f001 fc03 	bl	8002392 <HAL_GPIO_WritePin>
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200000b8 	.word	0x200000b8
 8000b94:	2000000c 	.word	0x2000000c
 8000b98:	40010c00 	.word	0x40010c00
 8000b9c:	40010800 	.word	0x40010800

08000ba0 <setRedLight1>:

void setRedLight1(int blink)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, blink);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	461a      	mov	r2, r3
 8000bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb2:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <setRedLight1+0x38>)
 8000bb4:	f001 fbed 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bbe:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <setRedLight1+0x38>)
 8000bc0:	f001 fbe7 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bca:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <setRedLight1+0x38>)
 8000bcc:	f001 fbe1 	bl	8002392 <HAL_GPIO_WritePin>
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40010c00 	.word	0x40010c00

08000bdc <setGreenLight1>:
void setGreenLight1(int blink)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bea:	480a      	ldr	r0, [pc, #40]	; (8000c14 <setGreenLight1+0x38>)
 8000bec:	f001 fbd1 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, blink);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bfa:	4806      	ldr	r0, [pc, #24]	; (8000c14 <setGreenLight1+0x38>)
 8000bfc:	f001 fbc9 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c06:	4803      	ldr	r0, [pc, #12]	; (8000c14 <setGreenLight1+0x38>)
 8000c08:	f001 fbc3 	bl	8002392 <HAL_GPIO_WritePin>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40010c00 	.word	0x40010c00

08000c18 <setAmberLight1>:
void setAmberLight1(int blink)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c26:	480a      	ldr	r0, [pc, #40]	; (8000c50 <setAmberLight1+0x38>)
 8000c28:	f001 fbb3 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c32:	4807      	ldr	r0, [pc, #28]	; (8000c50 <setAmberLight1+0x38>)
 8000c34:	f001 fbad 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, blink);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c42:	4803      	ldr	r0, [pc, #12]	; (8000c50 <setAmberLight1+0x38>)
 8000c44:	f001 fba5 	bl	8002392 <HAL_GPIO_WritePin>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40010c00 	.word	0x40010c00

08000c54 <setRedLight2>:

void setRedLight2(int blink)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, blink);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	461a      	mov	r2, r3
 8000c62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c66:	4809      	ldr	r0, [pc, #36]	; (8000c8c <setRedLight2+0x38>)
 8000c68:	f001 fb93 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <setRedLight2+0x38>)
 8000c74:	f001 fb8d 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, GPIO_PIN_SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c7e:	4803      	ldr	r0, [pc, #12]	; (8000c8c <setRedLight2+0x38>)
 8000c80:	f001 fb87 	bl	8002392 <HAL_GPIO_WritePin>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40010800 	.word	0x40010800

08000c90 <setGreenLight2>:
void setGreenLight2(int blink)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c9e:	480a      	ldr	r0, [pc, #40]	; (8000cc8 <setGreenLight2+0x38>)
 8000ca0:	f001 fb77 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, blink);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	461a      	mov	r2, r3
 8000caa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cae:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <setGreenLight2+0x38>)
 8000cb0:	f001 fb6f 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cba:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <setGreenLight2+0x38>)
 8000cbc:	f001 fb69 	bl	8002392 <HAL_GPIO_WritePin>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40010800 	.word	0x40010800

08000ccc <setAmberLight2>:
void setAmberLight2(int blink)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <setAmberLight2+0x38>)
 8000cdc:	f001 fb59 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ce6:	4807      	ldr	r0, [pc, #28]	; (8000d04 <setAmberLight2+0x38>)
 8000ce8:	f001 fb53 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, blink);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cf6:	4803      	ldr	r0, [pc, #12]	; (8000d04 <setAmberLight2+0x38>)
 8000cf8:	f001 fb4b 	bl	8002392 <HAL_GPIO_WritePin>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40010800 	.word	0x40010800

08000d08 <display7SegmentLED>:

void display7SegmentLED(int number, GPIO_TypeDef *GPIOx[], uint16_t GPIO_Pins[])
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b0cd      	sub	sp, #308	; 0x134
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	6018      	str	r0, [r3, #0]
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	6019      	str	r1, [r3, #0]
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	601a      	str	r2, [r3, #0]
	int num[10][7] = {
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4a1e      	ldr	r2, [pc, #120]	; (8000d9c <display7SegmentLED+0x94>)
 8000d24:	4618      	mov	r0, r3
 8000d26:	4611      	mov	r1, r2
 8000d28:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	f003 f8a9 	bl	8003e84 <memcpy>
		{0, 0, 0, 1, 1, 1, 1}, // 7
		{0, 0, 0, 0, 0, 0, 0}, // 8
		{0, 0, 0, 0, 1, 0, 0}  // 9
	};

	for (int i = 0; i < 7; i++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000d38:	e025      	b.n	8000d86 <display7SegmentLED+0x7e>
	{
		HAL_GPIO_WritePin(GPIOx[i], GPIO_Pins[i], num[number][i]);
 8000d3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	f107 0208 	add.w	r2, r7, #8
 8000d44:	6812      	ldr	r2, [r2, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	6818      	ldr	r0, [r3, #0]
 8000d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	1d3a      	adds	r2, r7, #4
 8000d52:	6812      	ldr	r2, [r2, #0]
 8000d54:	4413      	add	r3, r2
 8000d56:	881c      	ldrh	r4, [r3, #0]
 8000d58:	f107 0114 	add.w	r1, r7, #20
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	4613      	mov	r3, r2
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	1a9b      	subs	r3, r3, r2
 8000d68:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000d6c:	4413      	add	r3, r2
 8000d6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	461a      	mov	r2, r3
 8000d76:	4621      	mov	r1, r4
 8000d78:	f001 fb0b 	bl	8002392 <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++)
 8000d7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d80:	3301      	adds	r3, #1
 8000d82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000d86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	ddd5      	ble.n	8000d3a <display7SegmentLED+0x32>
	}
}
 8000d8e:	bf00      	nop
 8000d90:	bf00      	nop
 8000d92:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd90      	pop	{r4, r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	08004720 	.word	0x08004720

08000da0 <display7SegmentLight>:

void display7SegmentLight()
{
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	b08c      	sub	sp, #48	; 0x30
 8000da4:	af00      	add	r7, sp, #0
	uint16_t GPIO_Pins[] = {SEG0_Pin, SEG1_Pin, SEG2_Pin, SEG3_Pin,
 8000da6:	4b86      	ldr	r3, [pc, #536]	; (8000fc0 <display7SegmentLight+0x220>)
 8000da8:	f107 0420 	add.w	r4, r7, #32
 8000dac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dae:	c407      	stmia	r4!, {r0, r1, r2}
 8000db0:	8023      	strh	r3, [r4, #0]
							SEG4_Pin, SEG5_Pin, SEG6_Pin};
	GPIO_TypeDef * GPIOx[] = {SEG0_GPIO_Port, SEG1_GPIO_Port, SEG2_GPIO_Port,
 8000db2:	4b84      	ldr	r3, [pc, #528]	; (8000fc4 <display7SegmentLight+0x224>)
 8000db4:	1d3c      	adds	r4, r7, #4
 8000db6:	461d      	mov	r5, r3
 8000db8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			SEG3_GPIO_Port, SEG4_GPIO_Port, SEG5_GPIO_Port, SEG6_GPIO_Port};
	switch (counter_lights)
 8000dc4:	4b80      	ldr	r3, [pc, #512]	; (8000fc8 <display7SegmentLight+0x228>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	f200 80e9 	bhi.w	8000fa2 <display7SegmentLight+0x202>
 8000dd0:	a201      	add	r2, pc, #4	; (adr r2, 8000dd8 <display7SegmentLight+0x38>)
 8000dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd6:	bf00      	nop
 8000dd8:	08000de9 	.word	0x08000de9
 8000ddc:	08000e4b 	.word	0x08000e4b
 8000de0:	08000eb7 	.word	0x08000eb7
 8000de4:	08000f17 	.word	0x08000f17
	{
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2140      	movs	r1, #64	; 0x40
 8000dec:	4877      	ldr	r0, [pc, #476]	; (8000fcc <display7SegmentLight+0x22c>)
 8000dee:	f001 fad0 	bl	8002392 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	2180      	movs	r1, #128	; 0x80
 8000df6:	4875      	ldr	r0, [pc, #468]	; (8000fcc <display7SegmentLight+0x22c>)
 8000df8:	f001 facb 	bl	8002392 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e02:	4872      	ldr	r0, [pc, #456]	; (8000fcc <display7SegmentLight+0x22c>)
 8000e04:	f001 fac5 	bl	8002392 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e0e:	486f      	ldr	r0, [pc, #444]	; (8000fcc <display7SegmentLight+0x22c>)
 8000e10:	f001 fabf 	bl	8002392 <HAL_GPIO_WritePin>
		display7SegmentLED(counter_light_1 / 10, GPIOx, GPIO_Pins); // first digit of light 1
 8000e14:	4b6e      	ldr	r3, [pc, #440]	; (8000fd0 <display7SegmentLight+0x230>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a6e      	ldr	r2, [pc, #440]	; (8000fd4 <display7SegmentLight+0x234>)
 8000e1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e1e:	1092      	asrs	r2, r2, #2
 8000e20:	17db      	asrs	r3, r3, #31
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	f107 0220 	add.w	r2, r7, #32
 8000e28:	1d39      	adds	r1, r7, #4
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff6c 	bl	8000d08 <display7SegmentLED>
		if (timer_flag[3] == 1)
 8000e30:	4b69      	ldr	r3, [pc, #420]	; (8000fd8 <display7SegmentLight+0x238>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	f040 80b8 	bne.w	8000faa <display7SegmentLight+0x20a>
		{
			counter_lights = 2;
 8000e3a:	4b63      	ldr	r3, [pc, #396]	; (8000fc8 <display7SegmentLight+0x228>)
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	601a      	str	r2, [r3, #0]
			setTimer(3, 250);
 8000e40:	21fa      	movs	r1, #250	; 0xfa
 8000e42:	2003      	movs	r0, #3
 8000e44:	f000 faa0 	bl	8001388 <setTimer>
		}
		break;
 8000e48:	e0af      	b.n	8000faa <display7SegmentLight+0x20a>
	case 2:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2140      	movs	r1, #64	; 0x40
 8000e4e:	485f      	ldr	r0, [pc, #380]	; (8000fcc <display7SegmentLight+0x22c>)
 8000e50:	f001 fa9f 	bl	8002392 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2180      	movs	r1, #128	; 0x80
 8000e58:	485c      	ldr	r0, [pc, #368]	; (8000fcc <display7SegmentLight+0x22c>)
 8000e5a:	f001 fa9a 	bl	8002392 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e64:	4859      	ldr	r0, [pc, #356]	; (8000fcc <display7SegmentLight+0x22c>)
 8000e66:	f001 fa94 	bl	8002392 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e70:	4856      	ldr	r0, [pc, #344]	; (8000fcc <display7SegmentLight+0x22c>)
 8000e72:	f001 fa8e 	bl	8002392 <HAL_GPIO_WritePin>
		display7SegmentLED(counter_light_1 % 10, GPIOx, GPIO_Pins); // second digit of light 1
 8000e76:	4b56      	ldr	r3, [pc, #344]	; (8000fd0 <display7SegmentLight+0x230>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	4b56      	ldr	r3, [pc, #344]	; (8000fd4 <display7SegmentLight+0x234>)
 8000e7c:	fb83 1302 	smull	r1, r3, r3, r2
 8000e80:	1099      	asrs	r1, r3, #2
 8000e82:	17d3      	asrs	r3, r2, #31
 8000e84:	1ac8      	subs	r0, r1, r3
 8000e86:	4603      	mov	r3, r0
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4403      	add	r3, r0
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	1ad0      	subs	r0, r2, r3
 8000e90:	f107 0220 	add.w	r2, r7, #32
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	4619      	mov	r1, r3
 8000e98:	f7ff ff36 	bl	8000d08 <display7SegmentLED>
		if (timer_flag[3] == 1)
 8000e9c:	4b4e      	ldr	r3, [pc, #312]	; (8000fd8 <display7SegmentLight+0x238>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	f040 8084 	bne.w	8000fae <display7SegmentLight+0x20e>
		{
			counter_lights = 3;
 8000ea6:	4b48      	ldr	r3, [pc, #288]	; (8000fc8 <display7SegmentLight+0x228>)
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	601a      	str	r2, [r3, #0]
			setTimer(3, 250);
 8000eac:	21fa      	movs	r1, #250	; 0xfa
 8000eae:	2003      	movs	r0, #3
 8000eb0:	f000 fa6a 	bl	8001388 <setTimer>
		}
		break;
 8000eb4:	e07b      	b.n	8000fae <display7SegmentLight+0x20e>
	case 3:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2140      	movs	r1, #64	; 0x40
 8000eba:	4844      	ldr	r0, [pc, #272]	; (8000fcc <display7SegmentLight+0x22c>)
 8000ebc:	f001 fa69 	bl	8002392 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	4841      	ldr	r0, [pc, #260]	; (8000fcc <display7SegmentLight+0x22c>)
 8000ec6:	f001 fa64 	bl	8002392 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed0:	483e      	ldr	r0, [pc, #248]	; (8000fcc <display7SegmentLight+0x22c>)
 8000ed2:	f001 fa5e 	bl	8002392 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000edc:	483b      	ldr	r0, [pc, #236]	; (8000fcc <display7SegmentLight+0x22c>)
 8000ede:	f001 fa58 	bl	8002392 <HAL_GPIO_WritePin>
		display7SegmentLED(counter_light_2 / 10, GPIOx, GPIO_Pins); // first digit of light 2
 8000ee2:	4b3e      	ldr	r3, [pc, #248]	; (8000fdc <display7SegmentLight+0x23c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a3b      	ldr	r2, [pc, #236]	; (8000fd4 <display7SegmentLight+0x234>)
 8000ee8:	fb82 1203 	smull	r1, r2, r2, r3
 8000eec:	1092      	asrs	r2, r2, #2
 8000eee:	17db      	asrs	r3, r3, #31
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	f107 0220 	add.w	r2, r7, #32
 8000ef6:	1d39      	adds	r1, r7, #4
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff05 	bl	8000d08 <display7SegmentLED>
		if (timer_flag[3] == 1)
 8000efe:	4b36      	ldr	r3, [pc, #216]	; (8000fd8 <display7SegmentLight+0x238>)
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d155      	bne.n	8000fb2 <display7SegmentLight+0x212>
		{
			counter_lights = 4;
 8000f06:	4b30      	ldr	r3, [pc, #192]	; (8000fc8 <display7SegmentLight+0x228>)
 8000f08:	2204      	movs	r2, #4
 8000f0a:	601a      	str	r2, [r3, #0]
			setTimer(3, 250);
 8000f0c:	21fa      	movs	r1, #250	; 0xfa
 8000f0e:	2003      	movs	r0, #3
 8000f10:	f000 fa3a 	bl	8001388 <setTimer>
		}
		break;
 8000f14:	e04d      	b.n	8000fb2 <display7SegmentLight+0x212>
	case 4:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000f16:	2201      	movs	r2, #1
 8000f18:	2140      	movs	r1, #64	; 0x40
 8000f1a:	482c      	ldr	r0, [pc, #176]	; (8000fcc <display7SegmentLight+0x22c>)
 8000f1c:	f001 fa39 	bl	8002392 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2180      	movs	r1, #128	; 0x80
 8000f24:	4829      	ldr	r0, [pc, #164]	; (8000fcc <display7SegmentLight+0x22c>)
 8000f26:	f001 fa34 	bl	8002392 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f30:	4826      	ldr	r0, [pc, #152]	; (8000fcc <display7SegmentLight+0x22c>)
 8000f32:	f001 fa2e 	bl	8002392 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3c:	4823      	ldr	r0, [pc, #140]	; (8000fcc <display7SegmentLight+0x22c>)
 8000f3e:	f001 fa28 	bl	8002392 <HAL_GPIO_WritePin>
		display7SegmentLED(counter_light_2 % 10, GPIOx, GPIO_Pins); // second digit of light 2
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <display7SegmentLight+0x23c>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <display7SegmentLight+0x234>)
 8000f48:	fb83 1302 	smull	r1, r3, r3, r2
 8000f4c:	1099      	asrs	r1, r3, #2
 8000f4e:	17d3      	asrs	r3, r2, #31
 8000f50:	1ac8      	subs	r0, r1, r3
 8000f52:	4603      	mov	r3, r0
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4403      	add	r3, r0
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	1ad0      	subs	r0, r2, r3
 8000f5c:	f107 0220 	add.w	r2, r7, #32
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	4619      	mov	r1, r3
 8000f64:	f7ff fed0 	bl	8000d08 <display7SegmentLED>
		if (timer_flag[3] == 1)
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <display7SegmentLight+0x238>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d122      	bne.n	8000fb6 <display7SegmentLight+0x216>
		{
			counter_lights = 1;
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <display7SegmentLight+0x228>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	601a      	str	r2, [r3, #0]
			if (status == AUTOMATIC_MODE)
 8000f76:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <display7SegmentLight+0x240>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d10c      	bne.n	8000f98 <display7SegmentLight+0x1f8>
			{
				countingDownFlag = 0;
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <display7SegmentLight+0x244>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
				counter_light_1--;
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <display7SegmentLight+0x230>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	4a11      	ldr	r2, [pc, #68]	; (8000fd0 <display7SegmentLight+0x230>)
 8000f8c:	6013      	str	r3, [r2, #0]
				counter_light_2--;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <display7SegmentLight+0x23c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	4a11      	ldr	r2, [pc, #68]	; (8000fdc <display7SegmentLight+0x23c>)
 8000f96:	6013      	str	r3, [r2, #0]
			}
			setTimer(3, 250);
 8000f98:	21fa      	movs	r1, #250	; 0xfa
 8000f9a:	2003      	movs	r0, #3
 8000f9c:	f000 f9f4 	bl	8001388 <setTimer>
		}
		break;
 8000fa0:	e009      	b.n	8000fb6 <display7SegmentLight+0x216>
	default:
		counter_lights = 1;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <display7SegmentLight+0x228>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]
		break;
 8000fa8:	e006      	b.n	8000fb8 <display7SegmentLight+0x218>
		break;
 8000faa:	bf00      	nop
 8000fac:	e004      	b.n	8000fb8 <display7SegmentLight+0x218>
		break;
 8000fae:	bf00      	nop
 8000fb0:	e002      	b.n	8000fb8 <display7SegmentLight+0x218>
		break;
 8000fb2:	bf00      	nop
 8000fb4:	e000      	b.n	8000fb8 <display7SegmentLight+0x218>
		break;
 8000fb6:	bf00      	nop
	}
}
 8000fb8:	bf00      	nop
 8000fba:	3730      	adds	r7, #48	; 0x30
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8000fc0:	08004838 	.word	0x08004838
 8000fc4:	08004848 	.word	0x08004848
 8000fc8:	20000024 	.word	0x20000024
 8000fcc:	40010c00 	.word	0x40010c00
 8000fd0:	2000001c 	.word	0x2000001c
 8000fd4:	66666667 	.word	0x66666667
 8000fd8:	20000228 	.word	0x20000228
 8000fdc:	20000020 	.word	0x20000020
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	200000c4 	.word	0x200000c4

08000fe8 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a13      	ldr	r2, [pc, #76]	; (8001044 <HAL_UART_RxCpltCallback+0x5c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d11f      	bne.n	800103a <HAL_UART_RxCpltCallback+0x52>
		buffer[index_buffer++] = temp;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <HAL_UART_RxCpltCallback+0x60>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	b2d1      	uxtb	r1, r2
 8001002:	4a11      	ldr	r2, [pc, #68]	; (8001048 <HAL_UART_RxCpltCallback+0x60>)
 8001004:	7011      	strb	r1, [r2, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	4b10      	ldr	r3, [pc, #64]	; (800104c <HAL_UART_RxCpltCallback+0x64>)
 800100a:	7819      	ldrb	r1, [r3, #0]
 800100c:	4b10      	ldr	r3, [pc, #64]	; (8001050 <HAL_UART_RxCpltCallback+0x68>)
 800100e:	5499      	strb	r1, [r3, r2]
		if (index_buffer == MAX_BUFFER_SIZE)
 8001010:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <HAL_UART_RxCpltCallback+0x60>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b1e      	cmp	r3, #30
 8001016:	d102      	bne.n	800101e <HAL_UART_RxCpltCallback+0x36>
			index_buffer = 0;
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <HAL_UART_RxCpltCallback+0x60>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 800101e:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <HAL_UART_RxCpltCallback+0x6c>)
 8001020:	2201      	movs	r2, #1
 8001022:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 8001024:	2332      	movs	r3, #50	; 0x32
 8001026:	2201      	movs	r2, #1
 8001028:	4908      	ldr	r1, [pc, #32]	; (800104c <HAL_UART_RxCpltCallback+0x64>)
 800102a:	480b      	ldr	r0, [pc, #44]	; (8001058 <HAL_UART_RxCpltCallback+0x70>)
 800102c:	f002 fa15 	bl	800345a <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8001030:	2201      	movs	r2, #1
 8001032:	4906      	ldr	r1, [pc, #24]	; (800104c <HAL_UART_RxCpltCallback+0x64>)
 8001034:	4808      	ldr	r0, [pc, #32]	; (8001058 <HAL_UART_RxCpltCallback+0x70>)
 8001036:	f002 faa2 	bl	800357e <HAL_UART_Receive_IT>
	}
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40004400 	.word	0x40004400
 8001048:	200000bd 	.word	0x200000bd
 800104c:	200000bc 	.word	0x200000bc
 8001050:	2000014c 	.word	0x2000014c
 8001054:	200000be 	.word	0x200000be
 8001058:	200001d4 	.word	0x200001d4

0800105c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	b08f      	sub	sp, #60	; 0x3c
 8001060:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001062:	f000 fde5 	bl	8001c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001066:	f000 f85b 	bl	8001120 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 800106a:	f000 f895 	bl	8001198 <MX_TIM2_Init>
  MX_GPIO_Init();
 800106e:	f000 f909 	bl	8001284 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001072:	f000 f8dd 	bl	8001230 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001076:	4823      	ldr	r0, [pc, #140]	; (8001104 <main+0xa8>)
 8001078:	f001 fe0e 	bl	8002c98 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart2, &temp, 1);
 800107c:	2201      	movs	r2, #1
 800107e:	4922      	ldr	r1, [pc, #136]	; (8001108 <main+0xac>)
 8001080:	4822      	ldr	r0, [pc, #136]	; (800110c <main+0xb0>)
 8001082:	f002 fa7c 	bl	800357e <HAL_UART_Receive_IT>
//	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	initButton();
 8001086:	f7ff f861 	bl	800014c <initButton>
	HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001090:	481f      	ldr	r0, [pc, #124]	; (8001110 <main+0xb4>)
 8001092:	f001 f97e 	bl	8002392 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, GPIO_PIN_SET);
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109c:	481d      	ldr	r0, [pc, #116]	; (8001114 <main+0xb8>)
 800109e:	f001 f978 	bl	8002392 <HAL_GPIO_WritePin>
	while (1) {
		if (buffer_flag == 1) {
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <main+0xbc>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d102      	bne.n	80010b0 <main+0x54>
			buffer_flag = 0;
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <main+0xbc>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
		}
		uart_communiation_fsm(huart2);
 80010b0:	4e16      	ldr	r6, [pc, #88]	; (800110c <main+0xb0>)
 80010b2:	466d      	mov	r5, sp
 80010b4:	f106 0410 	add.w	r4, r6, #16
 80010b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c4:	6823      	ldr	r3, [r4, #0]
 80010c6:	602b      	str	r3, [r5, #0]
 80010c8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80010cc:	f000 facc 	bl	8001668 <uart_communiation_fsm>

		fsm_pedestrian_run();
 80010d0:	f7ff fcca 	bl	8000a68 <fsm_pedestrian_run>

		if (status == AUTOMATIC_MODE)
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <main+0xc0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d102      	bne.n	80010e2 <main+0x86>
			fsm_automatic_run();
 80010dc:	f7ff f954 	bl	8000388 <fsm_automatic_run>
 80010e0:	e005      	b.n	80010ee <main+0x92>
		else if (status == MANUAL_MODE)
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <main+0xc0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d101      	bne.n	80010ee <main+0x92>
			fsm_manual_run();
 80010ea:	f7ff faa1 	bl	8000630 <fsm_manual_run>

		if (buffer_flag == 1) {
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <main+0xbc>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d102      	bne.n	80010fc <main+0xa0>
			buffer_flag = 0;
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <main+0xbc>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
		}

		display7SegmentLight();
 80010fc:	f7ff fe50 	bl	8000da0 <display7SegmentLight>
	while (1) {
 8001100:	e7cf      	b.n	80010a2 <main+0x46>
 8001102:	bf00      	nop
 8001104:	2000018c 	.word	0x2000018c
 8001108:	200000bc 	.word	0x200000bc
 800110c:	200001d4 	.word	0x200001d4
 8001110:	40010c00 	.word	0x40010c00
 8001114:	40010800 	.word	0x40010800
 8001118:	200000be 	.word	0x200000be
 800111c:	20000000 	.word	0x20000000

08001120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b090      	sub	sp, #64	; 0x40
 8001124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001126:	f107 0318 	add.w	r3, r7, #24
 800112a:	2228      	movs	r2, #40	; 0x28
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f002 feb6 	bl	8003ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001142:	2302      	movs	r3, #2
 8001144:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001146:	2301      	movs	r3, #1
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800114a:	2310      	movs	r3, #16
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800114e:	2300      	movs	r3, #0
 8001150:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	4618      	mov	r0, r3
 8001158:	f001 f934 	bl	80023c4 <HAL_RCC_OscConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001162:	f000 f90b 	bl	800137c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001166:	230f      	movs	r3, #15
 8001168:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f001 fba0 	bl	80028c4 <HAL_RCC_ClockConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800118a:	f000 f8f7 	bl	800137c <Error_Handler>
  }
}
 800118e:	bf00      	nop
 8001190:	3740      	adds	r7, #64	; 0x40
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <MX_TIM2_Init+0x94>)
 80011b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_TIM2_Init+0x94>)
 80011be:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80011c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c4:	4b19      	ldr	r3, [pc, #100]	; (800122c <MX_TIM2_Init+0x94>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <MX_TIM2_Init+0x94>)
 80011cc:	2209      	movs	r2, #9
 80011ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_TIM2_Init+0x94>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <MX_TIM2_Init+0x94>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011dc:	4813      	ldr	r0, [pc, #76]	; (800122c <MX_TIM2_Init+0x94>)
 80011de:	f001 fd0b 	bl	8002bf8 <HAL_TIM_Base_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011e8:	f000 f8c8 	bl	800137c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	4619      	mov	r1, r3
 80011f8:	480c      	ldr	r0, [pc, #48]	; (800122c <MX_TIM2_Init+0x94>)
 80011fa:	f001 fea1 	bl	8002f40 <HAL_TIM_ConfigClockSource>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001204:	f000 f8ba 	bl	800137c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_TIM2_Init+0x94>)
 8001216:	f002 f869 	bl	80032ec <HAL_TIMEx_MasterConfigSynchronization>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001220:	f000 f8ac 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2000018c 	.word	0x2000018c

08001230 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_USART2_UART_Init+0x4c>)
 8001236:	4a12      	ldr	r2, [pc, #72]	; (8001280 <MX_USART2_UART_Init+0x50>)
 8001238:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <MX_USART2_UART_Init+0x4c>)
 800123c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001240:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_USART2_UART_Init+0x4c>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_USART2_UART_Init+0x4c>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <MX_USART2_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_USART2_UART_Init+0x4c>)
 8001256:	220c      	movs	r2, #12
 8001258:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <MX_USART2_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_USART2_UART_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_USART2_UART_Init+0x4c>)
 8001268:	f002 f8aa 	bl	80033c0 <HAL_UART_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001272:	f000 f883 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200001d4 	.word	0x200001d4
 8001280:	40004400 	.word	0x40004400

08001284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b2f      	ldr	r3, [pc, #188]	; (8001358 <MX_GPIO_Init+0xd4>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a2e      	ldr	r2, [pc, #184]	; (8001358 <MX_GPIO_Init+0xd4>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <MX_GPIO_Init+0xd4>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b0:	4b29      	ldr	r3, [pc, #164]	; (8001358 <MX_GPIO_Init+0xd4>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a28      	ldr	r2, [pc, #160]	; (8001358 <MX_GPIO_Init+0xd4>)
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b26      	ldr	r3, [pc, #152]	; (8001358 <MX_GPIO_Init+0xd4>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG2_Pin|BUZZER_Pin|SEG3_Pin|D7_PEDESTRIAN_Pin
 80012c8:	2200      	movs	r2, #0
 80012ca:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80012ce:	4823      	ldr	r0, [pc, #140]	; (800135c <MX_GPIO_Init+0xd8>)
 80012d0:	f001 f85f 	bl	8002392 <HAL_GPIO_WritePin>
                          |SEG4_Pin|LED_1_Pin|SEG5_Pin|SEG6_Pin
                          |LED_RED_2_Pin|LED_AMBER_2_Pin|LED_GREEN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|D6_PEDESTRIAN_Pin|LED_RED_1_Pin
 80012d4:	2200      	movs	r2, #0
 80012d6:	f24e 71fe 	movw	r1, #59390	; 0xe7fe
 80012da:	4821      	ldr	r0, [pc, #132]	; (8001360 <MX_GPIO_Init+0xdc>)
 80012dc:	f001 f859 	bl	8002392 <HAL_GPIO_WritePin>
                          |LED_AMBER_1_Pin|LED_GREEN_1_Pin|LED_2_Pin|LED_4_Pin
                          |LED_3_Pin|EN0_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_PEDESTRIAN_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_PEDESTRIAN_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 80012e0:	2313      	movs	r3, #19
 80012e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	4619      	mov	r1, r3
 80012f2:	481a      	ldr	r0, [pc, #104]	; (800135c <MX_GPIO_Init+0xd8>)
 80012f4:	f000 febc 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG2_Pin BUZZER_Pin SEG3_Pin D7_PEDESTRIAN_Pin
                           SEG4_Pin LED_1_Pin SEG5_Pin SEG6_Pin
                           LED_RED_2_Pin LED_AMBER_2_Pin LED_GREEN_2_Pin */
  GPIO_InitStruct.Pin = SEG2_Pin|BUZZER_Pin|SEG3_Pin|D7_PEDESTRIAN_Pin
 80012f8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80012fc:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|LED_1_Pin|SEG5_Pin|SEG6_Pin
                          |LED_RED_2_Pin|LED_AMBER_2_Pin|LED_GREEN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2302      	movs	r3, #2
 8001308:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	4619      	mov	r1, r3
 8001310:	4812      	ldr	r0, [pc, #72]	; (800135c <MX_GPIO_Init+0xd8>)
 8001312:	f000 fead 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_3_Pin BUTTON_2_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_2_1_Pin;
 8001316:	f640 0301 	movw	r3, #2049	; 0x801
 800131a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001320:	2301      	movs	r3, #1
 8001322:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	4619      	mov	r1, r3
 800132a:	480d      	ldr	r0, [pc, #52]	; (8001360 <MX_GPIO_Init+0xdc>)
 800132c:	f000 fea0 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin D6_PEDESTRIAN_Pin LED_RED_1_Pin
                           LED_AMBER_1_Pin LED_GREEN_1_Pin LED_2_Pin LED_4_Pin
                           LED_3_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|D6_PEDESTRIAN_Pin|LED_RED_1_Pin
 8001330:	f24e 73fe 	movw	r3, #59390	; 0xe7fe
 8001334:	60bb      	str	r3, [r7, #8]
                          |LED_AMBER_1_Pin|LED_GREEN_1_Pin|LED_2_Pin|LED_4_Pin
                          |LED_3_Pin|EN0_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2302      	movs	r3, #2
 8001340:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	4619      	mov	r1, r3
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_GPIO_Init+0xdc>)
 800134a:	f000 fe91 	bl	8002070 <HAL_GPIO_Init>

}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000
 800135c:	40010800 	.word	0x40010800
 8001360:	40010c00 	.word	0x40010c00

08001364 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	timerRun();
 800136c:	f000 f82c 	bl	80013c8 <timerRun>
	getKeyInput();
 8001370:	f7fe ff28 	bl	80001c4 <getKeyInput>
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
}
 8001382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001384:	e7fe      	b.n	8001384 <Error_Handler+0x8>
	...

08001388 <setTimer>:
#define TIMER_CYCLE 10

int timer_flag[NO_TIMERS + 1];
int timer_counter[NO_TIMERS + 1];

void setTimer(int flagNo, int duration) {
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
	timer_counter[flagNo] = duration / TIMER_CYCLE;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	4a09      	ldr	r2, [pc, #36]	; (80013bc <setTimer+0x34>)
 8001396:	fb82 1203 	smull	r1, r2, r2, r3
 800139a:	1092      	asrs	r2, r2, #2
 800139c:	17db      	asrs	r3, r3, #31
 800139e:	1ad2      	subs	r2, r2, r3
 80013a0:	4907      	ldr	r1, [pc, #28]	; (80013c0 <setTimer+0x38>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[flagNo] = 0;
 80013a8:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <setTimer+0x3c>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2100      	movs	r1, #0
 80013ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	66666667 	.word	0x66666667
 80013c0:	20000218 	.word	0x20000218
 80013c4:	20000228 	.word	0x20000228

080013c8 <timerRun>:

void timerRun() {
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
	for (int flagNo = 1; flagNo <= NO_TIMERS; flagNo++) {
 80013ce:	2301      	movs	r3, #1
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	e01c      	b.n	800140e <timerRun+0x46>
		if (timer_counter[flagNo] > 0) {
 80013d4:	4a12      	ldr	r2, [pc, #72]	; (8001420 <timerRun+0x58>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	dd13      	ble.n	8001408 <timerRun+0x40>
			timer_counter[flagNo]--;
 80013e0:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <timerRun+0x58>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e8:	1e5a      	subs	r2, r3, #1
 80013ea:	490d      	ldr	r1, [pc, #52]	; (8001420 <timerRun+0x58>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[flagNo] <= 0) {
 80013f2:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <timerRun+0x58>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc04      	bgt.n	8001408 <timerRun+0x40>
				timer_flag[flagNo] = 1;
 80013fe:	4a09      	ldr	r2, [pc, #36]	; (8001424 <timerRun+0x5c>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2101      	movs	r1, #1
 8001404:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int flagNo = 1; flagNo <= NO_TIMERS; flagNo++) {
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3301      	adds	r3, #1
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b03      	cmp	r3, #3
 8001412:	dddf      	ble.n	80013d4 <timerRun+0xc>
			}
		}
	}
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	20000218 	.word	0x20000218
 8001424:	20000228 	.word	0x20000228

08001428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_MspInit+0x5c>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	4a14      	ldr	r2, [pc, #80]	; (8001484 <HAL_MspInit+0x5c>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6193      	str	r3, [r2, #24]
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_MspInit+0x5c>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <HAL_MspInit+0x5c>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <HAL_MspInit+0x5c>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001450:	61d3      	str	r3, [r2, #28]
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <HAL_MspInit+0x5c>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_MspInit+0x60>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	4a04      	ldr	r2, [pc, #16]	; (8001488 <HAL_MspInit+0x60>)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147a:	bf00      	nop
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	40021000 	.word	0x40021000
 8001488:	40010000 	.word	0x40010000

0800148c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800149c:	d113      	bne.n	80014c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <HAL_TIM_Base_MspInit+0x44>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <HAL_TIM_Base_MspInit+0x44>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	61d3      	str	r3, [r2, #28]
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <HAL_TIM_Base_MspInit+0x44>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	201c      	movs	r0, #28
 80014bc:	f000 fcf1 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014c0:	201c      	movs	r0, #28
 80014c2:	f000 fd0a 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000

080014d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0310 	add.w	r3, r7, #16
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a1f      	ldr	r2, [pc, #124]	; (800156c <HAL_UART_MspInit+0x98>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d137      	bne.n	8001564 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_UART_MspInit+0x9c>)
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <HAL_UART_MspInit+0x9c>)
 80014fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014fe:	61d3      	str	r3, [r2, #28]
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <HAL_UART_MspInit+0x9c>)
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <HAL_UART_MspInit+0x9c>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a17      	ldr	r2, [pc, #92]	; (8001570 <HAL_UART_MspInit+0x9c>)
 8001512:	f043 0304 	orr.w	r3, r3, #4
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_UART_MspInit+0x9c>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001524:	2304      	movs	r3, #4
 8001526:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	4619      	mov	r1, r3
 8001536:	480f      	ldr	r0, [pc, #60]	; (8001574 <HAL_UART_MspInit+0xa0>)
 8001538:	f000 fd9a 	bl	8002070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800153c:	2308      	movs	r3, #8
 800153e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	4619      	mov	r1, r3
 800154e:	4809      	ldr	r0, [pc, #36]	; (8001574 <HAL_UART_MspInit+0xa0>)
 8001550:	f000 fd8e 	bl	8002070 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2100      	movs	r1, #0
 8001558:	2026      	movs	r0, #38	; 0x26
 800155a:	f000 fca2 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800155e:	2026      	movs	r0, #38	; 0x26
 8001560:	f000 fcbb 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001564:	bf00      	nop
 8001566:	3720      	adds	r7, #32
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40004400 	.word	0x40004400
 8001570:	40021000 	.word	0x40021000
 8001574:	40010800 	.word	0x40010800

08001578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800157c:	e7fe      	b.n	800157c <NMI_Handler+0x4>

0800157e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <HardFault_Handler+0x4>

08001584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <MemManage_Handler+0x4>

0800158a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <BusFault_Handler+0x4>

08001590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <UsageFault_Handler+0x4>

08001596 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr

080015a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr

080015ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015be:	f000 fb7d 	bl	8001cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <TIM2_IRQHandler+0x10>)
 80015ce:	f001 fbaf 	bl	8002d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	2000018c 	.word	0x2000018c

080015dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <USART2_IRQHandler+0x10>)
 80015e2:	f001 fffd 	bl	80035e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200001d4 	.word	0x200001d4

080015f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f8:	4a14      	ldr	r2, [pc, #80]	; (800164c <_sbrk+0x5c>)
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <_sbrk+0x60>)
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d102      	bne.n	8001612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <_sbrk+0x64>)
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <_sbrk+0x68>)
 8001610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	429a      	cmp	r2, r3
 800161e:	d207      	bcs.n	8001630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001620:	f002 fc06 	bl	8003e30 <__errno>
 8001624:	4603      	mov	r3, r0
 8001626:	220c      	movs	r2, #12
 8001628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
 800162e:	e009      	b.n	8001644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <_sbrk+0x64>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <_sbrk+0x64>)
 8001640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20002800 	.word	0x20002800
 8001650:	00000400 	.word	0x00000400
 8001654:	200000c8 	.word	0x200000c8
 8001658:	20000250 	.word	0x20000250

0800165c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <uart_communiation_fsm>:
 */

#include "uart_communication.h"

void uart_communiation_fsm(UART_HandleTypeDef huart2)
{
 8001668:	b084      	sub	sp, #16
 800166a:	b580      	push	{r7, lr}
 800166c:	af00      	add	r7, sp, #0
 800166e:	f107 0c08 	add.w	ip, r7, #8
 8001672:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	switch (traffic_status)
 8001676:	4b9d      	ldr	r3, [pc, #628]	; (80018ec <uart_communiation_fsm+0x284>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b04      	cmp	r3, #4
 800167c:	dc58      	bgt.n	8001730 <uart_communiation_fsm+0xc8>
 800167e:	2b00      	cmp	r3, #0
 8001680:	dc46      	bgt.n	8001710 <uart_communiation_fsm+0xa8>
		}

		break;

	default:
		break;
 8001682:	e27d      	b.n	8001b80 <uart_communiation_fsm+0x518>
 8001684:	3b32      	subs	r3, #50	; 0x32
 8001686:	2b1e      	cmp	r3, #30
 8001688:	f200 827a 	bhi.w	8001b80 <uart_communiation_fsm+0x518>
 800168c:	a201      	add	r2, pc, #4	; (adr r2, 8001694 <uart_communiation_fsm+0x2c>)
 800168e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001692:	bf00      	nop
 8001694:	0800177d 	.word	0x0800177d
 8001698:	08001b81 	.word	0x08001b81
 800169c:	08001b81 	.word	0x08001b81
 80016a0:	08001b81 	.word	0x08001b81
 80016a4:	08001b81 	.word	0x08001b81
 80016a8:	08001b81 	.word	0x08001b81
 80016ac:	08001b81 	.word	0x08001b81
 80016b0:	08001b81 	.word	0x08001b81
 80016b4:	08001b81 	.word	0x08001b81
 80016b8:	08001b81 	.word	0x08001b81
 80016bc:	080017d9 	.word	0x080017d9
 80016c0:	08001b81 	.word	0x08001b81
 80016c4:	08001b81 	.word	0x08001b81
 80016c8:	08001b81 	.word	0x08001b81
 80016cc:	08001b81 	.word	0x08001b81
 80016d0:	08001b81 	.word	0x08001b81
 80016d4:	08001b81 	.word	0x08001b81
 80016d8:	08001b81 	.word	0x08001b81
 80016dc:	08001b81 	.word	0x08001b81
 80016e0:	08001b81 	.word	0x08001b81
 80016e4:	08001835 	.word	0x08001835
 80016e8:	08001b81 	.word	0x08001b81
 80016ec:	08001b81 	.word	0x08001b81
 80016f0:	08001b81 	.word	0x08001b81
 80016f4:	08001b81 	.word	0x08001b81
 80016f8:	08001b81 	.word	0x08001b81
 80016fc:	08001b81 	.word	0x08001b81
 8001700:	08001b81 	.word	0x08001b81
 8001704:	08001b81 	.word	0x08001b81
 8001708:	08001b81 	.word	0x08001b81
 800170c:	08001891 	.word	0x08001891
 8001710:	3b01      	subs	r3, #1
 8001712:	2b03      	cmp	r3, #3
 8001714:	f200 8234 	bhi.w	8001b80 <uart_communiation_fsm+0x518>
 8001718:	a201      	add	r2, pc, #4	; (adr r2, 8001720 <uart_communiation_fsm+0xb8>)
 800171a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171e:	bf00      	nop
 8001720:	0800173d 	.word	0x0800173d
 8001724:	08001925 	.word	0x08001925
 8001728:	080019ef 	.word	0x080019ef
 800172c:	08001ab9 	.word	0x08001ab9
	switch (traffic_status)
 8001730:	2b50      	cmp	r3, #80	; 0x50
 8001732:	f300 8225 	bgt.w	8001b80 <uart_communiation_fsm+0x518>
 8001736:	2b32      	cmp	r3, #50	; 0x32
 8001738:	daa4      	bge.n	8001684 <uart_communiation_fsm+0x1c>
		break;
 800173a:	e221      	b.n	8001b80 <uart_communiation_fsm+0x518>
		if (status == AUTOMATIC_MODE)
 800173c:	4b6c      	ldr	r3, [pc, #432]	; (80018f0 <uart_communiation_fsm+0x288>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d10d      	bne.n	8001760 <uart_communiation_fsm+0xf8>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Mode: Automatic mode\r\n"), 1000);
 8001744:	496b      	ldr	r1, [pc, #428]	; (80018f4 <uart_communiation_fsm+0x28c>)
 8001746:	486c      	ldr	r0, [pc, #432]	; (80018f8 <uart_communiation_fsm+0x290>)
 8001748:	f002 fbb2 	bl	8003eb0 <siprintf>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001754:	4968      	ldr	r1, [pc, #416]	; (80018f8 <uart_communiation_fsm+0x290>)
 8001756:	f107 0008 	add.w	r0, r7, #8
 800175a:	f001 fe7e 	bl	800345a <HAL_UART_Transmit>
		break;
 800175e:	e21e      	b.n	8001b9e <uart_communiation_fsm+0x536>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Mode: Manual mode\r\n"), 1000);
 8001760:	4966      	ldr	r1, [pc, #408]	; (80018fc <uart_communiation_fsm+0x294>)
 8001762:	4865      	ldr	r0, [pc, #404]	; (80018f8 <uart_communiation_fsm+0x290>)
 8001764:	f002 fba4 	bl	8003eb0 <siprintf>
 8001768:	4603      	mov	r3, r0
 800176a:	b29a      	uxth	r2, r3
 800176c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001770:	4961      	ldr	r1, [pc, #388]	; (80018f8 <uart_communiation_fsm+0x290>)
 8001772:	f107 0008 	add.w	r0, r7, #8
 8001776:	f001 fe70 	bl	800345a <HAL_UART_Transmit>
		break;
 800177a:	e210      	b.n	8001b9e <uart_communiation_fsm+0x536>
		if (uartOneTimeFlag == 0)
 800177c:	4b60      	ldr	r3, [pc, #384]	; (8001900 <uart_communiation_fsm+0x298>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10f      	bne.n	80017a4 <uart_communiation_fsm+0x13c>
			uartOneTimeFlag = 1;
 8001784:	4b5e      	ldr	r3, [pc, #376]	; (8001900 <uart_communiation_fsm+0x298>)
 8001786:	2201      	movs	r2, #1
 8001788:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "RED   GREEN\r\n"), 1000);
 800178a:	495e      	ldr	r1, [pc, #376]	; (8001904 <uart_communiation_fsm+0x29c>)
 800178c:	485a      	ldr	r0, [pc, #360]	; (80018f8 <uart_communiation_fsm+0x290>)
 800178e:	f002 fb8f 	bl	8003eb0 <siprintf>
 8001792:	4603      	mov	r3, r0
 8001794:	b29a      	uxth	r2, r3
 8001796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179a:	4957      	ldr	r1, [pc, #348]	; (80018f8 <uart_communiation_fsm+0x290>)
 800179c:	f107 0008 	add.w	r0, r7, #8
 80017a0:	f001 fe5b 	bl	800345a <HAL_UART_Transmit>
		if (countingDownFlag == 0)
 80017a4:	4b58      	ldr	r3, [pc, #352]	; (8001908 <uart_communiation_fsm+0x2a0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f040 81eb 	bne.w	8001b84 <uart_communiation_fsm+0x51c>
			countingDownFlag = 1;
 80017ae:	4b56      	ldr	r3, [pc, #344]	; (8001908 <uart_communiation_fsm+0x2a0>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Light 1 = %d   Light 2 = %d\r\n", counter_light_1, counter_light_2), 1000);
 80017b4:	4b55      	ldr	r3, [pc, #340]	; (800190c <uart_communiation_fsm+0x2a4>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b55      	ldr	r3, [pc, #340]	; (8001910 <uart_communiation_fsm+0x2a8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4955      	ldr	r1, [pc, #340]	; (8001914 <uart_communiation_fsm+0x2ac>)
 80017be:	484e      	ldr	r0, [pc, #312]	; (80018f8 <uart_communiation_fsm+0x290>)
 80017c0:	f002 fb76 	bl	8003eb0 <siprintf>
 80017c4:	4603      	mov	r3, r0
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017cc:	494a      	ldr	r1, [pc, #296]	; (80018f8 <uart_communiation_fsm+0x290>)
 80017ce:	f107 0008 	add.w	r0, r7, #8
 80017d2:	f001 fe42 	bl	800345a <HAL_UART_Transmit>
		break;
 80017d6:	e1d5      	b.n	8001b84 <uart_communiation_fsm+0x51c>
		if (uartOneTimeFlag == 0)
 80017d8:	4b49      	ldr	r3, [pc, #292]	; (8001900 <uart_communiation_fsm+0x298>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10f      	bne.n	8001800 <uart_communiation_fsm+0x198>
			uartOneTimeFlag = 1;
 80017e0:	4b47      	ldr	r3, [pc, #284]	; (8001900 <uart_communiation_fsm+0x298>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "RED   AMBER\r\n"), 1000);
 80017e6:	494c      	ldr	r1, [pc, #304]	; (8001918 <uart_communiation_fsm+0x2b0>)
 80017e8:	4843      	ldr	r0, [pc, #268]	; (80018f8 <uart_communiation_fsm+0x290>)
 80017ea:	f002 fb61 	bl	8003eb0 <siprintf>
 80017ee:	4603      	mov	r3, r0
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f6:	4940      	ldr	r1, [pc, #256]	; (80018f8 <uart_communiation_fsm+0x290>)
 80017f8:	f107 0008 	add.w	r0, r7, #8
 80017fc:	f001 fe2d 	bl	800345a <HAL_UART_Transmit>
		if (countingDownFlag == 0)
 8001800:	4b41      	ldr	r3, [pc, #260]	; (8001908 <uart_communiation_fsm+0x2a0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	f040 81bf 	bne.w	8001b88 <uart_communiation_fsm+0x520>
			countingDownFlag = 1;
 800180a:	4b3f      	ldr	r3, [pc, #252]	; (8001908 <uart_communiation_fsm+0x2a0>)
 800180c:	2201      	movs	r2, #1
 800180e:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Light 1 = %d   Light 2 = %d\r\n", counter_light_1, counter_light_2), 1000);
 8001810:	4b3e      	ldr	r3, [pc, #248]	; (800190c <uart_communiation_fsm+0x2a4>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b3e      	ldr	r3, [pc, #248]	; (8001910 <uart_communiation_fsm+0x2a8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	493e      	ldr	r1, [pc, #248]	; (8001914 <uart_communiation_fsm+0x2ac>)
 800181a:	4837      	ldr	r0, [pc, #220]	; (80018f8 <uart_communiation_fsm+0x290>)
 800181c:	f002 fb48 	bl	8003eb0 <siprintf>
 8001820:	4603      	mov	r3, r0
 8001822:	b29a      	uxth	r2, r3
 8001824:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001828:	4933      	ldr	r1, [pc, #204]	; (80018f8 <uart_communiation_fsm+0x290>)
 800182a:	f107 0008 	add.w	r0, r7, #8
 800182e:	f001 fe14 	bl	800345a <HAL_UART_Transmit>
		break;
 8001832:	e1a9      	b.n	8001b88 <uart_communiation_fsm+0x520>
		if (uartOneTimeFlag == 0)
 8001834:	4b32      	ldr	r3, [pc, #200]	; (8001900 <uart_communiation_fsm+0x298>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10f      	bne.n	800185c <uart_communiation_fsm+0x1f4>
			uartOneTimeFlag = 1;
 800183c:	4b30      	ldr	r3, [pc, #192]	; (8001900 <uart_communiation_fsm+0x298>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "GREEN   RED\r\n"), 1000);
 8001842:	4936      	ldr	r1, [pc, #216]	; (800191c <uart_communiation_fsm+0x2b4>)
 8001844:	482c      	ldr	r0, [pc, #176]	; (80018f8 <uart_communiation_fsm+0x290>)
 8001846:	f002 fb33 	bl	8003eb0 <siprintf>
 800184a:	4603      	mov	r3, r0
 800184c:	b29a      	uxth	r2, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001852:	4929      	ldr	r1, [pc, #164]	; (80018f8 <uart_communiation_fsm+0x290>)
 8001854:	f107 0008 	add.w	r0, r7, #8
 8001858:	f001 fdff 	bl	800345a <HAL_UART_Transmit>
		if (countingDownFlag == 0)
 800185c:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <uart_communiation_fsm+0x2a0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	f040 8193 	bne.w	8001b8c <uart_communiation_fsm+0x524>
			countingDownFlag = 1;
 8001866:	4b28      	ldr	r3, [pc, #160]	; (8001908 <uart_communiation_fsm+0x2a0>)
 8001868:	2201      	movs	r2, #1
 800186a:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Light 1 = %d   Light 2 = %d\r\n", counter_light_1, counter_light_2), 1000);
 800186c:	4b27      	ldr	r3, [pc, #156]	; (800190c <uart_communiation_fsm+0x2a4>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b27      	ldr	r3, [pc, #156]	; (8001910 <uart_communiation_fsm+0x2a8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4927      	ldr	r1, [pc, #156]	; (8001914 <uart_communiation_fsm+0x2ac>)
 8001876:	4820      	ldr	r0, [pc, #128]	; (80018f8 <uart_communiation_fsm+0x290>)
 8001878:	f002 fb1a 	bl	8003eb0 <siprintf>
 800187c:	4603      	mov	r3, r0
 800187e:	b29a      	uxth	r2, r3
 8001880:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001884:	491c      	ldr	r1, [pc, #112]	; (80018f8 <uart_communiation_fsm+0x290>)
 8001886:	f107 0008 	add.w	r0, r7, #8
 800188a:	f001 fde6 	bl	800345a <HAL_UART_Transmit>
		break;
 800188e:	e17d      	b.n	8001b8c <uart_communiation_fsm+0x524>
		if (uartOneTimeFlag == 0)
 8001890:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <uart_communiation_fsm+0x298>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10f      	bne.n	80018b8 <uart_communiation_fsm+0x250>
			uartOneTimeFlag = 1;
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <uart_communiation_fsm+0x298>)
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "AMBER   RED\r\n"), 1000);
 800189e:	4920      	ldr	r1, [pc, #128]	; (8001920 <uart_communiation_fsm+0x2b8>)
 80018a0:	4815      	ldr	r0, [pc, #84]	; (80018f8 <uart_communiation_fsm+0x290>)
 80018a2:	f002 fb05 	bl	8003eb0 <siprintf>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ae:	4912      	ldr	r1, [pc, #72]	; (80018f8 <uart_communiation_fsm+0x290>)
 80018b0:	f107 0008 	add.w	r0, r7, #8
 80018b4:	f001 fdd1 	bl	800345a <HAL_UART_Transmit>
		if (countingDownFlag == 0)
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <uart_communiation_fsm+0x2a0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f040 8167 	bne.w	8001b90 <uart_communiation_fsm+0x528>
			countingDownFlag = 1;
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <uart_communiation_fsm+0x2a0>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Light 1 = %d   Light 2 = %d\r\n", counter_light_1, counter_light_2), 1000);
 80018c8:	4b10      	ldr	r3, [pc, #64]	; (800190c <uart_communiation_fsm+0x2a4>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b10      	ldr	r3, [pc, #64]	; (8001910 <uart_communiation_fsm+0x2a8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4910      	ldr	r1, [pc, #64]	; (8001914 <uart_communiation_fsm+0x2ac>)
 80018d2:	4809      	ldr	r0, [pc, #36]	; (80018f8 <uart_communiation_fsm+0x290>)
 80018d4:	f002 faec 	bl	8003eb0 <siprintf>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29a      	uxth	r2, r3
 80018dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e0:	4905      	ldr	r1, [pc, #20]	; (80018f8 <uart_communiation_fsm+0x290>)
 80018e2:	f107 0008 	add.w	r0, r7, #8
 80018e6:	f001 fdb8 	bl	800345a <HAL_UART_Transmit>
		break;
 80018ea:	e151      	b.n	8001b90 <uart_communiation_fsm+0x528>
 80018ec:	2000000c 	.word	0x2000000c
 80018f0:	20000000 	.word	0x20000000
 80018f4:	08004864 	.word	0x08004864
 80018f8:	2000016c 	.word	0x2000016c
 80018fc:	0800487c 	.word	0x0800487c
 8001900:	200000c0 	.word	0x200000c0
 8001904:	08004890 	.word	0x08004890
 8001908:	200000c4 	.word	0x200000c4
 800190c:	2000001c 	.word	0x2000001c
 8001910:	20000020 	.word	0x20000020
 8001914:	080048a0 	.word	0x080048a0
 8001918:	080048c0 	.word	0x080048c0
 800191c:	080048d0 	.word	0x080048d0
 8001920:	080048e0 	.word	0x080048e0
		if (uartOneTimeFlag == 0)
 8001924:	4ba1      	ldr	r3, [pc, #644]	; (8001bac <uart_communiation_fsm+0x544>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d11f      	bne.n	800196c <uart_communiation_fsm+0x304>
			uartOneTimeFlag = 1;
 800192c:	4b9f      	ldr	r3, [pc, #636]	; (8001bac <uart_communiation_fsm+0x544>)
 800192e:	2201      	movs	r2, #1
 8001930:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Mode 2: Modifying RED\r\n"), 1000);
 8001932:	499f      	ldr	r1, [pc, #636]	; (8001bb0 <uart_communiation_fsm+0x548>)
 8001934:	489f      	ldr	r0, [pc, #636]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001936:	f002 fabb 	bl	8003eb0 <siprintf>
 800193a:	4603      	mov	r3, r0
 800193c:	b29a      	uxth	r2, r3
 800193e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001942:	499c      	ldr	r1, [pc, #624]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001944:	f107 0008 	add.w	r0, r7, #8
 8001948:	f001 fd87 	bl	800345a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Current time = %d\r\n", counter_light_1), 1000);
 800194c:	4b9a      	ldr	r3, [pc, #616]	; (8001bb8 <uart_communiation_fsm+0x550>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	499a      	ldr	r1, [pc, #616]	; (8001bbc <uart_communiation_fsm+0x554>)
 8001954:	4897      	ldr	r0, [pc, #604]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001956:	f002 faab 	bl	8003eb0 <siprintf>
 800195a:	4603      	mov	r3, r0
 800195c:	b29a      	uxth	r2, r3
 800195e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001962:	4994      	ldr	r1, [pc, #592]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001964:	f107 0008 	add.w	r0, r7, #8
 8001968:	f001 fd77 	bl	800345a <HAL_UART_Transmit>
		if (isButtonPressed(2) == 1)
 800196c:	2002      	movs	r0, #2
 800196e:	f7fe fce1 	bl	8000334 <isButtonPressed>
 8001972:	4603      	mov	r3, r0
 8001974:	2b01      	cmp	r3, #1
 8001976:	d115      	bne.n	80019a4 <uart_communiation_fsm+0x33c>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Updated time = %d\r\n", time_modify_counter / 1000), 1000);
 8001978:	4b91      	ldr	r3, [pc, #580]	; (8001bc0 <uart_communiation_fsm+0x558>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a91      	ldr	r2, [pc, #580]	; (8001bc4 <uart_communiation_fsm+0x55c>)
 800197e:	fb82 1203 	smull	r1, r2, r2, r3
 8001982:	1192      	asrs	r2, r2, #6
 8001984:	17db      	asrs	r3, r3, #31
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	461a      	mov	r2, r3
 800198a:	498f      	ldr	r1, [pc, #572]	; (8001bc8 <uart_communiation_fsm+0x560>)
 800198c:	4889      	ldr	r0, [pc, #548]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 800198e:	f002 fa8f 	bl	8003eb0 <siprintf>
 8001992:	4603      	mov	r3, r0
 8001994:	b29a      	uxth	r2, r3
 8001996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199a:	4986      	ldr	r1, [pc, #536]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 800199c:	f107 0008 	add.w	r0, r7, #8
 80019a0:	f001 fd5b 	bl	800345a <HAL_UART_Transmit>
		if (isButtonPressed(3) == 1)
 80019a4:	2003      	movs	r0, #3
 80019a6:	f7fe fcc5 	bl	8000334 <isButtonPressed>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	f040 80f1 	bne.w	8001b94 <uart_communiation_fsm+0x52c>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Upon update:\r\n"), 1000);
 80019b2:	4986      	ldr	r1, [pc, #536]	; (8001bcc <uart_communiation_fsm+0x564>)
 80019b4:	487f      	ldr	r0, [pc, #508]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 80019b6:	f002 fa7b 	bl	8003eb0 <siprintf>
 80019ba:	4603      	mov	r3, r0
 80019bc:	b29a      	uxth	r2, r3
 80019be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c2:	497c      	ldr	r1, [pc, #496]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 80019c4:	f107 0008 	add.w	r0, r7, #8
 80019c8:	f001 fd47 	bl	800345a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "RED counter = %d\r\n", counter_light_1), 1000);
 80019cc:	4b7a      	ldr	r3, [pc, #488]	; (8001bb8 <uart_communiation_fsm+0x550>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	497f      	ldr	r1, [pc, #508]	; (8001bd0 <uart_communiation_fsm+0x568>)
 80019d4:	4877      	ldr	r0, [pc, #476]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 80019d6:	f002 fa6b 	bl	8003eb0 <siprintf>
 80019da:	4603      	mov	r3, r0
 80019dc:	b29a      	uxth	r2, r3
 80019de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e2:	4974      	ldr	r1, [pc, #464]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 80019e4:	f107 0008 	add.w	r0, r7, #8
 80019e8:	f001 fd37 	bl	800345a <HAL_UART_Transmit>
		break;
 80019ec:	e0d2      	b.n	8001b94 <uart_communiation_fsm+0x52c>
		if (uartOneTimeFlag == 0)
 80019ee:	4b6f      	ldr	r3, [pc, #444]	; (8001bac <uart_communiation_fsm+0x544>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d11f      	bne.n	8001a36 <uart_communiation_fsm+0x3ce>
			uartOneTimeFlag = 1;
 80019f6:	4b6d      	ldr	r3, [pc, #436]	; (8001bac <uart_communiation_fsm+0x544>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Mode 3: Modifying AMBER\r\n"), 1000);
 80019fc:	4975      	ldr	r1, [pc, #468]	; (8001bd4 <uart_communiation_fsm+0x56c>)
 80019fe:	486d      	ldr	r0, [pc, #436]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001a00:	f002 fa56 	bl	8003eb0 <siprintf>
 8001a04:	4603      	mov	r3, r0
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0c:	4969      	ldr	r1, [pc, #420]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001a0e:	f107 0008 	add.w	r0, r7, #8
 8001a12:	f001 fd22 	bl	800345a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Current time = %d\r\n", counter_light_1), 1000);
 8001a16:	4b68      	ldr	r3, [pc, #416]	; (8001bb8 <uart_communiation_fsm+0x550>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4967      	ldr	r1, [pc, #412]	; (8001bbc <uart_communiation_fsm+0x554>)
 8001a1e:	4865      	ldr	r0, [pc, #404]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001a20:	f002 fa46 	bl	8003eb0 <siprintf>
 8001a24:	4603      	mov	r3, r0
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2c:	4961      	ldr	r1, [pc, #388]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001a2e:	f107 0008 	add.w	r0, r7, #8
 8001a32:	f001 fd12 	bl	800345a <HAL_UART_Transmit>
		if (isButtonPressed(2) == 1)
 8001a36:	2002      	movs	r0, #2
 8001a38:	f7fe fc7c 	bl	8000334 <isButtonPressed>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d115      	bne.n	8001a6e <uart_communiation_fsm+0x406>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Updated time = %d\r\n", time_modify_counter / 1000), 1000);
 8001a42:	4b5f      	ldr	r3, [pc, #380]	; (8001bc0 <uart_communiation_fsm+0x558>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a5f      	ldr	r2, [pc, #380]	; (8001bc4 <uart_communiation_fsm+0x55c>)
 8001a48:	fb82 1203 	smull	r1, r2, r2, r3
 8001a4c:	1192      	asrs	r2, r2, #6
 8001a4e:	17db      	asrs	r3, r3, #31
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	495c      	ldr	r1, [pc, #368]	; (8001bc8 <uart_communiation_fsm+0x560>)
 8001a56:	4857      	ldr	r0, [pc, #348]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001a58:	f002 fa2a 	bl	8003eb0 <siprintf>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a64:	4953      	ldr	r1, [pc, #332]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001a66:	f107 0008 	add.w	r0, r7, #8
 8001a6a:	f001 fcf6 	bl	800345a <HAL_UART_Transmit>
		if (isButtonPressed(3) == 1)
 8001a6e:	2003      	movs	r0, #3
 8001a70:	f7fe fc60 	bl	8000334 <isButtonPressed>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	f040 808e 	bne.w	8001b98 <uart_communiation_fsm+0x530>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Upon update:\r\n"), 1000);
 8001a7c:	4953      	ldr	r1, [pc, #332]	; (8001bcc <uart_communiation_fsm+0x564>)
 8001a7e:	484d      	ldr	r0, [pc, #308]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001a80:	f002 fa16 	bl	8003eb0 <siprintf>
 8001a84:	4603      	mov	r3, r0
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8c:	4949      	ldr	r1, [pc, #292]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001a8e:	f107 0008 	add.w	r0, r7, #8
 8001a92:	f001 fce2 	bl	800345a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "AMBER counter = %d\r\n", counter_light_1), 1000);
 8001a96:	4b48      	ldr	r3, [pc, #288]	; (8001bb8 <uart_communiation_fsm+0x550>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	494e      	ldr	r1, [pc, #312]	; (8001bd8 <uart_communiation_fsm+0x570>)
 8001a9e:	4845      	ldr	r0, [pc, #276]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001aa0:	f002 fa06 	bl	8003eb0 <siprintf>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aac:	4941      	ldr	r1, [pc, #260]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001aae:	f107 0008 	add.w	r0, r7, #8
 8001ab2:	f001 fcd2 	bl	800345a <HAL_UART_Transmit>
		break;
 8001ab6:	e06f      	b.n	8001b98 <uart_communiation_fsm+0x530>
		if (uartOneTimeFlag == 0)
 8001ab8:	4b3c      	ldr	r3, [pc, #240]	; (8001bac <uart_communiation_fsm+0x544>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d11f      	bne.n	8001b00 <uart_communiation_fsm+0x498>
			uartOneTimeFlag = 1;
 8001ac0:	4b3a      	ldr	r3, [pc, #232]	; (8001bac <uart_communiation_fsm+0x544>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Mode 4: Modifying GREEN\r\n"), 1000);
 8001ac6:	4945      	ldr	r1, [pc, #276]	; (8001bdc <uart_communiation_fsm+0x574>)
 8001ac8:	483a      	ldr	r0, [pc, #232]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001aca:	f002 f9f1 	bl	8003eb0 <siprintf>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad6:	4937      	ldr	r1, [pc, #220]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001ad8:	f107 0008 	add.w	r0, r7, #8
 8001adc:	f001 fcbd 	bl	800345a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Current time = %d\r\n", counter_light_1), 1000);
 8001ae0:	4b35      	ldr	r3, [pc, #212]	; (8001bb8 <uart_communiation_fsm+0x550>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4935      	ldr	r1, [pc, #212]	; (8001bbc <uart_communiation_fsm+0x554>)
 8001ae8:	4832      	ldr	r0, [pc, #200]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001aea:	f002 f9e1 	bl	8003eb0 <siprintf>
 8001aee:	4603      	mov	r3, r0
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af6:	492f      	ldr	r1, [pc, #188]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001af8:	f107 0008 	add.w	r0, r7, #8
 8001afc:	f001 fcad 	bl	800345a <HAL_UART_Transmit>
		if (isButtonPressed(2) == 1)
 8001b00:	2002      	movs	r0, #2
 8001b02:	f7fe fc17 	bl	8000334 <isButtonPressed>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d115      	bne.n	8001b38 <uart_communiation_fsm+0x4d0>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Updated time = %d\r\n", time_modify_counter / 1000), 1000);
 8001b0c:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <uart_communiation_fsm+0x558>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a2c      	ldr	r2, [pc, #176]	; (8001bc4 <uart_communiation_fsm+0x55c>)
 8001b12:	fb82 1203 	smull	r1, r2, r2, r3
 8001b16:	1192      	asrs	r2, r2, #6
 8001b18:	17db      	asrs	r3, r3, #31
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	492a      	ldr	r1, [pc, #168]	; (8001bc8 <uart_communiation_fsm+0x560>)
 8001b20:	4824      	ldr	r0, [pc, #144]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001b22:	f002 f9c5 	bl	8003eb0 <siprintf>
 8001b26:	4603      	mov	r3, r0
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2e:	4921      	ldr	r1, [pc, #132]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001b30:	f107 0008 	add.w	r0, r7, #8
 8001b34:	f001 fc91 	bl	800345a <HAL_UART_Transmit>
		if (isButtonPressed(3) == 1)
 8001b38:	2003      	movs	r0, #3
 8001b3a:	f7fe fbfb 	bl	8000334 <isButtonPressed>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d12b      	bne.n	8001b9c <uart_communiation_fsm+0x534>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Upon update:\r\n"), 1000);
 8001b44:	4921      	ldr	r1, [pc, #132]	; (8001bcc <uart_communiation_fsm+0x564>)
 8001b46:	481b      	ldr	r0, [pc, #108]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001b48:	f002 f9b2 	bl	8003eb0 <siprintf>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b54:	4917      	ldr	r1, [pc, #92]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001b56:	f107 0008 	add.w	r0, r7, #8
 8001b5a:	f001 fc7e 	bl	800345a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "GREEN counter = %d\r\n", counter_light_1), 1000);
 8001b5e:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <uart_communiation_fsm+0x550>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	491e      	ldr	r1, [pc, #120]	; (8001be0 <uart_communiation_fsm+0x578>)
 8001b66:	4813      	ldr	r0, [pc, #76]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001b68:	f002 f9a2 	bl	8003eb0 <siprintf>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b74:	490f      	ldr	r1, [pc, #60]	; (8001bb4 <uart_communiation_fsm+0x54c>)
 8001b76:	f107 0008 	add.w	r0, r7, #8
 8001b7a:	f001 fc6e 	bl	800345a <HAL_UART_Transmit>
		break;
 8001b7e:	e00d      	b.n	8001b9c <uart_communiation_fsm+0x534>
		break;
 8001b80:	bf00      	nop
 8001b82:	e00c      	b.n	8001b9e <uart_communiation_fsm+0x536>
		break;
 8001b84:	bf00      	nop
 8001b86:	e00a      	b.n	8001b9e <uart_communiation_fsm+0x536>
		break;
 8001b88:	bf00      	nop
 8001b8a:	e008      	b.n	8001b9e <uart_communiation_fsm+0x536>
		break;
 8001b8c:	bf00      	nop
 8001b8e:	e006      	b.n	8001b9e <uart_communiation_fsm+0x536>
		break;
 8001b90:	bf00      	nop
 8001b92:	e004      	b.n	8001b9e <uart_communiation_fsm+0x536>
		break;
 8001b94:	bf00      	nop
 8001b96:	e002      	b.n	8001b9e <uart_communiation_fsm+0x536>
		break;
 8001b98:	bf00      	nop
 8001b9a:	e000      	b.n	8001b9e <uart_communiation_fsm+0x536>
		break;
 8001b9c:	bf00      	nop
	}
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ba6:	b004      	add	sp, #16
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	200000c0 	.word	0x200000c0
 8001bb0:	080048f0 	.word	0x080048f0
 8001bb4:	2000016c 	.word	0x2000016c
 8001bb8:	2000001c 	.word	0x2000001c
 8001bbc:	08004908 	.word	0x08004908
 8001bc0:	200000b8 	.word	0x200000b8
 8001bc4:	10624dd3 	.word	0x10624dd3
 8001bc8:	0800491c 	.word	0x0800491c
 8001bcc:	08004930 	.word	0x08004930
 8001bd0:	08004940 	.word	0x08004940
 8001bd4:	08004954 	.word	0x08004954
 8001bd8:	08004970 	.word	0x08004970
 8001bdc:	08004988 	.word	0x08004988
 8001be0:	080049a4 	.word	0x080049a4

08001be4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be4:	480c      	ldr	r0, [pc, #48]	; (8001c18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001be6:	490d      	ldr	r1, [pc, #52]	; (8001c1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001be8:	4a0d      	ldr	r2, [pc, #52]	; (8001c20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bec:	e002      	b.n	8001bf4 <LoopCopyDataInit>

08001bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf2:	3304      	adds	r3, #4

08001bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf8:	d3f9      	bcc.n	8001bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bfc:	4c0a      	ldr	r4, [pc, #40]	; (8001c28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c00:	e001      	b.n	8001c06 <LoopFillZerobss>

08001c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c04:	3204      	adds	r2, #4

08001c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c08:	d3fb      	bcc.n	8001c02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c0a:	f7ff fd27 	bl	800165c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c0e:	f002 f915 	bl	8003e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c12:	f7ff fa23 	bl	800105c <main>
  bx lr
 8001c16:	4770      	bx	lr
  ldr r0, =_sdata
 8001c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c1c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001c20:	08004a20 	.word	0x08004a20
  ldr r2, =_sbss
 8001c24:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001c28:	2000024c 	.word	0x2000024c

08001c2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c2c:	e7fe      	b.n	8001c2c <ADC1_2_IRQHandler>
	...

08001c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <HAL_Init+0x28>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <HAL_Init+0x28>)
 8001c3a:	f043 0310 	orr.w	r3, r3, #16
 8001c3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c40:	2003      	movs	r0, #3
 8001c42:	f000 f923 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c46:	200f      	movs	r0, #15
 8001c48:	f000 f808 	bl	8001c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c4c:	f7ff fbec 	bl	8001428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40022000 	.word	0x40022000

08001c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_InitTick+0x54>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_InitTick+0x58>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 f93b 	bl	8001ef6 <HAL_SYSTICK_Config>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00e      	b.n	8001ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b0f      	cmp	r3, #15
 8001c8e:	d80a      	bhi.n	8001ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c90:	2200      	movs	r2, #0
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f000 f903 	bl	8001ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c9c:	4a06      	ldr	r2, [pc, #24]	; (8001cb8 <HAL_InitTick+0x5c>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e000      	b.n	8001ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000028 	.word	0x20000028
 8001cb4:	20000030 	.word	0x20000030
 8001cb8:	2000002c 	.word	0x2000002c

08001cbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_IncTick+0x1c>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_IncTick+0x20>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	4a03      	ldr	r2, [pc, #12]	; (8001cdc <HAL_IncTick+0x20>)
 8001cce:	6013      	str	r3, [r2, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	20000030 	.word	0x20000030
 8001cdc:	20000238 	.word	0x20000238

08001ce0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce4:	4b02      	ldr	r3, [pc, #8]	; (8001cf0 <HAL_GetTick+0x10>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	20000238 	.word	0x20000238

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db0b      	blt.n	8001d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	4906      	ldr	r1, [pc, #24]	; (8001d8c <__NVIC_EnableIRQ+0x34>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	2001      	movs	r0, #1
 8001d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	e000e100 	.word	0xe000e100

08001d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	db0a      	blt.n	8001dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	490c      	ldr	r1, [pc, #48]	; (8001ddc <__NVIC_SetPriority+0x4c>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	0112      	lsls	r2, r2, #4
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	440b      	add	r3, r1
 8001db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db8:	e00a      	b.n	8001dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4908      	ldr	r1, [pc, #32]	; (8001de0 <__NVIC_SetPriority+0x50>)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	0112      	lsls	r2, r2, #4
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	761a      	strb	r2, [r3, #24]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000e100 	.word	0xe000e100
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f1c3 0307 	rsb	r3, r3, #7
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	bf28      	it	cs
 8001e02:	2304      	movcs	r3, #4
 8001e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d902      	bls.n	8001e14 <NVIC_EncodePriority+0x30>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3b03      	subs	r3, #3
 8001e12:	e000      	b.n	8001e16 <NVIC_EncodePriority+0x32>
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43da      	mvns	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43d9      	mvns	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	4313      	orrs	r3, r2
         );
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3724      	adds	r7, #36	; 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f7ff ff90 	bl	8001d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff2d 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb4:	f7ff ff42 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f7ff ff90 	bl	8001de4 <NVIC_EncodePriority>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5f 	bl	8001d90 <__NVIC_SetPriority>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff35 	bl	8001d58 <__NVIC_EnableIRQ>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ffa2 	bl	8001e48 <SysTick_Config>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b085      	sub	sp, #20
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d008      	beq.n	8001f36 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2204      	movs	r2, #4
 8001f28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e020      	b.n	8001f78 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 020e 	bic.w	r2, r2, #14
 8001f44:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0201 	bic.w	r2, r2, #1
 8001f54:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5e:	2101      	movs	r1, #1
 8001f60:	fa01 f202 	lsl.w	r2, r1, r2
 8001f64:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d005      	beq.n	8001fa6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
 8001fa4:	e051      	b.n	800204a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 020e 	bic.w	r2, r2, #14
 8001fb4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0201 	bic.w	r2, r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a22      	ldr	r2, [pc, #136]	; (8002054 <HAL_DMA_Abort_IT+0xd0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d029      	beq.n	8002024 <HAL_DMA_Abort_IT+0xa0>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a20      	ldr	r2, [pc, #128]	; (8002058 <HAL_DMA_Abort_IT+0xd4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d022      	beq.n	8002020 <HAL_DMA_Abort_IT+0x9c>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a1f      	ldr	r2, [pc, #124]	; (800205c <HAL_DMA_Abort_IT+0xd8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d01a      	beq.n	800201a <HAL_DMA_Abort_IT+0x96>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a1d      	ldr	r2, [pc, #116]	; (8002060 <HAL_DMA_Abort_IT+0xdc>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d012      	beq.n	8002014 <HAL_DMA_Abort_IT+0x90>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a1c      	ldr	r2, [pc, #112]	; (8002064 <HAL_DMA_Abort_IT+0xe0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d00a      	beq.n	800200e <HAL_DMA_Abort_IT+0x8a>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1a      	ldr	r2, [pc, #104]	; (8002068 <HAL_DMA_Abort_IT+0xe4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d102      	bne.n	8002008 <HAL_DMA_Abort_IT+0x84>
 8002002:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002006:	e00e      	b.n	8002026 <HAL_DMA_Abort_IT+0xa2>
 8002008:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800200c:	e00b      	b.n	8002026 <HAL_DMA_Abort_IT+0xa2>
 800200e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002012:	e008      	b.n	8002026 <HAL_DMA_Abort_IT+0xa2>
 8002014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002018:	e005      	b.n	8002026 <HAL_DMA_Abort_IT+0xa2>
 800201a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800201e:	e002      	b.n	8002026 <HAL_DMA_Abort_IT+0xa2>
 8002020:	2310      	movs	r3, #16
 8002022:	e000      	b.n	8002026 <HAL_DMA_Abort_IT+0xa2>
 8002024:	2301      	movs	r3, #1
 8002026:	4a11      	ldr	r2, [pc, #68]	; (800206c <HAL_DMA_Abort_IT+0xe8>)
 8002028:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	4798      	blx	r3
    } 
  }
  return status;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40020008 	.word	0x40020008
 8002058:	4002001c 	.word	0x4002001c
 800205c:	40020030 	.word	0x40020030
 8002060:	40020044 	.word	0x40020044
 8002064:	40020058 	.word	0x40020058
 8002068:	4002006c 	.word	0x4002006c
 800206c:	40020000 	.word	0x40020000

08002070 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002070:	b480      	push	{r7}
 8002072:	b08b      	sub	sp, #44	; 0x2c
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800207a:	2300      	movs	r3, #0
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800207e:	2300      	movs	r3, #0
 8002080:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002082:	e148      	b.n	8002316 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002084:	2201      	movs	r2, #1
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	69fa      	ldr	r2, [r7, #28]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	429a      	cmp	r2, r3
 800209e:	f040 8137 	bne.w	8002310 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4aa3      	ldr	r2, [pc, #652]	; (8002334 <HAL_GPIO_Init+0x2c4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d05e      	beq.n	800216a <HAL_GPIO_Init+0xfa>
 80020ac:	4aa1      	ldr	r2, [pc, #644]	; (8002334 <HAL_GPIO_Init+0x2c4>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d875      	bhi.n	800219e <HAL_GPIO_Init+0x12e>
 80020b2:	4aa1      	ldr	r2, [pc, #644]	; (8002338 <HAL_GPIO_Init+0x2c8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d058      	beq.n	800216a <HAL_GPIO_Init+0xfa>
 80020b8:	4a9f      	ldr	r2, [pc, #636]	; (8002338 <HAL_GPIO_Init+0x2c8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d86f      	bhi.n	800219e <HAL_GPIO_Init+0x12e>
 80020be:	4a9f      	ldr	r2, [pc, #636]	; (800233c <HAL_GPIO_Init+0x2cc>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d052      	beq.n	800216a <HAL_GPIO_Init+0xfa>
 80020c4:	4a9d      	ldr	r2, [pc, #628]	; (800233c <HAL_GPIO_Init+0x2cc>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d869      	bhi.n	800219e <HAL_GPIO_Init+0x12e>
 80020ca:	4a9d      	ldr	r2, [pc, #628]	; (8002340 <HAL_GPIO_Init+0x2d0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d04c      	beq.n	800216a <HAL_GPIO_Init+0xfa>
 80020d0:	4a9b      	ldr	r2, [pc, #620]	; (8002340 <HAL_GPIO_Init+0x2d0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d863      	bhi.n	800219e <HAL_GPIO_Init+0x12e>
 80020d6:	4a9b      	ldr	r2, [pc, #620]	; (8002344 <HAL_GPIO_Init+0x2d4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d046      	beq.n	800216a <HAL_GPIO_Init+0xfa>
 80020dc:	4a99      	ldr	r2, [pc, #612]	; (8002344 <HAL_GPIO_Init+0x2d4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d85d      	bhi.n	800219e <HAL_GPIO_Init+0x12e>
 80020e2:	2b12      	cmp	r3, #18
 80020e4:	d82a      	bhi.n	800213c <HAL_GPIO_Init+0xcc>
 80020e6:	2b12      	cmp	r3, #18
 80020e8:	d859      	bhi.n	800219e <HAL_GPIO_Init+0x12e>
 80020ea:	a201      	add	r2, pc, #4	; (adr r2, 80020f0 <HAL_GPIO_Init+0x80>)
 80020ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f0:	0800216b 	.word	0x0800216b
 80020f4:	08002145 	.word	0x08002145
 80020f8:	08002157 	.word	0x08002157
 80020fc:	08002199 	.word	0x08002199
 8002100:	0800219f 	.word	0x0800219f
 8002104:	0800219f 	.word	0x0800219f
 8002108:	0800219f 	.word	0x0800219f
 800210c:	0800219f 	.word	0x0800219f
 8002110:	0800219f 	.word	0x0800219f
 8002114:	0800219f 	.word	0x0800219f
 8002118:	0800219f 	.word	0x0800219f
 800211c:	0800219f 	.word	0x0800219f
 8002120:	0800219f 	.word	0x0800219f
 8002124:	0800219f 	.word	0x0800219f
 8002128:	0800219f 	.word	0x0800219f
 800212c:	0800219f 	.word	0x0800219f
 8002130:	0800219f 	.word	0x0800219f
 8002134:	0800214d 	.word	0x0800214d
 8002138:	08002161 	.word	0x08002161
 800213c:	4a82      	ldr	r2, [pc, #520]	; (8002348 <HAL_GPIO_Init+0x2d8>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d013      	beq.n	800216a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002142:	e02c      	b.n	800219e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	623b      	str	r3, [r7, #32]
          break;
 800214a:	e029      	b.n	80021a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	3304      	adds	r3, #4
 8002152:	623b      	str	r3, [r7, #32]
          break;
 8002154:	e024      	b.n	80021a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	3308      	adds	r3, #8
 800215c:	623b      	str	r3, [r7, #32]
          break;
 800215e:	e01f      	b.n	80021a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	330c      	adds	r3, #12
 8002166:	623b      	str	r3, [r7, #32]
          break;
 8002168:	e01a      	b.n	80021a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d102      	bne.n	8002178 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002172:	2304      	movs	r3, #4
 8002174:	623b      	str	r3, [r7, #32]
          break;
 8002176:	e013      	b.n	80021a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d105      	bne.n	800218c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002180:	2308      	movs	r3, #8
 8002182:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69fa      	ldr	r2, [r7, #28]
 8002188:	611a      	str	r2, [r3, #16]
          break;
 800218a:	e009      	b.n	80021a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800218c:	2308      	movs	r3, #8
 800218e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69fa      	ldr	r2, [r7, #28]
 8002194:	615a      	str	r2, [r3, #20]
          break;
 8002196:	e003      	b.n	80021a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002198:	2300      	movs	r3, #0
 800219a:	623b      	str	r3, [r7, #32]
          break;
 800219c:	e000      	b.n	80021a0 <HAL_GPIO_Init+0x130>
          break;
 800219e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	2bff      	cmp	r3, #255	; 0xff
 80021a4:	d801      	bhi.n	80021aa <HAL_GPIO_Init+0x13a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	e001      	b.n	80021ae <HAL_GPIO_Init+0x13e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3304      	adds	r3, #4
 80021ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	2bff      	cmp	r3, #255	; 0xff
 80021b4:	d802      	bhi.n	80021bc <HAL_GPIO_Init+0x14c>
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	e002      	b.n	80021c2 <HAL_GPIO_Init+0x152>
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	3b08      	subs	r3, #8
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	210f      	movs	r1, #15
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	fa01 f303 	lsl.w	r3, r1, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	401a      	ands	r2, r3
 80021d4:	6a39      	ldr	r1, [r7, #32]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	431a      	orrs	r2, r3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8090 	beq.w	8002310 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021f0:	4b56      	ldr	r3, [pc, #344]	; (800234c <HAL_GPIO_Init+0x2dc>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	4a55      	ldr	r2, [pc, #340]	; (800234c <HAL_GPIO_Init+0x2dc>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6193      	str	r3, [r2, #24]
 80021fc:	4b53      	ldr	r3, [pc, #332]	; (800234c <HAL_GPIO_Init+0x2dc>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002208:	4a51      	ldr	r2, [pc, #324]	; (8002350 <HAL_GPIO_Init+0x2e0>)
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	089b      	lsrs	r3, r3, #2
 800220e:	3302      	adds	r3, #2
 8002210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002214:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	220f      	movs	r2, #15
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4013      	ands	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a49      	ldr	r2, [pc, #292]	; (8002354 <HAL_GPIO_Init+0x2e4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d00d      	beq.n	8002250 <HAL_GPIO_Init+0x1e0>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a48      	ldr	r2, [pc, #288]	; (8002358 <HAL_GPIO_Init+0x2e8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d007      	beq.n	800224c <HAL_GPIO_Init+0x1dc>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a47      	ldr	r2, [pc, #284]	; (800235c <HAL_GPIO_Init+0x2ec>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d101      	bne.n	8002248 <HAL_GPIO_Init+0x1d8>
 8002244:	2302      	movs	r3, #2
 8002246:	e004      	b.n	8002252 <HAL_GPIO_Init+0x1e2>
 8002248:	2303      	movs	r3, #3
 800224a:	e002      	b.n	8002252 <HAL_GPIO_Init+0x1e2>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <HAL_GPIO_Init+0x1e2>
 8002250:	2300      	movs	r3, #0
 8002252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002254:	f002 0203 	and.w	r2, r2, #3
 8002258:	0092      	lsls	r2, r2, #2
 800225a:	4093      	lsls	r3, r2
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002262:	493b      	ldr	r1, [pc, #236]	; (8002350 <HAL_GPIO_Init+0x2e0>)
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	089b      	lsrs	r3, r3, #2
 8002268:	3302      	adds	r3, #2
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d006      	beq.n	800228a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800227c:	4b38      	ldr	r3, [pc, #224]	; (8002360 <HAL_GPIO_Init+0x2f0>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4937      	ldr	r1, [pc, #220]	; (8002360 <HAL_GPIO_Init+0x2f0>)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	600b      	str	r3, [r1, #0]
 8002288:	e006      	b.n	8002298 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800228a:	4b35      	ldr	r3, [pc, #212]	; (8002360 <HAL_GPIO_Init+0x2f0>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	43db      	mvns	r3, r3
 8002292:	4933      	ldr	r1, [pc, #204]	; (8002360 <HAL_GPIO_Init+0x2f0>)
 8002294:	4013      	ands	r3, r2
 8002296:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d006      	beq.n	80022b2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022a4:	4b2e      	ldr	r3, [pc, #184]	; (8002360 <HAL_GPIO_Init+0x2f0>)
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	492d      	ldr	r1, [pc, #180]	; (8002360 <HAL_GPIO_Init+0x2f0>)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]
 80022b0:	e006      	b.n	80022c0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022b2:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <HAL_GPIO_Init+0x2f0>)
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	4929      	ldr	r1, [pc, #164]	; (8002360 <HAL_GPIO_Init+0x2f0>)
 80022bc:	4013      	ands	r3, r2
 80022be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d006      	beq.n	80022da <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022cc:	4b24      	ldr	r3, [pc, #144]	; (8002360 <HAL_GPIO_Init+0x2f0>)
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	4923      	ldr	r1, [pc, #140]	; (8002360 <HAL_GPIO_Init+0x2f0>)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]
 80022d8:	e006      	b.n	80022e8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022da:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_GPIO_Init+0x2f0>)
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	43db      	mvns	r3, r3
 80022e2:	491f      	ldr	r1, [pc, #124]	; (8002360 <HAL_GPIO_Init+0x2f0>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d006      	beq.n	8002302 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022f4:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <HAL_GPIO_Init+0x2f0>)
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	4919      	ldr	r1, [pc, #100]	; (8002360 <HAL_GPIO_Init+0x2f0>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60cb      	str	r3, [r1, #12]
 8002300:	e006      	b.n	8002310 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002302:	4b17      	ldr	r3, [pc, #92]	; (8002360 <HAL_GPIO_Init+0x2f0>)
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	43db      	mvns	r3, r3
 800230a:	4915      	ldr	r1, [pc, #84]	; (8002360 <HAL_GPIO_Init+0x2f0>)
 800230c:	4013      	ands	r3, r2
 800230e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	3301      	adds	r3, #1
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	fa22 f303 	lsr.w	r3, r2, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	f47f aeaf 	bne.w	8002084 <HAL_GPIO_Init+0x14>
  }
}
 8002326:	bf00      	nop
 8002328:	bf00      	nop
 800232a:	372c      	adds	r7, #44	; 0x2c
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	10320000 	.word	0x10320000
 8002338:	10310000 	.word	0x10310000
 800233c:	10220000 	.word	0x10220000
 8002340:	10210000 	.word	0x10210000
 8002344:	10120000 	.word	0x10120000
 8002348:	10110000 	.word	0x10110000
 800234c:	40021000 	.word	0x40021000
 8002350:	40010000 	.word	0x40010000
 8002354:	40010800 	.word	0x40010800
 8002358:	40010c00 	.word	0x40010c00
 800235c:	40011000 	.word	0x40011000
 8002360:	40010400 	.word	0x40010400

08002364 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	887b      	ldrh	r3, [r7, #2]
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
 8002380:	e001      	b.n	8002386 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002382:	2300      	movs	r3, #0
 8002384:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002386:	7bfb      	ldrb	r3, [r7, #15]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr

08002392 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	460b      	mov	r3, r1
 800239c:	807b      	strh	r3, [r7, #2]
 800239e:	4613      	mov	r3, r2
 80023a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023a2:	787b      	ldrb	r3, [r7, #1]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023a8:	887a      	ldrh	r2, [r7, #2]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023ae:	e003      	b.n	80023b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023b0:	887b      	ldrh	r3, [r7, #2]
 80023b2:	041a      	lsls	r2, r3, #16
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	611a      	str	r2, [r3, #16]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
	...

080023c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e26c      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 8087 	beq.w	80024f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023e4:	4b92      	ldr	r3, [pc, #584]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d00c      	beq.n	800240a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023f0:	4b8f      	ldr	r3, [pc, #572]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d112      	bne.n	8002422 <HAL_RCC_OscConfig+0x5e>
 80023fc:	4b8c      	ldr	r3, [pc, #560]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002408:	d10b      	bne.n	8002422 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240a:	4b89      	ldr	r3, [pc, #548]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d06c      	beq.n	80024f0 <HAL_RCC_OscConfig+0x12c>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d168      	bne.n	80024f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e246      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800242a:	d106      	bne.n	800243a <HAL_RCC_OscConfig+0x76>
 800242c:	4b80      	ldr	r3, [pc, #512]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a7f      	ldr	r2, [pc, #508]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	e02e      	b.n	8002498 <HAL_RCC_OscConfig+0xd4>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x98>
 8002442:	4b7b      	ldr	r3, [pc, #492]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a7a      	ldr	r2, [pc, #488]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	4b78      	ldr	r3, [pc, #480]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a77      	ldr	r2, [pc, #476]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002454:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e01d      	b.n	8002498 <HAL_RCC_OscConfig+0xd4>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002464:	d10c      	bne.n	8002480 <HAL_RCC_OscConfig+0xbc>
 8002466:	4b72      	ldr	r3, [pc, #456]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a71      	ldr	r2, [pc, #452]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800246c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	4b6f      	ldr	r3, [pc, #444]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a6e      	ldr	r2, [pc, #440]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e00b      	b.n	8002498 <HAL_RCC_OscConfig+0xd4>
 8002480:	4b6b      	ldr	r3, [pc, #428]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a6a      	ldr	r2, [pc, #424]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	4b68      	ldr	r3, [pc, #416]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a67      	ldr	r2, [pc, #412]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002496:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d013      	beq.n	80024c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7ff fc1e 	bl	8001ce0 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a8:	f7ff fc1a 	bl	8001ce0 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e1fa      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	4b5d      	ldr	r3, [pc, #372]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0xe4>
 80024c6:	e014      	b.n	80024f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7ff fc0a 	bl	8001ce0 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d0:	f7ff fc06 	bl	8001ce0 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	; 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e1e6      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e2:	4b53      	ldr	r3, [pc, #332]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x10c>
 80024ee:	e000      	b.n	80024f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d063      	beq.n	80025c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024fe:	4b4c      	ldr	r3, [pc, #304]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00b      	beq.n	8002522 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800250a:	4b49      	ldr	r3, [pc, #292]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b08      	cmp	r3, #8
 8002514:	d11c      	bne.n	8002550 <HAL_RCC_OscConfig+0x18c>
 8002516:	4b46      	ldr	r3, [pc, #280]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d116      	bne.n	8002550 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002522:	4b43      	ldr	r3, [pc, #268]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <HAL_RCC_OscConfig+0x176>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d001      	beq.n	800253a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e1ba      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253a:	4b3d      	ldr	r3, [pc, #244]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4939      	ldr	r1, [pc, #228]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254e:	e03a      	b.n	80025c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d020      	beq.n	800259a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002558:	4b36      	ldr	r3, [pc, #216]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 800255a:	2201      	movs	r2, #1
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7ff fbbf 	bl	8001ce0 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002566:	f7ff fbbb 	bl	8001ce0 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e19b      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002578:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002584:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4927      	ldr	r1, [pc, #156]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002594:	4313      	orrs	r3, r2
 8002596:	600b      	str	r3, [r1, #0]
 8002598:	e015      	b.n	80025c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259a:	4b26      	ldr	r3, [pc, #152]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7ff fb9e 	bl	8001ce0 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a8:	f7ff fb9a 	bl	8001ce0 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e17a      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ba:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d03a      	beq.n	8002648 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d019      	beq.n	800260e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025da:	4b17      	ldr	r3, [pc, #92]	; (8002638 <HAL_RCC_OscConfig+0x274>)
 80025dc:	2201      	movs	r2, #1
 80025de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e0:	f7ff fb7e 	bl	8001ce0 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e8:	f7ff fb7a 	bl	8001ce0 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e15a      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fa:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002606:	2001      	movs	r0, #1
 8002608:	f000 fad8 	bl	8002bbc <RCC_Delay>
 800260c:	e01c      	b.n	8002648 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <HAL_RCC_OscConfig+0x274>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002614:	f7ff fb64 	bl	8001ce0 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261a:	e00f      	b.n	800263c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261c:	f7ff fb60 	bl	8001ce0 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d908      	bls.n	800263c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e140      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	42420000 	.word	0x42420000
 8002638:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263c:	4b9e      	ldr	r3, [pc, #632]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1e9      	bne.n	800261c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80a6 	beq.w	80027a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002656:	2300      	movs	r3, #0
 8002658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265a:	4b97      	ldr	r3, [pc, #604]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10d      	bne.n	8002682 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002666:	4b94      	ldr	r3, [pc, #592]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	4a93      	ldr	r2, [pc, #588]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002670:	61d3      	str	r3, [r2, #28]
 8002672:	4b91      	ldr	r3, [pc, #580]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267e:	2301      	movs	r3, #1
 8002680:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002682:	4b8e      	ldr	r3, [pc, #568]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d118      	bne.n	80026c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800268e:	4b8b      	ldr	r3, [pc, #556]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a8a      	ldr	r2, [pc, #552]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269a:	f7ff fb21 	bl	8001ce0 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a2:	f7ff fb1d 	bl	8001ce0 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b64      	cmp	r3, #100	; 0x64
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e0fd      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	4b81      	ldr	r3, [pc, #516]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f0      	beq.n	80026a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d106      	bne.n	80026d6 <HAL_RCC_OscConfig+0x312>
 80026c8:	4b7b      	ldr	r3, [pc, #492]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4a7a      	ldr	r2, [pc, #488]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6213      	str	r3, [r2, #32]
 80026d4:	e02d      	b.n	8002732 <HAL_RCC_OscConfig+0x36e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x334>
 80026de:	4b76      	ldr	r3, [pc, #472]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	4a75      	ldr	r2, [pc, #468]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	f023 0301 	bic.w	r3, r3, #1
 80026e8:	6213      	str	r3, [r2, #32]
 80026ea:	4b73      	ldr	r3, [pc, #460]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	4a72      	ldr	r2, [pc, #456]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80026f0:	f023 0304 	bic.w	r3, r3, #4
 80026f4:	6213      	str	r3, [r2, #32]
 80026f6:	e01c      	b.n	8002732 <HAL_RCC_OscConfig+0x36e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b05      	cmp	r3, #5
 80026fe:	d10c      	bne.n	800271a <HAL_RCC_OscConfig+0x356>
 8002700:	4b6d      	ldr	r3, [pc, #436]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	4a6c      	ldr	r2, [pc, #432]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002706:	f043 0304 	orr.w	r3, r3, #4
 800270a:	6213      	str	r3, [r2, #32]
 800270c:	4b6a      	ldr	r3, [pc, #424]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4a69      	ldr	r2, [pc, #420]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6213      	str	r3, [r2, #32]
 8002718:	e00b      	b.n	8002732 <HAL_RCC_OscConfig+0x36e>
 800271a:	4b67      	ldr	r3, [pc, #412]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4a66      	ldr	r2, [pc, #408]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	6213      	str	r3, [r2, #32]
 8002726:	4b64      	ldr	r3, [pc, #400]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4a63      	ldr	r2, [pc, #396]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800272c:	f023 0304 	bic.w	r3, r3, #4
 8002730:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d015      	beq.n	8002766 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273a:	f7ff fad1 	bl	8001ce0 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002740:	e00a      	b.n	8002758 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002742:	f7ff facd 	bl	8001ce0 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002750:	4293      	cmp	r3, r2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e0ab      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002758:	4b57      	ldr	r3, [pc, #348]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ee      	beq.n	8002742 <HAL_RCC_OscConfig+0x37e>
 8002764:	e014      	b.n	8002790 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002766:	f7ff fabb 	bl	8001ce0 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7ff fab7 	bl	8001ce0 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	; 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e095      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002784:	4b4c      	ldr	r3, [pc, #304]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1ee      	bne.n	800276e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002790:	7dfb      	ldrb	r3, [r7, #23]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d105      	bne.n	80027a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002796:	4b48      	ldr	r3, [pc, #288]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	4a47      	ldr	r2, [pc, #284]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800279c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8081 	beq.w	80028ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027ac:	4b42      	ldr	r3, [pc, #264]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 030c 	and.w	r3, r3, #12
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d061      	beq.n	800287c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d146      	bne.n	800284e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c0:	4b3f      	ldr	r3, [pc, #252]	; (80028c0 <HAL_RCC_OscConfig+0x4fc>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c6:	f7ff fa8b 	bl	8001ce0 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ce:	f7ff fa87 	bl	8001ce0 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e067      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e0:	4b35      	ldr	r3, [pc, #212]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f0      	bne.n	80027ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f4:	d108      	bne.n	8002808 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027f6:	4b30      	ldr	r3, [pc, #192]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	492d      	ldr	r1, [pc, #180]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002808:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a19      	ldr	r1, [r3, #32]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	430b      	orrs	r3, r1
 800281a:	4927      	ldr	r1, [pc, #156]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002820:	4b27      	ldr	r3, [pc, #156]	; (80028c0 <HAL_RCC_OscConfig+0x4fc>)
 8002822:	2201      	movs	r2, #1
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002826:	f7ff fa5b 	bl	8001ce0 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282e:	f7ff fa57 	bl	8001ce0 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e037      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x46a>
 800284c:	e02f      	b.n	80028ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284e:	4b1c      	ldr	r3, [pc, #112]	; (80028c0 <HAL_RCC_OscConfig+0x4fc>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7ff fa44 	bl	8001ce0 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285c:	f7ff fa40 	bl	8001ce0 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e020      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x498>
 800287a:	e018      	b.n	80028ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e013      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_RCC_OscConfig+0x4f4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	429a      	cmp	r2, r3
 800289a:	d106      	bne.n	80028aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40007000 	.word	0x40007000
 80028c0:	42420060 	.word	0x42420060

080028c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0d0      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d8:	4b6a      	ldr	r3, [pc, #424]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d910      	bls.n	8002908 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b67      	ldr	r3, [pc, #412]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 0207 	bic.w	r2, r3, #7
 80028ee:	4965      	ldr	r1, [pc, #404]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	4b63      	ldr	r3, [pc, #396]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0b8      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d020      	beq.n	8002956 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002920:	4b59      	ldr	r3, [pc, #356]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	4a58      	ldr	r2, [pc, #352]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800292a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002938:	4b53      	ldr	r3, [pc, #332]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4a52      	ldr	r2, [pc, #328]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002942:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002944:	4b50      	ldr	r3, [pc, #320]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	494d      	ldr	r1, [pc, #308]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	4313      	orrs	r3, r2
 8002954:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d040      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d107      	bne.n	800297a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d115      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e07f      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002982:	4b41      	ldr	r3, [pc, #260]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e073      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002992:	4b3d      	ldr	r3, [pc, #244]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e06b      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a2:	4b39      	ldr	r3, [pc, #228]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f023 0203 	bic.w	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4936      	ldr	r1, [pc, #216]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b4:	f7ff f994 	bl	8001ce0 <HAL_GetTick>
 80029b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029bc:	f7ff f990 	bl	8001ce0 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e053      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 020c 	and.w	r2, r3, #12
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d1eb      	bne.n	80029bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029e4:	4b27      	ldr	r3, [pc, #156]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d210      	bcs.n	8002a14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 0207 	bic.w	r2, r3, #7
 80029fa:	4922      	ldr	r1, [pc, #136]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a02:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e032      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a20:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4916      	ldr	r1, [pc, #88]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d009      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a3e:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	490e      	ldr	r1, [pc, #56]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a52:	f000 f821 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 8002a56:	4602      	mov	r2, r0
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	490a      	ldr	r1, [pc, #40]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a64:	5ccb      	ldrb	r3, [r1, r3]
 8002a66:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6a:	4a09      	ldr	r2, [pc, #36]	; (8002a90 <HAL_RCC_ClockConfig+0x1cc>)
 8002a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <HAL_RCC_ClockConfig+0x1d0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff f8f2 	bl	8001c5c <HAL_InitTick>

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40022000 	.word	0x40022000
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	080049cc 	.word	0x080049cc
 8002a90:	20000028 	.word	0x20000028
 8002a94:	2000002c 	.word	0x2000002c

08002a98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a98:	b490      	push	{r4, r7}
 8002a9a:	b08a      	sub	sp, #40	; 0x28
 8002a9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a9e:	4b2a      	ldr	r3, [pc, #168]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002aa0:	1d3c      	adds	r4, r7, #4
 8002aa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002aa8:	f240 2301 	movw	r3, #513	; 0x201
 8002aac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ac2:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d002      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d003      	beq.n	8002ade <HAL_RCC_GetSysClockFreq+0x46>
 8002ad6:	e02d      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ada:	623b      	str	r3, [r7, #32]
      break;
 8002adc:	e02d      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	0c9b      	lsrs	r3, r3, #18
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002aea:	4413      	add	r3, r2
 8002aec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002af0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d013      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	0c5b      	lsrs	r3, r3, #17
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b10:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b16:	fb02 f203 	mul.w	r2, r2, r3
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
 8002b22:	e004      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	4a0b      	ldr	r2, [pc, #44]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b28:	fb02 f303 	mul.w	r3, r2, r3
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	623b      	str	r3, [r7, #32]
      break;
 8002b32:	e002      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b36:	623b      	str	r3, [r7, #32]
      break;
 8002b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3728      	adds	r7, #40	; 0x28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc90      	pop	{r4, r7}
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	080049bc 	.word	0x080049bc
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	007a1200 	.word	0x007a1200
 8002b54:	003d0900 	.word	0x003d0900

08002b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b5c:	4b02      	ldr	r3, [pc, #8]	; (8002b68 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr
 8002b68:	20000028 	.word	0x20000028

08002b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b70:	f7ff fff2 	bl	8002b58 <HAL_RCC_GetHCLKFreq>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	4903      	ldr	r1, [pc, #12]	; (8002b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b82:	5ccb      	ldrb	r3, [r1, r3]
 8002b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	080049dc 	.word	0x080049dc

08002b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b98:	f7ff ffde 	bl	8002b58 <HAL_RCC_GetHCLKFreq>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	0adb      	lsrs	r3, r3, #11
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	4903      	ldr	r1, [pc, #12]	; (8002bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002baa:	5ccb      	ldrb	r3, [r1, r3]
 8002bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	080049dc 	.word	0x080049dc

08002bbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bc4:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <RCC_Delay+0x34>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a0a      	ldr	r2, [pc, #40]	; (8002bf4 <RCC_Delay+0x38>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	0a5b      	lsrs	r3, r3, #9
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	fb02 f303 	mul.w	r3, r2, r3
 8002bd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bd8:	bf00      	nop
  }
  while (Delay --);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1e5a      	subs	r2, r3, #1
 8002bde:	60fa      	str	r2, [r7, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1f9      	bne.n	8002bd8 <RCC_Delay+0x1c>
}
 8002be4:	bf00      	nop
 8002be6:	bf00      	nop
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr
 8002bf0:	20000028 	.word	0x20000028
 8002bf4:	10624dd3 	.word	0x10624dd3

08002bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e041      	b.n	8002c8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fe fc34 	bl	800148c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3304      	adds	r3, #4
 8002c34:	4619      	mov	r1, r3
 8002c36:	4610      	mov	r0, r2
 8002c38:	f000 fa6a 	bl	8003110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d001      	beq.n	8002cb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e035      	b.n	8002d1c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a16      	ldr	r2, [pc, #88]	; (8002d28 <HAL_TIM_Base_Start_IT+0x90>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d009      	beq.n	8002ce6 <HAL_TIM_Base_Start_IT+0x4e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cda:	d004      	beq.n	8002ce6 <HAL_TIM_Base_Start_IT+0x4e>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a12      	ldr	r2, [pc, #72]	; (8002d2c <HAL_TIM_Base_Start_IT+0x94>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d111      	bne.n	8002d0a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2b06      	cmp	r3, #6
 8002cf6:	d010      	beq.n	8002d1a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d08:	e007      	b.n	8002d1a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0201 	orr.w	r2, r2, #1
 8002d18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40012c00 	.word	0x40012c00
 8002d2c:	40000400 	.word	0x40000400

08002d30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d122      	bne.n	8002d8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d11b      	bne.n	8002d8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0202 	mvn.w	r2, #2
 8002d5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f9b1 	bl	80030da <HAL_TIM_IC_CaptureCallback>
 8002d78:	e005      	b.n	8002d86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f9a4 	bl	80030c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f9b3 	bl	80030ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d122      	bne.n	8002de0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d11b      	bne.n	8002de0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0204 	mvn.w	r2, #4
 8002db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f987 	bl	80030da <HAL_TIM_IC_CaptureCallback>
 8002dcc:	e005      	b.n	8002dda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f97a 	bl	80030c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f989 	bl	80030ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d122      	bne.n	8002e34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d11b      	bne.n	8002e34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0208 	mvn.w	r2, #8
 8002e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2204      	movs	r2, #4
 8002e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f95d 	bl	80030da <HAL_TIM_IC_CaptureCallback>
 8002e20:	e005      	b.n	8002e2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f950 	bl	80030c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f95f 	bl	80030ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f003 0310 	and.w	r3, r3, #16
 8002e3e:	2b10      	cmp	r3, #16
 8002e40:	d122      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b10      	cmp	r3, #16
 8002e4e:	d11b      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f06f 0210 	mvn.w	r2, #16
 8002e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f933 	bl	80030da <HAL_TIM_IC_CaptureCallback>
 8002e74:	e005      	b.n	8002e82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f926 	bl	80030c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f935 	bl	80030ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d10e      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d107      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0201 	mvn.w	r2, #1
 8002eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fe fa58 	bl	8001364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebe:	2b80      	cmp	r3, #128	; 0x80
 8002ec0:	d10e      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ecc:	2b80      	cmp	r3, #128	; 0x80
 8002ece:	d107      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fa67 	bl	80033ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eea:	2b40      	cmp	r3, #64	; 0x40
 8002eec:	d10e      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef8:	2b40      	cmp	r3, #64	; 0x40
 8002efa:	d107      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f8f9 	bl	80030fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	d10e      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0320 	and.w	r3, r3, #32
 8002f24:	2b20      	cmp	r3, #32
 8002f26:	d107      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0220 	mvn.w	r2, #32
 8002f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fa32 	bl	800339c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_TIM_ConfigClockSource+0x18>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e0b3      	b.n	80030c0 <HAL_TIM_ConfigClockSource+0x180>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f90:	d03e      	beq.n	8003010 <HAL_TIM_ConfigClockSource+0xd0>
 8002f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f96:	f200 8087 	bhi.w	80030a8 <HAL_TIM_ConfigClockSource+0x168>
 8002f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9e:	f000 8085 	beq.w	80030ac <HAL_TIM_ConfigClockSource+0x16c>
 8002fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa6:	d87f      	bhi.n	80030a8 <HAL_TIM_ConfigClockSource+0x168>
 8002fa8:	2b70      	cmp	r3, #112	; 0x70
 8002faa:	d01a      	beq.n	8002fe2 <HAL_TIM_ConfigClockSource+0xa2>
 8002fac:	2b70      	cmp	r3, #112	; 0x70
 8002fae:	d87b      	bhi.n	80030a8 <HAL_TIM_ConfigClockSource+0x168>
 8002fb0:	2b60      	cmp	r3, #96	; 0x60
 8002fb2:	d050      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0x116>
 8002fb4:	2b60      	cmp	r3, #96	; 0x60
 8002fb6:	d877      	bhi.n	80030a8 <HAL_TIM_ConfigClockSource+0x168>
 8002fb8:	2b50      	cmp	r3, #80	; 0x50
 8002fba:	d03c      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0xf6>
 8002fbc:	2b50      	cmp	r3, #80	; 0x50
 8002fbe:	d873      	bhi.n	80030a8 <HAL_TIM_ConfigClockSource+0x168>
 8002fc0:	2b40      	cmp	r3, #64	; 0x40
 8002fc2:	d058      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0x136>
 8002fc4:	2b40      	cmp	r3, #64	; 0x40
 8002fc6:	d86f      	bhi.n	80030a8 <HAL_TIM_ConfigClockSource+0x168>
 8002fc8:	2b30      	cmp	r3, #48	; 0x30
 8002fca:	d064      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x156>
 8002fcc:	2b30      	cmp	r3, #48	; 0x30
 8002fce:	d86b      	bhi.n	80030a8 <HAL_TIM_ConfigClockSource+0x168>
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d060      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x156>
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d867      	bhi.n	80030a8 <HAL_TIM_ConfigClockSource+0x168>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d05c      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x156>
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d05a      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002fe0:	e062      	b.n	80030a8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	6899      	ldr	r1, [r3, #8]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f000 f95c 	bl	80032ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003004:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	609a      	str	r2, [r3, #8]
      break;
 800300e:	e04e      	b.n	80030ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	6899      	ldr	r1, [r3, #8]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f000 f945 	bl	80032ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003032:	609a      	str	r2, [r3, #8]
      break;
 8003034:	e03b      	b.n	80030ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	6859      	ldr	r1, [r3, #4]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	461a      	mov	r2, r3
 8003044:	f000 f8bc 	bl	80031c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2150      	movs	r1, #80	; 0x50
 800304e:	4618      	mov	r0, r3
 8003050:	f000 f913 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 8003054:	e02b      	b.n	80030ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6859      	ldr	r1, [r3, #4]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	461a      	mov	r2, r3
 8003064:	f000 f8da 	bl	800321c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2160      	movs	r1, #96	; 0x60
 800306e:	4618      	mov	r0, r3
 8003070:	f000 f903 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 8003074:	e01b      	b.n	80030ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6859      	ldr	r1, [r3, #4]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	461a      	mov	r2, r3
 8003084:	f000 f89c 	bl	80031c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2140      	movs	r1, #64	; 0x40
 800308e:	4618      	mov	r0, r3
 8003090:	f000 f8f3 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 8003094:	e00b      	b.n	80030ae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4619      	mov	r1, r3
 80030a0:	4610      	mov	r0, r2
 80030a2:	f000 f8ea 	bl	800327a <TIM_ITRx_SetConfig>
        break;
 80030a6:	e002      	b.n	80030ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030a8:	bf00      	nop
 80030aa:	e000      	b.n	80030ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bc80      	pop	{r7}
 80030d8:	4770      	bx	lr

080030da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr

080030ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr

080030fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a25      	ldr	r2, [pc, #148]	; (80031b8 <TIM_Base_SetConfig+0xa8>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d007      	beq.n	8003138 <TIM_Base_SetConfig+0x28>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312e:	d003      	beq.n	8003138 <TIM_Base_SetConfig+0x28>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a22      	ldr	r2, [pc, #136]	; (80031bc <TIM_Base_SetConfig+0xac>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d108      	bne.n	800314a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a1a      	ldr	r2, [pc, #104]	; (80031b8 <TIM_Base_SetConfig+0xa8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d007      	beq.n	8003162 <TIM_Base_SetConfig+0x52>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003158:	d003      	beq.n	8003162 <TIM_Base_SetConfig+0x52>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a17      	ldr	r2, [pc, #92]	; (80031bc <TIM_Base_SetConfig+0xac>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d108      	bne.n	8003174 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4313      	orrs	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a07      	ldr	r2, [pc, #28]	; (80031b8 <TIM_Base_SetConfig+0xa8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d103      	bne.n	80031a8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	615a      	str	r2, [r3, #20]
}
 80031ae:	bf00      	nop
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr
 80031b8:	40012c00 	.word	0x40012c00
 80031bc:	40000400 	.word	0x40000400

080031c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f023 0201 	bic.w	r2, r3, #1
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f023 030a 	bic.w	r3, r3, #10
 80031fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	621a      	str	r2, [r3, #32]
}
 8003212:	bf00      	nop
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	f023 0210 	bic.w	r2, r3, #16
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003246:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	031b      	lsls	r3, r3, #12
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003258:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	621a      	str	r2, [r3, #32]
}
 8003270:	bf00      	nop
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr

0800327a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800327a:	b480      	push	{r7}
 800327c:	b085      	sub	sp, #20
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	f043 0307 	orr.w	r3, r3, #7
 800329c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	609a      	str	r2, [r3, #8]
}
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr

080032ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b087      	sub	sp, #28
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	021a      	lsls	r2, r3, #8
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	431a      	orrs	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	609a      	str	r2, [r3, #8]
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003300:	2302      	movs	r3, #2
 8003302:	e041      	b.n	8003388 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a14      	ldr	r2, [pc, #80]	; (8003394 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d009      	beq.n	800335c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003350:	d004      	beq.n	800335c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a10      	ldr	r2, [pc, #64]	; (8003398 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d10c      	bne.n	8003376 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003362:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	4313      	orrs	r3, r2
 800336c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40012c00 	.word	0x40012c00
 8003398:	40000400 	.word	0x40000400

0800339c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr

080033ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr

080033c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e03f      	b.n	8003452 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fe f874 	bl	80014d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2224      	movs	r2, #36	; 0x24
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fc85 	bl	8003d14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b08a      	sub	sp, #40	; 0x28
 800345e:	af02      	add	r7, sp, #8
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	603b      	str	r3, [r7, #0]
 8003466:	4613      	mov	r3, r2
 8003468:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b20      	cmp	r3, #32
 8003478:	d17c      	bne.n	8003574 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HAL_UART_Transmit+0x2c>
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e075      	b.n	8003576 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_UART_Transmit+0x3e>
 8003494:	2302      	movs	r3, #2
 8003496:	e06e      	b.n	8003576 <HAL_UART_Transmit+0x11c>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2221      	movs	r2, #33	; 0x21
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ae:	f7fe fc17 	bl	8001ce0 <HAL_GetTick>
 80034b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	88fa      	ldrh	r2, [r7, #6]
 80034b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	88fa      	ldrh	r2, [r7, #6]
 80034be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c8:	d108      	bne.n	80034dc <HAL_UART_Transmit+0x82>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d104      	bne.n	80034dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	e003      	b.n	80034e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034ec:	e02a      	b.n	8003544 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2200      	movs	r2, #0
 80034f6:	2180      	movs	r1, #128	; 0x80
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 fa38 	bl	800396e <UART_WaitOnFlagUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e036      	b.n	8003576 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10b      	bne.n	8003526 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800351c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	3302      	adds	r3, #2
 8003522:	61bb      	str	r3, [r7, #24]
 8003524:	e007      	b.n	8003536 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	781a      	ldrb	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	3301      	adds	r3, #1
 8003534:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1cf      	bne.n	80034ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2200      	movs	r2, #0
 8003556:	2140      	movs	r1, #64	; 0x40
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 fa08 	bl	800396e <UART_WaitOnFlagUntilTimeout>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e006      	b.n	8003576 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	e000      	b.n	8003576 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003574:	2302      	movs	r3, #2
  }
}
 8003576:	4618      	mov	r0, r3
 8003578:	3720      	adds	r7, #32
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b084      	sub	sp, #16
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	4613      	mov	r3, r2
 800358a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b20      	cmp	r3, #32
 8003596:	d11d      	bne.n	80035d4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_UART_Receive_IT+0x26>
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e016      	b.n	80035d6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_UART_Receive_IT+0x38>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e00f      	b.n	80035d6 <HAL_UART_Receive_IT+0x58>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	461a      	mov	r2, r3
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 fa19 	bl	8003a02 <UART_Start_Receive_IT>
 80035d0:	4603      	mov	r3, r0
 80035d2:	e000      	b.n	80035d6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80035d4:	2302      	movs	r3, #2
  }
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08a      	sub	sp, #40	; 0x28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003600:	2300      	movs	r3, #0
 8003602:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10d      	bne.n	8003632 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_UART_IRQHandler+0x52>
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fac9 	bl	8003bc2 <UART_Receive_IT>
      return;
 8003630:	e17b      	b.n	800392a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80b1 	beq.w	800379c <HAL_UART_IRQHandler+0x1bc>
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d105      	bne.n	8003650 <HAL_UART_IRQHandler+0x70>
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 80a6 	beq.w	800379c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <HAL_UART_IRQHandler+0x90>
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	f043 0201 	orr.w	r2, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <HAL_UART_IRQHandler+0xb0>
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f043 0202 	orr.w	r2, r3, #2
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_UART_IRQHandler+0xd0>
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	f043 0204 	orr.w	r2, r3, #4
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00f      	beq.n	80036da <HAL_UART_IRQHandler+0xfa>
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d104      	bne.n	80036ce <HAL_UART_IRQHandler+0xee>
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f043 0208 	orr.w	r2, r3, #8
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 811e 	beq.w	8003920 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <HAL_UART_IRQHandler+0x11e>
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 fa62 	bl	8003bc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf14      	ite	ne
 800370c:	2301      	movne	r3, #1
 800370e:	2300      	moveq	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	d102      	bne.n	8003726 <HAL_UART_IRQHandler+0x146>
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d031      	beq.n	800378a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f9a4 	bl	8003a74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d023      	beq.n	8003782 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003748:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	2b00      	cmp	r3, #0
 8003750:	d013      	beq.n	800377a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003756:	4a76      	ldr	r2, [pc, #472]	; (8003930 <HAL_UART_IRQHandler+0x350>)
 8003758:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe fc10 	bl	8001f84 <HAL_DMA_Abort_IT>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d016      	beq.n	8003798 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003774:	4610      	mov	r0, r2
 8003776:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003778:	e00e      	b.n	8003798 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f8e3 	bl	8003946 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003780:	e00a      	b.n	8003798 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f8df 	bl	8003946 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003788:	e006      	b.n	8003798 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f8db 	bl	8003946 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003796:	e0c3      	b.n	8003920 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003798:	bf00      	nop
    return;
 800379a:	e0c1      	b.n	8003920 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	f040 80a1 	bne.w	80038e8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	f003 0310 	and.w	r3, r3, #16
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 809b 	beq.w	80038e8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 8095 	beq.w	80038e8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d04e      	beq.n	8003880 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80037ec:	8a3b      	ldrh	r3, [r7, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 8098 	beq.w	8003924 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037f8:	8a3a      	ldrh	r2, [r7, #16]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	f080 8092 	bcs.w	8003924 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	8a3a      	ldrh	r2, [r7, #16]
 8003804:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	2b20      	cmp	r3, #32
 800380e:	d02b      	beq.n	8003868 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800381e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800383e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0210 	bic.w	r2, r2, #16
 800385c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe fb53 	bl	8001f0e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003870:	b29b      	uxth	r3, r3
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	b29b      	uxth	r3, r3
 8003876:	4619      	mov	r1, r3
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f86d 	bl	8003958 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800387e:	e051      	b.n	8003924 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003888:	b29b      	uxth	r3, r3
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d047      	beq.n	8003928 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003898:	8a7b      	ldrh	r3, [r7, #18]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d044      	beq.n	8003928 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038ac:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0210 	bic.w	r2, r2, #16
 80038da:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038dc:	8a7b      	ldrh	r3, [r7, #18]
 80038de:	4619      	mov	r1, r3
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f839 	bl	8003958 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80038e6:	e01f      	b.n	8003928 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d008      	beq.n	8003904 <HAL_UART_IRQHandler+0x324>
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f8f9 	bl	8003af4 <UART_Transmit_IT>
    return;
 8003902:	e012      	b.n	800392a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00d      	beq.n	800392a <HAL_UART_IRQHandler+0x34a>
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f93a 	bl	8003b92 <UART_EndTransmit_IT>
    return;
 800391e:	e004      	b.n	800392a <HAL_UART_IRQHandler+0x34a>
    return;
 8003920:	bf00      	nop
 8003922:	e002      	b.n	800392a <HAL_UART_IRQHandler+0x34a>
      return;
 8003924:	bf00      	nop
 8003926:	e000      	b.n	800392a <HAL_UART_IRQHandler+0x34a>
      return;
 8003928:	bf00      	nop
  }
}
 800392a:	3728      	adds	r7, #40	; 0x28
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	08003acd 	.word	0x08003acd

08003934 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr

08003946 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr

08003958 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	bc80      	pop	{r7}
 800396c:	4770      	bx	lr

0800396e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	603b      	str	r3, [r7, #0]
 800397a:	4613      	mov	r3, r2
 800397c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800397e:	e02c      	b.n	80039da <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003986:	d028      	beq.n	80039da <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <UART_WaitOnFlagUntilTimeout+0x30>
 800398e:	f7fe f9a7 	bl	8001ce0 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	429a      	cmp	r2, r3
 800399c:	d21d      	bcs.n	80039da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039ac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695a      	ldr	r2, [r3, #20]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0201 	bic.w	r2, r2, #1
 80039bc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e00f      	b.n	80039fa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	4013      	ands	r3, r2
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	bf0c      	ite	eq
 80039ea:	2301      	moveq	r3, #1
 80039ec:	2300      	movne	r3, #0
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	461a      	mov	r2, r3
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d0c3      	beq.n	8003980 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b085      	sub	sp, #20
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	88fa      	ldrh	r2, [r7, #6]
 8003a1a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2222      	movs	r2, #34	; 0x22
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a46:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0220 	orr.w	r2, r2, #32
 8003a66:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a8a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d107      	bne.n	8003ab4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0210 	bic.w	r2, r2, #16
 8003ab2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr

08003acc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f7ff ff2d 	bl	8003946 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aec:	bf00      	nop
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b21      	cmp	r3, #33	; 0x21
 8003b06:	d13e      	bne.n	8003b86 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b10:	d114      	bne.n	8003b3c <UART_Transmit_IT+0x48>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d110      	bne.n	8003b3c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b2e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	1c9a      	adds	r2, r3, #2
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	621a      	str	r2, [r3, #32]
 8003b3a:	e008      	b.n	8003b4e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	1c59      	adds	r1, r3, #1
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6211      	str	r1, [r2, #32]
 8003b46:	781a      	ldrb	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10f      	bne.n	8003b82 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b70:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b80:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	e000      	b.n	8003b88 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b86:	2302      	movs	r3, #2
  }
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr

08003b92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b082      	sub	sp, #8
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ba8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff febe 	bl	8003934 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b086      	sub	sp, #24
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b22      	cmp	r3, #34	; 0x22
 8003bd4:	f040 8099 	bne.w	8003d0a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be0:	d117      	bne.n	8003c12 <UART_Receive_IT+0x50>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d113      	bne.n	8003c12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	1c9a      	adds	r2, r3, #2
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	629a      	str	r2, [r3, #40]	; 0x28
 8003c10:	e026      	b.n	8003c60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c24:	d007      	beq.n	8003c36 <UART_Receive_IT+0x74>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10a      	bne.n	8003c44 <UART_Receive_IT+0x82>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	701a      	strb	r2, [r3, #0]
 8003c42:	e008      	b.n	8003c56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d148      	bne.n	8003d06 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0220 	bic.w	r2, r2, #32
 8003c82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695a      	ldr	r2, [r3, #20]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0201 	bic.w	r2, r2, #1
 8003ca2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d123      	bne.n	8003cfc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0210 	bic.w	r2, r2, #16
 8003cc8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2b10      	cmp	r3, #16
 8003cd6:	d10a      	bne.n	8003cee <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff fe2f 	bl	8003958 <HAL_UARTEx_RxEventCallback>
 8003cfa:	e002      	b.n	8003d02 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7fd f973 	bl	8000fe8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	e002      	b.n	8003d0c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	e000      	b.n	8003d0c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003d0a:	2302      	movs	r3, #2
  }
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d4e:	f023 030c 	bic.w	r3, r3, #12
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	68b9      	ldr	r1, [r7, #8]
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a2c      	ldr	r2, [pc, #176]	; (8003e28 <UART_SetConfig+0x114>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d103      	bne.n	8003d84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d7c:	f7fe ff0a 	bl	8002b94 <HAL_RCC_GetPCLK2Freq>
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	e002      	b.n	8003d8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d84:	f7fe fef2 	bl	8002b6c <HAL_RCC_GetPCLK1Freq>
 8003d88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	009a      	lsls	r2, r3, #2
 8003d94:	441a      	add	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da0:	4a22      	ldr	r2, [pc, #136]	; (8003e2c <UART_SetConfig+0x118>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	0119      	lsls	r1, r3, #4
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	009a      	lsls	r2, r3, #2
 8003db4:	441a      	add	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dc0:	4b1a      	ldr	r3, [pc, #104]	; (8003e2c <UART_SetConfig+0x118>)
 8003dc2:	fba3 0302 	umull	r0, r3, r3, r2
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	2064      	movs	r0, #100	; 0x64
 8003dca:	fb00 f303 	mul.w	r3, r0, r3
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	3332      	adds	r3, #50	; 0x32
 8003dd4:	4a15      	ldr	r2, [pc, #84]	; (8003e2c <UART_SetConfig+0x118>)
 8003dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003de0:	4419      	add	r1, r3
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009a      	lsls	r2, r3, #2
 8003dec:	441a      	add	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003df8:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <UART_SetConfig+0x118>)
 8003dfa:	fba3 0302 	umull	r0, r3, r3, r2
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	2064      	movs	r0, #100	; 0x64
 8003e02:	fb00 f303 	mul.w	r3, r0, r3
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	3332      	adds	r3, #50	; 0x32
 8003e0c:	4a07      	ldr	r2, [pc, #28]	; (8003e2c <UART_SetConfig+0x118>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	f003 020f 	and.w	r2, r3, #15
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	440a      	add	r2, r1
 8003e1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40013800 	.word	0x40013800
 8003e2c:	51eb851f 	.word	0x51eb851f

08003e30 <__errno>:
 8003e30:	4b01      	ldr	r3, [pc, #4]	; (8003e38 <__errno+0x8>)
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000034 	.word	0x20000034

08003e3c <__libc_init_array>:
 8003e3c:	b570      	push	{r4, r5, r6, lr}
 8003e3e:	2600      	movs	r6, #0
 8003e40:	4d0c      	ldr	r5, [pc, #48]	; (8003e74 <__libc_init_array+0x38>)
 8003e42:	4c0d      	ldr	r4, [pc, #52]	; (8003e78 <__libc_init_array+0x3c>)
 8003e44:	1b64      	subs	r4, r4, r5
 8003e46:	10a4      	asrs	r4, r4, #2
 8003e48:	42a6      	cmp	r6, r4
 8003e4a:	d109      	bne.n	8003e60 <__libc_init_array+0x24>
 8003e4c:	f000 fc5c 	bl	8004708 <_init>
 8003e50:	2600      	movs	r6, #0
 8003e52:	4d0a      	ldr	r5, [pc, #40]	; (8003e7c <__libc_init_array+0x40>)
 8003e54:	4c0a      	ldr	r4, [pc, #40]	; (8003e80 <__libc_init_array+0x44>)
 8003e56:	1b64      	subs	r4, r4, r5
 8003e58:	10a4      	asrs	r4, r4, #2
 8003e5a:	42a6      	cmp	r6, r4
 8003e5c:	d105      	bne.n	8003e6a <__libc_init_array+0x2e>
 8003e5e:	bd70      	pop	{r4, r5, r6, pc}
 8003e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e64:	4798      	blx	r3
 8003e66:	3601      	adds	r6, #1
 8003e68:	e7ee      	b.n	8003e48 <__libc_init_array+0xc>
 8003e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e6e:	4798      	blx	r3
 8003e70:	3601      	adds	r6, #1
 8003e72:	e7f2      	b.n	8003e5a <__libc_init_array+0x1e>
 8003e74:	08004a18 	.word	0x08004a18
 8003e78:	08004a18 	.word	0x08004a18
 8003e7c:	08004a18 	.word	0x08004a18
 8003e80:	08004a1c 	.word	0x08004a1c

08003e84 <memcpy>:
 8003e84:	440a      	add	r2, r1
 8003e86:	4291      	cmp	r1, r2
 8003e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e8c:	d100      	bne.n	8003e90 <memcpy+0xc>
 8003e8e:	4770      	bx	lr
 8003e90:	b510      	push	{r4, lr}
 8003e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e96:	4291      	cmp	r1, r2
 8003e98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e9c:	d1f9      	bne.n	8003e92 <memcpy+0xe>
 8003e9e:	bd10      	pop	{r4, pc}

08003ea0 <memset>:
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	4402      	add	r2, r0
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d100      	bne.n	8003eaa <memset+0xa>
 8003ea8:	4770      	bx	lr
 8003eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8003eae:	e7f9      	b.n	8003ea4 <memset+0x4>

08003eb0 <siprintf>:
 8003eb0:	b40e      	push	{r1, r2, r3}
 8003eb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003eb6:	b500      	push	{lr}
 8003eb8:	b09c      	sub	sp, #112	; 0x70
 8003eba:	ab1d      	add	r3, sp, #116	; 0x74
 8003ebc:	9002      	str	r0, [sp, #8]
 8003ebe:	9006      	str	r0, [sp, #24]
 8003ec0:	9107      	str	r1, [sp, #28]
 8003ec2:	9104      	str	r1, [sp, #16]
 8003ec4:	4808      	ldr	r0, [pc, #32]	; (8003ee8 <siprintf+0x38>)
 8003ec6:	4909      	ldr	r1, [pc, #36]	; (8003eec <siprintf+0x3c>)
 8003ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ecc:	9105      	str	r1, [sp, #20]
 8003ece:	6800      	ldr	r0, [r0, #0]
 8003ed0:	a902      	add	r1, sp, #8
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	f000 f868 	bl	8003fa8 <_svfiprintf_r>
 8003ed8:	2200      	movs	r2, #0
 8003eda:	9b02      	ldr	r3, [sp, #8]
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	b01c      	add	sp, #112	; 0x70
 8003ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ee4:	b003      	add	sp, #12
 8003ee6:	4770      	bx	lr
 8003ee8:	20000034 	.word	0x20000034
 8003eec:	ffff0208 	.word	0xffff0208

08003ef0 <__ssputs_r>:
 8003ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef4:	688e      	ldr	r6, [r1, #8]
 8003ef6:	4682      	mov	sl, r0
 8003ef8:	429e      	cmp	r6, r3
 8003efa:	460c      	mov	r4, r1
 8003efc:	4690      	mov	r8, r2
 8003efe:	461f      	mov	r7, r3
 8003f00:	d838      	bhi.n	8003f74 <__ssputs_r+0x84>
 8003f02:	898a      	ldrh	r2, [r1, #12]
 8003f04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f08:	d032      	beq.n	8003f70 <__ssputs_r+0x80>
 8003f0a:	6825      	ldr	r5, [r4, #0]
 8003f0c:	6909      	ldr	r1, [r1, #16]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	eba5 0901 	sub.w	r9, r5, r1
 8003f14:	6965      	ldr	r5, [r4, #20]
 8003f16:	444b      	add	r3, r9
 8003f18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f20:	106d      	asrs	r5, r5, #1
 8003f22:	429d      	cmp	r5, r3
 8003f24:	bf38      	it	cc
 8003f26:	461d      	movcc	r5, r3
 8003f28:	0553      	lsls	r3, r2, #21
 8003f2a:	d531      	bpl.n	8003f90 <__ssputs_r+0xa0>
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	f000 fb45 	bl	80045bc <_malloc_r>
 8003f32:	4606      	mov	r6, r0
 8003f34:	b950      	cbnz	r0, 8003f4c <__ssputs_r+0x5c>
 8003f36:	230c      	movs	r3, #12
 8003f38:	f04f 30ff 	mov.w	r0, #4294967295
 8003f3c:	f8ca 3000 	str.w	r3, [sl]
 8003f40:	89a3      	ldrh	r3, [r4, #12]
 8003f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f46:	81a3      	strh	r3, [r4, #12]
 8003f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f4c:	464a      	mov	r2, r9
 8003f4e:	6921      	ldr	r1, [r4, #16]
 8003f50:	f7ff ff98 	bl	8003e84 <memcpy>
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f5e:	81a3      	strh	r3, [r4, #12]
 8003f60:	6126      	str	r6, [r4, #16]
 8003f62:	444e      	add	r6, r9
 8003f64:	6026      	str	r6, [r4, #0]
 8003f66:	463e      	mov	r6, r7
 8003f68:	6165      	str	r5, [r4, #20]
 8003f6a:	eba5 0509 	sub.w	r5, r5, r9
 8003f6e:	60a5      	str	r5, [r4, #8]
 8003f70:	42be      	cmp	r6, r7
 8003f72:	d900      	bls.n	8003f76 <__ssputs_r+0x86>
 8003f74:	463e      	mov	r6, r7
 8003f76:	4632      	mov	r2, r6
 8003f78:	4641      	mov	r1, r8
 8003f7a:	6820      	ldr	r0, [r4, #0]
 8003f7c:	f000 fab8 	bl	80044f0 <memmove>
 8003f80:	68a3      	ldr	r3, [r4, #8]
 8003f82:	6822      	ldr	r2, [r4, #0]
 8003f84:	1b9b      	subs	r3, r3, r6
 8003f86:	4432      	add	r2, r6
 8003f88:	2000      	movs	r0, #0
 8003f8a:	60a3      	str	r3, [r4, #8]
 8003f8c:	6022      	str	r2, [r4, #0]
 8003f8e:	e7db      	b.n	8003f48 <__ssputs_r+0x58>
 8003f90:	462a      	mov	r2, r5
 8003f92:	f000 fb6d 	bl	8004670 <_realloc_r>
 8003f96:	4606      	mov	r6, r0
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	d1e1      	bne.n	8003f60 <__ssputs_r+0x70>
 8003f9c:	4650      	mov	r0, sl
 8003f9e:	6921      	ldr	r1, [r4, #16]
 8003fa0:	f000 fac0 	bl	8004524 <_free_r>
 8003fa4:	e7c7      	b.n	8003f36 <__ssputs_r+0x46>
	...

08003fa8 <_svfiprintf_r>:
 8003fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fac:	4698      	mov	r8, r3
 8003fae:	898b      	ldrh	r3, [r1, #12]
 8003fb0:	4607      	mov	r7, r0
 8003fb2:	061b      	lsls	r3, r3, #24
 8003fb4:	460d      	mov	r5, r1
 8003fb6:	4614      	mov	r4, r2
 8003fb8:	b09d      	sub	sp, #116	; 0x74
 8003fba:	d50e      	bpl.n	8003fda <_svfiprintf_r+0x32>
 8003fbc:	690b      	ldr	r3, [r1, #16]
 8003fbe:	b963      	cbnz	r3, 8003fda <_svfiprintf_r+0x32>
 8003fc0:	2140      	movs	r1, #64	; 0x40
 8003fc2:	f000 fafb 	bl	80045bc <_malloc_r>
 8003fc6:	6028      	str	r0, [r5, #0]
 8003fc8:	6128      	str	r0, [r5, #16]
 8003fca:	b920      	cbnz	r0, 8003fd6 <_svfiprintf_r+0x2e>
 8003fcc:	230c      	movs	r3, #12
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd4:	e0d1      	b.n	800417a <_svfiprintf_r+0x1d2>
 8003fd6:	2340      	movs	r3, #64	; 0x40
 8003fd8:	616b      	str	r3, [r5, #20]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8003fde:	2320      	movs	r3, #32
 8003fe0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fe4:	2330      	movs	r3, #48	; 0x30
 8003fe6:	f04f 0901 	mov.w	r9, #1
 8003fea:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004194 <_svfiprintf_r+0x1ec>
 8003ff2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ff6:	4623      	mov	r3, r4
 8003ff8:	469a      	mov	sl, r3
 8003ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ffe:	b10a      	cbz	r2, 8004004 <_svfiprintf_r+0x5c>
 8004000:	2a25      	cmp	r2, #37	; 0x25
 8004002:	d1f9      	bne.n	8003ff8 <_svfiprintf_r+0x50>
 8004004:	ebba 0b04 	subs.w	fp, sl, r4
 8004008:	d00b      	beq.n	8004022 <_svfiprintf_r+0x7a>
 800400a:	465b      	mov	r3, fp
 800400c:	4622      	mov	r2, r4
 800400e:	4629      	mov	r1, r5
 8004010:	4638      	mov	r0, r7
 8004012:	f7ff ff6d 	bl	8003ef0 <__ssputs_r>
 8004016:	3001      	adds	r0, #1
 8004018:	f000 80aa 	beq.w	8004170 <_svfiprintf_r+0x1c8>
 800401c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800401e:	445a      	add	r2, fp
 8004020:	9209      	str	r2, [sp, #36]	; 0x24
 8004022:	f89a 3000 	ldrb.w	r3, [sl]
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 80a2 	beq.w	8004170 <_svfiprintf_r+0x1c8>
 800402c:	2300      	movs	r3, #0
 800402e:	f04f 32ff 	mov.w	r2, #4294967295
 8004032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004036:	f10a 0a01 	add.w	sl, sl, #1
 800403a:	9304      	str	r3, [sp, #16]
 800403c:	9307      	str	r3, [sp, #28]
 800403e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004042:	931a      	str	r3, [sp, #104]	; 0x68
 8004044:	4654      	mov	r4, sl
 8004046:	2205      	movs	r2, #5
 8004048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800404c:	4851      	ldr	r0, [pc, #324]	; (8004194 <_svfiprintf_r+0x1ec>)
 800404e:	f000 fa41 	bl	80044d4 <memchr>
 8004052:	9a04      	ldr	r2, [sp, #16]
 8004054:	b9d8      	cbnz	r0, 800408e <_svfiprintf_r+0xe6>
 8004056:	06d0      	lsls	r0, r2, #27
 8004058:	bf44      	itt	mi
 800405a:	2320      	movmi	r3, #32
 800405c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004060:	0711      	lsls	r1, r2, #28
 8004062:	bf44      	itt	mi
 8004064:	232b      	movmi	r3, #43	; 0x2b
 8004066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800406a:	f89a 3000 	ldrb.w	r3, [sl]
 800406e:	2b2a      	cmp	r3, #42	; 0x2a
 8004070:	d015      	beq.n	800409e <_svfiprintf_r+0xf6>
 8004072:	4654      	mov	r4, sl
 8004074:	2000      	movs	r0, #0
 8004076:	f04f 0c0a 	mov.w	ip, #10
 800407a:	9a07      	ldr	r2, [sp, #28]
 800407c:	4621      	mov	r1, r4
 800407e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004082:	3b30      	subs	r3, #48	; 0x30
 8004084:	2b09      	cmp	r3, #9
 8004086:	d94e      	bls.n	8004126 <_svfiprintf_r+0x17e>
 8004088:	b1b0      	cbz	r0, 80040b8 <_svfiprintf_r+0x110>
 800408a:	9207      	str	r2, [sp, #28]
 800408c:	e014      	b.n	80040b8 <_svfiprintf_r+0x110>
 800408e:	eba0 0308 	sub.w	r3, r0, r8
 8004092:	fa09 f303 	lsl.w	r3, r9, r3
 8004096:	4313      	orrs	r3, r2
 8004098:	46a2      	mov	sl, r4
 800409a:	9304      	str	r3, [sp, #16]
 800409c:	e7d2      	b.n	8004044 <_svfiprintf_r+0x9c>
 800409e:	9b03      	ldr	r3, [sp, #12]
 80040a0:	1d19      	adds	r1, r3, #4
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	9103      	str	r1, [sp, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	bfbb      	ittet	lt
 80040aa:	425b      	neglt	r3, r3
 80040ac:	f042 0202 	orrlt.w	r2, r2, #2
 80040b0:	9307      	strge	r3, [sp, #28]
 80040b2:	9307      	strlt	r3, [sp, #28]
 80040b4:	bfb8      	it	lt
 80040b6:	9204      	strlt	r2, [sp, #16]
 80040b8:	7823      	ldrb	r3, [r4, #0]
 80040ba:	2b2e      	cmp	r3, #46	; 0x2e
 80040bc:	d10c      	bne.n	80040d8 <_svfiprintf_r+0x130>
 80040be:	7863      	ldrb	r3, [r4, #1]
 80040c0:	2b2a      	cmp	r3, #42	; 0x2a
 80040c2:	d135      	bne.n	8004130 <_svfiprintf_r+0x188>
 80040c4:	9b03      	ldr	r3, [sp, #12]
 80040c6:	3402      	adds	r4, #2
 80040c8:	1d1a      	adds	r2, r3, #4
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	9203      	str	r2, [sp, #12]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	bfb8      	it	lt
 80040d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80040d6:	9305      	str	r3, [sp, #20]
 80040d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80041a4 <_svfiprintf_r+0x1fc>
 80040dc:	2203      	movs	r2, #3
 80040de:	4650      	mov	r0, sl
 80040e0:	7821      	ldrb	r1, [r4, #0]
 80040e2:	f000 f9f7 	bl	80044d4 <memchr>
 80040e6:	b140      	cbz	r0, 80040fa <_svfiprintf_r+0x152>
 80040e8:	2340      	movs	r3, #64	; 0x40
 80040ea:	eba0 000a 	sub.w	r0, r0, sl
 80040ee:	fa03 f000 	lsl.w	r0, r3, r0
 80040f2:	9b04      	ldr	r3, [sp, #16]
 80040f4:	3401      	adds	r4, #1
 80040f6:	4303      	orrs	r3, r0
 80040f8:	9304      	str	r3, [sp, #16]
 80040fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040fe:	2206      	movs	r2, #6
 8004100:	4825      	ldr	r0, [pc, #148]	; (8004198 <_svfiprintf_r+0x1f0>)
 8004102:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004106:	f000 f9e5 	bl	80044d4 <memchr>
 800410a:	2800      	cmp	r0, #0
 800410c:	d038      	beq.n	8004180 <_svfiprintf_r+0x1d8>
 800410e:	4b23      	ldr	r3, [pc, #140]	; (800419c <_svfiprintf_r+0x1f4>)
 8004110:	bb1b      	cbnz	r3, 800415a <_svfiprintf_r+0x1b2>
 8004112:	9b03      	ldr	r3, [sp, #12]
 8004114:	3307      	adds	r3, #7
 8004116:	f023 0307 	bic.w	r3, r3, #7
 800411a:	3308      	adds	r3, #8
 800411c:	9303      	str	r3, [sp, #12]
 800411e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004120:	4433      	add	r3, r6
 8004122:	9309      	str	r3, [sp, #36]	; 0x24
 8004124:	e767      	b.n	8003ff6 <_svfiprintf_r+0x4e>
 8004126:	460c      	mov	r4, r1
 8004128:	2001      	movs	r0, #1
 800412a:	fb0c 3202 	mla	r2, ip, r2, r3
 800412e:	e7a5      	b.n	800407c <_svfiprintf_r+0xd4>
 8004130:	2300      	movs	r3, #0
 8004132:	f04f 0c0a 	mov.w	ip, #10
 8004136:	4619      	mov	r1, r3
 8004138:	3401      	adds	r4, #1
 800413a:	9305      	str	r3, [sp, #20]
 800413c:	4620      	mov	r0, r4
 800413e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004142:	3a30      	subs	r2, #48	; 0x30
 8004144:	2a09      	cmp	r2, #9
 8004146:	d903      	bls.n	8004150 <_svfiprintf_r+0x1a8>
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0c5      	beq.n	80040d8 <_svfiprintf_r+0x130>
 800414c:	9105      	str	r1, [sp, #20]
 800414e:	e7c3      	b.n	80040d8 <_svfiprintf_r+0x130>
 8004150:	4604      	mov	r4, r0
 8004152:	2301      	movs	r3, #1
 8004154:	fb0c 2101 	mla	r1, ip, r1, r2
 8004158:	e7f0      	b.n	800413c <_svfiprintf_r+0x194>
 800415a:	ab03      	add	r3, sp, #12
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	462a      	mov	r2, r5
 8004160:	4638      	mov	r0, r7
 8004162:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <_svfiprintf_r+0x1f8>)
 8004164:	a904      	add	r1, sp, #16
 8004166:	f3af 8000 	nop.w
 800416a:	1c42      	adds	r2, r0, #1
 800416c:	4606      	mov	r6, r0
 800416e:	d1d6      	bne.n	800411e <_svfiprintf_r+0x176>
 8004170:	89ab      	ldrh	r3, [r5, #12]
 8004172:	065b      	lsls	r3, r3, #25
 8004174:	f53f af2c 	bmi.w	8003fd0 <_svfiprintf_r+0x28>
 8004178:	9809      	ldr	r0, [sp, #36]	; 0x24
 800417a:	b01d      	add	sp, #116	; 0x74
 800417c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004180:	ab03      	add	r3, sp, #12
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	462a      	mov	r2, r5
 8004186:	4638      	mov	r0, r7
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <_svfiprintf_r+0x1f8>)
 800418a:	a904      	add	r1, sp, #16
 800418c:	f000 f87c 	bl	8004288 <_printf_i>
 8004190:	e7eb      	b.n	800416a <_svfiprintf_r+0x1c2>
 8004192:	bf00      	nop
 8004194:	080049e4 	.word	0x080049e4
 8004198:	080049ee 	.word	0x080049ee
 800419c:	00000000 	.word	0x00000000
 80041a0:	08003ef1 	.word	0x08003ef1
 80041a4:	080049ea 	.word	0x080049ea

080041a8 <_printf_common>:
 80041a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041ac:	4616      	mov	r6, r2
 80041ae:	4699      	mov	r9, r3
 80041b0:	688a      	ldr	r2, [r1, #8]
 80041b2:	690b      	ldr	r3, [r1, #16]
 80041b4:	4607      	mov	r7, r0
 80041b6:	4293      	cmp	r3, r2
 80041b8:	bfb8      	it	lt
 80041ba:	4613      	movlt	r3, r2
 80041bc:	6033      	str	r3, [r6, #0]
 80041be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041c2:	460c      	mov	r4, r1
 80041c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041c8:	b10a      	cbz	r2, 80041ce <_printf_common+0x26>
 80041ca:	3301      	adds	r3, #1
 80041cc:	6033      	str	r3, [r6, #0]
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	0699      	lsls	r1, r3, #26
 80041d2:	bf42      	ittt	mi
 80041d4:	6833      	ldrmi	r3, [r6, #0]
 80041d6:	3302      	addmi	r3, #2
 80041d8:	6033      	strmi	r3, [r6, #0]
 80041da:	6825      	ldr	r5, [r4, #0]
 80041dc:	f015 0506 	ands.w	r5, r5, #6
 80041e0:	d106      	bne.n	80041f0 <_printf_common+0x48>
 80041e2:	f104 0a19 	add.w	sl, r4, #25
 80041e6:	68e3      	ldr	r3, [r4, #12]
 80041e8:	6832      	ldr	r2, [r6, #0]
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	42ab      	cmp	r3, r5
 80041ee:	dc28      	bgt.n	8004242 <_printf_common+0x9a>
 80041f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041f4:	1e13      	subs	r3, r2, #0
 80041f6:	6822      	ldr	r2, [r4, #0]
 80041f8:	bf18      	it	ne
 80041fa:	2301      	movne	r3, #1
 80041fc:	0692      	lsls	r2, r2, #26
 80041fe:	d42d      	bmi.n	800425c <_printf_common+0xb4>
 8004200:	4649      	mov	r1, r9
 8004202:	4638      	mov	r0, r7
 8004204:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004208:	47c0      	blx	r8
 800420a:	3001      	adds	r0, #1
 800420c:	d020      	beq.n	8004250 <_printf_common+0xa8>
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	68e5      	ldr	r5, [r4, #12]
 8004212:	f003 0306 	and.w	r3, r3, #6
 8004216:	2b04      	cmp	r3, #4
 8004218:	bf18      	it	ne
 800421a:	2500      	movne	r5, #0
 800421c:	6832      	ldr	r2, [r6, #0]
 800421e:	f04f 0600 	mov.w	r6, #0
 8004222:	68a3      	ldr	r3, [r4, #8]
 8004224:	bf08      	it	eq
 8004226:	1aad      	subeq	r5, r5, r2
 8004228:	6922      	ldr	r2, [r4, #16]
 800422a:	bf08      	it	eq
 800422c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004230:	4293      	cmp	r3, r2
 8004232:	bfc4      	itt	gt
 8004234:	1a9b      	subgt	r3, r3, r2
 8004236:	18ed      	addgt	r5, r5, r3
 8004238:	341a      	adds	r4, #26
 800423a:	42b5      	cmp	r5, r6
 800423c:	d11a      	bne.n	8004274 <_printf_common+0xcc>
 800423e:	2000      	movs	r0, #0
 8004240:	e008      	b.n	8004254 <_printf_common+0xac>
 8004242:	2301      	movs	r3, #1
 8004244:	4652      	mov	r2, sl
 8004246:	4649      	mov	r1, r9
 8004248:	4638      	mov	r0, r7
 800424a:	47c0      	blx	r8
 800424c:	3001      	adds	r0, #1
 800424e:	d103      	bne.n	8004258 <_printf_common+0xb0>
 8004250:	f04f 30ff 	mov.w	r0, #4294967295
 8004254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004258:	3501      	adds	r5, #1
 800425a:	e7c4      	b.n	80041e6 <_printf_common+0x3e>
 800425c:	2030      	movs	r0, #48	; 0x30
 800425e:	18e1      	adds	r1, r4, r3
 8004260:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800426a:	4422      	add	r2, r4
 800426c:	3302      	adds	r3, #2
 800426e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004272:	e7c5      	b.n	8004200 <_printf_common+0x58>
 8004274:	2301      	movs	r3, #1
 8004276:	4622      	mov	r2, r4
 8004278:	4649      	mov	r1, r9
 800427a:	4638      	mov	r0, r7
 800427c:	47c0      	blx	r8
 800427e:	3001      	adds	r0, #1
 8004280:	d0e6      	beq.n	8004250 <_printf_common+0xa8>
 8004282:	3601      	adds	r6, #1
 8004284:	e7d9      	b.n	800423a <_printf_common+0x92>
	...

08004288 <_printf_i>:
 8004288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800428c:	460c      	mov	r4, r1
 800428e:	7e27      	ldrb	r7, [r4, #24]
 8004290:	4691      	mov	r9, r2
 8004292:	2f78      	cmp	r7, #120	; 0x78
 8004294:	4680      	mov	r8, r0
 8004296:	469a      	mov	sl, r3
 8004298:	990c      	ldr	r1, [sp, #48]	; 0x30
 800429a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800429e:	d807      	bhi.n	80042b0 <_printf_i+0x28>
 80042a0:	2f62      	cmp	r7, #98	; 0x62
 80042a2:	d80a      	bhi.n	80042ba <_printf_i+0x32>
 80042a4:	2f00      	cmp	r7, #0
 80042a6:	f000 80d9 	beq.w	800445c <_printf_i+0x1d4>
 80042aa:	2f58      	cmp	r7, #88	; 0x58
 80042ac:	f000 80a4 	beq.w	80043f8 <_printf_i+0x170>
 80042b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042b8:	e03a      	b.n	8004330 <_printf_i+0xa8>
 80042ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042be:	2b15      	cmp	r3, #21
 80042c0:	d8f6      	bhi.n	80042b0 <_printf_i+0x28>
 80042c2:	a001      	add	r0, pc, #4	; (adr r0, 80042c8 <_printf_i+0x40>)
 80042c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80042c8:	08004321 	.word	0x08004321
 80042cc:	08004335 	.word	0x08004335
 80042d0:	080042b1 	.word	0x080042b1
 80042d4:	080042b1 	.word	0x080042b1
 80042d8:	080042b1 	.word	0x080042b1
 80042dc:	080042b1 	.word	0x080042b1
 80042e0:	08004335 	.word	0x08004335
 80042e4:	080042b1 	.word	0x080042b1
 80042e8:	080042b1 	.word	0x080042b1
 80042ec:	080042b1 	.word	0x080042b1
 80042f0:	080042b1 	.word	0x080042b1
 80042f4:	08004443 	.word	0x08004443
 80042f8:	08004365 	.word	0x08004365
 80042fc:	08004425 	.word	0x08004425
 8004300:	080042b1 	.word	0x080042b1
 8004304:	080042b1 	.word	0x080042b1
 8004308:	08004465 	.word	0x08004465
 800430c:	080042b1 	.word	0x080042b1
 8004310:	08004365 	.word	0x08004365
 8004314:	080042b1 	.word	0x080042b1
 8004318:	080042b1 	.word	0x080042b1
 800431c:	0800442d 	.word	0x0800442d
 8004320:	680b      	ldr	r3, [r1, #0]
 8004322:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004326:	1d1a      	adds	r2, r3, #4
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	600a      	str	r2, [r1, #0]
 800432c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004330:	2301      	movs	r3, #1
 8004332:	e0a4      	b.n	800447e <_printf_i+0x1f6>
 8004334:	6825      	ldr	r5, [r4, #0]
 8004336:	6808      	ldr	r0, [r1, #0]
 8004338:	062e      	lsls	r6, r5, #24
 800433a:	f100 0304 	add.w	r3, r0, #4
 800433e:	d50a      	bpl.n	8004356 <_printf_i+0xce>
 8004340:	6805      	ldr	r5, [r0, #0]
 8004342:	600b      	str	r3, [r1, #0]
 8004344:	2d00      	cmp	r5, #0
 8004346:	da03      	bge.n	8004350 <_printf_i+0xc8>
 8004348:	232d      	movs	r3, #45	; 0x2d
 800434a:	426d      	negs	r5, r5
 800434c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004350:	230a      	movs	r3, #10
 8004352:	485e      	ldr	r0, [pc, #376]	; (80044cc <_printf_i+0x244>)
 8004354:	e019      	b.n	800438a <_printf_i+0x102>
 8004356:	f015 0f40 	tst.w	r5, #64	; 0x40
 800435a:	6805      	ldr	r5, [r0, #0]
 800435c:	600b      	str	r3, [r1, #0]
 800435e:	bf18      	it	ne
 8004360:	b22d      	sxthne	r5, r5
 8004362:	e7ef      	b.n	8004344 <_printf_i+0xbc>
 8004364:	680b      	ldr	r3, [r1, #0]
 8004366:	6825      	ldr	r5, [r4, #0]
 8004368:	1d18      	adds	r0, r3, #4
 800436a:	6008      	str	r0, [r1, #0]
 800436c:	0628      	lsls	r0, r5, #24
 800436e:	d501      	bpl.n	8004374 <_printf_i+0xec>
 8004370:	681d      	ldr	r5, [r3, #0]
 8004372:	e002      	b.n	800437a <_printf_i+0xf2>
 8004374:	0669      	lsls	r1, r5, #25
 8004376:	d5fb      	bpl.n	8004370 <_printf_i+0xe8>
 8004378:	881d      	ldrh	r5, [r3, #0]
 800437a:	2f6f      	cmp	r7, #111	; 0x6f
 800437c:	bf0c      	ite	eq
 800437e:	2308      	moveq	r3, #8
 8004380:	230a      	movne	r3, #10
 8004382:	4852      	ldr	r0, [pc, #328]	; (80044cc <_printf_i+0x244>)
 8004384:	2100      	movs	r1, #0
 8004386:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800438a:	6866      	ldr	r6, [r4, #4]
 800438c:	2e00      	cmp	r6, #0
 800438e:	bfa8      	it	ge
 8004390:	6821      	ldrge	r1, [r4, #0]
 8004392:	60a6      	str	r6, [r4, #8]
 8004394:	bfa4      	itt	ge
 8004396:	f021 0104 	bicge.w	r1, r1, #4
 800439a:	6021      	strge	r1, [r4, #0]
 800439c:	b90d      	cbnz	r5, 80043a2 <_printf_i+0x11a>
 800439e:	2e00      	cmp	r6, #0
 80043a0:	d04d      	beq.n	800443e <_printf_i+0x1b6>
 80043a2:	4616      	mov	r6, r2
 80043a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80043a8:	fb03 5711 	mls	r7, r3, r1, r5
 80043ac:	5dc7      	ldrb	r7, [r0, r7]
 80043ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043b2:	462f      	mov	r7, r5
 80043b4:	42bb      	cmp	r3, r7
 80043b6:	460d      	mov	r5, r1
 80043b8:	d9f4      	bls.n	80043a4 <_printf_i+0x11c>
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d10b      	bne.n	80043d6 <_printf_i+0x14e>
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	07df      	lsls	r7, r3, #31
 80043c2:	d508      	bpl.n	80043d6 <_printf_i+0x14e>
 80043c4:	6923      	ldr	r3, [r4, #16]
 80043c6:	6861      	ldr	r1, [r4, #4]
 80043c8:	4299      	cmp	r1, r3
 80043ca:	bfde      	ittt	le
 80043cc:	2330      	movle	r3, #48	; 0x30
 80043ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043d6:	1b92      	subs	r2, r2, r6
 80043d8:	6122      	str	r2, [r4, #16]
 80043da:	464b      	mov	r3, r9
 80043dc:	4621      	mov	r1, r4
 80043de:	4640      	mov	r0, r8
 80043e0:	f8cd a000 	str.w	sl, [sp]
 80043e4:	aa03      	add	r2, sp, #12
 80043e6:	f7ff fedf 	bl	80041a8 <_printf_common>
 80043ea:	3001      	adds	r0, #1
 80043ec:	d14c      	bne.n	8004488 <_printf_i+0x200>
 80043ee:	f04f 30ff 	mov.w	r0, #4294967295
 80043f2:	b004      	add	sp, #16
 80043f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f8:	4834      	ldr	r0, [pc, #208]	; (80044cc <_printf_i+0x244>)
 80043fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80043fe:	680e      	ldr	r6, [r1, #0]
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	f856 5b04 	ldr.w	r5, [r6], #4
 8004406:	061f      	lsls	r7, r3, #24
 8004408:	600e      	str	r6, [r1, #0]
 800440a:	d514      	bpl.n	8004436 <_printf_i+0x1ae>
 800440c:	07d9      	lsls	r1, r3, #31
 800440e:	bf44      	itt	mi
 8004410:	f043 0320 	orrmi.w	r3, r3, #32
 8004414:	6023      	strmi	r3, [r4, #0]
 8004416:	b91d      	cbnz	r5, 8004420 <_printf_i+0x198>
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	f023 0320 	bic.w	r3, r3, #32
 800441e:	6023      	str	r3, [r4, #0]
 8004420:	2310      	movs	r3, #16
 8004422:	e7af      	b.n	8004384 <_printf_i+0xfc>
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	f043 0320 	orr.w	r3, r3, #32
 800442a:	6023      	str	r3, [r4, #0]
 800442c:	2378      	movs	r3, #120	; 0x78
 800442e:	4828      	ldr	r0, [pc, #160]	; (80044d0 <_printf_i+0x248>)
 8004430:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004434:	e7e3      	b.n	80043fe <_printf_i+0x176>
 8004436:	065e      	lsls	r6, r3, #25
 8004438:	bf48      	it	mi
 800443a:	b2ad      	uxthmi	r5, r5
 800443c:	e7e6      	b.n	800440c <_printf_i+0x184>
 800443e:	4616      	mov	r6, r2
 8004440:	e7bb      	b.n	80043ba <_printf_i+0x132>
 8004442:	680b      	ldr	r3, [r1, #0]
 8004444:	6826      	ldr	r6, [r4, #0]
 8004446:	1d1d      	adds	r5, r3, #4
 8004448:	6960      	ldr	r0, [r4, #20]
 800444a:	600d      	str	r5, [r1, #0]
 800444c:	0635      	lsls	r5, r6, #24
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	d501      	bpl.n	8004456 <_printf_i+0x1ce>
 8004452:	6018      	str	r0, [r3, #0]
 8004454:	e002      	b.n	800445c <_printf_i+0x1d4>
 8004456:	0671      	lsls	r1, r6, #25
 8004458:	d5fb      	bpl.n	8004452 <_printf_i+0x1ca>
 800445a:	8018      	strh	r0, [r3, #0]
 800445c:	2300      	movs	r3, #0
 800445e:	4616      	mov	r6, r2
 8004460:	6123      	str	r3, [r4, #16]
 8004462:	e7ba      	b.n	80043da <_printf_i+0x152>
 8004464:	680b      	ldr	r3, [r1, #0]
 8004466:	1d1a      	adds	r2, r3, #4
 8004468:	600a      	str	r2, [r1, #0]
 800446a:	681e      	ldr	r6, [r3, #0]
 800446c:	2100      	movs	r1, #0
 800446e:	4630      	mov	r0, r6
 8004470:	6862      	ldr	r2, [r4, #4]
 8004472:	f000 f82f 	bl	80044d4 <memchr>
 8004476:	b108      	cbz	r0, 800447c <_printf_i+0x1f4>
 8004478:	1b80      	subs	r0, r0, r6
 800447a:	6060      	str	r0, [r4, #4]
 800447c:	6863      	ldr	r3, [r4, #4]
 800447e:	6123      	str	r3, [r4, #16]
 8004480:	2300      	movs	r3, #0
 8004482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004486:	e7a8      	b.n	80043da <_printf_i+0x152>
 8004488:	4632      	mov	r2, r6
 800448a:	4649      	mov	r1, r9
 800448c:	4640      	mov	r0, r8
 800448e:	6923      	ldr	r3, [r4, #16]
 8004490:	47d0      	blx	sl
 8004492:	3001      	adds	r0, #1
 8004494:	d0ab      	beq.n	80043ee <_printf_i+0x166>
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	079b      	lsls	r3, r3, #30
 800449a:	d413      	bmi.n	80044c4 <_printf_i+0x23c>
 800449c:	68e0      	ldr	r0, [r4, #12]
 800449e:	9b03      	ldr	r3, [sp, #12]
 80044a0:	4298      	cmp	r0, r3
 80044a2:	bfb8      	it	lt
 80044a4:	4618      	movlt	r0, r3
 80044a6:	e7a4      	b.n	80043f2 <_printf_i+0x16a>
 80044a8:	2301      	movs	r3, #1
 80044aa:	4632      	mov	r2, r6
 80044ac:	4649      	mov	r1, r9
 80044ae:	4640      	mov	r0, r8
 80044b0:	47d0      	blx	sl
 80044b2:	3001      	adds	r0, #1
 80044b4:	d09b      	beq.n	80043ee <_printf_i+0x166>
 80044b6:	3501      	adds	r5, #1
 80044b8:	68e3      	ldr	r3, [r4, #12]
 80044ba:	9903      	ldr	r1, [sp, #12]
 80044bc:	1a5b      	subs	r3, r3, r1
 80044be:	42ab      	cmp	r3, r5
 80044c0:	dcf2      	bgt.n	80044a8 <_printf_i+0x220>
 80044c2:	e7eb      	b.n	800449c <_printf_i+0x214>
 80044c4:	2500      	movs	r5, #0
 80044c6:	f104 0619 	add.w	r6, r4, #25
 80044ca:	e7f5      	b.n	80044b8 <_printf_i+0x230>
 80044cc:	080049f5 	.word	0x080049f5
 80044d0:	08004a06 	.word	0x08004a06

080044d4 <memchr>:
 80044d4:	4603      	mov	r3, r0
 80044d6:	b510      	push	{r4, lr}
 80044d8:	b2c9      	uxtb	r1, r1
 80044da:	4402      	add	r2, r0
 80044dc:	4293      	cmp	r3, r2
 80044de:	4618      	mov	r0, r3
 80044e0:	d101      	bne.n	80044e6 <memchr+0x12>
 80044e2:	2000      	movs	r0, #0
 80044e4:	e003      	b.n	80044ee <memchr+0x1a>
 80044e6:	7804      	ldrb	r4, [r0, #0]
 80044e8:	3301      	adds	r3, #1
 80044ea:	428c      	cmp	r4, r1
 80044ec:	d1f6      	bne.n	80044dc <memchr+0x8>
 80044ee:	bd10      	pop	{r4, pc}

080044f0 <memmove>:
 80044f0:	4288      	cmp	r0, r1
 80044f2:	b510      	push	{r4, lr}
 80044f4:	eb01 0402 	add.w	r4, r1, r2
 80044f8:	d902      	bls.n	8004500 <memmove+0x10>
 80044fa:	4284      	cmp	r4, r0
 80044fc:	4623      	mov	r3, r4
 80044fe:	d807      	bhi.n	8004510 <memmove+0x20>
 8004500:	1e43      	subs	r3, r0, #1
 8004502:	42a1      	cmp	r1, r4
 8004504:	d008      	beq.n	8004518 <memmove+0x28>
 8004506:	f811 2b01 	ldrb.w	r2, [r1], #1
 800450a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800450e:	e7f8      	b.n	8004502 <memmove+0x12>
 8004510:	4601      	mov	r1, r0
 8004512:	4402      	add	r2, r0
 8004514:	428a      	cmp	r2, r1
 8004516:	d100      	bne.n	800451a <memmove+0x2a>
 8004518:	bd10      	pop	{r4, pc}
 800451a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800451e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004522:	e7f7      	b.n	8004514 <memmove+0x24>

08004524 <_free_r>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	4605      	mov	r5, r0
 8004528:	2900      	cmp	r1, #0
 800452a:	d043      	beq.n	80045b4 <_free_r+0x90>
 800452c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004530:	1f0c      	subs	r4, r1, #4
 8004532:	2b00      	cmp	r3, #0
 8004534:	bfb8      	it	lt
 8004536:	18e4      	addlt	r4, r4, r3
 8004538:	f000 f8d0 	bl	80046dc <__malloc_lock>
 800453c:	4a1e      	ldr	r2, [pc, #120]	; (80045b8 <_free_r+0x94>)
 800453e:	6813      	ldr	r3, [r2, #0]
 8004540:	4610      	mov	r0, r2
 8004542:	b933      	cbnz	r3, 8004552 <_free_r+0x2e>
 8004544:	6063      	str	r3, [r4, #4]
 8004546:	6014      	str	r4, [r2, #0]
 8004548:	4628      	mov	r0, r5
 800454a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800454e:	f000 b8cb 	b.w	80046e8 <__malloc_unlock>
 8004552:	42a3      	cmp	r3, r4
 8004554:	d90a      	bls.n	800456c <_free_r+0x48>
 8004556:	6821      	ldr	r1, [r4, #0]
 8004558:	1862      	adds	r2, r4, r1
 800455a:	4293      	cmp	r3, r2
 800455c:	bf01      	itttt	eq
 800455e:	681a      	ldreq	r2, [r3, #0]
 8004560:	685b      	ldreq	r3, [r3, #4]
 8004562:	1852      	addeq	r2, r2, r1
 8004564:	6022      	streq	r2, [r4, #0]
 8004566:	6063      	str	r3, [r4, #4]
 8004568:	6004      	str	r4, [r0, #0]
 800456a:	e7ed      	b.n	8004548 <_free_r+0x24>
 800456c:	461a      	mov	r2, r3
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	b10b      	cbz	r3, 8004576 <_free_r+0x52>
 8004572:	42a3      	cmp	r3, r4
 8004574:	d9fa      	bls.n	800456c <_free_r+0x48>
 8004576:	6811      	ldr	r1, [r2, #0]
 8004578:	1850      	adds	r0, r2, r1
 800457a:	42a0      	cmp	r0, r4
 800457c:	d10b      	bne.n	8004596 <_free_r+0x72>
 800457e:	6820      	ldr	r0, [r4, #0]
 8004580:	4401      	add	r1, r0
 8004582:	1850      	adds	r0, r2, r1
 8004584:	4283      	cmp	r3, r0
 8004586:	6011      	str	r1, [r2, #0]
 8004588:	d1de      	bne.n	8004548 <_free_r+0x24>
 800458a:	6818      	ldr	r0, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	4401      	add	r1, r0
 8004590:	6011      	str	r1, [r2, #0]
 8004592:	6053      	str	r3, [r2, #4]
 8004594:	e7d8      	b.n	8004548 <_free_r+0x24>
 8004596:	d902      	bls.n	800459e <_free_r+0x7a>
 8004598:	230c      	movs	r3, #12
 800459a:	602b      	str	r3, [r5, #0]
 800459c:	e7d4      	b.n	8004548 <_free_r+0x24>
 800459e:	6820      	ldr	r0, [r4, #0]
 80045a0:	1821      	adds	r1, r4, r0
 80045a2:	428b      	cmp	r3, r1
 80045a4:	bf01      	itttt	eq
 80045a6:	6819      	ldreq	r1, [r3, #0]
 80045a8:	685b      	ldreq	r3, [r3, #4]
 80045aa:	1809      	addeq	r1, r1, r0
 80045ac:	6021      	streq	r1, [r4, #0]
 80045ae:	6063      	str	r3, [r4, #4]
 80045b0:	6054      	str	r4, [r2, #4]
 80045b2:	e7c9      	b.n	8004548 <_free_r+0x24>
 80045b4:	bd38      	pop	{r3, r4, r5, pc}
 80045b6:	bf00      	nop
 80045b8:	200000cc 	.word	0x200000cc

080045bc <_malloc_r>:
 80045bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045be:	1ccd      	adds	r5, r1, #3
 80045c0:	f025 0503 	bic.w	r5, r5, #3
 80045c4:	3508      	adds	r5, #8
 80045c6:	2d0c      	cmp	r5, #12
 80045c8:	bf38      	it	cc
 80045ca:	250c      	movcc	r5, #12
 80045cc:	2d00      	cmp	r5, #0
 80045ce:	4606      	mov	r6, r0
 80045d0:	db01      	blt.n	80045d6 <_malloc_r+0x1a>
 80045d2:	42a9      	cmp	r1, r5
 80045d4:	d903      	bls.n	80045de <_malloc_r+0x22>
 80045d6:	230c      	movs	r3, #12
 80045d8:	6033      	str	r3, [r6, #0]
 80045da:	2000      	movs	r0, #0
 80045dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045de:	f000 f87d 	bl	80046dc <__malloc_lock>
 80045e2:	4921      	ldr	r1, [pc, #132]	; (8004668 <_malloc_r+0xac>)
 80045e4:	680a      	ldr	r2, [r1, #0]
 80045e6:	4614      	mov	r4, r2
 80045e8:	b99c      	cbnz	r4, 8004612 <_malloc_r+0x56>
 80045ea:	4f20      	ldr	r7, [pc, #128]	; (800466c <_malloc_r+0xb0>)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	b923      	cbnz	r3, 80045fa <_malloc_r+0x3e>
 80045f0:	4621      	mov	r1, r4
 80045f2:	4630      	mov	r0, r6
 80045f4:	f000 f862 	bl	80046bc <_sbrk_r>
 80045f8:	6038      	str	r0, [r7, #0]
 80045fa:	4629      	mov	r1, r5
 80045fc:	4630      	mov	r0, r6
 80045fe:	f000 f85d 	bl	80046bc <_sbrk_r>
 8004602:	1c43      	adds	r3, r0, #1
 8004604:	d123      	bne.n	800464e <_malloc_r+0x92>
 8004606:	230c      	movs	r3, #12
 8004608:	4630      	mov	r0, r6
 800460a:	6033      	str	r3, [r6, #0]
 800460c:	f000 f86c 	bl	80046e8 <__malloc_unlock>
 8004610:	e7e3      	b.n	80045da <_malloc_r+0x1e>
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	1b5b      	subs	r3, r3, r5
 8004616:	d417      	bmi.n	8004648 <_malloc_r+0x8c>
 8004618:	2b0b      	cmp	r3, #11
 800461a:	d903      	bls.n	8004624 <_malloc_r+0x68>
 800461c:	6023      	str	r3, [r4, #0]
 800461e:	441c      	add	r4, r3
 8004620:	6025      	str	r5, [r4, #0]
 8004622:	e004      	b.n	800462e <_malloc_r+0x72>
 8004624:	6863      	ldr	r3, [r4, #4]
 8004626:	42a2      	cmp	r2, r4
 8004628:	bf0c      	ite	eq
 800462a:	600b      	streq	r3, [r1, #0]
 800462c:	6053      	strne	r3, [r2, #4]
 800462e:	4630      	mov	r0, r6
 8004630:	f000 f85a 	bl	80046e8 <__malloc_unlock>
 8004634:	f104 000b 	add.w	r0, r4, #11
 8004638:	1d23      	adds	r3, r4, #4
 800463a:	f020 0007 	bic.w	r0, r0, #7
 800463e:	1ac2      	subs	r2, r0, r3
 8004640:	d0cc      	beq.n	80045dc <_malloc_r+0x20>
 8004642:	1a1b      	subs	r3, r3, r0
 8004644:	50a3      	str	r3, [r4, r2]
 8004646:	e7c9      	b.n	80045dc <_malloc_r+0x20>
 8004648:	4622      	mov	r2, r4
 800464a:	6864      	ldr	r4, [r4, #4]
 800464c:	e7cc      	b.n	80045e8 <_malloc_r+0x2c>
 800464e:	1cc4      	adds	r4, r0, #3
 8004650:	f024 0403 	bic.w	r4, r4, #3
 8004654:	42a0      	cmp	r0, r4
 8004656:	d0e3      	beq.n	8004620 <_malloc_r+0x64>
 8004658:	1a21      	subs	r1, r4, r0
 800465a:	4630      	mov	r0, r6
 800465c:	f000 f82e 	bl	80046bc <_sbrk_r>
 8004660:	3001      	adds	r0, #1
 8004662:	d1dd      	bne.n	8004620 <_malloc_r+0x64>
 8004664:	e7cf      	b.n	8004606 <_malloc_r+0x4a>
 8004666:	bf00      	nop
 8004668:	200000cc 	.word	0x200000cc
 800466c:	200000d0 	.word	0x200000d0

08004670 <_realloc_r>:
 8004670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004672:	4607      	mov	r7, r0
 8004674:	4614      	mov	r4, r2
 8004676:	460e      	mov	r6, r1
 8004678:	b921      	cbnz	r1, 8004684 <_realloc_r+0x14>
 800467a:	4611      	mov	r1, r2
 800467c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004680:	f7ff bf9c 	b.w	80045bc <_malloc_r>
 8004684:	b922      	cbnz	r2, 8004690 <_realloc_r+0x20>
 8004686:	f7ff ff4d 	bl	8004524 <_free_r>
 800468a:	4625      	mov	r5, r4
 800468c:	4628      	mov	r0, r5
 800468e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004690:	f000 f830 	bl	80046f4 <_malloc_usable_size_r>
 8004694:	42a0      	cmp	r0, r4
 8004696:	d20f      	bcs.n	80046b8 <_realloc_r+0x48>
 8004698:	4621      	mov	r1, r4
 800469a:	4638      	mov	r0, r7
 800469c:	f7ff ff8e 	bl	80045bc <_malloc_r>
 80046a0:	4605      	mov	r5, r0
 80046a2:	2800      	cmp	r0, #0
 80046a4:	d0f2      	beq.n	800468c <_realloc_r+0x1c>
 80046a6:	4631      	mov	r1, r6
 80046a8:	4622      	mov	r2, r4
 80046aa:	f7ff fbeb 	bl	8003e84 <memcpy>
 80046ae:	4631      	mov	r1, r6
 80046b0:	4638      	mov	r0, r7
 80046b2:	f7ff ff37 	bl	8004524 <_free_r>
 80046b6:	e7e9      	b.n	800468c <_realloc_r+0x1c>
 80046b8:	4635      	mov	r5, r6
 80046ba:	e7e7      	b.n	800468c <_realloc_r+0x1c>

080046bc <_sbrk_r>:
 80046bc:	b538      	push	{r3, r4, r5, lr}
 80046be:	2300      	movs	r3, #0
 80046c0:	4d05      	ldr	r5, [pc, #20]	; (80046d8 <_sbrk_r+0x1c>)
 80046c2:	4604      	mov	r4, r0
 80046c4:	4608      	mov	r0, r1
 80046c6:	602b      	str	r3, [r5, #0]
 80046c8:	f7fc ff92 	bl	80015f0 <_sbrk>
 80046cc:	1c43      	adds	r3, r0, #1
 80046ce:	d102      	bne.n	80046d6 <_sbrk_r+0x1a>
 80046d0:	682b      	ldr	r3, [r5, #0]
 80046d2:	b103      	cbz	r3, 80046d6 <_sbrk_r+0x1a>
 80046d4:	6023      	str	r3, [r4, #0]
 80046d6:	bd38      	pop	{r3, r4, r5, pc}
 80046d8:	2000023c 	.word	0x2000023c

080046dc <__malloc_lock>:
 80046dc:	4801      	ldr	r0, [pc, #4]	; (80046e4 <__malloc_lock+0x8>)
 80046de:	f000 b811 	b.w	8004704 <__retarget_lock_acquire_recursive>
 80046e2:	bf00      	nop
 80046e4:	20000244 	.word	0x20000244

080046e8 <__malloc_unlock>:
 80046e8:	4801      	ldr	r0, [pc, #4]	; (80046f0 <__malloc_unlock+0x8>)
 80046ea:	f000 b80c 	b.w	8004706 <__retarget_lock_release_recursive>
 80046ee:	bf00      	nop
 80046f0:	20000244 	.word	0x20000244

080046f4 <_malloc_usable_size_r>:
 80046f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046f8:	1f18      	subs	r0, r3, #4
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	bfbc      	itt	lt
 80046fe:	580b      	ldrlt	r3, [r1, r0]
 8004700:	18c0      	addlt	r0, r0, r3
 8004702:	4770      	bx	lr

08004704 <__retarget_lock_acquire_recursive>:
 8004704:	4770      	bx	lr

08004706 <__retarget_lock_release_recursive>:
 8004706:	4770      	bx	lr

08004708 <_init>:
 8004708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470a:	bf00      	nop
 800470c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800470e:	bc08      	pop	{r3}
 8004710:	469e      	mov	lr, r3
 8004712:	4770      	bx	lr

08004714 <_fini>:
 8004714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004716:	bf00      	nop
 8004718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471a:	bc08      	pop	{r3}
 800471c:	469e      	mov	lr, r3
 800471e:	4770      	bx	lr
