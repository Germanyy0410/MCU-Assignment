
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08004ff8  08004ff8  00014ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051b0  080051b0  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  080051b0  080051b0  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051b0  080051b0  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051b0  080051b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080051b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200000a0  08005258  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08005258  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014af2  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca9  00000000  00000000  00034bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00037868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  000385f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019554  00000000  00000000  00039268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d29  00000000  00000000  000527bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008adfa  00000000  00000000  000634e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee2df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a7c  00000000  00000000  000ee334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004fe0 	.word	0x08004fe0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	08004fe0 	.word	0x08004fe0

0800014c <getKeyInput>:
		button_flag[i] = 0;
		TimerForKeyPress[i] = 200;
	}
}

void getKeyInput() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
    for (int i = 1; i <= NO_BUTTONS; i++) {
 8000152:	2301      	movs	r3, #1
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e098      	b.n	800028a <getKeyInput+0x13e>
        KeyReg0[i] = KeyReg1[i];
 8000158:	4a50      	ldr	r2, [pc, #320]	; (800029c <getKeyInput+0x150>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000160:	494f      	ldr	r1, [pc, #316]	; (80002a0 <getKeyInput+0x154>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg1[i] = KeyReg2[i];
 8000168:	4a4e      	ldr	r2, [pc, #312]	; (80002a4 <getKeyInput+0x158>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000170:	494a      	ldr	r1, [pc, #296]	; (800029c <getKeyInput+0x150>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        if (i == 1) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b01      	cmp	r3, #1
 800017c:	d109      	bne.n	8000192 <getKeyInput+0x46>
 800017e:	2102      	movs	r1, #2
 8000180:	4849      	ldr	r0, [pc, #292]	; (80002a8 <getKeyInput+0x15c>)
 8000182:	f002 f9c9 	bl	8002518 <HAL_GPIO_ReadPin>
 8000186:	4603      	mov	r3, r0
 8000188:	4619      	mov	r1, r3
 800018a:	4a46      	ldr	r2, [pc, #280]	; (80002a4 <getKeyInput+0x158>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 2) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2b02      	cmp	r3, #2
 8000196:	d109      	bne.n	80001ac <getKeyInput+0x60>
 8000198:	2110      	movs	r1, #16
 800019a:	4843      	ldr	r0, [pc, #268]	; (80002a8 <getKeyInput+0x15c>)
 800019c:	f002 f9bc 	bl	8002518 <HAL_GPIO_ReadPin>
 80001a0:	4603      	mov	r3, r0
 80001a2:	4619      	mov	r1, r3
 80001a4:	4a3f      	ldr	r2, [pc, #252]	; (80002a4 <getKeyInput+0x158>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 3) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2b03      	cmp	r3, #3
 80001b0:	d109      	bne.n	80001c6 <getKeyInput+0x7a>
 80001b2:	2101      	movs	r1, #1
 80001b4:	483d      	ldr	r0, [pc, #244]	; (80002ac <getKeyInput+0x160>)
 80001b6:	f002 f9af 	bl	8002518 <HAL_GPIO_ReadPin>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4619      	mov	r1, r3
 80001be:	4a39      	ldr	r2, [pc, #228]	; (80002a4 <getKeyInput+0x158>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 4) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_PEDESTRIAN_GPIO_Port, BUTTON_PEDESTRIAN_Pin);
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2b04      	cmp	r3, #4
 80001ca:	d109      	bne.n	80001e0 <getKeyInput+0x94>
 80001cc:	2101      	movs	r1, #1
 80001ce:	4836      	ldr	r0, [pc, #216]	; (80002a8 <getKeyInput+0x15c>)
 80001d0:	f002 f9a2 	bl	8002518 <HAL_GPIO_ReadPin>
 80001d4:	4603      	mov	r3, r0
 80001d6:	4619      	mov	r1, r3
 80001d8:	4a32      	ldr	r2, [pc, #200]	; (80002a4 <getKeyInput+0x158>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80001e0:	4a2f      	ldr	r2, [pc, #188]	; (80002a0 <getKeyInput+0x154>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e8:	492c      	ldr	r1, [pc, #176]	; (800029c <getKeyInput+0x150>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001f0:	429a      	cmp	r2, r3
 80001f2:	d147      	bne.n	8000284 <getKeyInput+0x138>
 80001f4:	4a29      	ldr	r2, [pc, #164]	; (800029c <getKeyInput+0x150>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fc:	4929      	ldr	r1, [pc, #164]	; (80002a4 <getKeyInput+0x158>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000204:	429a      	cmp	r2, r3
 8000206:	d13d      	bne.n	8000284 <getKeyInput+0x138>
            if (KeyReg3[i] != KeyReg2[i]) {
 8000208:	4a29      	ldr	r2, [pc, #164]	; (80002b0 <getKeyInput+0x164>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	4924      	ldr	r1, [pc, #144]	; (80002a4 <getKeyInput+0x158>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000218:	429a      	cmp	r2, r3
 800021a:	d016      	beq.n	800024a <getKeyInput+0xfe>
                KeyReg3[i] = KeyReg2[i];
 800021c:	4a21      	ldr	r2, [pc, #132]	; (80002a4 <getKeyInput+0x158>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000224:	4922      	ldr	r1, [pc, #136]	; (80002b0 <getKeyInput+0x164>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                if (KeyReg2[i] == PRESSED_STATE) {
 800022c:	4a1d      	ldr	r2, [pc, #116]	; (80002a4 <getKeyInput+0x158>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d125      	bne.n	8000284 <getKeyInput+0x138>
                    subKeyProcess(i);
 8000238:	6878      	ldr	r0, [r7, #4]
 800023a:	f000 f85b 	bl	80002f4 <subKeyProcess>
                    TimerForKeyPress[i] = 200;
 800023e:	4a1d      	ldr	r2, [pc, #116]	; (80002b4 <getKeyInput+0x168>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	21c8      	movs	r1, #200	; 0xc8
 8000244:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000248:	e01c      	b.n	8000284 <getKeyInput+0x138>
                }
            } else {
                TimerForKeyPress[i]--;
 800024a:	4a1a      	ldr	r2, [pc, #104]	; (80002b4 <getKeyInput+0x168>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000252:	1e5a      	subs	r2, r3, #1
 8000254:	4917      	ldr	r1, [pc, #92]	; (80002b4 <getKeyInput+0x168>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TimerForKeyPress[i] == 0) {
 800025c:	4a15      	ldr	r2, [pc, #84]	; (80002b4 <getKeyInput+0x168>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d10d      	bne.n	8000284 <getKeyInput+0x138>
                    if (KeyReg2[i] == PRESSED_STATE) {
 8000268:	4a0e      	ldr	r2, [pc, #56]	; (80002a4 <getKeyInput+0x158>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d102      	bne.n	800027a <getKeyInput+0x12e>
                        subKeyProcess(i);
 8000274:	6878      	ldr	r0, [r7, #4]
 8000276:	f000 f83d 	bl	80002f4 <subKeyProcess>
                    }

                    TimerForKeyPress[i] = 200;
 800027a:	4a0e      	ldr	r2, [pc, #56]	; (80002b4 <getKeyInput+0x168>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	21c8      	movs	r1, #200	; 0xc8
 8000280:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 1; i <= NO_BUTTONS; i++) {
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	3301      	adds	r3, #1
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2b04      	cmp	r3, #4
 800028e:	f77f af63 	ble.w	8000158 <getKeyInput+0xc>
                }
            }
        }
    }
}
 8000292:	bf00      	nop
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000150 	.word	0x20000150
 80002a0:	200000f4 	.word	0x200000f4
 80002a4:	2000018c 	.word	0x2000018c
 80002a8:	40010800 	.word	0x40010800
 80002ac:	40010c00 	.word	0x40010c00
 80002b0:	200000e0 	.word	0x200000e0
 80002b4:	20000164 	.word	0x20000164

080002b8 <isButtonPressed>:

int isButtonPressed(int index) {
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	if (index > NO_BUTTONS)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b04      	cmp	r3, #4
 80002c4:	dd01      	ble.n	80002ca <isButtonPressed+0x12>
		return 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	e00d      	b.n	80002e6 <isButtonPressed+0x2e>

	if (button_flag[index]) {
 80002ca:	4a09      	ldr	r2, [pc, #36]	; (80002f0 <isButtonPressed+0x38>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d006      	beq.n	80002e4 <isButtonPressed+0x2c>
		button_flag[index] = 0;
 80002d6:	4a06      	ldr	r2, [pc, #24]	; (80002f0 <isButtonPressed+0x38>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2100      	movs	r1, #0
 80002dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80002e0:	2301      	movs	r3, #1
 80002e2:	e000      	b.n	80002e6 <isButtonPressed+0x2e>
	}
	return 0;
 80002e4:	2300      	movs	r3, #0
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	20000178 	.word	0x20000178

080002f4 <subKeyProcess>:

void subKeyProcess(int index) {
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 80002fc:	4a04      	ldr	r2, [pc, #16]	; (8000310 <subKeyProcess+0x1c>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2101      	movs	r1, #1
 8000302:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr
 8000310:	20000178 	.word	0x20000178

08000314 <fsm_automatic_run>:
 *      Author: ProX
 */

#include "fsm_automatic.h"

void fsm_automatic_run(UART_HandleTypeDef huart2) {
 8000314:	b084      	sub	sp, #16
 8000316:	b580      	push	{r7, lr}
 8000318:	af00      	add	r7, sp, #0
 800031a:	f107 0c08 	add.w	ip, r7, #8
 800031e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    /* CHANGE TO MANUAL MODE WHEN BUTTON1 IS PRESSED */
    if (isButtonPressed(1)) {
 8000322:	2001      	movs	r0, #1
 8000324:	f7ff ffc8 	bl	80002b8 <isButtonPressed>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d006      	beq.n	800033c <fsm_automatic_run+0x28>
    	status = MANUAL_MODE;
 800032e:	4bba      	ldr	r3, [pc, #744]	; (8000618 <fsm_automatic_run+0x304>)
 8000330:	2203      	movs	r2, #3
 8000332:	601a      	str	r2, [r3, #0]
		traffic_status = INIT;
 8000334:	4bb9      	ldr	r3, [pc, #740]	; (800061c <fsm_automatic_run+0x308>)
 8000336:	2201      	movs	r2, #1
 8000338:	601a      	str	r2, [r3, #0]
		return;
 800033a:	e167      	b.n	800060c <fsm_automatic_run+0x2f8>
    }

    switch (traffic_status) {
 800033c:	4bb7      	ldr	r3, [pc, #732]	; (800061c <fsm_automatic_run+0x308>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d04d      	beq.n	80003e0 <fsm_automatic_run+0xcc>
 8000344:	2b00      	cmp	r3, #0
 8000346:	f340 8161 	ble.w	800060c <fsm_automatic_run+0x2f8>
 800034a:	2b50      	cmp	r3, #80	; 0x50
 800034c:	f300 815e 	bgt.w	800060c <fsm_automatic_run+0x2f8>
 8000350:	2b32      	cmp	r3, #50	; 0x32
 8000352:	f2c0 815b 	blt.w	800060c <fsm_automatic_run+0x2f8>
 8000356:	3b32      	subs	r3, #50	; 0x32
 8000358:	2b1e      	cmp	r3, #30
 800035a:	f200 8157 	bhi.w	800060c <fsm_automatic_run+0x2f8>
 800035e:	a201      	add	r2, pc, #4	; (adr r2, 8000364 <fsm_automatic_run+0x50>)
 8000360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000364:	08000459 	.word	0x08000459
 8000368:	0800060d 	.word	0x0800060d
 800036c:	0800060d 	.word	0x0800060d
 8000370:	0800060d 	.word	0x0800060d
 8000374:	0800060d 	.word	0x0800060d
 8000378:	0800060d 	.word	0x0800060d
 800037c:	0800060d 	.word	0x0800060d
 8000380:	0800060d 	.word	0x0800060d
 8000384:	0800060d 	.word	0x0800060d
 8000388:	0800060d 	.word	0x0800060d
 800038c:	080004b9 	.word	0x080004b9
 8000390:	0800060d 	.word	0x0800060d
 8000394:	0800060d 	.word	0x0800060d
 8000398:	0800060d 	.word	0x0800060d
 800039c:	0800060d 	.word	0x0800060d
 80003a0:	0800060d 	.word	0x0800060d
 80003a4:	0800060d 	.word	0x0800060d
 80003a8:	0800060d 	.word	0x0800060d
 80003ac:	0800060d 	.word	0x0800060d
 80003b0:	0800060d 	.word	0x0800060d
 80003b4:	08000521 	.word	0x08000521
 80003b8:	0800060d 	.word	0x0800060d
 80003bc:	0800060d 	.word	0x0800060d
 80003c0:	0800060d 	.word	0x0800060d
 80003c4:	0800060d 	.word	0x0800060d
 80003c8:	0800060d 	.word	0x0800060d
 80003cc:	0800060d 	.word	0x0800060d
 80003d0:	0800060d 	.word	0x0800060d
 80003d4:	0800060d 	.word	0x0800060d
 80003d8:	0800060d 	.word	0x0800060d
 80003dc:	0800057f 	.word	0x0800057f
    case INIT:
    	/* UART COMMUNICATION */
    	HAL_UART_Transmit(&huart2, (uint8_t *)"Mode: Automatic mode\r\n", 24, 500);
 80003e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80003e4:	2218      	movs	r2, #24
 80003e6:	498e      	ldr	r1, [pc, #568]	; (8000620 <fsm_automatic_run+0x30c>)
 80003e8:	f107 0008 	add.w	r0, r7, #8
 80003ec:	f003 fc89 	bl	8003d02 <HAL_UART_Transmit>

    	resetLights();
 80003f0:	f000 fd2c 	bl	8000e4c <resetLights>
    	/* INACTIVE pedestrian light when in INIT state */
    	pedestrian_status = PEDESTRIAN_INACTIVE;
 80003f4:	4b8b      	ldr	r3, [pc, #556]	; (8000624 <fsm_automatic_run+0x310>)
 80003f6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80003fa:	601a      	str	r2, [r3, #0]

        traffic_status = RED_GREEN;
 80003fc:	4b87      	ldr	r3, [pc, #540]	; (800061c <fsm_automatic_run+0x308>)
 80003fe:	2232      	movs	r2, #50	; 0x32
 8000400:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, (uint8_t *)"RED GREEN\r\n", 10, 500);
 8000402:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000406:	220a      	movs	r2, #10
 8000408:	4987      	ldr	r1, [pc, #540]	; (8000628 <fsm_automatic_run+0x314>)
 800040a:	f107 0008 	add.w	r0, r7, #8
 800040e:	f003 fc78 	bl	8003d02 <HAL_UART_Transmit>

        setTimer(1, green_counter);
 8000412:	4b86      	ldr	r3, [pc, #536]	; (800062c <fsm_automatic_run+0x318>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4619      	mov	r1, r3
 8000418:	2001      	movs	r0, #1
 800041a:	f001 fb33 	bl	8001a84 <setTimer>

		setTimer(6, 1000); 		// timer 3 for counting light
 800041e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000422:	2006      	movs	r0, #6
 8000424:	f001 fb2e 	bl	8001a84 <setTimer>

        counter_light_1 = red_counter / 1000;
 8000428:	4b81      	ldr	r3, [pc, #516]	; (8000630 <fsm_automatic_run+0x31c>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a81      	ldr	r2, [pc, #516]	; (8000634 <fsm_automatic_run+0x320>)
 800042e:	fb82 1203 	smull	r1, r2, r2, r3
 8000432:	1192      	asrs	r2, r2, #6
 8000434:	17db      	asrs	r3, r3, #31
 8000436:	1ad3      	subs	r3, r2, r3
 8000438:	4a7f      	ldr	r2, [pc, #508]	; (8000638 <fsm_automatic_run+0x324>)
 800043a:	6013      	str	r3, [r2, #0]
        counter_light_2 = green_counter / 1000;
 800043c:	4b7b      	ldr	r3, [pc, #492]	; (800062c <fsm_automatic_run+0x318>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a7c      	ldr	r2, [pc, #496]	; (8000634 <fsm_automatic_run+0x320>)
 8000442:	fb82 1203 	smull	r1, r2, r2, r3
 8000446:	1192      	asrs	r2, r2, #6
 8000448:	17db      	asrs	r3, r3, #31
 800044a:	1ad3      	subs	r3, r2, r3
 800044c:	4a7b      	ldr	r2, [pc, #492]	; (800063c <fsm_automatic_run+0x328>)
 800044e:	6013      	str	r3, [r2, #0]
        counter_lights = INIT;
 8000450:	4b7b      	ldr	r3, [pc, #492]	; (8000640 <fsm_automatic_run+0x32c>)
 8000452:	2201      	movs	r2, #1
 8000454:	601a      	str	r2, [r3, #0]

        break;
 8000456:	e0d9      	b.n	800060c <fsm_automatic_run+0x2f8>

    case RED_GREEN:
    	Red_Green();
 8000458:	f000 fd20 	bl	8000e9c <Red_Green>

        if (timer_flag[1] == 1) {
 800045c:	4b79      	ldr	r3, [pc, #484]	; (8000644 <fsm_automatic_run+0x330>)
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	2b01      	cmp	r3, #1
 8000462:	f040 80cc 	bne.w	80005fe <fsm_automatic_run+0x2ea>
            traffic_status = RED_AMBER;
 8000466:	4b6d      	ldr	r3, [pc, #436]	; (800061c <fsm_automatic_run+0x308>)
 8000468:	223c      	movs	r2, #60	; 0x3c
 800046a:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, (uint8_t *)"RED AMBER\r\n", 16, 500);
 800046c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000470:	2210      	movs	r2, #16
 8000472:	4975      	ldr	r1, [pc, #468]	; (8000648 <fsm_automatic_run+0x334>)
 8000474:	f107 0008 	add.w	r0, r7, #8
 8000478:	f003 fc43 	bl	8003d02 <HAL_UART_Transmit>
            setTimer(1, amber_counter);
 800047c:	4b73      	ldr	r3, [pc, #460]	; (800064c <fsm_automatic_run+0x338>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4619      	mov	r1, r3
 8000482:	2001      	movs	r0, #1
 8000484:	f001 fafe 	bl	8001a84 <setTimer>

            counter_light_1 = amber_counter / 1000;
 8000488:	4b70      	ldr	r3, [pc, #448]	; (800064c <fsm_automatic_run+0x338>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a69      	ldr	r2, [pc, #420]	; (8000634 <fsm_automatic_run+0x320>)
 800048e:	fb82 1203 	smull	r1, r2, r2, r3
 8000492:	1192      	asrs	r2, r2, #6
 8000494:	17db      	asrs	r3, r3, #31
 8000496:	1ad3      	subs	r3, r2, r3
 8000498:	4a67      	ldr	r2, [pc, #412]	; (8000638 <fsm_automatic_run+0x324>)
 800049a:	6013      	str	r3, [r2, #0]
            counter_light_2 = amber_counter / 1000;
 800049c:	4b6b      	ldr	r3, [pc, #428]	; (800064c <fsm_automatic_run+0x338>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a64      	ldr	r2, [pc, #400]	; (8000634 <fsm_automatic_run+0x320>)
 80004a2:	fb82 1203 	smull	r1, r2, r2, r3
 80004a6:	1192      	asrs	r2, r2, #6
 80004a8:	17db      	asrs	r3, r3, #31
 80004aa:	1ad3      	subs	r3, r2, r3
 80004ac:	4a63      	ldr	r2, [pc, #396]	; (800063c <fsm_automatic_run+0x328>)
 80004ae:	6013      	str	r3, [r2, #0]
            counter_lights = INIT;
 80004b0:	4b63      	ldr	r3, [pc, #396]	; (8000640 <fsm_automatic_run+0x32c>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	601a      	str	r2, [r3, #0]
        }    

        break;
 80004b6:	e0a2      	b.n	80005fe <fsm_automatic_run+0x2ea>

    case RED_AMBER:
    	Red_Amber();
 80004b8:	f000 fd0e 	bl	8000ed8 <Red_Amber>

        if (timer_flag[1] == 1) {
 80004bc:	4b61      	ldr	r3, [pc, #388]	; (8000644 <fsm_automatic_run+0x330>)
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	f040 809e 	bne.w	8000602 <fsm_automatic_run+0x2ee>
            traffic_status = GREEN_RED;
 80004c6:	4b55      	ldr	r3, [pc, #340]	; (800061c <fsm_automatic_run+0x308>)
 80004c8:	2246      	movs	r2, #70	; 0x46
 80004ca:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, (uint8_t *)"GREEN RED\r\n", 16, 500);
 80004cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004d0:	2210      	movs	r2, #16
 80004d2:	495f      	ldr	r1, [pc, #380]	; (8000650 <fsm_automatic_run+0x33c>)
 80004d4:	f107 0008 	add.w	r0, r7, #8
 80004d8:	f003 fc13 	bl	8003d02 <HAL_UART_Transmit>
            setTimer(1, green_counter);
 80004dc:	4b53      	ldr	r3, [pc, #332]	; (800062c <fsm_automatic_run+0x318>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4619      	mov	r1, r3
 80004e2:	2001      	movs	r0, #1
 80004e4:	f001 face 	bl	8001a84 <setTimer>

            counter_light_1 = green_counter / 1000;
 80004e8:	4b50      	ldr	r3, [pc, #320]	; (800062c <fsm_automatic_run+0x318>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a51      	ldr	r2, [pc, #324]	; (8000634 <fsm_automatic_run+0x320>)
 80004ee:	fb82 1203 	smull	r1, r2, r2, r3
 80004f2:	1192      	asrs	r2, r2, #6
 80004f4:	17db      	asrs	r3, r3, #31
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	4a4f      	ldr	r2, [pc, #316]	; (8000638 <fsm_automatic_run+0x324>)
 80004fa:	6013      	str	r3, [r2, #0]
            counter_light_2 = red_counter / 1000;
 80004fc:	4b4c      	ldr	r3, [pc, #304]	; (8000630 <fsm_automatic_run+0x31c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a4c      	ldr	r2, [pc, #304]	; (8000634 <fsm_automatic_run+0x320>)
 8000502:	fb82 1203 	smull	r1, r2, r2, r3
 8000506:	1192      	asrs	r2, r2, #6
 8000508:	17db      	asrs	r3, r3, #31
 800050a:	1ad3      	subs	r3, r2, r3
 800050c:	4a4b      	ldr	r2, [pc, #300]	; (800063c <fsm_automatic_run+0x328>)
 800050e:	6013      	str	r3, [r2, #0]
            counter_lights = INIT;
 8000510:	4b4b      	ldr	r3, [pc, #300]	; (8000640 <fsm_automatic_run+0x32c>)
 8000512:	2201      	movs	r2, #1
 8000514:	601a      	str	r2, [r3, #0]

            /* INACTIVE pedestrian light when traffic light is backing to GREEN_RED mode */
            pedestrian_status = PEDESTRIAN_INACTIVE;
 8000516:	4b43      	ldr	r3, [pc, #268]	; (8000624 <fsm_automatic_run+0x310>)
 8000518:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800051c:	601a      	str	r2, [r3, #0]
        }

        break;
 800051e:	e070      	b.n	8000602 <fsm_automatic_run+0x2ee>

    case GREEN_RED:
    	Green_Red();
 8000520:	f000 fcf8 	bl	8000f14 <Green_Red>

        if (timer_flag[1] == 1) {
 8000524:	4b47      	ldr	r3, [pc, #284]	; (8000644 <fsm_automatic_run+0x330>)
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d16c      	bne.n	8000606 <fsm_automatic_run+0x2f2>
            traffic_status = AMBER_RED;
 800052c:	4b3b      	ldr	r3, [pc, #236]	; (800061c <fsm_automatic_run+0x308>)
 800052e:	2250      	movs	r2, #80	; 0x50
 8000530:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, (uint8_t *)"AMBER RED\r\n", 16, 500);
 8000532:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000536:	2210      	movs	r2, #16
 8000538:	4946      	ldr	r1, [pc, #280]	; (8000654 <fsm_automatic_run+0x340>)
 800053a:	f107 0008 	add.w	r0, r7, #8
 800053e:	f003 fbe0 	bl	8003d02 <HAL_UART_Transmit>
            setTimer(1, amber_counter);
 8000542:	4b42      	ldr	r3, [pc, #264]	; (800064c <fsm_automatic_run+0x338>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4619      	mov	r1, r3
 8000548:	2001      	movs	r0, #1
 800054a:	f001 fa9b 	bl	8001a84 <setTimer>

            counter_light_1 = amber_counter / 1000;
 800054e:	4b3f      	ldr	r3, [pc, #252]	; (800064c <fsm_automatic_run+0x338>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a38      	ldr	r2, [pc, #224]	; (8000634 <fsm_automatic_run+0x320>)
 8000554:	fb82 1203 	smull	r1, r2, r2, r3
 8000558:	1192      	asrs	r2, r2, #6
 800055a:	17db      	asrs	r3, r3, #31
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	4a36      	ldr	r2, [pc, #216]	; (8000638 <fsm_automatic_run+0x324>)
 8000560:	6013      	str	r3, [r2, #0]
            counter_light_2 = amber_counter / 1000;
 8000562:	4b3a      	ldr	r3, [pc, #232]	; (800064c <fsm_automatic_run+0x338>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a33      	ldr	r2, [pc, #204]	; (8000634 <fsm_automatic_run+0x320>)
 8000568:	fb82 1203 	smull	r1, r2, r2, r3
 800056c:	1192      	asrs	r2, r2, #6
 800056e:	17db      	asrs	r3, r3, #31
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	4a32      	ldr	r2, [pc, #200]	; (800063c <fsm_automatic_run+0x328>)
 8000574:	6013      	str	r3, [r2, #0]
            counter_lights = INIT;
 8000576:	4b32      	ldr	r3, [pc, #200]	; (8000640 <fsm_automatic_run+0x32c>)
 8000578:	2201      	movs	r2, #1
 800057a:	601a      	str	r2, [r3, #0]
        }

        break;
 800057c:	e043      	b.n	8000606 <fsm_automatic_run+0x2f2>

    case AMBER_RED:
    	Amber_Red();
 800057e:	f000 fce7 	bl	8000f50 <Amber_Red>

        if (timer_flag[1] == 1) {
 8000582:	4b30      	ldr	r3, [pc, #192]	; (8000644 <fsm_automatic_run+0x330>)
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d13f      	bne.n	800060a <fsm_automatic_run+0x2f6>
            traffic_status = RED_GREEN;
 800058a:	4b24      	ldr	r3, [pc, #144]	; (800061c <fsm_automatic_run+0x308>)
 800058c:	2232      	movs	r2, #50	; 0x32
 800058e:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, (uint8_t *)"RED GREEN\r\n", 16, 500);
 8000590:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000594:	2210      	movs	r2, #16
 8000596:	4924      	ldr	r1, [pc, #144]	; (8000628 <fsm_automatic_run+0x314>)
 8000598:	f107 0008 	add.w	r0, r7, #8
 800059c:	f003 fbb1 	bl	8003d02 <HAL_UART_Transmit>
            setTimer(1, green_counter);
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <fsm_automatic_run+0x318>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4619      	mov	r1, r3
 80005a6:	2001      	movs	r0, #1
 80005a8:	f001 fa6c 	bl	8001a84 <setTimer>

            counter_light_1 = red_counter / 1000;
 80005ac:	4b20      	ldr	r3, [pc, #128]	; (8000630 <fsm_automatic_run+0x31c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a20      	ldr	r2, [pc, #128]	; (8000634 <fsm_automatic_run+0x320>)
 80005b2:	fb82 1203 	smull	r1, r2, r2, r3
 80005b6:	1192      	asrs	r2, r2, #6
 80005b8:	17db      	asrs	r3, r3, #31
 80005ba:	1ad3      	subs	r3, r2, r3
 80005bc:	4a1e      	ldr	r2, [pc, #120]	; (8000638 <fsm_automatic_run+0x324>)
 80005be:	6013      	str	r3, [r2, #0]
            counter_light_2 = green_counter / 1000;
 80005c0:	4b1a      	ldr	r3, [pc, #104]	; (800062c <fsm_automatic_run+0x318>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a1b      	ldr	r2, [pc, #108]	; (8000634 <fsm_automatic_run+0x320>)
 80005c6:	fb82 1203 	smull	r1, r2, r2, r3
 80005ca:	1192      	asrs	r2, r2, #6
 80005cc:	17db      	asrs	r3, r3, #31
 80005ce:	1ad3      	subs	r3, r2, r3
 80005d0:	4a1a      	ldr	r2, [pc, #104]	; (800063c <fsm_automatic_run+0x328>)
 80005d2:	6013      	str	r3, [r2, #0]
            counter_lights = INIT;
 80005d4:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <fsm_automatic_run+0x32c>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	601a      	str	r2, [r3, #0]

            /* If the pedestrian light is PEDESTRIAN_RED, change to PEDESTRIAN_GREEN when the traffic light is backing to RED_GREEN mode */
            /* If the pedestrian light is INACTIVE => no change */
            if(pedestrian_status == PEDESTRIAN_RED){
 80005da:	4b12      	ldr	r3, [pc, #72]	; (8000624 <fsm_automatic_run+0x310>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80005e2:	d112      	bne.n	800060a <fsm_automatic_run+0x2f6>
            	HAL_UART_Transmit(&huart2, (uint8_t *)"Pedestrian mode: GREEN\r\n", 24, 500);
 80005e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005e8:	2218      	movs	r2, #24
 80005ea:	491b      	ldr	r1, [pc, #108]	; (8000658 <fsm_automatic_run+0x344>)
 80005ec:	f107 0008 	add.w	r0, r7, #8
 80005f0:	f003 fb87 	bl	8003d02 <HAL_UART_Transmit>
            	pedestrian_status = PEDESTRIAN_GREEN;
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <fsm_automatic_run+0x310>)
 80005f6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005fa:	601a      	str	r2, [r3, #0]
            }
        }
        break;
 80005fc:	e005      	b.n	800060a <fsm_automatic_run+0x2f6>
        break;
 80005fe:	bf00      	nop
 8000600:	e004      	b.n	800060c <fsm_automatic_run+0x2f8>
        break;
 8000602:	bf00      	nop
 8000604:	e002      	b.n	800060c <fsm_automatic_run+0x2f8>
        break;
 8000606:	bf00      	nop
 8000608:	e000      	b.n	800060c <fsm_automatic_run+0x2f8>
        break;
 800060a:	bf00      	nop
    }
}
 800060c:	46bd      	mov	sp, r7
 800060e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000612:	b004      	add	sp, #16
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000004 	.word	0x20000004
 800061c:	20000010 	.word	0x20000010
 8000620:	08004ff8 	.word	0x08004ff8
 8000624:	20000008 	.word	0x20000008
 8000628:	08005010 	.word	0x08005010
 800062c:	2000001c 	.word	0x2000001c
 8000630:	20000014 	.word	0x20000014
 8000634:	10624dd3 	.word	0x10624dd3
 8000638:	20000020 	.word	0x20000020
 800063c:	20000024 	.word	0x20000024
 8000640:	20000028 	.word	0x20000028
 8000644:	200002b4 	.word	0x200002b4
 8000648:	0800501c 	.word	0x0800501c
 800064c:	20000018 	.word	0x20000018
 8000650:	08005028 	.word	0x08005028
 8000654:	08005034 	.word	0x08005034
 8000658:	08005040 	.word	0x08005040

0800065c <fsm_manual_run>:
 *      Author: ProX
 */

#include "fsm_manual.h"

void fsm_manual_run(UART_HandleTypeDef huart2) {
 800065c:	b084      	sub	sp, #16
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0
 8000662:	f107 0c08 	add.w	ip, r7, #8
 8000666:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	/* OUT OF TIME FOR MANUAL EVENTS */
	if (timer_flag[1] == 1) {
 800066a:	4ba0      	ldr	r3, [pc, #640]	; (80008ec <fsm_manual_run+0x290>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d106      	bne.n	8000680 <fsm_manual_run+0x24>
		status = AUTOMATIC_MODE;
 8000672:	4b9f      	ldr	r3, [pc, #636]	; (80008f0 <fsm_manual_run+0x294>)
 8000674:	2202      	movs	r2, #2
 8000676:	601a      	str	r2, [r3, #0]
		traffic_status = INIT;
 8000678:	4b9e      	ldr	r3, [pc, #632]	; (80008f4 <fsm_manual_run+0x298>)
 800067a:	2201      	movs	r2, #1
 800067c:	601a      	str	r2, [r3, #0]
		return;
 800067e:	e2fc      	b.n	8000c7a <fsm_manual_run+0x61e>
	}

	switch (traffic_status) {
 8000680:	4b9c      	ldr	r3, [pc, #624]	; (80008f4 <fsm_manual_run+0x298>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000688:	f000 8233 	beq.w	8000af2 <fsm_manual_run+0x496>
 800068c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000690:	f300 82c5 	bgt.w	8000c1e <fsm_manual_run+0x5c2>
 8000694:	2bdc      	cmp	r3, #220	; 0xdc
 8000696:	f000 8151 	beq.w	800093c <fsm_manual_run+0x2e0>
 800069a:	2bdc      	cmp	r3, #220	; 0xdc
 800069c:	f300 82bf 	bgt.w	8000c1e <fsm_manual_run+0x5c2>
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d002      	beq.n	80006aa <fsm_manual_run+0x4e>
 80006a4:	2b78      	cmp	r3, #120	; 0x78
 80006a6:	d04c      	beq.n	8000742 <fsm_manual_run+0xe6>
			HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "%d\r\n", counter_light_1), 500);
		}

		break;
	default:
		break;
 80006a8:	e2b9      	b.n	8000c1e <fsm_manual_run+0x5c2>
		HAL_UART_Transmit(&huart2, (uint8_t *)"Mode: Manual mode\r\n", 24, 500);
 80006aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006ae:	2218      	movs	r2, #24
 80006b0:	4991      	ldr	r1, [pc, #580]	; (80008f8 <fsm_manual_run+0x29c>)
 80006b2:	f107 0008 	add.w	r0, r7, #8
 80006b6:	f003 fb24 	bl	8003d02 <HAL_UART_Transmit>
		traffic_status = MAN_RED;
 80006ba:	4b8e      	ldr	r3, [pc, #568]	; (80008f4 <fsm_manual_run+0x298>)
 80006bc:	2278      	movs	r2, #120	; 0x78
 80006be:	601a      	str	r2, [r3, #0]
		time_modify_counter = red_counter; // update temporary counter storing red led delay
 80006c0:	4b8e      	ldr	r3, [pc, #568]	; (80008fc <fsm_manual_run+0x2a0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a8e      	ldr	r2, [pc, #568]	; (8000900 <fsm_manual_run+0x2a4>)
 80006c6:	6013      	str	r3, [r2, #0]
		counter_light_1 = red_counter / 1000; 		// counter light 1 show the value of current manual light
 80006c8:	4b8c      	ldr	r3, [pc, #560]	; (80008fc <fsm_manual_run+0x2a0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a8d      	ldr	r2, [pc, #564]	; (8000904 <fsm_manual_run+0x2a8>)
 80006ce:	fb82 1203 	smull	r1, r2, r2, r3
 80006d2:	1192      	asrs	r2, r2, #6
 80006d4:	17db      	asrs	r3, r3, #31
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	4a8b      	ldr	r2, [pc, #556]	; (8000908 <fsm_manual_run+0x2ac>)
 80006da:	6013      	str	r3, [r2, #0]
		counter_light_2 = traffic_status;					// counter light 2 show the mode
 80006dc:	4b85      	ldr	r3, [pc, #532]	; (80008f4 <fsm_manual_run+0x298>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a8a      	ldr	r2, [pc, #552]	; (800090c <fsm_manual_run+0x2b0>)
 80006e2:	6013      	str	r3, [r2, #0]
		setTimer(1, 5000);				// reuse timer 0 to 5 seconds for manual event
 80006e4:	f241 3188 	movw	r1, #5000	; 0x1388
 80006e8:	2001      	movs	r0, #1
 80006ea:	f001 f9cb 	bl	8001a84 <setTimer>
		setTimer(2, 500); 				// set timer 1 for led blinking
 80006ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006f2:	2002      	movs	r0, #2
 80006f4:	f001 f9c6 	bl	8001a84 <setTimer>
		setTimer(3, 250);				// timer 3 still counting 7-seg light
 80006f8:	21fa      	movs	r1, #250	; 0xfa
 80006fa:	2003      	movs	r0, #3
 80006fc:	f001 f9c2 	bl	8001a84 <setTimer>
		HAL_UART_Transmit(&huart2, (uint8_t *)"Mode 2: Modifying RED\r\n", 26, 500);
 8000700:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000704:	221a      	movs	r2, #26
 8000706:	4982      	ldr	r1, [pc, #520]	; (8000910 <fsm_manual_run+0x2b4>)
 8000708:	f107 0008 	add.w	r0, r7, #8
 800070c:	f003 faf9 	bl	8003d02 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *)"Current time = ", 16, 500);
 8000710:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000714:	2210      	movs	r2, #16
 8000716:	497f      	ldr	r1, [pc, #508]	; (8000914 <fsm_manual_run+0x2b8>)
 8000718:	f107 0008 	add.w	r0, r7, #8
 800071c:	f003 faf1 	bl	8003d02 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "%d\r\n", counter_light_1), 500);
 8000720:	4b79      	ldr	r3, [pc, #484]	; (8000908 <fsm_manual_run+0x2ac>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	497c      	ldr	r1, [pc, #496]	; (8000918 <fsm_manual_run+0x2bc>)
 8000728:	487c      	ldr	r0, [pc, #496]	; (800091c <fsm_manual_run+0x2c0>)
 800072a:	f004 f8c7 	bl	80048bc <siprintf>
 800072e:	4603      	mov	r3, r0
 8000730:	b29a      	uxth	r2, r3
 8000732:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000736:	4979      	ldr	r1, [pc, #484]	; (800091c <fsm_manual_run+0x2c0>)
 8000738:	f107 0008 	add.w	r0, r7, #8
 800073c:	f003 fae1 	bl	8003d02 <HAL_UART_Transmit>
		break;
 8000740:	e29b      	b.n	8000c7a <fsm_manual_run+0x61e>
		if (timer_flag[2] == 1) {
 8000742:	4b6a      	ldr	r3, [pc, #424]	; (80008ec <fsm_manual_run+0x290>)
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d106      	bne.n	8000758 <fsm_manual_run+0xfc>
			Toggle_Red();
 800074a:	f000 fc1f 	bl	8000f8c <Toggle_Red>
			setTimer(2, 500);
 800074e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000752:	2002      	movs	r0, #2
 8000754:	f001 f996 	bl	8001a84 <setTimer>
		if (isButtonPressed(1)) {
 8000758:	2001      	movs	r0, #1
 800075a:	f7ff fdad 	bl	80002b8 <isButtonPressed>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d042      	beq.n	80007ea <fsm_manual_run+0x18e>
			traffic_status = MAN_AMBER;
 8000764:	4b63      	ldr	r3, [pc, #396]	; (80008f4 <fsm_manual_run+0x298>)
 8000766:	22dc      	movs	r2, #220	; 0xdc
 8000768:	601a      	str	r2, [r3, #0]
			time_modify_counter = amber_counter;	// update temporary counter storing red led delay
 800076a:	4b6d      	ldr	r3, [pc, #436]	; (8000920 <fsm_manual_run+0x2c4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a64      	ldr	r2, [pc, #400]	; (8000900 <fsm_manual_run+0x2a4>)
 8000770:	6013      	str	r3, [r2, #0]
			counter_light_1 = amber_counter / 1000;	// counter light 1 show the value of current manual light
 8000772:	4b6b      	ldr	r3, [pc, #428]	; (8000920 <fsm_manual_run+0x2c4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a63      	ldr	r2, [pc, #396]	; (8000904 <fsm_manual_run+0x2a8>)
 8000778:	fb82 1203 	smull	r1, r2, r2, r3
 800077c:	1192      	asrs	r2, r2, #6
 800077e:	17db      	asrs	r3, r3, #31
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	4a61      	ldr	r2, [pc, #388]	; (8000908 <fsm_manual_run+0x2ac>)
 8000784:	6013      	str	r3, [r2, #0]
			counter_light_2 = traffic_status;				// counter light 2 show the mode
 8000786:	4b5b      	ldr	r3, [pc, #364]	; (80008f4 <fsm_manual_run+0x298>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a60      	ldr	r2, [pc, #384]	; (800090c <fsm_manual_run+0x2b0>)
 800078c:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);			// reuse timer 0 to 5 seconds for manual event
 800078e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000792:	2001      	movs	r0, #1
 8000794:	f001 f976 	bl	8001a84 <setTimer>
			setTimer(2, 500); 			// set timer 1 for led blinking
 8000798:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800079c:	2002      	movs	r0, #2
 800079e:	f001 f971 	bl	8001a84 <setTimer>
			setTimer(3, 250);			// timer 3 still counting 7-seg light
 80007a2:	21fa      	movs	r1, #250	; 0xfa
 80007a4:	2003      	movs	r0, #3
 80007a6:	f001 f96d 	bl	8001a84 <setTimer>
			HAL_UART_Transmit(&huart2, (uint8_t *)"Mode 3: Modifying AMBER\r\n", 28, 500);
 80007aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007ae:	221c      	movs	r2, #28
 80007b0:	495c      	ldr	r1, [pc, #368]	; (8000924 <fsm_manual_run+0x2c8>)
 80007b2:	f107 0008 	add.w	r0, r7, #8
 80007b6:	f003 faa4 	bl	8003d02 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)"Current time = ", 16, 500);
 80007ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007be:	2210      	movs	r2, #16
 80007c0:	4954      	ldr	r1, [pc, #336]	; (8000914 <fsm_manual_run+0x2b8>)
 80007c2:	f107 0008 	add.w	r0, r7, #8
 80007c6:	f003 fa9c 	bl	8003d02 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "%d\r\n", counter_light_1), 500);
 80007ca:	4b4f      	ldr	r3, [pc, #316]	; (8000908 <fsm_manual_run+0x2ac>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	4951      	ldr	r1, [pc, #324]	; (8000918 <fsm_manual_run+0x2bc>)
 80007d2:	4852      	ldr	r0, [pc, #328]	; (800091c <fsm_manual_run+0x2c0>)
 80007d4:	f004 f872 	bl	80048bc <siprintf>
 80007d8:	4603      	mov	r3, r0
 80007da:	b29a      	uxth	r2, r3
 80007dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007e0:	494e      	ldr	r1, [pc, #312]	; (800091c <fsm_manual_run+0x2c0>)
 80007e2:	f107 0008 	add.w	r0, r7, #8
 80007e6:	f003 fa8c 	bl	8003d02 <HAL_UART_Transmit>
		if (isButtonPressed(2) == 1) { // increasing 7-segment light counter
 80007ea:	2002      	movs	r0, #2
 80007ec:	f7ff fd64 	bl	80002b8 <isButtonPressed>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d131      	bne.n	800085a <fsm_manual_run+0x1fe>
			time_modify_counter += UPDATED_TIME;
 80007f6:	4b42      	ldr	r3, [pc, #264]	; (8000900 <fsm_manual_run+0x2a4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80007fe:	4a40      	ldr	r2, [pc, #256]	; (8000900 <fsm_manual_run+0x2a4>)
 8000800:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (uint8_t *)"Updated time = ", 16, 500);
 8000802:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000806:	2210      	movs	r2, #16
 8000808:	4947      	ldr	r1, [pc, #284]	; (8000928 <fsm_manual_run+0x2cc>)
 800080a:	f107 0008 	add.w	r0, r7, #8
 800080e:	f003 fa78 	bl	8003d02 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "%d\r\n", time_modify_counter / 1000), 500);
 8000812:	4b3b      	ldr	r3, [pc, #236]	; (8000900 <fsm_manual_run+0x2a4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a3b      	ldr	r2, [pc, #236]	; (8000904 <fsm_manual_run+0x2a8>)
 8000818:	fb82 1203 	smull	r1, r2, r2, r3
 800081c:	1192      	asrs	r2, r2, #6
 800081e:	17db      	asrs	r3, r3, #31
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	461a      	mov	r2, r3
 8000824:	493c      	ldr	r1, [pc, #240]	; (8000918 <fsm_manual_run+0x2bc>)
 8000826:	483d      	ldr	r0, [pc, #244]	; (800091c <fsm_manual_run+0x2c0>)
 8000828:	f004 f848 	bl	80048bc <siprintf>
 800082c:	4603      	mov	r3, r0
 800082e:	b29a      	uxth	r2, r3
 8000830:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000834:	4939      	ldr	r1, [pc, #228]	; (800091c <fsm_manual_run+0x2c0>)
 8000836:	f107 0008 	add.w	r0, r7, #8
 800083a:	f003 fa62 	bl	8003d02 <HAL_UART_Transmit>
			if (time_modify_counter > MAX_TIME)
 800083e:	4b30      	ldr	r3, [pc, #192]	; (8000900 <fsm_manual_run+0x2a4>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a3a      	ldr	r2, [pc, #232]	; (800092c <fsm_manual_run+0x2d0>)
 8000844:	4293      	cmp	r3, r2
 8000846:	dd03      	ble.n	8000850 <fsm_manual_run+0x1f4>
				time_modify_counter = 1000; // 1 second
 8000848:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <fsm_manual_run+0x2a4>)
 800084a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800084e:	601a      	str	r2, [r3, #0]
			setTimer(1, 5000); // set 5 seconds for manual events
 8000850:	f241 3188 	movw	r1, #5000	; 0x1388
 8000854:	2001      	movs	r0, #1
 8000856:	f001 f915 	bl	8001a84 <setTimer>
		if (isButtonPressed(3) == 1) { // set the new value for 7-segment light counter
 800085a:	2003      	movs	r0, #3
 800085c:	f7ff fd2c 	bl	80002b8 <isButtonPressed>
 8000860:	4603      	mov	r3, r0
 8000862:	2b01      	cmp	r3, #1
 8000864:	f040 81dd 	bne.w	8000c22 <fsm_manual_run+0x5c6>
			red_counter = time_modify_counter;
 8000868:	4b25      	ldr	r3, [pc, #148]	; (8000900 <fsm_manual_run+0x2a4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a23      	ldr	r2, [pc, #140]	; (80008fc <fsm_manual_run+0x2a0>)
 800086e:	6013      	str	r3, [r2, #0]
			green_counter = red_counter - amber_counter;
 8000870:	4b22      	ldr	r3, [pc, #136]	; (80008fc <fsm_manual_run+0x2a0>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b2a      	ldr	r3, [pc, #168]	; (8000920 <fsm_manual_run+0x2c4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	4a2d      	ldr	r2, [pc, #180]	; (8000930 <fsm_manual_run+0x2d4>)
 800087c:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);								// set 5 seconds for manual events
 800087e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000882:	2001      	movs	r0, #1
 8000884:	f001 f8fe 	bl	8001a84 <setTimer>
			counter_light_1 = red_counter / 1000; // counter light 1 show the value of current manual light
 8000888:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <fsm_manual_run+0x2a0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a1d      	ldr	r2, [pc, #116]	; (8000904 <fsm_manual_run+0x2a8>)
 800088e:	fb82 1203 	smull	r1, r2, r2, r3
 8000892:	1192      	asrs	r2, r2, #6
 8000894:	17db      	asrs	r3, r3, #31
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	4a1b      	ldr	r2, [pc, #108]	; (8000908 <fsm_manual_run+0x2ac>)
 800089a:	6013      	str	r3, [r2, #0]
			status = AUTOMATIC_MODE;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <fsm_manual_run+0x294>)
 800089e:	2202      	movs	r2, #2
 80008a0:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <fsm_manual_run+0x298>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t *)"Upon update:\r\n", 15, 500);
 80008a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008ac:	220f      	movs	r2, #15
 80008ae:	4921      	ldr	r1, [pc, #132]	; (8000934 <fsm_manual_run+0x2d8>)
 80008b0:	f107 0008 	add.w	r0, r7, #8
 80008b4:	f003 fa25 	bl	8003d02 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)"RED counter = ", 15, 500);
 80008b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008bc:	220f      	movs	r2, #15
 80008be:	491e      	ldr	r1, [pc, #120]	; (8000938 <fsm_manual_run+0x2dc>)
 80008c0:	f107 0008 	add.w	r0, r7, #8
 80008c4:	f003 fa1d 	bl	8003d02 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "%d\r\n", counter_light_1), 500);
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <fsm_manual_run+0x2ac>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	4912      	ldr	r1, [pc, #72]	; (8000918 <fsm_manual_run+0x2bc>)
 80008d0:	4812      	ldr	r0, [pc, #72]	; (800091c <fsm_manual_run+0x2c0>)
 80008d2:	f003 fff3 	bl	80048bc <siprintf>
 80008d6:	4603      	mov	r3, r0
 80008d8:	b29a      	uxth	r2, r3
 80008da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008de:	490f      	ldr	r1, [pc, #60]	; (800091c <fsm_manual_run+0x2c0>)
 80008e0:	f107 0008 	add.w	r0, r7, #8
 80008e4:	f003 fa0d 	bl	8003d02 <HAL_UART_Transmit>
		break;
 80008e8:	e19b      	b.n	8000c22 <fsm_manual_run+0x5c6>
 80008ea:	bf00      	nop
 80008ec:	200002b4 	.word	0x200002b4
 80008f0:	20000004 	.word	0x20000004
 80008f4:	20000010 	.word	0x20000010
 80008f8:	0800505c 	.word	0x0800505c
 80008fc:	20000014 	.word	0x20000014
 8000900:	200000c4 	.word	0x200000c4
 8000904:	10624dd3 	.word	0x10624dd3
 8000908:	20000020 	.word	0x20000020
 800090c:	20000024 	.word	0x20000024
 8000910:	08005070 	.word	0x08005070
 8000914:	08005088 	.word	0x08005088
 8000918:	08005098 	.word	0x08005098
 800091c:	200001c0 	.word	0x200001c0
 8000920:	20000018 	.word	0x20000018
 8000924:	080050a0 	.word	0x080050a0
 8000928:	080050bc 	.word	0x080050bc
 800092c:	000182b8 	.word	0x000182b8
 8000930:	2000001c 	.word	0x2000001c
 8000934:	080050cc 	.word	0x080050cc
 8000938:	080050dc 	.word	0x080050dc
		if (timer_flag[2] == 1) {
 800093c:	4bba      	ldr	r3, [pc, #744]	; (8000c28 <fsm_manual_run+0x5cc>)
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d106      	bne.n	8000952 <fsm_manual_run+0x2f6>
			Toggle_Amber();
 8000944:	f000 fb62 	bl	800100c <Toggle_Amber>
			setTimer(2, 500);
 8000948:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800094c:	2002      	movs	r0, #2
 800094e:	f001 f899 	bl	8001a84 <setTimer>
		if (isButtonPressed(1)) {
 8000952:	2001      	movs	r0, #1
 8000954:	f7ff fcb0 	bl	80002b8 <isButtonPressed>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d049      	beq.n	80009f2 <fsm_manual_run+0x396>
			traffic_status = MAN_GREEN;
 800095e:	4bb3      	ldr	r3, [pc, #716]	; (8000c2c <fsm_manual_run+0x5d0>)
 8000960:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000964:	601a      	str	r2, [r3, #0]
			time_modify_counter = green_counter / 1000;	// update temporary counter storing red led delay
 8000966:	4bb2      	ldr	r3, [pc, #712]	; (8000c30 <fsm_manual_run+0x5d4>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4ab2      	ldr	r2, [pc, #712]	; (8000c34 <fsm_manual_run+0x5d8>)
 800096c:	fb82 1203 	smull	r1, r2, r2, r3
 8000970:	1192      	asrs	r2, r2, #6
 8000972:	17db      	asrs	r3, r3, #31
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	4ab0      	ldr	r2, [pc, #704]	; (8000c38 <fsm_manual_run+0x5dc>)
 8000978:	6013      	str	r3, [r2, #0]
			counter_light_1 = green_counter / 1000;			// counter light 1 show the value of current manual light
 800097a:	4bad      	ldr	r3, [pc, #692]	; (8000c30 <fsm_manual_run+0x5d4>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4aad      	ldr	r2, [pc, #692]	; (8000c34 <fsm_manual_run+0x5d8>)
 8000980:	fb82 1203 	smull	r1, r2, r2, r3
 8000984:	1192      	asrs	r2, r2, #6
 8000986:	17db      	asrs	r3, r3, #31
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	4aac      	ldr	r2, [pc, #688]	; (8000c3c <fsm_manual_run+0x5e0>)
 800098c:	6013      	str	r3, [r2, #0]
			counter_light_2 = traffic_status;						// counter light 2 show the mode
 800098e:	4ba7      	ldr	r3, [pc, #668]	; (8000c2c <fsm_manual_run+0x5d0>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4aab      	ldr	r2, [pc, #684]	; (8000c40 <fsm_manual_run+0x5e4>)
 8000994:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);				// reuse timer 0 to 5 seconds for manual event
 8000996:	f241 3188 	movw	r1, #5000	; 0x1388
 800099a:	2001      	movs	r0, #1
 800099c:	f001 f872 	bl	8001a84 <setTimer>
			setTimer(2, 500); 				// set timer 1 for led blinking
 80009a0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009a4:	2002      	movs	r0, #2
 80009a6:	f001 f86d 	bl	8001a84 <setTimer>
			setTimer(3, 250);				// timer 3 still counting 7-seg light
 80009aa:	21fa      	movs	r1, #250	; 0xfa
 80009ac:	2003      	movs	r0, #3
 80009ae:	f001 f869 	bl	8001a84 <setTimer>
			HAL_UART_Transmit(&huart2, (uint8_t *)"Mode 4: Modifying GREEN\r\n", 27, 500);
 80009b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009b6:	221b      	movs	r2, #27
 80009b8:	49a2      	ldr	r1, [pc, #648]	; (8000c44 <fsm_manual_run+0x5e8>)
 80009ba:	f107 0008 	add.w	r0, r7, #8
 80009be:	f003 f9a0 	bl	8003d02 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)"Current time = ", 16, 500);
 80009c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009c6:	2210      	movs	r2, #16
 80009c8:	499f      	ldr	r1, [pc, #636]	; (8000c48 <fsm_manual_run+0x5ec>)
 80009ca:	f107 0008 	add.w	r0, r7, #8
 80009ce:	f003 f998 	bl	8003d02 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "%d\r\n", counter_light_1), 500);
 80009d2:	4b9a      	ldr	r3, [pc, #616]	; (8000c3c <fsm_manual_run+0x5e0>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	461a      	mov	r2, r3
 80009d8:	499c      	ldr	r1, [pc, #624]	; (8000c4c <fsm_manual_run+0x5f0>)
 80009da:	489d      	ldr	r0, [pc, #628]	; (8000c50 <fsm_manual_run+0x5f4>)
 80009dc:	f003 ff6e 	bl	80048bc <siprintf>
 80009e0:	4603      	mov	r3, r0
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009e8:	4999      	ldr	r1, [pc, #612]	; (8000c50 <fsm_manual_run+0x5f4>)
 80009ea:	f107 0008 	add.w	r0, r7, #8
 80009ee:	f003 f988 	bl	8003d02 <HAL_UART_Transmit>
		if (isButtonPressed(2) == 1) { // increasing 7-segment light counter
 80009f2:	2002      	movs	r0, #2
 80009f4:	f7ff fc60 	bl	80002b8 <isButtonPressed>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d131      	bne.n	8000a62 <fsm_manual_run+0x406>
			time_modify_counter += UPDATED_TIME;
 80009fe:	4b8e      	ldr	r3, [pc, #568]	; (8000c38 <fsm_manual_run+0x5dc>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a06:	4a8c      	ldr	r2, [pc, #560]	; (8000c38 <fsm_manual_run+0x5dc>)
 8000a08:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (uint8_t *)"Updated time = ", 16, 500);
 8000a0a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a0e:	2210      	movs	r2, #16
 8000a10:	4990      	ldr	r1, [pc, #576]	; (8000c54 <fsm_manual_run+0x5f8>)
 8000a12:	f107 0008 	add.w	r0, r7, #8
 8000a16:	f003 f974 	bl	8003d02 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "%d\r\n", time_modify_counter / 1000), 500);
 8000a1a:	4b87      	ldr	r3, [pc, #540]	; (8000c38 <fsm_manual_run+0x5dc>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a85      	ldr	r2, [pc, #532]	; (8000c34 <fsm_manual_run+0x5d8>)
 8000a20:	fb82 1203 	smull	r1, r2, r2, r3
 8000a24:	1192      	asrs	r2, r2, #6
 8000a26:	17db      	asrs	r3, r3, #31
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4987      	ldr	r1, [pc, #540]	; (8000c4c <fsm_manual_run+0x5f0>)
 8000a2e:	4888      	ldr	r0, [pc, #544]	; (8000c50 <fsm_manual_run+0x5f4>)
 8000a30:	f003 ff44 	bl	80048bc <siprintf>
 8000a34:	4603      	mov	r3, r0
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a3c:	4984      	ldr	r1, [pc, #528]	; (8000c50 <fsm_manual_run+0x5f4>)
 8000a3e:	f107 0008 	add.w	r0, r7, #8
 8000a42:	f003 f95e 	bl	8003d02 <HAL_UART_Transmit>
			if (time_modify_counter > MAX_TIME)
 8000a46:	4b7c      	ldr	r3, [pc, #496]	; (8000c38 <fsm_manual_run+0x5dc>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a83      	ldr	r2, [pc, #524]	; (8000c58 <fsm_manual_run+0x5fc>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	dd03      	ble.n	8000a58 <fsm_manual_run+0x3fc>
				time_modify_counter = 1000; // 1 second
 8000a50:	4b79      	ldr	r3, [pc, #484]	; (8000c38 <fsm_manual_run+0x5dc>)
 8000a52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a56:	601a      	str	r2, [r3, #0]
			setTimer(1, 5000); // set 5 seconds for manual events
 8000a58:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f001 f811 	bl	8001a84 <setTimer>
		if (isButtonPressed(3) == 1) { // set the new value for 7-segment light counter
 8000a62:	2003      	movs	r0, #3
 8000a64:	f7ff fc28 	bl	80002b8 <isButtonPressed>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	f040 8102 	bne.w	8000c74 <fsm_manual_run+0x618>
			amber_counter = time_modify_counter;
 8000a70:	4b71      	ldr	r3, [pc, #452]	; (8000c38 <fsm_manual_run+0x5dc>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a79      	ldr	r2, [pc, #484]	; (8000c5c <fsm_manual_run+0x600>)
 8000a76:	6013      	str	r3, [r2, #0]
			red_counter = amber_counter + green_counter;
 8000a78:	4b78      	ldr	r3, [pc, #480]	; (8000c5c <fsm_manual_run+0x600>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b6c      	ldr	r3, [pc, #432]	; (8000c30 <fsm_manual_run+0x5d4>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4413      	add	r3, r2
 8000a82:	4a77      	ldr	r2, [pc, #476]	; (8000c60 <fsm_manual_run+0x604>)
 8000a84:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);									// set 5 seconds for manual events
 8000a86:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f000 fffa 	bl	8001a84 <setTimer>
			counter_light_1 = amber_counter / 1000; // counter light 1 show the value of current manual light
 8000a90:	4b72      	ldr	r3, [pc, #456]	; (8000c5c <fsm_manual_run+0x600>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a67      	ldr	r2, [pc, #412]	; (8000c34 <fsm_manual_run+0x5d8>)
 8000a96:	fb82 1203 	smull	r1, r2, r2, r3
 8000a9a:	1192      	asrs	r2, r2, #6
 8000a9c:	17db      	asrs	r3, r3, #31
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	4a66      	ldr	r2, [pc, #408]	; (8000c3c <fsm_manual_run+0x5e0>)
 8000aa2:	6013      	str	r3, [r2, #0]
			status = AUTOMATIC_MODE;
 8000aa4:	4b6f      	ldr	r3, [pc, #444]	; (8000c64 <fsm_manual_run+0x608>)
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 8000aaa:	4b60      	ldr	r3, [pc, #384]	; (8000c2c <fsm_manual_run+0x5d0>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t *)"Upon update:\r\n", 15, 500);
 8000ab0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ab4:	220f      	movs	r2, #15
 8000ab6:	496c      	ldr	r1, [pc, #432]	; (8000c68 <fsm_manual_run+0x60c>)
 8000ab8:	f107 0008 	add.w	r0, r7, #8
 8000abc:	f003 f921 	bl	8003d02 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)"AMBER counter = ", 17, 500);
 8000ac0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ac4:	2211      	movs	r2, #17
 8000ac6:	4969      	ldr	r1, [pc, #420]	; (8000c6c <fsm_manual_run+0x610>)
 8000ac8:	f107 0008 	add.w	r0, r7, #8
 8000acc:	f003 f919 	bl	8003d02 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "%d\r\n", counter_light_1), 500);
 8000ad0:	4b5a      	ldr	r3, [pc, #360]	; (8000c3c <fsm_manual_run+0x5e0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	495d      	ldr	r1, [pc, #372]	; (8000c4c <fsm_manual_run+0x5f0>)
 8000ad8:	485d      	ldr	r0, [pc, #372]	; (8000c50 <fsm_manual_run+0x5f4>)
 8000ada:	f003 feef 	bl	80048bc <siprintf>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ae6:	495a      	ldr	r1, [pc, #360]	; (8000c50 <fsm_manual_run+0x5f4>)
 8000ae8:	f107 0008 	add.w	r0, r7, #8
 8000aec:	f003 f909 	bl	8003d02 <HAL_UART_Transmit>
		break;
 8000af0:	e0c0      	b.n	8000c74 <fsm_manual_run+0x618>
		if (timer_flag[2] == 1) {
 8000af2:	4b4d      	ldr	r3, [pc, #308]	; (8000c28 <fsm_manual_run+0x5cc>)
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d106      	bne.n	8000b08 <fsm_manual_run+0x4ac>
			Toggle_Green();
 8000afa:	f000 fac7 	bl	800108c <Toggle_Green>
			setTimer(2, 500);
 8000afe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b02:	2002      	movs	r0, #2
 8000b04:	f000 ffbe 	bl	8001a84 <setTimer>
		if (isButtonPressed(1)) {
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f7ff fbd5 	bl	80002b8 <isButtonPressed>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d005      	beq.n	8000b20 <fsm_manual_run+0x4c4>
			status = AUTOMATIC_MODE;
 8000b14:	4b53      	ldr	r3, [pc, #332]	; (8000c64 <fsm_manual_run+0x608>)
 8000b16:	2202      	movs	r2, #2
 8000b18:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 8000b1a:	4b44      	ldr	r3, [pc, #272]	; (8000c2c <fsm_manual_run+0x5d0>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(2) == 1) { // increasing 7-segment light counter
 8000b20:	2002      	movs	r0, #2
 8000b22:	f7ff fbc9 	bl	80002b8 <isButtonPressed>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d131      	bne.n	8000b90 <fsm_manual_run+0x534>
			time_modify_counter += UPDATED_TIME;
 8000b2c:	4b42      	ldr	r3, [pc, #264]	; (8000c38 <fsm_manual_run+0x5dc>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000b34:	4a40      	ldr	r2, [pc, #256]	; (8000c38 <fsm_manual_run+0x5dc>)
 8000b36:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (uint8_t *)"Updated time = ", 16, 500);
 8000b38:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b3c:	2210      	movs	r2, #16
 8000b3e:	4945      	ldr	r1, [pc, #276]	; (8000c54 <fsm_manual_run+0x5f8>)
 8000b40:	f107 0008 	add.w	r0, r7, #8
 8000b44:	f003 f8dd 	bl	8003d02 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "%d\r\n", time_modify_counter / 1000), 500);
 8000b48:	4b3b      	ldr	r3, [pc, #236]	; (8000c38 <fsm_manual_run+0x5dc>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a39      	ldr	r2, [pc, #228]	; (8000c34 <fsm_manual_run+0x5d8>)
 8000b4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b52:	1192      	asrs	r2, r2, #6
 8000b54:	17db      	asrs	r3, r3, #31
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	461a      	mov	r2, r3
 8000b5a:	493c      	ldr	r1, [pc, #240]	; (8000c4c <fsm_manual_run+0x5f0>)
 8000b5c:	483c      	ldr	r0, [pc, #240]	; (8000c50 <fsm_manual_run+0x5f4>)
 8000b5e:	f003 fead 	bl	80048bc <siprintf>
 8000b62:	4603      	mov	r3, r0
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b6a:	4939      	ldr	r1, [pc, #228]	; (8000c50 <fsm_manual_run+0x5f4>)
 8000b6c:	f107 0008 	add.w	r0, r7, #8
 8000b70:	f003 f8c7 	bl	8003d02 <HAL_UART_Transmit>
			if (time_modify_counter > MAX_TIME)
 8000b74:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <fsm_manual_run+0x5dc>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a37      	ldr	r2, [pc, #220]	; (8000c58 <fsm_manual_run+0x5fc>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	dd03      	ble.n	8000b86 <fsm_manual_run+0x52a>
				time_modify_counter = 1000; // 1 second
 8000b7e:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <fsm_manual_run+0x5dc>)
 8000b80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b84:	601a      	str	r2, [r3, #0]
			setTimer(1, 5000); // set 5 seconds for manual events
 8000b86:	f241 3188 	movw	r1, #5000	; 0x1388
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f000 ff7a 	bl	8001a84 <setTimer>
		if (isButtonPressed(3) == 1) { // set the new value for 7-segment light counter
 8000b90:	2003      	movs	r0, #3
 8000b92:	f7ff fb91 	bl	80002b8 <isButtonPressed>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d16d      	bne.n	8000c78 <fsm_manual_run+0x61c>
			green_counter = time_modify_counter;
 8000b9c:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <fsm_manual_run+0x5dc>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a23      	ldr	r2, [pc, #140]	; (8000c30 <fsm_manual_run+0x5d4>)
 8000ba2:	6013      	str	r3, [r2, #0]
			red_counter = amber_counter + green_counter;
 8000ba4:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <fsm_manual_run+0x600>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <fsm_manual_run+0x5d4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4413      	add	r3, r2
 8000bae:	4a2c      	ldr	r2, [pc, #176]	; (8000c60 <fsm_manual_run+0x604>)
 8000bb0:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);									// set 5 seconds for manual events
 8000bb2:	f241 3188 	movw	r1, #5000	; 0x1388
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f000 ff64 	bl	8001a84 <setTimer>
			counter_light_1 = green_counter / 1000; // counter light 1 show the value of current manual light
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <fsm_manual_run+0x5d4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <fsm_manual_run+0x5d8>)
 8000bc2:	fb82 1203 	smull	r1, r2, r2, r3
 8000bc6:	1192      	asrs	r2, r2, #6
 8000bc8:	17db      	asrs	r3, r3, #31
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <fsm_manual_run+0x5e0>)
 8000bce:	6013      	str	r3, [r2, #0]
			status = AUTOMATIC_MODE;
 8000bd0:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <fsm_manual_run+0x608>)
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <fsm_manual_run+0x5d0>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t *)"Upon update:\r\n", 15, 500);
 8000bdc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000be0:	220f      	movs	r2, #15
 8000be2:	4921      	ldr	r1, [pc, #132]	; (8000c68 <fsm_manual_run+0x60c>)
 8000be4:	f107 0008 	add.w	r0, r7, #8
 8000be8:	f003 f88b 	bl	8003d02 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)"GREEN counter = ", 17, 500);
 8000bec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bf0:	2211      	movs	r2, #17
 8000bf2:	491f      	ldr	r1, [pc, #124]	; (8000c70 <fsm_manual_run+0x614>)
 8000bf4:	f107 0008 	add.w	r0, r7, #8
 8000bf8:	f003 f883 	bl	8003d02 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "%d\r\n", counter_light_1), 500);
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <fsm_manual_run+0x5e0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4912      	ldr	r1, [pc, #72]	; (8000c4c <fsm_manual_run+0x5f0>)
 8000c04:	4812      	ldr	r0, [pc, #72]	; (8000c50 <fsm_manual_run+0x5f4>)
 8000c06:	f003 fe59 	bl	80048bc <siprintf>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c12:	490f      	ldr	r1, [pc, #60]	; (8000c50 <fsm_manual_run+0x5f4>)
 8000c14:	f107 0008 	add.w	r0, r7, #8
 8000c18:	f003 f873 	bl	8003d02 <HAL_UART_Transmit>
		break;
 8000c1c:	e02c      	b.n	8000c78 <fsm_manual_run+0x61c>
		break;
 8000c1e:	bf00      	nop
 8000c20:	e02b      	b.n	8000c7a <fsm_manual_run+0x61e>
		break;
 8000c22:	bf00      	nop
 8000c24:	e029      	b.n	8000c7a <fsm_manual_run+0x61e>
 8000c26:	bf00      	nop
 8000c28:	200002b4 	.word	0x200002b4
 8000c2c:	20000010 	.word	0x20000010
 8000c30:	2000001c 	.word	0x2000001c
 8000c34:	10624dd3 	.word	0x10624dd3
 8000c38:	200000c4 	.word	0x200000c4
 8000c3c:	20000020 	.word	0x20000020
 8000c40:	20000024 	.word	0x20000024
 8000c44:	080050ec 	.word	0x080050ec
 8000c48:	08005088 	.word	0x08005088
 8000c4c:	08005098 	.word	0x08005098
 8000c50:	200001c0 	.word	0x200001c0
 8000c54:	080050bc 	.word	0x080050bc
 8000c58:	000182b8 	.word	0x000182b8
 8000c5c:	20000018 	.word	0x20000018
 8000c60:	20000014 	.word	0x20000014
 8000c64:	20000004 	.word	0x20000004
 8000c68:	080050cc 	.word	0x080050cc
 8000c6c:	08005108 	.word	0x08005108
 8000c70:	0800511c 	.word	0x0800511c
		break;
 8000c74:	bf00      	nop
 8000c76:	e000      	b.n	8000c7a <fsm_manual_run+0x61e>
		break;
 8000c78:	bf00      	nop
	}
}
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c80:	b004      	add	sp, #16
 8000c82:	4770      	bx	lr

08000c84 <PedestrianRed>:
 *      Author: ProX
 */

#include "fsm_pedestrian.h"

void PedestrianRed() {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, 1);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <PedestrianRed+0x20>)
 8000c90:	f001 fc59 	bl	8002546 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9a:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <PedestrianRed+0x24>)
 8000c9c:	f001 fc53 	bl	8002546 <HAL_GPIO_WritePin>
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40010c00 	.word	0x40010c00
 8000ca8:	40010800 	.word	0x40010800

08000cac <PedestrianGreen>:

void PedestrianGreen() {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <PedestrianGreen+0x20>)
 8000cb8:	f001 fc45 	bl	8002546 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, 1);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc2:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <PedestrianGreen+0x24>)
 8000cc4:	f001 fc3f 	bl	8002546 <HAL_GPIO_WritePin>
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40010c00 	.word	0x40010c00
 8000cd0:	40010800 	.word	0x40010800

08000cd4 <PedestrianInvalid>:

void PedestrianInvalid() {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <PedestrianInvalid+0x20>)
 8000ce0:	f001 fc31 	bl	8002546 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cea:	4803      	ldr	r0, [pc, #12]	; (8000cf8 <PedestrianInvalid+0x24>)
 8000cec:	f001 fc2b 	bl	8002546 <HAL_GPIO_WritePin>
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40010c00 	.word	0x40010c00
 8000cf8:	40010800 	.word	0x40010800

08000cfc <fsm_pedestrian_run>:

void fsm_pedestrian_run(UART_HandleTypeDef huart2) {
 8000cfc:	b084      	sub	sp, #16
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	f107 0c08 	add.w	ip, r7, #8
 8000d06:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	switch (pedestrian_status) {
 8000d0a:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <fsm_pedestrian_run+0xa4>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000d12:	d03a      	beq.n	8000d8a <fsm_pedestrian_run+0x8e>
 8000d14:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000d18:	dc3b      	bgt.n	8000d92 <fsm_pedestrian_run+0x96>
 8000d1a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000d1e:	d003      	beq.n	8000d28 <fsm_pedestrian_run+0x2c>
 8000d20:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d24:	d02b      	beq.n	8000d7e <fsm_pedestrian_run+0x82>
	case PEDESTRIAN_RED:

		PedestrianRed();
		break;
	}
}
 8000d26:	e034      	b.n	8000d92 <fsm_pedestrian_run+0x96>
		PedestrianInvalid();
 8000d28:	f7ff ffd4 	bl	8000cd4 <PedestrianInvalid>
		buzzer_status = OFF;
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <fsm_pedestrian_run+0xa8>)
 8000d2e:	2209      	movs	r2, #9
 8000d30:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(4)) {
 8000d32:	2004      	movs	r0, #4
 8000d34:	f7ff fac0 	bl	80002b8 <isButtonPressed>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d028      	beq.n	8000d90 <fsm_pedestrian_run+0x94>
			if (traffic_status == RED_AMBER || traffic_status == RED_GREEN) {
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <fsm_pedestrian_run+0xac>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b3c      	cmp	r3, #60	; 0x3c
 8000d44:	d003      	beq.n	8000d4e <fsm_pedestrian_run+0x52>
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <fsm_pedestrian_run+0xac>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b32      	cmp	r3, #50	; 0x32
 8000d4c:	d104      	bne.n	8000d58 <fsm_pedestrian_run+0x5c>
				pedestrian_status = PEDESTRIAN_GREEN;
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <fsm_pedestrian_run+0xa4>)
 8000d50:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	e011      	b.n	8000d7c <fsm_pedestrian_run+0x80>
			else if (traffic_status == GREEN_RED || traffic_status == AMBER_RED) {
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <fsm_pedestrian_run+0xac>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b46      	cmp	r3, #70	; 0x46
 8000d5e:	d003      	beq.n	8000d68 <fsm_pedestrian_run+0x6c>
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <fsm_pedestrian_run+0xac>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b50      	cmp	r3, #80	; 0x50
 8000d66:	d104      	bne.n	8000d72 <fsm_pedestrian_run+0x76>
				pedestrian_status = PEDESTRIAN_RED;
 8000d68:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <fsm_pedestrian_run+0xa4>)
 8000d6a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	e004      	b.n	8000d7c <fsm_pedestrian_run+0x80>
				pedestrian_status = PEDESTRIAN_INACTIVE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <fsm_pedestrian_run+0xa4>)
 8000d74:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000d78:	601a      	str	r2, [r3, #0]
		break;
 8000d7a:	e009      	b.n	8000d90 <fsm_pedestrian_run+0x94>
 8000d7c:	e008      	b.n	8000d90 <fsm_pedestrian_run+0x94>
		PedestrianGreen();
 8000d7e:	f7ff ff95 	bl	8000cac <PedestrianGreen>
		buzzer_status = ON;
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <fsm_pedestrian_run+0xa8>)
 8000d84:	2207      	movs	r2, #7
 8000d86:	601a      	str	r2, [r3, #0]
		break;
 8000d88:	e003      	b.n	8000d92 <fsm_pedestrian_run+0x96>
		PedestrianRed();
 8000d8a:	f7ff ff7b 	bl	8000c84 <PedestrianRed>
		break;
 8000d8e:	e000      	b.n	8000d92 <fsm_pedestrian_run+0x96>
		break;
 8000d90:	bf00      	nop
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d9a:	b004      	add	sp, #16
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008
 8000da4:	2000000c 	.word	0x2000000c
 8000da8:	20000010 	.word	0x20000010

08000dac <fsm_buzzer_run>:

int buzzer_volume = 0;
int freq = 0;			
int timer = 50;

void fsm_buzzer_run() {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
   switch(buzzer_status) {
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <fsm_buzzer_run+0x84>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b07      	cmp	r3, #7
 8000db6:	d010      	beq.n	8000dda <fsm_buzzer_run+0x2e>
 8000db8:	2b09      	cmp	r3, #9
 8000dba:	d137      	bne.n	8000e2c <fsm_buzzer_run+0x80>
	case OFF:
		buzzer_volume = 0;
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <fsm_buzzer_run+0x88>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
		freq = 0;
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <fsm_buzzer_run+0x8c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
		timer = 50;
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <fsm_buzzer_run+0x90>)
 8000dca:	2232      	movs	r2, #50	; 0x32
 8000dcc:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, buzzer_volume);
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <fsm_buzzer_run+0x88>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <fsm_buzzer_run+0x94>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000dd8:	e028      	b.n	8000e2c <fsm_buzzer_run+0x80>

	case ON:
		if (traffic_status == RED_AMBER) {
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <fsm_buzzer_run+0x98>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b3c      	cmp	r3, #60	; 0x3c
 8000de0:	d123      	bne.n	8000e2a <fsm_buzzer_run+0x7e>
			/* INCREASE VOLUME AND DECREASE TIME FREQUENCY */
			if (timer_flag[3] == 1) {
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <fsm_buzzer_run+0x9c>)
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d11f      	bne.n	8000e2a <fsm_buzzer_run+0x7e>
				timer -= 1;
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <fsm_buzzer_run+0x90>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <fsm_buzzer_run+0x90>)
 8000df2:	6013      	str	r3, [r2, #0]
				freq += 5;
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <fsm_buzzer_run+0x8c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	3305      	adds	r3, #5
 8000dfa:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <fsm_buzzer_run+0x8c>)
 8000dfc:	6013      	str	r3, [r2, #0]
				buzzer_volume = (buzzer_volume == 0) ? (25 + freq) : 0;
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <fsm_buzzer_run+0x88>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d103      	bne.n	8000e0e <fsm_buzzer_run+0x62>
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <fsm_buzzer_run+0x8c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	3319      	adds	r3, #25
 8000e0c:	e000      	b.n	8000e10 <fsm_buzzer_run+0x64>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <fsm_buzzer_run+0x88>)
 8000e12:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, buzzer_volume);
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <fsm_buzzer_run+0x88>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <fsm_buzzer_run+0x94>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	635a      	str	r2, [r3, #52]	; 0x34

				setTimer(3, timer);
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <fsm_buzzer_run+0x90>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4619      	mov	r1, r3
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 fe2d 	bl	8001a84 <setTimer>
			}
		}
		break;
 8000e2a:	bf00      	nop
	}
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	2000000c 	.word	0x2000000c
 8000e34:	200000bc 	.word	0x200000bc
 8000e38:	200000c0 	.word	0x200000c0
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	20000108 	.word	0x20000108
 8000e44:	20000010 	.word	0x20000010
 8000e48:	200002b4 	.word	0x200002b4

08000e4c <resetLights>:
 *      Author: ASUS
 */

#include "graphics.h"

void resetLights(void) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
    time_modify_counter = 0;
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <resetLights+0x40>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
	traffic_status = INIT;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <resetLights+0x44>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]

    /* Off */
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e62:	480c      	ldr	r0, [pc, #48]	; (8000e94 <resetLights+0x48>)
 8000e64:	f001 fb6f 	bl	8002546 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2108      	movs	r1, #8
 8000e6c:	480a      	ldr	r0, [pc, #40]	; (8000e98 <resetLights+0x4c>)
 8000e6e:	f001 fb6a 	bl	8002546 <HAL_GPIO_WritePin>

    /* Off */
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2120      	movs	r1, #32
 8000e76:	4808      	ldr	r0, [pc, #32]	; (8000e98 <resetLights+0x4c>)
 8000e78:	f001 fb65 	bl	8002546 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2110      	movs	r1, #16
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <resetLights+0x4c>)
 8000e82:	f001 fb60 	bl	8002546 <HAL_GPIO_WritePin>
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200000c4 	.word	0x200000c4
 8000e90:	20000010 	.word	0x20000010
 8000e94:	40010800 	.word	0x40010800
 8000e98:	40010c00 	.word	0x40010c00

08000e9c <Red_Green>:

void Red_Green(void) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
    /* Red */
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea6:	480a      	ldr	r0, [pc, #40]	; (8000ed0 <Red_Green+0x34>)
 8000ea8:	f001 fb4d 	bl	8002546 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2108      	movs	r1, #8
 8000eb0:	4808      	ldr	r0, [pc, #32]	; (8000ed4 <Red_Green+0x38>)
 8000eb2:	f001 fb48 	bl	8002546 <HAL_GPIO_WritePin>

    /* Green */
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2120      	movs	r1, #32
 8000eba:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <Red_Green+0x38>)
 8000ebc:	f001 fb43 	bl	8002546 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 1);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2110      	movs	r1, #16
 8000ec4:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <Red_Green+0x38>)
 8000ec6:	f001 fb3e 	bl	8002546 <HAL_GPIO_WritePin>
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40010800 	.word	0x40010800
 8000ed4:	40010c00 	.word	0x40010c00

08000ed8 <Red_Amber>:

void Red_Amber(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
    /* Red */
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee2:	480a      	ldr	r0, [pc, #40]	; (8000f0c <Red_Amber+0x34>)
 8000ee4:	f001 fb2f 	bl	8002546 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2108      	movs	r1, #8
 8000eec:	4808      	ldr	r0, [pc, #32]	; (8000f10 <Red_Amber+0x38>)
 8000eee:	f001 fb2a 	bl	8002546 <HAL_GPIO_WritePin>

    /* Amber */
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2120      	movs	r1, #32
 8000ef6:	4806      	ldr	r0, [pc, #24]	; (8000f10 <Red_Amber+0x38>)
 8000ef8:	f001 fb25 	bl	8002546 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 1);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2110      	movs	r1, #16
 8000f00:	4803      	ldr	r0, [pc, #12]	; (8000f10 <Red_Amber+0x38>)
 8000f02:	f001 fb20 	bl	8002546 <HAL_GPIO_WritePin>
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40010800 	.word	0x40010800
 8000f10:	40010c00 	.word	0x40010c00

08000f14 <Green_Red>:

void Green_Red(void) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
    /* Green */
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1e:	480a      	ldr	r0, [pc, #40]	; (8000f48 <Green_Red+0x34>)
 8000f20:	f001 fb11 	bl	8002546 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 8000f24:	2201      	movs	r2, #1
 8000f26:	2108      	movs	r1, #8
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <Green_Red+0x38>)
 8000f2a:	f001 fb0c 	bl	8002546 <HAL_GPIO_WritePin>

    /* Red */
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2120      	movs	r1, #32
 8000f32:	4806      	ldr	r0, [pc, #24]	; (8000f4c <Green_Red+0x38>)
 8000f34:	f001 fb07 	bl	8002546 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2110      	movs	r1, #16
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <Green_Red+0x38>)
 8000f3e:	f001 fb02 	bl	8002546 <HAL_GPIO_WritePin>
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40010800 	.word	0x40010800
 8000f4c:	40010c00 	.word	0x40010c00

08000f50 <Amber_Red>:

void Amber_Red(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
    /* Amber */
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 8000f54:	2201      	movs	r2, #1
 8000f56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f5a:	480a      	ldr	r0, [pc, #40]	; (8000f84 <Amber_Red+0x34>)
 8000f5c:	f001 faf3 	bl	8002546 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2108      	movs	r1, #8
 8000f64:	4808      	ldr	r0, [pc, #32]	; (8000f88 <Amber_Red+0x38>)
 8000f66:	f001 faee 	bl	8002546 <HAL_GPIO_WritePin>

    /* Red */
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2120      	movs	r1, #32
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <Amber_Red+0x38>)
 8000f70:	f001 fae9 	bl	8002546 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2110      	movs	r1, #16
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <Amber_Red+0x38>)
 8000f7a:	f001 fae4 	bl	8002546 <HAL_GPIO_WritePin>
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40010800 	.word	0x40010800
 8000f88:	40010c00 	.word	0x40010c00

08000f8c <Toggle_Red>:
    HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
}

int toggleIndex = 0;

void Toggle_Red(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
    if (toggleIndex == 0) {
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <Toggle_Red+0x74>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d118      	bne.n	8000fca <Toggle_Red+0x3e>
        /* On */
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f9e:	4819      	ldr	r0, [pc, #100]	; (8001004 <Toggle_Red+0x78>)
 8000fa0:	f001 fad1 	bl	8002546 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2108      	movs	r1, #8
 8000fa8:	4817      	ldr	r0, [pc, #92]	; (8001008 <Toggle_Red+0x7c>)
 8000faa:	f001 facc 	bl	8002546 <HAL_GPIO_WritePin>

        /* On */
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	4815      	ldr	r0, [pc, #84]	; (8001008 <Toggle_Red+0x7c>)
 8000fb4:	f001 fac7 	bl	8002546 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2110      	movs	r1, #16
 8000fbc:	4812      	ldr	r0, [pc, #72]	; (8001008 <Toggle_Red+0x7c>)
 8000fbe:	f001 fac2 	bl	8002546 <HAL_GPIO_WritePin>

        toggleIndex = 1;
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <Toggle_Red+0x74>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);

        toggleIndex = 0;
    }
}
 8000fc8:	e017      	b.n	8000ffa <Toggle_Red+0x6e>
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd0:	480c      	ldr	r0, [pc, #48]	; (8001004 <Toggle_Red+0x78>)
 8000fd2:	f001 fab8 	bl	8002546 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2108      	movs	r1, #8
 8000fda:	480b      	ldr	r0, [pc, #44]	; (8001008 <Toggle_Red+0x7c>)
 8000fdc:	f001 fab3 	bl	8002546 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2120      	movs	r1, #32
 8000fe4:	4808      	ldr	r0, [pc, #32]	; (8001008 <Toggle_Red+0x7c>)
 8000fe6:	f001 faae 	bl	8002546 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2110      	movs	r1, #16
 8000fee:	4806      	ldr	r0, [pc, #24]	; (8001008 <Toggle_Red+0x7c>)
 8000ff0:	f001 faa9 	bl	8002546 <HAL_GPIO_WritePin>
        toggleIndex = 0;
 8000ff4:	4b02      	ldr	r3, [pc, #8]	; (8001000 <Toggle_Red+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200000cc 	.word	0x200000cc
 8001004:	40010800 	.word	0x40010800
 8001008:	40010c00 	.word	0x40010c00

0800100c <Toggle_Amber>:

void Toggle_Amber(void) {
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
    if (toggleIndex == 0) {
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <Toggle_Amber+0x74>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d118      	bne.n	800104a <Toggle_Amber+0x3e>
        /* On */
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800101e:	4819      	ldr	r0, [pc, #100]	; (8001084 <Toggle_Amber+0x78>)
 8001020:	f001 fa91 	bl	8002546 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 8001024:	2201      	movs	r2, #1
 8001026:	2108      	movs	r1, #8
 8001028:	4817      	ldr	r0, [pc, #92]	; (8001088 <Toggle_Amber+0x7c>)
 800102a:	f001 fa8c 	bl	8002546 <HAL_GPIO_WritePin>

        /* On */
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 800102e:	2201      	movs	r2, #1
 8001030:	2120      	movs	r1, #32
 8001032:	4815      	ldr	r0, [pc, #84]	; (8001088 <Toggle_Amber+0x7c>)
 8001034:	f001 fa87 	bl	8002546 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 1);
 8001038:	2201      	movs	r2, #1
 800103a:	2110      	movs	r1, #16
 800103c:	4812      	ldr	r0, [pc, #72]	; (8001088 <Toggle_Amber+0x7c>)
 800103e:	f001 fa82 	bl	8002546 <HAL_GPIO_WritePin>

        toggleIndex = 1;
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <Toggle_Amber+0x74>)
 8001044:	2201      	movs	r2, #1
 8001046:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);

        toggleIndex = 0;
    }
}
 8001048:	e017      	b.n	800107a <Toggle_Amber+0x6e>
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <Toggle_Amber+0x78>)
 8001052:	f001 fa78 	bl	8002546 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2108      	movs	r1, #8
 800105a:	480b      	ldr	r0, [pc, #44]	; (8001088 <Toggle_Amber+0x7c>)
 800105c:	f001 fa73 	bl	8002546 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2120      	movs	r1, #32
 8001064:	4808      	ldr	r0, [pc, #32]	; (8001088 <Toggle_Amber+0x7c>)
 8001066:	f001 fa6e 	bl	8002546 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2110      	movs	r1, #16
 800106e:	4806      	ldr	r0, [pc, #24]	; (8001088 <Toggle_Amber+0x7c>)
 8001070:	f001 fa69 	bl	8002546 <HAL_GPIO_WritePin>
        toggleIndex = 0;
 8001074:	4b02      	ldr	r3, [pc, #8]	; (8001080 <Toggle_Amber+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200000cc 	.word	0x200000cc
 8001084:	40010800 	.word	0x40010800
 8001088:	40010c00 	.word	0x40010c00

0800108c <Toggle_Green>:

void Toggle_Green(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
    if (toggleIndex == 0) {
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <Toggle_Green+0x74>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d118      	bne.n	80010ca <Toggle_Green+0x3e>
        /* On */
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109e:	4819      	ldr	r0, [pc, #100]	; (8001104 <Toggle_Green+0x78>)
 80010a0:	f001 fa51 	bl	8002546 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 80010a4:	2201      	movs	r2, #1
 80010a6:	2108      	movs	r1, #8
 80010a8:	4817      	ldr	r0, [pc, #92]	; (8001108 <Toggle_Green+0x7c>)
 80010aa:	f001 fa4c 	bl	8002546 <HAL_GPIO_WritePin>

        /* On */
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2120      	movs	r1, #32
 80010b2:	4815      	ldr	r0, [pc, #84]	; (8001108 <Toggle_Green+0x7c>)
 80010b4:	f001 fa47 	bl	8002546 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 1);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2110      	movs	r1, #16
 80010bc:	4812      	ldr	r0, [pc, #72]	; (8001108 <Toggle_Green+0x7c>)
 80010be:	f001 fa42 	bl	8002546 <HAL_GPIO_WritePin>

        toggleIndex = 1;
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <Toggle_Green+0x74>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);

        toggleIndex = 0;
    }
}
 80010c8:	e017      	b.n	80010fa <Toggle_Green+0x6e>
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d0:	480c      	ldr	r0, [pc, #48]	; (8001104 <Toggle_Green+0x78>)
 80010d2:	f001 fa38 	bl	8002546 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2108      	movs	r1, #8
 80010da:	480b      	ldr	r0, [pc, #44]	; (8001108 <Toggle_Green+0x7c>)
 80010dc:	f001 fa33 	bl	8002546 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2120      	movs	r1, #32
 80010e4:	4808      	ldr	r0, [pc, #32]	; (8001108 <Toggle_Green+0x7c>)
 80010e6:	f001 fa2e 	bl	8002546 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2110      	movs	r1, #16
 80010ee:	4806      	ldr	r0, [pc, #24]	; (8001108 <Toggle_Green+0x7c>)
 80010f0:	f001 fa29 	bl	8002546 <HAL_GPIO_WritePin>
        toggleIndex = 0;
 80010f4:	4b02      	ldr	r3, [pc, #8]	; (8001100 <Toggle_Green+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000cc 	.word	0x200000cc
 8001104:	40010800 	.word	0x40010800
 8001108:	40010c00 	.word	0x40010c00

0800110c <display7SegmentLight>:

void display7SegmentLight(UART_HandleTypeDef huart2)
{
 800110c:	b084      	sub	sp, #16
 800110e:	b580      	push	{r7, lr}
 8001110:	af00      	add	r7, sp, #0
 8001112:	f107 0c08 	add.w	ip, r7, #8
 8001116:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	switch (counter_lights)
 800111a:	4b4a      	ldr	r3, [pc, #296]	; (8001244 <display7SegmentLight+0x138>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001122:	d063      	beq.n	80011ec <display7SegmentLight+0xe0>
 8001124:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001128:	dc7a      	bgt.n	8001220 <display7SegmentLight+0x114>
 800112a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800112e:	d050      	beq.n	80011d2 <display7SegmentLight+0xc6>
 8001130:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001134:	dc74      	bgt.n	8001220 <display7SegmentLight+0x114>
 8001136:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800113a:	d03d      	beq.n	80011b8 <display7SegmentLight+0xac>
 800113c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001140:	dc6e      	bgt.n	8001220 <display7SegmentLight+0x114>
 8001142:	2bc8      	cmp	r3, #200	; 0xc8
 8001144:	d02b      	beq.n	800119e <display7SegmentLight+0x92>
 8001146:	2bc8      	cmp	r3, #200	; 0xc8
 8001148:	dc6a      	bgt.n	8001220 <display7SegmentLight+0x114>
 800114a:	2b01      	cmp	r3, #1
 800114c:	d002      	beq.n	8001154 <display7SegmentLight+0x48>
 800114e:	2b64      	cmp	r3, #100	; 0x64
 8001150:	d008      	beq.n	8001164 <display7SegmentLight+0x58>
 8001152:	e065      	b.n	8001220 <display7SegmentLight+0x114>
	{
	case INIT:
		counter_lights = READ_UART;
 8001154:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <display7SegmentLight+0x138>)
 8001156:	2264      	movs	r2, #100	; 0x64
 8001158:	601a      	str	r2, [r3, #0]
		setTimer(3, 250); 		// timer 3 for counting light
 800115a:	21fa      	movs	r1, #250	; 0xfa
 800115c:	2003      	movs	r0, #3
 800115e:	f000 fc91 	bl	8001a84 <setTimer>
		break;
 8001162:	e068      	b.n	8001236 <display7SegmentLight+0x12a>
	case READ_UART:
		if (status == AUTOMATIC_MODE) {
 8001164:	4b38      	ldr	r3, [pc, #224]	; (8001248 <display7SegmentLight+0x13c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b02      	cmp	r3, #2
 800116a:	d114      	bne.n	8001196 <display7SegmentLight+0x8a>
			sprintf(str, "");
 800116c:	4937      	ldr	r1, [pc, #220]	; (800124c <display7SegmentLight+0x140>)
 800116e:	4838      	ldr	r0, [pc, #224]	; (8001250 <display7SegmentLight+0x144>)
 8001170:	f003 fba4 	bl	80048bc <siprintf>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Light 1 = %d   Light 2 = %d\r\n", counter_light_1, counter_light_2), 500);
 8001174:	4b37      	ldr	r3, [pc, #220]	; (8001254 <display7SegmentLight+0x148>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b37      	ldr	r3, [pc, #220]	; (8001258 <display7SegmentLight+0x14c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4937      	ldr	r1, [pc, #220]	; (800125c <display7SegmentLight+0x150>)
 800117e:	4834      	ldr	r0, [pc, #208]	; (8001250 <display7SegmentLight+0x144>)
 8001180:	f003 fb9c 	bl	80048bc <siprintf>
 8001184:	4603      	mov	r3, r0
 8001186:	b29a      	uxth	r2, r3
 8001188:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800118c:	4930      	ldr	r1, [pc, #192]	; (8001250 <display7SegmentLight+0x144>)
 800118e:	f107 0008 	add.w	r0, r7, #8
 8001192:	f002 fdb6 	bl	8003d02 <HAL_UART_Transmit>

		}
		counter_lights = LIGHT_1;
 8001196:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <display7SegmentLight+0x138>)
 8001198:	22c8      	movs	r2, #200	; 0xc8
 800119a:	601a      	str	r2, [r3, #0]
		break;
 800119c:	e04b      	b.n	8001236 <display7SegmentLight+0x12a>
	case LIGHT_1:
		if (timer_flag[3] == 1)
 800119e:	4b30      	ldr	r3, [pc, #192]	; (8001260 <display7SegmentLight+0x154>)
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d140      	bne.n	8001228 <display7SegmentLight+0x11c>
		{
			counter_lights = LIGHT_2;
 80011a6:	4b27      	ldr	r3, [pc, #156]	; (8001244 <display7SegmentLight+0x138>)
 80011a8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011ac:	601a      	str	r2, [r3, #0]
			setTimer(3, 250);
 80011ae:	21fa      	movs	r1, #250	; 0xfa
 80011b0:	2003      	movs	r0, #3
 80011b2:	f000 fc67 	bl	8001a84 <setTimer>
		}
		break;
 80011b6:	e037      	b.n	8001228 <display7SegmentLight+0x11c>
	case LIGHT_2:
		if (timer_flag[3] == 1)
 80011b8:	4b29      	ldr	r3, [pc, #164]	; (8001260 <display7SegmentLight+0x154>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d135      	bne.n	800122c <display7SegmentLight+0x120>
		{
			counter_lights = LIGHT_3;
 80011c0:	4b20      	ldr	r3, [pc, #128]	; (8001244 <display7SegmentLight+0x138>)
 80011c2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80011c6:	601a      	str	r2, [r3, #0]
			setTimer(3, 250);
 80011c8:	21fa      	movs	r1, #250	; 0xfa
 80011ca:	2003      	movs	r0, #3
 80011cc:	f000 fc5a 	bl	8001a84 <setTimer>
		}
		break;
 80011d0:	e02c      	b.n	800122c <display7SegmentLight+0x120>
	case LIGHT_3:
		if (timer_flag[3] == 1)
 80011d2:	4b23      	ldr	r3, [pc, #140]	; (8001260 <display7SegmentLight+0x154>)
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d12a      	bne.n	8001230 <display7SegmentLight+0x124>
		{
			counter_lights = LIGHT_4;
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <display7SegmentLight+0x138>)
 80011dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011e0:	601a      	str	r2, [r3, #0]
			setTimer(3, 250);
 80011e2:	21fa      	movs	r1, #250	; 0xfa
 80011e4:	2003      	movs	r0, #3
 80011e6:	f000 fc4d 	bl	8001a84 <setTimer>
		}
		break;
 80011ea:	e021      	b.n	8001230 <display7SegmentLight+0x124>
	case LIGHT_4:
		if (timer_flag[3] == 1)
 80011ec:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <display7SegmentLight+0x154>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d11f      	bne.n	8001234 <display7SegmentLight+0x128>
		{
			counter_lights = READ_UART;
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <display7SegmentLight+0x138>)
 80011f6:	2264      	movs	r2, #100	; 0x64
 80011f8:	601a      	str	r2, [r3, #0]
			if (status == AUTOMATIC_MODE)
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <display7SegmentLight+0x13c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d109      	bne.n	8001216 <display7SegmentLight+0x10a>
			{
				counter_light_1--;
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <display7SegmentLight+0x148>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3b01      	subs	r3, #1
 8001208:	4a12      	ldr	r2, [pc, #72]	; (8001254 <display7SegmentLight+0x148>)
 800120a:	6013      	str	r3, [r2, #0]
				counter_light_2--;
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <display7SegmentLight+0x14c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3b01      	subs	r3, #1
 8001212:	4a11      	ldr	r2, [pc, #68]	; (8001258 <display7SegmentLight+0x14c>)
 8001214:	6013      	str	r3, [r2, #0]
			}
			setTimer(3, 250);
 8001216:	21fa      	movs	r1, #250	; 0xfa
 8001218:	2003      	movs	r0, #3
 800121a:	f000 fc33 	bl	8001a84 <setTimer>
		}
		break;
 800121e:	e009      	b.n	8001234 <display7SegmentLight+0x128>
	default:
		counter_lights = READ_UART;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <display7SegmentLight+0x138>)
 8001222:	2264      	movs	r2, #100	; 0x64
 8001224:	601a      	str	r2, [r3, #0]
		break;
 8001226:	e006      	b.n	8001236 <display7SegmentLight+0x12a>
		break;
 8001228:	bf00      	nop
 800122a:	e004      	b.n	8001236 <display7SegmentLight+0x12a>
		break;
 800122c:	bf00      	nop
 800122e:	e002      	b.n	8001236 <display7SegmentLight+0x12a>
		break;
 8001230:	bf00      	nop
 8001232:	e000      	b.n	8001236 <display7SegmentLight+0x12a>
		break;
 8001234:	bf00      	nop
	}
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800123e:	b004      	add	sp, #16
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000028 	.word	0x20000028
 8001248:	20000004 	.word	0x20000004
 800124c:	08005130 	.word	0x08005130
 8001250:	200001c0 	.word	0x200001c0
 8001254:	20000020 	.word	0x20000020
 8001258:	20000024 	.word	0x20000024
 800125c:	08005134 	.word	0x08005134
 8001260:	200002b4 	.word	0x200002b4

08001264 <fsm_run>:
static void MX_TIM2_Init(void);
static void MX_GPIO_Init(void);
static void MX_TIM3_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void fsm_run(){
 8001264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001266:	b08f      	sub	sp, #60	; 0x3c
 8001268:	af0e      	add	r7, sp, #56	; 0x38
	if (buffer_flag == 1) {
 800126a:	4b2e      	ldr	r3, [pc, #184]	; (8001324 <fsm_run+0xc0>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d102      	bne.n	8001278 <fsm_run+0x14>
		buffer_flag = 0;
 8001272:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <fsm_run+0xc0>)
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
	}

	 fsm_pedestrian_run(huart2);
 8001278:	4e2b      	ldr	r6, [pc, #172]	; (8001328 <fsm_run+0xc4>)
 800127a:	466d      	mov	r5, sp
 800127c:	f106 0410 	add.w	r4, r6, #16
 8001280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001282:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001286:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800128a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800128c:	6823      	ldr	r3, [r4, #0]
 800128e:	602b      	str	r3, [r5, #0]
 8001290:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001294:	f7ff fd32 	bl	8000cfc <fsm_pedestrian_run>
	 fsm_buzzer_run();
 8001298:	f7ff fd88 	bl	8000dac <fsm_buzzer_run>

	if (status == AUTOMATIC_MODE)
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <fsm_run+0xc8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d110      	bne.n	80012c6 <fsm_run+0x62>
		fsm_automatic_run(huart2);
 80012a4:	4e20      	ldr	r6, [pc, #128]	; (8001328 <fsm_run+0xc4>)
 80012a6:	466d      	mov	r5, sp
 80012a8:	f106 0410 	add.w	r4, r6, #16
 80012ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b8:	6823      	ldr	r3, [r4, #0]
 80012ba:	602b      	str	r3, [r5, #0]
 80012bc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80012c0:	f7ff f828 	bl	8000314 <fsm_automatic_run>
 80012c4:	e013      	b.n	80012ee <fsm_run+0x8a>
	else if (status == MANUAL_MODE)
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <fsm_run+0xc8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d10f      	bne.n	80012ee <fsm_run+0x8a>
		fsm_manual_run(huart2);
 80012ce:	4e16      	ldr	r6, [pc, #88]	; (8001328 <fsm_run+0xc4>)
 80012d0:	466d      	mov	r5, sp
 80012d2:	f106 0410 	add.w	r4, r6, #16
 80012d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012e2:	6823      	ldr	r3, [r4, #0]
 80012e4:	602b      	str	r3, [r5, #0]
 80012e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80012ea:	f7ff f9b7 	bl	800065c <fsm_manual_run>

	if (buffer_flag == 1) {
 80012ee:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <fsm_run+0xc0>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d102      	bne.n	80012fc <fsm_run+0x98>
		buffer_flag = 0;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <fsm_run+0xc0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
	}

	display7SegmentLight(huart2);
 80012fc:	4e0a      	ldr	r6, [pc, #40]	; (8001328 <fsm_run+0xc4>)
 80012fe:	466d      	mov	r5, sp
 8001300:	f106 0410 	add.w	r4, r6, #16
 8001304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001306:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800130a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800130c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800130e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	602b      	str	r3, [r5, #0]
 8001314:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001318:	f7ff fef8 	bl	800110c <display7SegmentLight>
}
 800131c:	bf00      	nop
 800131e:	3704      	adds	r7, #4
 8001320:	46bd      	mov	sp, r7
 8001322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001324:	200000ca 	.word	0x200000ca
 8001328:	20000228 	.word	0x20000228
 800132c:	20000004 	.word	0x20000004

08001330 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a13      	ldr	r2, [pc, #76]	; (800138c <HAL_UART_RxCpltCallback+0x5c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d11f      	bne.n	8001382 <HAL_UART_RxCpltCallback+0x52>
		buffer[index_buffer++] = temp;
 8001342:	4b13      	ldr	r3, [pc, #76]	; (8001390 <HAL_UART_RxCpltCallback+0x60>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	b2d1      	uxtb	r1, r2
 800134a:	4a11      	ldr	r2, [pc, #68]	; (8001390 <HAL_UART_RxCpltCallback+0x60>)
 800134c:	7011      	strb	r1, [r2, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <HAL_UART_RxCpltCallback+0x64>)
 8001352:	7819      	ldrb	r1, [r3, #0]
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <HAL_UART_RxCpltCallback+0x68>)
 8001356:	5499      	strb	r1, [r3, r2]
		if (index_buffer == MAX_BUFFER_SIZE)
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <HAL_UART_RxCpltCallback+0x60>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b1e      	cmp	r3, #30
 800135e:	d102      	bne.n	8001366 <HAL_UART_RxCpltCallback+0x36>
			index_buffer = 0;
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_UART_RxCpltCallback+0x60>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <HAL_UART_RxCpltCallback+0x6c>)
 8001368:	2201      	movs	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 800136c:	2332      	movs	r3, #50	; 0x32
 800136e:	2201      	movs	r2, #1
 8001370:	4908      	ldr	r1, [pc, #32]	; (8001394 <HAL_UART_RxCpltCallback+0x64>)
 8001372:	480b      	ldr	r0, [pc, #44]	; (80013a0 <HAL_UART_RxCpltCallback+0x70>)
 8001374:	f002 fcc5 	bl	8003d02 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8001378:	2201      	movs	r2, #1
 800137a:	4906      	ldr	r1, [pc, #24]	; (8001394 <HAL_UART_RxCpltCallback+0x64>)
 800137c:	4808      	ldr	r0, [pc, #32]	; (80013a0 <HAL_UART_RxCpltCallback+0x70>)
 800137e:	f002 fd52 	bl	8003e26 <HAL_UART_Receive_IT>
	}
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40004400 	.word	0x40004400
 8001390:	200000c9 	.word	0x200000c9
 8001394:	200000c8 	.word	0x200000c8
 8001398:	200001a0 	.word	0x200001a0
 800139c:	200000ca 	.word	0x200000ca
 80013a0:	20000228 	.word	0x20000228

080013a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a8:	f000 fd12 	bl	8001dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ac:	f000 f848 	bl	8001440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80013b0:	f000 f888 	bl	80014c4 <MX_TIM2_Init>
  MX_GPIO_Init();
 80013b4:	f000 f972 	bl	800169c <MX_GPIO_Init>
  MX_TIM3_Init();
 80013b8:	f000 f8d0 	bl	800155c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80013bc:	f000 f944 	bl	8001648 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80013c0:	4818      	ldr	r0, [pc, #96]	; (8001424 <main+0x80>)
 80013c2:	f001 fd43 	bl	8002e4c <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart2, &temp, 1);
 80013c6:	2201      	movs	r2, #1
 80013c8:	4917      	ldr	r1, [pc, #92]	; (8001428 <main+0x84>)
 80013ca:	4818      	ldr	r0, [pc, #96]	; (800142c <main+0x88>)
 80013cc:	f002 fd2b 	bl	8003e26 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013d0:	2100      	movs	r1, #0
 80013d2:	4817      	ldr	r0, [pc, #92]	; (8001430 <main+0x8c>)
 80013d4:	f001 fde4 	bl	8002fa0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(0, 1000);
 80013d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013dc:	2000      	movs	r0, #0
 80013de:	f000 fb51 	bl	8001a84 <setTimer>
  setTimer(1, 1000);
 80013e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013e6:	2001      	movs	r0, #1
 80013e8:	f000 fb4c 	bl	8001a84 <setTimer>
  setTimer(2, 1000);
 80013ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013f0:	2002      	movs	r0, #2
 80013f2:	f000 fb47 	bl	8001a84 <setTimer>
  setTimer(3, 1000);
 80013f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013fa:	2003      	movs	r0, #3
 80013fc:	f000 fb42 	bl	8001a84 <setTimer>


	SCH_Add_Task(timerRun, 1, 1);
 8001400:	2201      	movs	r2, #1
 8001402:	2101      	movs	r1, #1
 8001404:	480b      	ldr	r0, [pc, #44]	; (8001434 <main+0x90>)
 8001406:	f000 fa37 	bl	8001878 <SCH_Add_Task>
	SCH_Add_Task(getKeyInput, 1, 1);
 800140a:	2201      	movs	r2, #1
 800140c:	2101      	movs	r1, #1
 800140e:	480a      	ldr	r0, [pc, #40]	; (8001438 <main+0x94>)
 8001410:	f000 fa32 	bl	8001878 <SCH_Add_Task>
	SCH_Add_Task(fsm_run,1, 1);
 8001414:	2201      	movs	r2, #1
 8001416:	2101      	movs	r1, #1
 8001418:	4808      	ldr	r0, [pc, #32]	; (800143c <main+0x98>)
 800141a:	f000 fa2d 	bl	8001878 <SCH_Add_Task>
//		if (buffer_flag == 1) {
//			buffer_flag = 0;
//		}
//
//		display7SegmentLight(huart2);
	  SCH_Dispatch_Tasks();
 800141e:	f000 faaf 	bl	8001980 <SCH_Dispatch_Tasks>
 8001422:	e7fc      	b.n	800141e <main+0x7a>
 8001424:	200001e0 	.word	0x200001e0
 8001428:	200000c8 	.word	0x200000c8
 800142c:	20000228 	.word	0x20000228
 8001430:	20000108 	.word	0x20000108
 8001434:	08001ac5 	.word	0x08001ac5
 8001438:	0800014d 	.word	0x0800014d
 800143c:	08001265 	.word	0x08001265

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b090      	sub	sp, #64	; 0x40
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	f107 0318 	add.w	r3, r7, #24
 800144a:	2228      	movs	r2, #40	; 0x28
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f003 f976 	bl	8004740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001462:	2302      	movs	r3, #2
 8001464:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001466:	2301      	movs	r3, #1
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800146a:	2310      	movs	r3, #16
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800146e:	2302      	movs	r3, #2
 8001470:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001472:	2300      	movs	r3, #0
 8001474:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001476:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800147a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147c:	f107 0318 	add.w	r3, r7, #24
 8001480:	4618      	mov	r0, r3
 8001482:	f001 f879 	bl	8002578 <HAL_RCC_OscConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800148c:	f000 f97e 	bl	800178c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001490:	230f      	movs	r3, #15
 8001492:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001494:	2302      	movs	r3, #2
 8001496:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800149c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2102      	movs	r1, #2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f001 fae4 	bl	8002a78 <HAL_RCC_ClockConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80014b6:	f000 f969 	bl	800178c <Error_Handler>
  }
}
 80014ba:	bf00      	nop
 80014bc:	3740      	adds	r7, #64	; 0x40
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d8:	463b      	mov	r3, r7
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <MX_TIM2_Init+0x94>)
 80014e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <MX_TIM2_Init+0x94>)
 80014ea:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80014ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <MX_TIM2_Init+0x94>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <MX_TIM2_Init+0x94>)
 80014f8:	224f      	movs	r2, #79	; 0x4f
 80014fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <MX_TIM2_Init+0x94>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <MX_TIM2_Init+0x94>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001508:	4813      	ldr	r0, [pc, #76]	; (8001558 <MX_TIM2_Init+0x94>)
 800150a:	f001 fc4f 	bl	8002dac <HAL_TIM_Base_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001514:	f000 f93a 	bl	800178c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	4619      	mov	r1, r3
 8001524:	480c      	ldr	r0, [pc, #48]	; (8001558 <MX_TIM2_Init+0x94>)
 8001526:	f001 ffa3 	bl	8003470 <HAL_TIM_ConfigClockSource>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001530:	f000 f92c 	bl	800178c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800153c:	463b      	mov	r3, r7
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_TIM2_Init+0x94>)
 8001542:	f002 fb21 	bl	8003b88 <HAL_TIMEx_MasterConfigSynchronization>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800154c:	f000 f91e 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200001e0 	.word	0x200001e0

0800155c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08e      	sub	sp, #56	; 0x38
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001570:	f107 0320 	add.w	r3, r7, #32
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
 8001588:	615a      	str	r2, [r3, #20]
 800158a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800158c:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <MX_TIM3_Init+0xe4>)
 800158e:	4a2d      	ldr	r2, [pc, #180]	; (8001644 <MX_TIM3_Init+0xe8>)
 8001590:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001592:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <MX_TIM3_Init+0xe4>)
 8001594:	224f      	movs	r2, #79	; 0x4f
 8001596:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001598:	4b29      	ldr	r3, [pc, #164]	; (8001640 <MX_TIM3_Init+0xe4>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 800159e:	4b28      	ldr	r3, [pc, #160]	; (8001640 <MX_TIM3_Init+0xe4>)
 80015a0:	224f      	movs	r2, #79	; 0x4f
 80015a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a4:	4b26      	ldr	r3, [pc, #152]	; (8001640 <MX_TIM3_Init+0xe4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015aa:	4b25      	ldr	r3, [pc, #148]	; (8001640 <MX_TIM3_Init+0xe4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015b0:	4823      	ldr	r0, [pc, #140]	; (8001640 <MX_TIM3_Init+0xe4>)
 80015b2:	f001 fbfb 	bl	8002dac <HAL_TIM_Base_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80015bc:	f000 f8e6 	bl	800178c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ca:	4619      	mov	r1, r3
 80015cc:	481c      	ldr	r0, [pc, #112]	; (8001640 <MX_TIM3_Init+0xe4>)
 80015ce:	f001 ff4f 	bl	8003470 <HAL_TIM_ConfigClockSource>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80015d8:	f000 f8d8 	bl	800178c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015dc:	4818      	ldr	r0, [pc, #96]	; (8001640 <MX_TIM3_Init+0xe4>)
 80015de:	f001 fc87 	bl	8002ef0 <HAL_TIM_PWM_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80015e8:	f000 f8d0 	bl	800178c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015f4:	f107 0320 	add.w	r3, r7, #32
 80015f8:	4619      	mov	r1, r3
 80015fa:	4811      	ldr	r0, [pc, #68]	; (8001640 <MX_TIM3_Init+0xe4>)
 80015fc:	f002 fac4 	bl	8003b88 <HAL_TIMEx_MasterConfigSynchronization>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001606:	f000 f8c1 	bl	800178c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800160a:	2360      	movs	r3, #96	; 0x60
 800160c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	2200      	movs	r2, #0
 800161e:	4619      	mov	r1, r3
 8001620:	4807      	ldr	r0, [pc, #28]	; (8001640 <MX_TIM3_Init+0xe4>)
 8001622:	f001 fe67 	bl	80032f4 <HAL_TIM_PWM_ConfigChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800162c:	f000 f8ae 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001630:	4803      	ldr	r0, [pc, #12]	; (8001640 <MX_TIM3_Init+0xe4>)
 8001632:	f000 fae1 	bl	8001bf8 <HAL_TIM_MspPostInit>

}
 8001636:	bf00      	nop
 8001638:	3738      	adds	r7, #56	; 0x38
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000108 	.word	0x20000108
 8001644:	40000400 	.word	0x40000400

08001648 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_USART2_UART_Init+0x4c>)
 800164e:	4a12      	ldr	r2, [pc, #72]	; (8001698 <MX_USART2_UART_Init+0x50>)
 8001650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <MX_USART2_UART_Init+0x4c>)
 8001654:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_USART2_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_USART2_UART_Init+0x4c>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <MX_USART2_UART_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_USART2_UART_Init+0x4c>)
 800166e:	220c      	movs	r2, #12
 8001670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <MX_USART2_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MX_USART2_UART_Init+0x4c>)
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800167e:	4805      	ldr	r0, [pc, #20]	; (8001694 <MX_USART2_UART_Init+0x4c>)
 8001680:	f002 faf2 	bl	8003c68 <HAL_UART_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800168a:	f000 f87f 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000228 	.word	0x20000228
 8001698:	40004400 	.word	0x40004400

0800169c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	4b2e      	ldr	r3, [pc, #184]	; (800176c <MX_GPIO_Init+0xd0>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a2d      	ldr	r2, [pc, #180]	; (800176c <MX_GPIO_Init+0xd0>)
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b2b      	ldr	r3, [pc, #172]	; (800176c <MX_GPIO_Init+0xd0>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c8:	4b28      	ldr	r3, [pc, #160]	; (800176c <MX_GPIO_Init+0xd0>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a27      	ldr	r2, [pc, #156]	; (800176c <MX_GPIO_Init+0xd0>)
 80016ce:	f043 0308 	orr.w	r3, r3, #8
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b25      	ldr	r3, [pc, #148]	; (800176c <MX_GPIO_Init+0xd0>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PEDESTRIAN_Pin|LED_2_Pin|LED_4_Pin|LED_3_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80016e6:	4822      	ldr	r0, [pc, #136]	; (8001770 <MX_GPIO_Init+0xd4>)
 80016e8:	f000 ff2d 	bl	8002546 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PEDESTRIAN_Pin|LED_1_Pin, GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80016f2:	4820      	ldr	r0, [pc, #128]	; (8001774 <MX_GPIO_Init+0xd8>)
 80016f4:	f000 ff27 	bl	8002546 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_PEDESTRIAN_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_PEDESTRIAN_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 80016f8:	2313      	movs	r3, #19
 80016fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001700:	2301      	movs	r3, #1
 8001702:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	4619      	mov	r1, r3
 800170a:	481a      	ldr	r0, [pc, #104]	; (8001774 <MX_GPIO_Init+0xd8>)
 800170c:	f000 fd80 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin;
 8001710:	2301      	movs	r3, #1
 8001712:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001718:	2301      	movs	r3, #1
 800171a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_3_GPIO_Port, &GPIO_InitStruct);
 800171c:	f107 0308 	add.w	r3, r7, #8
 8001720:	4619      	mov	r1, r3
 8001722:	4813      	ldr	r0, [pc, #76]	; (8001770 <MX_GPIO_Init+0xd4>)
 8001724:	f000 fd74 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PEDESTRIAN_Pin LED_2_Pin LED_4_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = D6_PEDESTRIAN_Pin|LED_2_Pin|LED_4_Pin|LED_3_Pin;
 8001728:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800172c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2302      	movs	r3, #2
 8001738:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	4619      	mov	r1, r3
 8001740:	480b      	ldr	r0, [pc, #44]	; (8001770 <MX_GPIO_Init+0xd4>)
 8001742:	f000 fd65 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_PEDESTRIAN_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = D7_PEDESTRIAN_Pin|LED_1_Pin;
 8001746:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800174a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2302      	movs	r3, #2
 8001756:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 0308 	add.w	r3, r7, #8
 800175c:	4619      	mov	r1, r3
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_GPIO_Init+0xd8>)
 8001760:	f000 fd56 	bl	8002210 <HAL_GPIO_Init>

}
 8001764:	bf00      	nop
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40021000 	.word	0x40021000
 8001770:	40010c00 	.word	0x40010c00
 8001774:	40010800 	.word	0x40010800

08001778 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
//  timerRun();
//  getKeyInput();
	SCH_Update();
 8001780:	f000 f8d2 	bl	8001928 <SCH_Update>
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001790:	b672      	cpsid	i
}
 8001792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001794:	e7fe      	b.n	8001794 <Error_Handler+0x8>
	...

08001798 <UpdateTaskPosition>:

uint8_t task_position[SCH_MAX_TASKS];
uint8_t lock = UNLOCK;


void UpdateTaskPosition(struct sTask *updateTask){
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	if(updateTask == TasksLinkedList){
 80017a0:	4b34      	ldr	r3, [pc, #208]	; (8001874 <UpdateTaskPosition+0xdc>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d05e      	beq.n	8001868 <UpdateTaskPosition+0xd0>
		return;
	}
	struct sTask *it = TasksLinkedList;
 80017aa:	4b32      	ldr	r3, [pc, #200]	; (8001874 <UpdateTaskPosition+0xdc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	60fb      	str	r3, [r7, #12]
	uint8_t check = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	72fb      	strb	r3, [r7, #11]
	while(it->Delay <= updateTask->Delay){
 80017b4:	e014      	b.n	80017e0 <UpdateTaskPosition+0x48>
		if(it == TasksLinkedList) check += 1;
 80017b6:	4b2f      	ldr	r3, [pc, #188]	; (8001874 <UpdateTaskPosition+0xdc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d102      	bne.n	80017c6 <UpdateTaskPosition+0x2e>
 80017c0:	7afb      	ldrb	r3, [r7, #11]
 80017c2:	3301      	adds	r3, #1
 80017c4:	72fb      	strb	r3, [r7, #11]
		if(check == 2) break;
 80017c6:	7afb      	ldrb	r3, [r7, #11]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d010      	beq.n	80017ee <UpdateTaskPosition+0x56>
		updateTask->Delay -= it->Delay;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	1ad2      	subs	r2, r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	60da      	str	r2, [r3, #12]
		it = it->right;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	60fb      	str	r3, [r7, #12]
	while(it->Delay <= updateTask->Delay){
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	68da      	ldr	r2, [r3, #12]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d9e4      	bls.n	80017b6 <UpdateTaskPosition+0x1e>
 80017ec:	e000      	b.n	80017f0 <UpdateTaskPosition+0x58>
		if(check == 2) break;
 80017ee:	bf00      	nop
	}

	//Insert to appropriate position
	if(updateTask->Delay <= 0) updateTask->RunMe = 1;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <UpdateTaskPosition+0x66>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	761a      	strb	r2, [r3, #24]
	updateTask->right = it;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	605a      	str	r2, [r3, #4]
	updateTask->left = it->left;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	601a      	str	r2, [r3, #0]
	it->left->right = updateTask;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	605a      	str	r2, [r3, #4]
	it->left = updateTask;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	601a      	str	r2, [r3, #0]

	//Update
	// Task is update to lowest
	if(check == 0){
 800181a:	7afb      	ldrb	r3, [r7, #11]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d111      	bne.n	8001844 <UpdateTaskPosition+0xac>
			it->Delay -= updateTask->Delay;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	1ad2      	subs	r2, r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	60da      	str	r2, [r3, #12]
			if(it->Delay <= 0) it->RunMe = 1;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d102      	bne.n	800183c <UpdateTaskPosition+0xa4>
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2201      	movs	r2, #1
 800183a:	761a      	strb	r2, [r3, #24]
			TasksLinkedList = updateTask;
 800183c:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <UpdateTaskPosition+0xdc>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e012      	b.n	800186a <UpdateTaskPosition+0xd2>
	}
	// Task is update to middle
	else if (check == 1){
 8001844:	7afb      	ldrb	r3, [r7, #11]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d10f      	bne.n	800186a <UpdateTaskPosition+0xd2>
			it->Delay -= updateTask->Delay;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	1ad2      	subs	r2, r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	60da      	str	r2, [r3, #12]
			if(it->Delay <= 0) it->RunMe = 1;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d104      	bne.n	800186a <UpdateTaskPosition+0xd2>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2201      	movs	r2, #1
 8001864:	761a      	strb	r2, [r3, #24]
 8001866:	e000      	b.n	800186a <UpdateTaskPosition+0xd2>
		return;
 8001868:	bf00      	nop
	}
	// Do nothing when task is update to highest
}
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	200000d0 	.word	0x200000d0

08001878 <SCH_Add_Task>:

void SCH_Add_Task(void (*funcPointer)(), uint32_t Delay, uint32_t Period){
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
	if(!funcPointer){
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d042      	beq.n	8001910 <SCH_Add_Task+0x98>
		return ;
	}
	uint32_t runnerID = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
	while((runnerID < SCH_MAX_TASKS) && (task_position[runnerID])){
 800188e:	e002      	b.n	8001896 <SCH_Add_Task+0x1e>
		runnerID += 1;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	3301      	adds	r3, #1
 8001894:	617b      	str	r3, [r7, #20]
	while((runnerID < SCH_MAX_TASKS) && (task_position[runnerID])){
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2b27      	cmp	r3, #39	; 0x27
 800189a:	d805      	bhi.n	80018a8 <SCH_Add_Task+0x30>
 800189c:	4a1f      	ldr	r2, [pc, #124]	; (800191c <SCH_Add_Task+0xa4>)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	4413      	add	r3, r2
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f3      	bne.n	8001890 <SCH_Add_Task+0x18>
	}
	if(runnerID == SCH_MAX_TASKS){
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	2b28      	cmp	r3, #40	; 0x28
 80018ac:	d032      	beq.n	8001914 <SCH_Add_Task+0x9c>
		return -1;
	}else task_position[runnerID] = 1;
 80018ae:	4a1b      	ldr	r2, [pc, #108]	; (800191c <SCH_Add_Task+0xa4>)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	4413      	add	r3, r2
 80018b4:	2201      	movs	r2, #1
 80018b6:	701a      	strb	r2, [r3, #0]
	lock = LOCK;
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <SCH_Add_Task+0xa8>)
 80018ba:	2264      	movs	r2, #100	; 0x64
 80018bc:	701a      	strb	r2, [r3, #0]
	struct sTask *curTask = (struct sTask*)malloc(sizeof(struct sTask));
 80018be:	201c      	movs	r0, #28
 80018c0:	f002 ff2e 	bl	8004720 <malloc>
 80018c4:	4603      	mov	r3, r0
 80018c6:	613b      	str	r3, [r7, #16]
	curTask->Delay = Delay;
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	60da      	str	r2, [r3, #12]
	curTask->Period = Period;
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	611a      	str	r2, [r3, #16]
	curTask->funcPointer = funcPointer;
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	609a      	str	r2, [r3, #8]
	curTask->taskID = runnerID;
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	615a      	str	r2, [r3, #20]
	curTask->RunMe = 0;
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	2200      	movs	r2, #0
 80018e4:	761a      	strb	r2, [r3, #24]
	if(TasksLinkedList){
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <SCH_Add_Task+0xac>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <SCH_Add_Task+0x7e>
		UpdateTaskPosition(curTask);
 80018ee:	6938      	ldr	r0, [r7, #16]
 80018f0:	f7ff ff52 	bl	8001798 <UpdateTaskPosition>
 80018f4:	e008      	b.n	8001908 <SCH_Add_Task+0x90>
	}else{
		curTask->left = curTask;
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	601a      	str	r2, [r3, #0]
		curTask->right = curTask;
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	605a      	str	r2, [r3, #4]
		TasksLinkedList = curTask;
 8001902:	4a08      	ldr	r2, [pc, #32]	; (8001924 <SCH_Add_Task+0xac>)
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	6013      	str	r3, [r2, #0]
	}
	lock = UNLOCK;
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <SCH_Add_Task+0xa8>)
 800190a:	22c8      	movs	r2, #200	; 0xc8
 800190c:	701a      	strb	r2, [r3, #0]
 800190e:	e002      	b.n	8001916 <SCH_Add_Task+0x9e>
		return ;
 8001910:	bf00      	nop
 8001912:	e000      	b.n	8001916 <SCH_Add_Task+0x9e>
		return -1;
 8001914:	bf00      	nop
}
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	2000026c 	.word	0x2000026c
 8001920:	2000002c 	.word	0x2000002c
 8001924:	200000d0 	.word	0x200000d0

08001928 <SCH_Update>:

void SCH_Update(){
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
	if((TasksLinkedList) && (!TasksLinkedList->RunMe) && (lock == UNLOCK)){
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <SCH_Update+0x50>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01d      	beq.n	8001970 <SCH_Update+0x48>
 8001934:	4b10      	ldr	r3, [pc, #64]	; (8001978 <SCH_Update+0x50>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	7e1b      	ldrb	r3, [r3, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d118      	bne.n	8001970 <SCH_Update+0x48>
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <SCH_Update+0x54>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2bc8      	cmp	r3, #200	; 0xc8
 8001944:	d114      	bne.n	8001970 <SCH_Update+0x48>
		if(TasksLinkedList->Delay > 0) TasksLinkedList->Delay -= 1;
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <SCH_Update+0x50>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d006      	beq.n	800195e <SCH_Update+0x36>
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <SCH_Update+0x50>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <SCH_Update+0x50>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	3a01      	subs	r2, #1
 800195c:	60da      	str	r2, [r3, #12]
		if(TasksLinkedList->Delay <= 0) TasksLinkedList->RunMe = 1;
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <SCH_Update+0x50>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d103      	bne.n	8001970 <SCH_Update+0x48>
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <SCH_Update+0x50>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2201      	movs	r2, #1
 800196e:	761a      	strb	r2, [r3, #24]
	}
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	200000d0 	.word	0x200000d0
 800197c:	2000002c 	.word	0x2000002c

08001980 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(){
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
	lock = LOCK;
 8001986:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <SCH_Dispatch_Tasks+0x9c>)
 8001988:	2264      	movs	r2, #100	; 0x64
 800198a:	701a      	strb	r2, [r3, #0]
	while((TasksLinkedList) && (TasksLinkedList->RunMe)){
 800198c:	e036      	b.n	80019fc <SCH_Dispatch_Tasks+0x7c>
		(*TasksLinkedList->funcPointer)();
 800198e:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <SCH_Dispatch_Tasks+0xa0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	4798      	blx	r3
//		One shot task
		if(TasksLinkedList->Period == 0){
 8001996:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <SCH_Dispatch_Tasks+0xa0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10d      	bne.n	80019bc <SCH_Dispatch_Tasks+0x3c>
			struct sTask *toDelete = TasksLinkedList;
 80019a0:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <SCH_Dispatch_Tasks+0xa0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	603b      	str	r3, [r7, #0]
			TasksLinkedList = TasksLinkedList->right;
 80019a6:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <SCH_Dispatch_Tasks+0xa0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	4a1c      	ldr	r2, [pc, #112]	; (8001a20 <SCH_Dispatch_Tasks+0xa0>)
 80019ae:	6013      	str	r3, [r2, #0]
			SCH_Delete_Task(toDelete->taskID);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 f835 	bl	8001a24 <SCH_Delete_Task>
 80019ba:	e01f      	b.n	80019fc <SCH_Dispatch_Tasks+0x7c>
		}else{
//		Period task
			struct sTask *toFind = TasksLinkedList;
 80019bc:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <SCH_Dispatch_Tasks+0xa0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	607b      	str	r3, [r7, #4]
			TasksLinkedList->right->left = TasksLinkedList->left;
 80019c2:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <SCH_Dispatch_Tasks+0xa0>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <SCH_Dispatch_Tasks+0xa0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	601a      	str	r2, [r3, #0]
			TasksLinkedList->left->right = TasksLinkedList->right;
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <SCH_Dispatch_Tasks+0xa0>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <SCH_Dispatch_Tasks+0xa0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6852      	ldr	r2, [r2, #4]
 80019dc:	605a      	str	r2, [r3, #4]
			TasksLinkedList = TasksLinkedList->right;
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <SCH_Dispatch_Tasks+0xa0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <SCH_Dispatch_Tasks+0xa0>)
 80019e6:	6013      	str	r3, [r2, #0]
			toFind->RunMe = 0;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	761a      	strb	r2, [r3, #24]
			toFind->Delay = toFind->Period;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691a      	ldr	r2, [r3, #16]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	60da      	str	r2, [r3, #12]
			UpdateTaskPosition(toFind);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff fece 	bl	8001798 <UpdateTaskPosition>
	while((TasksLinkedList) && (TasksLinkedList->RunMe)){
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <SCH_Dispatch_Tasks+0xa0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <SCH_Dispatch_Tasks+0x8e>
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <SCH_Dispatch_Tasks+0xa0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	7e1b      	ldrb	r3, [r3, #24]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1bf      	bne.n	800198e <SCH_Dispatch_Tasks+0xe>
		}
	}
	lock = UNLOCK;
 8001a0e:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <SCH_Dispatch_Tasks+0x9c>)
 8001a10:	22c8      	movs	r2, #200	; 0xc8
 8001a12:	701a      	strb	r2, [r3, #0]
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	2000002c 	.word	0x2000002c
 8001a20:	200000d0 	.word	0x200000d0

08001a24 <SCH_Delete_Task>:

void SCH_Delete_Task(uint32_t index){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	if(task_position[index]){
 8001a2c:	4a13      	ldr	r2, [pc, #76]	; (8001a7c <SCH_Delete_Task+0x58>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d01d      	beq.n	8001a74 <SCH_Delete_Task+0x50>
		task_position[index] = 0;
 8001a38:	4a10      	ldr	r2, [pc, #64]	; (8001a7c <SCH_Delete_Task+0x58>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
		struct sTask *it = TasksLinkedList;
 8001a42:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <SCH_Delete_Task+0x5c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	60fb      	str	r3, [r7, #12]
		while(it->taskID != index){
 8001a48:	e002      	b.n	8001a50 <SCH_Delete_Task+0x2c>
			it = it->right;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	60fb      	str	r3, [r7, #12]
		while(it->taskID != index){
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d1f7      	bne.n	8001a4a <SCH_Delete_Task+0x26>
		}
		it->right->left = it->left;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	601a      	str	r2, [r3, #0]
		it->left->right = it->right;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	6852      	ldr	r2, [r2, #4]
 8001a6c:	605a      	str	r2, [r3, #4]
		free(it);
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f002 fe5e 	bl	8004730 <free>
	}
}
 8001a74:	bf00      	nop
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	2000026c 	.word	0x2000026c
 8001a80:	200000d0 	.word	0x200000d0

08001a84 <setTimer>:
#define TIMER_CYCLE 10

int timer_flag[NO_TIMERS + 1];
int timer_counter[NO_TIMERS + 1];

void setTimer(int flagNo, int duration) {
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
	timer_counter[flagNo] = duration / TIMER_CYCLE;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	4a09      	ldr	r2, [pc, #36]	; (8001ab8 <setTimer+0x34>)
 8001a92:	fb82 1203 	smull	r1, r2, r2, r3
 8001a96:	1092      	asrs	r2, r2, #2
 8001a98:	17db      	asrs	r3, r3, #31
 8001a9a:	1ad2      	subs	r2, r2, r3
 8001a9c:	4907      	ldr	r1, [pc, #28]	; (8001abc <setTimer+0x38>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[flagNo] = 0;
 8001aa4:	4a06      	ldr	r2, [pc, #24]	; (8001ac0 <setTimer+0x3c>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	66666667 	.word	0x66666667
 8001abc:	20000294 	.word	0x20000294
 8001ac0:	200002b4 	.word	0x200002b4

08001ac4 <timerRun>:

void timerRun() {
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
	for (int flagNo = 0; flagNo < NO_TIMERS; flagNo++) {
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	e01c      	b.n	8001b0a <timerRun+0x46>
		if (timer_counter[flagNo] > 0) {
 8001ad0:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <timerRun+0x58>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	dd13      	ble.n	8001b04 <timerRun+0x40>
			timer_counter[flagNo]--;
 8001adc:	4a0f      	ldr	r2, [pc, #60]	; (8001b1c <timerRun+0x58>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae4:	1e5a      	subs	r2, r3, #1
 8001ae6:	490d      	ldr	r1, [pc, #52]	; (8001b1c <timerRun+0x58>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[flagNo] <= 0) {
 8001aee:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <timerRun+0x58>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	dc04      	bgt.n	8001b04 <timerRun+0x40>
				timer_flag[flagNo] = 1;
 8001afa:	4a09      	ldr	r2, [pc, #36]	; (8001b20 <timerRun+0x5c>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2101      	movs	r1, #1
 8001b00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int flagNo = 0; flagNo < NO_TIMERS; flagNo++) {
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3301      	adds	r3, #1
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b06      	cmp	r3, #6
 8001b0e:	dddf      	ble.n	8001ad0 <timerRun+0xc>
			}
		}
	}
}
 8001b10:	bf00      	nop
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	20000294 	.word	0x20000294
 8001b20:	200002b4 	.word	0x200002b4

08001b24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <HAL_MspInit+0x5c>)
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	4a14      	ldr	r2, [pc, #80]	; (8001b80 <HAL_MspInit+0x5c>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6193      	str	r3, [r2, #24]
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_MspInit+0x5c>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <HAL_MspInit+0x5c>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	4a0e      	ldr	r2, [pc, #56]	; (8001b80 <HAL_MspInit+0x5c>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	61d3      	str	r3, [r2, #28]
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <HAL_MspInit+0x5c>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <HAL_MspInit+0x60>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <HAL_MspInit+0x60>)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40010000 	.word	0x40010000

08001b88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b98:	d114      	bne.n	8001bc4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <HAL_TIM_Base_MspInit+0x68>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <HAL_TIM_Base_MspInit+0x68>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	61d3      	str	r3, [r2, #28]
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_TIM_Base_MspInit+0x68>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	201c      	movs	r0, #28
 8001bb8:	f000 fa43 	bl	8002042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bbc:	201c      	movs	r0, #28
 8001bbe:	f000 fa5c 	bl	800207a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bc2:	e010      	b.n	8001be6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <HAL_TIM_Base_MspInit+0x6c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d10b      	bne.n	8001be6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_TIM_Base_MspInit+0x68>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <HAL_TIM_Base_MspInit+0x68>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	61d3      	str	r3, [r2, #28]
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_TIM_Base_MspInit+0x68>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	68bb      	ldr	r3, [r7, #8]
}
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40000400 	.word	0x40000400

08001bf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0310 	add.w	r3, r7, #16
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a0f      	ldr	r2, [pc, #60]	; (8001c50 <HAL_TIM_MspPostInit+0x58>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d117      	bne.n	8001c48 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c18:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <HAL_TIM_MspPostInit+0x5c>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	; (8001c54 <HAL_TIM_MspPostInit+0x5c>)
 8001c1e:	f043 0304 	orr.w	r3, r3, #4
 8001c22:	6193      	str	r3, [r2, #24]
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_TIM_MspPostInit+0x5c>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c30:	2340      	movs	r3, #64	; 0x40
 8001c32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	4619      	mov	r1, r3
 8001c42:	4805      	ldr	r0, [pc, #20]	; (8001c58 <HAL_TIM_MspPostInit+0x60>)
 8001c44:	f000 fae4 	bl	8002210 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c48:	bf00      	nop
 8001c4a:	3720      	adds	r7, #32
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40000400 	.word	0x40000400
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40010800 	.word	0x40010800

08001c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0310 	add.w	r3, r7, #16
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a1f      	ldr	r2, [pc, #124]	; (8001cf4 <HAL_UART_MspInit+0x98>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d137      	bne.n	8001cec <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c7c:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <HAL_UART_MspInit+0x9c>)
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	4a1d      	ldr	r2, [pc, #116]	; (8001cf8 <HAL_UART_MspInit+0x9c>)
 8001c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c86:	61d3      	str	r3, [r2, #28]
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <HAL_UART_MspInit+0x9c>)
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c94:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <HAL_UART_MspInit+0x9c>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a17      	ldr	r2, [pc, #92]	; (8001cf8 <HAL_UART_MspInit+0x9c>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	6193      	str	r3, [r2, #24]
 8001ca0:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <HAL_UART_MspInit+0x9c>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cac:	2304      	movs	r3, #4
 8001cae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	480f      	ldr	r0, [pc, #60]	; (8001cfc <HAL_UART_MspInit+0xa0>)
 8001cc0:	f000 faa6 	bl	8002210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cc4:	2308      	movs	r3, #8
 8001cc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4809      	ldr	r0, [pc, #36]	; (8001cfc <HAL_UART_MspInit+0xa0>)
 8001cd8:	f000 fa9a 	bl	8002210 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	2026      	movs	r0, #38	; 0x26
 8001ce2:	f000 f9ae 	bl	8002042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ce6:	2026      	movs	r0, #38	; 0x26
 8001ce8:	f000 f9c7 	bl	800207a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cec:	bf00      	nop
 8001cee:	3720      	adds	r7, #32
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40004400 	.word	0x40004400
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40010800 	.word	0x40010800

08001d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <NMI_Handler+0x4>

08001d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <HardFault_Handler+0x4>

08001d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <MemManage_Handler+0x4>

08001d12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d16:	e7fe      	b.n	8001d16 <BusFault_Handler+0x4>

08001d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <UsageFault_Handler+0x4>

08001d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr

08001d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr

08001d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr

08001d42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d46:	f000 f889 	bl	8001e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <TIM2_IRQHandler+0x10>)
 8001d56:	f001 f9c5 	bl	80030e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200001e0 	.word	0x200001e0

08001d64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <USART2_IRQHandler+0x10>)
 8001d6a:	f002 f88d 	bl	8003e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000228 	.word	0x20000228

08001d78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d84:	480c      	ldr	r0, [pc, #48]	; (8001db8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d86:	490d      	ldr	r1, [pc, #52]	; (8001dbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d88:	4a0d      	ldr	r2, [pc, #52]	; (8001dc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d8c:	e002      	b.n	8001d94 <LoopCopyDataInit>

08001d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d92:	3304      	adds	r3, #4

08001d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d98:	d3f9      	bcc.n	8001d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d9c:	4c0a      	ldr	r4, [pc, #40]	; (8001dc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da0:	e001      	b.n	8001da6 <LoopFillZerobss>

08001da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da4:	3204      	adds	r2, #4

08001da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da8:	d3fb      	bcc.n	8001da2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001daa:	f7ff ffe5 	bl	8001d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dae:	f002 fc93 	bl	80046d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001db2:	f7ff faf7 	bl	80013a4 <main>
  bx lr
 8001db6:	4770      	bx	lr
  ldr r0, =_sdata
 8001db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dbc:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001dc0:	080051b8 	.word	0x080051b8
  ldr r2, =_sbss
 8001dc4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001dc8:	200002e8 	.word	0x200002e8

08001dcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dcc:	e7fe      	b.n	8001dcc <ADC1_2_IRQHandler>
	...

08001dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <HAL_Init+0x28>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a07      	ldr	r2, [pc, #28]	; (8001df8 <HAL_Init+0x28>)
 8001dda:	f043 0310 	orr.w	r3, r3, #16
 8001dde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de0:	2003      	movs	r0, #3
 8001de2:	f000 f923 	bl	800202c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001de6:	200f      	movs	r0, #15
 8001de8:	f000 f808 	bl	8001dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dec:	f7ff fe9a 	bl	8001b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40022000 	.word	0x40022000

08001dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e04:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_InitTick+0x54>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_InitTick+0x58>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 f93b 	bl	8002096 <HAL_SYSTICK_Config>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e00e      	b.n	8001e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b0f      	cmp	r3, #15
 8001e2e:	d80a      	bhi.n	8001e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e30:	2200      	movs	r2, #0
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	f04f 30ff 	mov.w	r0, #4294967295
 8001e38:	f000 f903 	bl	8002042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e3c:	4a06      	ldr	r2, [pc, #24]	; (8001e58 <HAL_InitTick+0x5c>)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	e000      	b.n	8001e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000030 	.word	0x20000030
 8001e54:	20000038 	.word	0x20000038
 8001e58:	20000034 	.word	0x20000034

08001e5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <HAL_IncTick+0x1c>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_IncTick+0x20>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	4a03      	ldr	r2, [pc, #12]	; (8001e7c <HAL_IncTick+0x20>)
 8001e6e:	6013      	str	r3, [r2, #0]
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	20000038 	.word	0x20000038
 8001e7c:	200002d4 	.word	0x200002d4

08001e80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return uwTick;
 8001e84:	4b02      	ldr	r3, [pc, #8]	; (8001e90 <HAL_GetTick+0x10>)
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	200002d4 	.word	0x200002d4

08001e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec6:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	60d3      	str	r3, [r2, #12]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	f003 0307 	and.w	r3, r3, #7
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	db0b      	blt.n	8001f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f003 021f 	and.w	r2, r3, #31
 8001f10:	4906      	ldr	r1, [pc, #24]	; (8001f2c <__NVIC_EnableIRQ+0x34>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2001      	movs	r0, #1
 8001f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	e000e100 	.word	0xe000e100

08001f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	db0a      	blt.n	8001f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	490c      	ldr	r1, [pc, #48]	; (8001f7c <__NVIC_SetPriority+0x4c>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	0112      	lsls	r2, r2, #4
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	440b      	add	r3, r1
 8001f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f58:	e00a      	b.n	8001f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4908      	ldr	r1, [pc, #32]	; (8001f80 <__NVIC_SetPriority+0x50>)
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	3b04      	subs	r3, #4
 8001f68:	0112      	lsls	r2, r2, #4
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	761a      	strb	r2, [r3, #24]
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000e100 	.word	0xe000e100
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b089      	sub	sp, #36	; 0x24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f1c3 0307 	rsb	r3, r3, #7
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	bf28      	it	cs
 8001fa2:	2304      	movcs	r3, #4
 8001fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	2b06      	cmp	r3, #6
 8001fac:	d902      	bls.n	8001fb4 <NVIC_EncodePriority+0x30>
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3b03      	subs	r3, #3
 8001fb2:	e000      	b.n	8001fb6 <NVIC_EncodePriority+0x32>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd6:	43d9      	mvns	r1, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fdc:	4313      	orrs	r3, r2
         );
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3724      	adds	r7, #36	; 0x24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff8:	d301      	bcc.n	8001ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e00f      	b.n	800201e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <SysTick_Config+0x40>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002006:	210f      	movs	r1, #15
 8002008:	f04f 30ff 	mov.w	r0, #4294967295
 800200c:	f7ff ff90 	bl	8001f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <SysTick_Config+0x40>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002016:	4b04      	ldr	r3, [pc, #16]	; (8002028 <SysTick_Config+0x40>)
 8002018:	2207      	movs	r2, #7
 800201a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	e000e010 	.word	0xe000e010

0800202c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ff2d 	bl	8001e94 <__NVIC_SetPriorityGrouping>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002042:	b580      	push	{r7, lr}
 8002044:	b086      	sub	sp, #24
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002054:	f7ff ff42 	bl	8001edc <__NVIC_GetPriorityGrouping>
 8002058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	6978      	ldr	r0, [r7, #20]
 8002060:	f7ff ff90 	bl	8001f84 <NVIC_EncodePriority>
 8002064:	4602      	mov	r2, r0
 8002066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff5f 	bl	8001f30 <__NVIC_SetPriority>
}
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff35 	bl	8001ef8 <__NVIC_EnableIRQ>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ffa2 	bl	8001fe8 <SysTick_Config>
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d008      	beq.n	80020d6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2204      	movs	r2, #4
 80020c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e020      	b.n	8002118 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 020e 	bic.w	r2, r2, #14
 80020e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0201 	bic.w	r2, r2, #1
 80020f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fe:	2101      	movs	r1, #1
 8002100:	fa01 f202 	lsl.w	r2, r1, r2
 8002104:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002116:	7bfb      	ldrb	r3, [r7, #15]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
	...

08002124 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002136:	2b02      	cmp	r3, #2
 8002138:	d005      	beq.n	8002146 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2204      	movs	r2, #4
 800213e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
 8002144:	e051      	b.n	80021ea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 020e 	bic.w	r2, r2, #14
 8002154:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0201 	bic.w	r2, r2, #1
 8002164:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a22      	ldr	r2, [pc, #136]	; (80021f4 <HAL_DMA_Abort_IT+0xd0>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d029      	beq.n	80021c4 <HAL_DMA_Abort_IT+0xa0>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a20      	ldr	r2, [pc, #128]	; (80021f8 <HAL_DMA_Abort_IT+0xd4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d022      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x9c>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1f      	ldr	r2, [pc, #124]	; (80021fc <HAL_DMA_Abort_IT+0xd8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d01a      	beq.n	80021ba <HAL_DMA_Abort_IT+0x96>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1d      	ldr	r2, [pc, #116]	; (8002200 <HAL_DMA_Abort_IT+0xdc>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d012      	beq.n	80021b4 <HAL_DMA_Abort_IT+0x90>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a1c      	ldr	r2, [pc, #112]	; (8002204 <HAL_DMA_Abort_IT+0xe0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d00a      	beq.n	80021ae <HAL_DMA_Abort_IT+0x8a>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a1a      	ldr	r2, [pc, #104]	; (8002208 <HAL_DMA_Abort_IT+0xe4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d102      	bne.n	80021a8 <HAL_DMA_Abort_IT+0x84>
 80021a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021a6:	e00e      	b.n	80021c6 <HAL_DMA_Abort_IT+0xa2>
 80021a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021ac:	e00b      	b.n	80021c6 <HAL_DMA_Abort_IT+0xa2>
 80021ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021b2:	e008      	b.n	80021c6 <HAL_DMA_Abort_IT+0xa2>
 80021b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b8:	e005      	b.n	80021c6 <HAL_DMA_Abort_IT+0xa2>
 80021ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021be:	e002      	b.n	80021c6 <HAL_DMA_Abort_IT+0xa2>
 80021c0:	2310      	movs	r3, #16
 80021c2:	e000      	b.n	80021c6 <HAL_DMA_Abort_IT+0xa2>
 80021c4:	2301      	movs	r3, #1
 80021c6:	4a11      	ldr	r2, [pc, #68]	; (800220c <HAL_DMA_Abort_IT+0xe8>)
 80021c8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	4798      	blx	r3
    } 
  }
  return status;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40020008 	.word	0x40020008
 80021f8:	4002001c 	.word	0x4002001c
 80021fc:	40020030 	.word	0x40020030
 8002200:	40020044 	.word	0x40020044
 8002204:	40020058 	.word	0x40020058
 8002208:	4002006c 	.word	0x4002006c
 800220c:	40020000 	.word	0x40020000

08002210 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002210:	b480      	push	{r7}
 8002212:	b08b      	sub	sp, #44	; 0x2c
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800221e:	2300      	movs	r3, #0
 8002220:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002222:	e169      	b.n	80024f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002224:	2201      	movs	r2, #1
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	429a      	cmp	r2, r3
 800223e:	f040 8158 	bne.w	80024f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4a9a      	ldr	r2, [pc, #616]	; (80024b0 <HAL_GPIO_Init+0x2a0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d05e      	beq.n	800230a <HAL_GPIO_Init+0xfa>
 800224c:	4a98      	ldr	r2, [pc, #608]	; (80024b0 <HAL_GPIO_Init+0x2a0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d875      	bhi.n	800233e <HAL_GPIO_Init+0x12e>
 8002252:	4a98      	ldr	r2, [pc, #608]	; (80024b4 <HAL_GPIO_Init+0x2a4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d058      	beq.n	800230a <HAL_GPIO_Init+0xfa>
 8002258:	4a96      	ldr	r2, [pc, #600]	; (80024b4 <HAL_GPIO_Init+0x2a4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d86f      	bhi.n	800233e <HAL_GPIO_Init+0x12e>
 800225e:	4a96      	ldr	r2, [pc, #600]	; (80024b8 <HAL_GPIO_Init+0x2a8>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d052      	beq.n	800230a <HAL_GPIO_Init+0xfa>
 8002264:	4a94      	ldr	r2, [pc, #592]	; (80024b8 <HAL_GPIO_Init+0x2a8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d869      	bhi.n	800233e <HAL_GPIO_Init+0x12e>
 800226a:	4a94      	ldr	r2, [pc, #592]	; (80024bc <HAL_GPIO_Init+0x2ac>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d04c      	beq.n	800230a <HAL_GPIO_Init+0xfa>
 8002270:	4a92      	ldr	r2, [pc, #584]	; (80024bc <HAL_GPIO_Init+0x2ac>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d863      	bhi.n	800233e <HAL_GPIO_Init+0x12e>
 8002276:	4a92      	ldr	r2, [pc, #584]	; (80024c0 <HAL_GPIO_Init+0x2b0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d046      	beq.n	800230a <HAL_GPIO_Init+0xfa>
 800227c:	4a90      	ldr	r2, [pc, #576]	; (80024c0 <HAL_GPIO_Init+0x2b0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d85d      	bhi.n	800233e <HAL_GPIO_Init+0x12e>
 8002282:	2b12      	cmp	r3, #18
 8002284:	d82a      	bhi.n	80022dc <HAL_GPIO_Init+0xcc>
 8002286:	2b12      	cmp	r3, #18
 8002288:	d859      	bhi.n	800233e <HAL_GPIO_Init+0x12e>
 800228a:	a201      	add	r2, pc, #4	; (adr r2, 8002290 <HAL_GPIO_Init+0x80>)
 800228c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002290:	0800230b 	.word	0x0800230b
 8002294:	080022e5 	.word	0x080022e5
 8002298:	080022f7 	.word	0x080022f7
 800229c:	08002339 	.word	0x08002339
 80022a0:	0800233f 	.word	0x0800233f
 80022a4:	0800233f 	.word	0x0800233f
 80022a8:	0800233f 	.word	0x0800233f
 80022ac:	0800233f 	.word	0x0800233f
 80022b0:	0800233f 	.word	0x0800233f
 80022b4:	0800233f 	.word	0x0800233f
 80022b8:	0800233f 	.word	0x0800233f
 80022bc:	0800233f 	.word	0x0800233f
 80022c0:	0800233f 	.word	0x0800233f
 80022c4:	0800233f 	.word	0x0800233f
 80022c8:	0800233f 	.word	0x0800233f
 80022cc:	0800233f 	.word	0x0800233f
 80022d0:	0800233f 	.word	0x0800233f
 80022d4:	080022ed 	.word	0x080022ed
 80022d8:	08002301 	.word	0x08002301
 80022dc:	4a79      	ldr	r2, [pc, #484]	; (80024c4 <HAL_GPIO_Init+0x2b4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d013      	beq.n	800230a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022e2:	e02c      	b.n	800233e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	623b      	str	r3, [r7, #32]
          break;
 80022ea:	e029      	b.n	8002340 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	3304      	adds	r3, #4
 80022f2:	623b      	str	r3, [r7, #32]
          break;
 80022f4:	e024      	b.n	8002340 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	3308      	adds	r3, #8
 80022fc:	623b      	str	r3, [r7, #32]
          break;
 80022fe:	e01f      	b.n	8002340 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	330c      	adds	r3, #12
 8002306:	623b      	str	r3, [r7, #32]
          break;
 8002308:	e01a      	b.n	8002340 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d102      	bne.n	8002318 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002312:	2304      	movs	r3, #4
 8002314:	623b      	str	r3, [r7, #32]
          break;
 8002316:	e013      	b.n	8002340 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d105      	bne.n	800232c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002320:	2308      	movs	r3, #8
 8002322:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	611a      	str	r2, [r3, #16]
          break;
 800232a:	e009      	b.n	8002340 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800232c:	2308      	movs	r3, #8
 800232e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	615a      	str	r2, [r3, #20]
          break;
 8002336:	e003      	b.n	8002340 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002338:	2300      	movs	r3, #0
 800233a:	623b      	str	r3, [r7, #32]
          break;
 800233c:	e000      	b.n	8002340 <HAL_GPIO_Init+0x130>
          break;
 800233e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	2bff      	cmp	r3, #255	; 0xff
 8002344:	d801      	bhi.n	800234a <HAL_GPIO_Init+0x13a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	e001      	b.n	800234e <HAL_GPIO_Init+0x13e>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3304      	adds	r3, #4
 800234e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	2bff      	cmp	r3, #255	; 0xff
 8002354:	d802      	bhi.n	800235c <HAL_GPIO_Init+0x14c>
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	e002      	b.n	8002362 <HAL_GPIO_Init+0x152>
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	3b08      	subs	r3, #8
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	210f      	movs	r1, #15
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	fa01 f303 	lsl.w	r3, r1, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	401a      	ands	r2, r3
 8002374:	6a39      	ldr	r1, [r7, #32]
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	431a      	orrs	r2, r3
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 80b1 	beq.w	80024f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002390:	4b4d      	ldr	r3, [pc, #308]	; (80024c8 <HAL_GPIO_Init+0x2b8>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	4a4c      	ldr	r2, [pc, #304]	; (80024c8 <HAL_GPIO_Init+0x2b8>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6193      	str	r3, [r2, #24]
 800239c:	4b4a      	ldr	r3, [pc, #296]	; (80024c8 <HAL_GPIO_Init+0x2b8>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023a8:	4a48      	ldr	r2, [pc, #288]	; (80024cc <HAL_GPIO_Init+0x2bc>)
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	089b      	lsrs	r3, r3, #2
 80023ae:	3302      	adds	r3, #2
 80023b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	220f      	movs	r2, #15
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4013      	ands	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a40      	ldr	r2, [pc, #256]	; (80024d0 <HAL_GPIO_Init+0x2c0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d013      	beq.n	80023fc <HAL_GPIO_Init+0x1ec>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a3f      	ldr	r2, [pc, #252]	; (80024d4 <HAL_GPIO_Init+0x2c4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d00d      	beq.n	80023f8 <HAL_GPIO_Init+0x1e8>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a3e      	ldr	r2, [pc, #248]	; (80024d8 <HAL_GPIO_Init+0x2c8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d007      	beq.n	80023f4 <HAL_GPIO_Init+0x1e4>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a3d      	ldr	r2, [pc, #244]	; (80024dc <HAL_GPIO_Init+0x2cc>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d101      	bne.n	80023f0 <HAL_GPIO_Init+0x1e0>
 80023ec:	2303      	movs	r3, #3
 80023ee:	e006      	b.n	80023fe <HAL_GPIO_Init+0x1ee>
 80023f0:	2304      	movs	r3, #4
 80023f2:	e004      	b.n	80023fe <HAL_GPIO_Init+0x1ee>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e002      	b.n	80023fe <HAL_GPIO_Init+0x1ee>
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <HAL_GPIO_Init+0x1ee>
 80023fc:	2300      	movs	r3, #0
 80023fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002400:	f002 0203 	and.w	r2, r2, #3
 8002404:	0092      	lsls	r2, r2, #2
 8002406:	4093      	lsls	r3, r2
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800240e:	492f      	ldr	r1, [pc, #188]	; (80024cc <HAL_GPIO_Init+0x2bc>)
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	089b      	lsrs	r3, r3, #2
 8002414:	3302      	adds	r3, #2
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d006      	beq.n	8002436 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002428:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	492c      	ldr	r1, [pc, #176]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	600b      	str	r3, [r1, #0]
 8002434:	e006      	b.n	8002444 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002436:	4b2a      	ldr	r3, [pc, #168]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	43db      	mvns	r3, r3
 800243e:	4928      	ldr	r1, [pc, #160]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002440:	4013      	ands	r3, r2
 8002442:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d006      	beq.n	800245e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002450:	4b23      	ldr	r3, [pc, #140]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	4922      	ldr	r1, [pc, #136]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]
 800245c:	e006      	b.n	800246c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800245e:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	43db      	mvns	r3, r3
 8002466:	491e      	ldr	r1, [pc, #120]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002468:	4013      	ands	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d006      	beq.n	8002486 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	4918      	ldr	r1, [pc, #96]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	608b      	str	r3, [r1, #8]
 8002484:	e006      	b.n	8002494 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002486:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	43db      	mvns	r3, r3
 800248e:	4914      	ldr	r1, [pc, #80]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002490:	4013      	ands	r3, r2
 8002492:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d021      	beq.n	80024e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024a0:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	490e      	ldr	r1, [pc, #56]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60cb      	str	r3, [r1, #12]
 80024ac:	e021      	b.n	80024f2 <HAL_GPIO_Init+0x2e2>
 80024ae:	bf00      	nop
 80024b0:	10320000 	.word	0x10320000
 80024b4:	10310000 	.word	0x10310000
 80024b8:	10220000 	.word	0x10220000
 80024bc:	10210000 	.word	0x10210000
 80024c0:	10120000 	.word	0x10120000
 80024c4:	10110000 	.word	0x10110000
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40010000 	.word	0x40010000
 80024d0:	40010800 	.word	0x40010800
 80024d4:	40010c00 	.word	0x40010c00
 80024d8:	40011000 	.word	0x40011000
 80024dc:	40011400 	.word	0x40011400
 80024e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_GPIO_Init+0x304>)
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	4909      	ldr	r1, [pc, #36]	; (8002514 <HAL_GPIO_Init+0x304>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	3301      	adds	r3, #1
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	f47f ae8e 	bne.w	8002224 <HAL_GPIO_Init+0x14>
  }
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	372c      	adds	r7, #44	; 0x2c
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	40010400 	.word	0x40010400

08002518 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	887b      	ldrh	r3, [r7, #2]
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
 8002534:	e001      	b.n	800253a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800253a:	7bfb      	ldrb	r3, [r7, #15]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	460b      	mov	r3, r1
 8002550:	807b      	strh	r3, [r7, #2]
 8002552:	4613      	mov	r3, r2
 8002554:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002556:	787b      	ldrb	r3, [r7, #1]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800255c:	887a      	ldrh	r2, [r7, #2]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002562:	e003      	b.n	800256c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002564:	887b      	ldrh	r3, [r7, #2]
 8002566:	041a      	lsls	r2, r3, #16
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	611a      	str	r2, [r3, #16]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
	...

08002578 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e26c      	b.n	8002a64 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 8087 	beq.w	80026a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002598:	4b92      	ldr	r3, [pc, #584]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 030c 	and.w	r3, r3, #12
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d00c      	beq.n	80025be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025a4:	4b8f      	ldr	r3, [pc, #572]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d112      	bne.n	80025d6 <HAL_RCC_OscConfig+0x5e>
 80025b0:	4b8c      	ldr	r3, [pc, #560]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025bc:	d10b      	bne.n	80025d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025be:	4b89      	ldr	r3, [pc, #548]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d06c      	beq.n	80026a4 <HAL_RCC_OscConfig+0x12c>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d168      	bne.n	80026a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e246      	b.n	8002a64 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025de:	d106      	bne.n	80025ee <HAL_RCC_OscConfig+0x76>
 80025e0:	4b80      	ldr	r3, [pc, #512]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a7f      	ldr	r2, [pc, #508]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 80025e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	e02e      	b.n	800264c <HAL_RCC_OscConfig+0xd4>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10c      	bne.n	8002610 <HAL_RCC_OscConfig+0x98>
 80025f6:	4b7b      	ldr	r3, [pc, #492]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a7a      	ldr	r2, [pc, #488]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4b78      	ldr	r3, [pc, #480]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a77      	ldr	r2, [pc, #476]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 8002608:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e01d      	b.n	800264c <HAL_RCC_OscConfig+0xd4>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0xbc>
 800261a:	4b72      	ldr	r3, [pc, #456]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a71      	ldr	r2, [pc, #452]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 8002620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	4b6f      	ldr	r3, [pc, #444]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a6e      	ldr	r2, [pc, #440]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 800262c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e00b      	b.n	800264c <HAL_RCC_OscConfig+0xd4>
 8002634:	4b6b      	ldr	r3, [pc, #428]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a6a      	ldr	r2, [pc, #424]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 800263a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b68      	ldr	r3, [pc, #416]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a67      	ldr	r2, [pc, #412]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 8002646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d013      	beq.n	800267c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002654:	f7ff fc14 	bl	8001e80 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800265c:	f7ff fc10 	bl	8001e80 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b64      	cmp	r3, #100	; 0x64
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e1fa      	b.n	8002a64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266e:	4b5d      	ldr	r3, [pc, #372]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0xe4>
 800267a:	e014      	b.n	80026a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7ff fc00 	bl	8001e80 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002684:	f7ff fbfc 	bl	8001e80 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e1e6      	b.n	8002a64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002696:	4b53      	ldr	r3, [pc, #332]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x10c>
 80026a2:	e000      	b.n	80026a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d063      	beq.n	800277a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026b2:	4b4c      	ldr	r3, [pc, #304]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 030c 	and.w	r3, r3, #12
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00b      	beq.n	80026d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026be:	4b49      	ldr	r3, [pc, #292]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d11c      	bne.n	8002704 <HAL_RCC_OscConfig+0x18c>
 80026ca:	4b46      	ldr	r3, [pc, #280]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d116      	bne.n	8002704 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d6:	4b43      	ldr	r3, [pc, #268]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d005      	beq.n	80026ee <HAL_RCC_OscConfig+0x176>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d001      	beq.n	80026ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e1ba      	b.n	8002a64 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ee:	4b3d      	ldr	r3, [pc, #244]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4939      	ldr	r1, [pc, #228]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002702:	e03a      	b.n	800277a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d020      	beq.n	800274e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800270c:	4b36      	ldr	r3, [pc, #216]	; (80027e8 <HAL_RCC_OscConfig+0x270>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002712:	f7ff fbb5 	bl	8001e80 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800271a:	f7ff fbb1 	bl	8001e80 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e19b      	b.n	8002a64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272c:	4b2d      	ldr	r3, [pc, #180]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002738:	4b2a      	ldr	r3, [pc, #168]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4927      	ldr	r1, [pc, #156]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]
 800274c:	e015      	b.n	800277a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274e:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <HAL_RCC_OscConfig+0x270>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002754:	f7ff fb94 	bl	8001e80 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800275c:	f7ff fb90 	bl	8001e80 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e17a      	b.n	8002a64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276e:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d03a      	beq.n	80027fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d019      	beq.n	80027c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800278e:	4b17      	ldr	r3, [pc, #92]	; (80027ec <HAL_RCC_OscConfig+0x274>)
 8002790:	2201      	movs	r2, #1
 8002792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002794:	f7ff fb74 	bl	8001e80 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800279c:	f7ff fb70 	bl	8001e80 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e15a      	b.n	8002a64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ae:	4b0d      	ldr	r3, [pc, #52]	; (80027e4 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027ba:	2001      	movs	r0, #1
 80027bc:	f000 fad8 	bl	8002d70 <RCC_Delay>
 80027c0:	e01c      	b.n	80027fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <HAL_RCC_OscConfig+0x274>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c8:	f7ff fb5a 	bl	8001e80 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ce:	e00f      	b.n	80027f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d0:	f7ff fb56 	bl	8001e80 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d908      	bls.n	80027f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e140      	b.n	8002a64 <HAL_RCC_OscConfig+0x4ec>
 80027e2:	bf00      	nop
 80027e4:	40021000 	.word	0x40021000
 80027e8:	42420000 	.word	0x42420000
 80027ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f0:	4b9e      	ldr	r3, [pc, #632]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e9      	bne.n	80027d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80a6 	beq.w	8002956 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800280a:	2300      	movs	r3, #0
 800280c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280e:	4b97      	ldr	r3, [pc, #604]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10d      	bne.n	8002836 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800281a:	4b94      	ldr	r3, [pc, #592]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	4a93      	ldr	r2, [pc, #588]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 8002820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002824:	61d3      	str	r3, [r2, #28]
 8002826:	4b91      	ldr	r3, [pc, #580]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002832:	2301      	movs	r3, #1
 8002834:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002836:	4b8e      	ldr	r3, [pc, #568]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d118      	bne.n	8002874 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002842:	4b8b      	ldr	r3, [pc, #556]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a8a      	ldr	r2, [pc, #552]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 8002848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800284e:	f7ff fb17 	bl	8001e80 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002856:	f7ff fb13 	bl	8001e80 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b64      	cmp	r3, #100	; 0x64
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e0fd      	b.n	8002a64 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002868:	4b81      	ldr	r3, [pc, #516]	; (8002a70 <HAL_RCC_OscConfig+0x4f8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d106      	bne.n	800288a <HAL_RCC_OscConfig+0x312>
 800287c:	4b7b      	ldr	r3, [pc, #492]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	4a7a      	ldr	r2, [pc, #488]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	6213      	str	r3, [r2, #32]
 8002888:	e02d      	b.n	80028e6 <HAL_RCC_OscConfig+0x36e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0x334>
 8002892:	4b76      	ldr	r3, [pc, #472]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	4a75      	ldr	r2, [pc, #468]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 8002898:	f023 0301 	bic.w	r3, r3, #1
 800289c:	6213      	str	r3, [r2, #32]
 800289e:	4b73      	ldr	r3, [pc, #460]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	4a72      	ldr	r2, [pc, #456]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 80028a4:	f023 0304 	bic.w	r3, r3, #4
 80028a8:	6213      	str	r3, [r2, #32]
 80028aa:	e01c      	b.n	80028e6 <HAL_RCC_OscConfig+0x36e>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	2b05      	cmp	r3, #5
 80028b2:	d10c      	bne.n	80028ce <HAL_RCC_OscConfig+0x356>
 80028b4:	4b6d      	ldr	r3, [pc, #436]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	4a6c      	ldr	r2, [pc, #432]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 80028ba:	f043 0304 	orr.w	r3, r3, #4
 80028be:	6213      	str	r3, [r2, #32]
 80028c0:	4b6a      	ldr	r3, [pc, #424]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	4a69      	ldr	r2, [pc, #420]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	6213      	str	r3, [r2, #32]
 80028cc:	e00b      	b.n	80028e6 <HAL_RCC_OscConfig+0x36e>
 80028ce:	4b67      	ldr	r3, [pc, #412]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	4a66      	ldr	r2, [pc, #408]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 80028d4:	f023 0301 	bic.w	r3, r3, #1
 80028d8:	6213      	str	r3, [r2, #32]
 80028da:	4b64      	ldr	r3, [pc, #400]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	4a63      	ldr	r2, [pc, #396]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 80028e0:	f023 0304 	bic.w	r3, r3, #4
 80028e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d015      	beq.n	800291a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ee:	f7ff fac7 	bl	8001e80 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f4:	e00a      	b.n	800290c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f6:	f7ff fac3 	bl	8001e80 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	f241 3288 	movw	r2, #5000	; 0x1388
 8002904:	4293      	cmp	r3, r2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e0ab      	b.n	8002a64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290c:	4b57      	ldr	r3, [pc, #348]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0ee      	beq.n	80028f6 <HAL_RCC_OscConfig+0x37e>
 8002918:	e014      	b.n	8002944 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291a:	f7ff fab1 	bl	8001e80 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002920:	e00a      	b.n	8002938 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002922:	f7ff faad 	bl	8001e80 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002930:	4293      	cmp	r3, r2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e095      	b.n	8002a64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002938:	4b4c      	ldr	r3, [pc, #304]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1ee      	bne.n	8002922 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002944:	7dfb      	ldrb	r3, [r7, #23]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d105      	bne.n	8002956 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800294a:	4b48      	ldr	r3, [pc, #288]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	4a47      	ldr	r2, [pc, #284]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 8002950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002954:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 8081 	beq.w	8002a62 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002960:	4b42      	ldr	r3, [pc, #264]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 030c 	and.w	r3, r3, #12
 8002968:	2b08      	cmp	r3, #8
 800296a:	d061      	beq.n	8002a30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	2b02      	cmp	r3, #2
 8002972:	d146      	bne.n	8002a02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002974:	4b3f      	ldr	r3, [pc, #252]	; (8002a74 <HAL_RCC_OscConfig+0x4fc>)
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297a:	f7ff fa81 	bl	8001e80 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002982:	f7ff fa7d 	bl	8001e80 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e067      	b.n	8002a64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002994:	4b35      	ldr	r3, [pc, #212]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1f0      	bne.n	8002982 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a8:	d108      	bne.n	80029bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029aa:	4b30      	ldr	r3, [pc, #192]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	492d      	ldr	r1, [pc, #180]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029bc:	4b2b      	ldr	r3, [pc, #172]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a19      	ldr	r1, [r3, #32]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	430b      	orrs	r3, r1
 80029ce:	4927      	ldr	r1, [pc, #156]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d4:	4b27      	ldr	r3, [pc, #156]	; (8002a74 <HAL_RCC_OscConfig+0x4fc>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029da:	f7ff fa51 	bl	8001e80 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e2:	f7ff fa4d 	bl	8001e80 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e037      	b.n	8002a64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029f4:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0x46a>
 8002a00:	e02f      	b.n	8002a62 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a02:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <HAL_RCC_OscConfig+0x4fc>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7ff fa3a 	bl	8001e80 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a10:	f7ff fa36 	bl	8001e80 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e020      	b.n	8002a64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a22:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x498>
 8002a2e:	e018      	b.n	8002a62 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e013      	b.n	8002a64 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <HAL_RCC_OscConfig+0x4f4>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d106      	bne.n	8002a5e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40007000 	.word	0x40007000
 8002a74:	42420060 	.word	0x42420060

08002a78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0d0      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a8c:	4b6a      	ldr	r3, [pc, #424]	; (8002c38 <HAL_RCC_ClockConfig+0x1c0>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d910      	bls.n	8002abc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9a:	4b67      	ldr	r3, [pc, #412]	; (8002c38 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f023 0207 	bic.w	r2, r3, #7
 8002aa2:	4965      	ldr	r1, [pc, #404]	; (8002c38 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aaa:	4b63      	ldr	r3, [pc, #396]	; (8002c38 <HAL_RCC_ClockConfig+0x1c0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0b8      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d020      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ad4:	4b59      	ldr	r3, [pc, #356]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	4a58      	ldr	r2, [pc, #352]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ade:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aec:	4b53      	ldr	r3, [pc, #332]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4a52      	ldr	r2, [pc, #328]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002af2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002af6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af8:	4b50      	ldr	r3, [pc, #320]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	494d      	ldr	r1, [pc, #308]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d040      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	4b47      	ldr	r3, [pc, #284]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d115      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e07f      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d107      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b36:	4b41      	ldr	r3, [pc, #260]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e073      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b46:	4b3d      	ldr	r3, [pc, #244]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e06b      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b56:	4b39      	ldr	r3, [pc, #228]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f023 0203 	bic.w	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4936      	ldr	r1, [pc, #216]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b68:	f7ff f98a 	bl	8001e80 <HAL_GetTick>
 8002b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	e00a      	b.n	8002b86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b70:	f7ff f986 	bl	8001e80 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e053      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b86:	4b2d      	ldr	r3, [pc, #180]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 020c 	and.w	r2, r3, #12
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d1eb      	bne.n	8002b70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b98:	4b27      	ldr	r3, [pc, #156]	; (8002c38 <HAL_RCC_ClockConfig+0x1c0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d210      	bcs.n	8002bc8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba6:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f023 0207 	bic.w	r2, r3, #7
 8002bae:	4922      	ldr	r1, [pc, #136]	; (8002c38 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb6:	4b20      	ldr	r3, [pc, #128]	; (8002c38 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e032      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d008      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd4:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4916      	ldr	r1, [pc, #88]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d009      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bf2:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	490e      	ldr	r1, [pc, #56]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c06:	f000 f821 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	490a      	ldr	r1, [pc, #40]	; (8002c40 <HAL_RCC_ClockConfig+0x1c8>)
 8002c18:	5ccb      	ldrb	r3, [r1, r3]
 8002c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1e:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <HAL_RCC_ClockConfig+0x1cc>)
 8002c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_RCC_ClockConfig+0x1d0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff f8e8 	bl	8001dfc <HAL_InitTick>

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40022000 	.word	0x40022000
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	08005164 	.word	0x08005164
 8002c44:	20000030 	.word	0x20000030
 8002c48:	20000034 	.word	0x20000034

08002c4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c4c:	b490      	push	{r4, r7}
 8002c4e:	b08a      	sub	sp, #40	; 0x28
 8002c50:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c52:	4b2a      	ldr	r3, [pc, #168]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c54:	1d3c      	adds	r4, r7, #4
 8002c56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c5c:	f240 2301 	movw	r3, #513	; 0x201
 8002c60:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c76:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d002      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x40>
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d003      	beq.n	8002c92 <HAL_RCC_GetSysClockFreq+0x46>
 8002c8a:	e02d      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c8e:	623b      	str	r3, [r7, #32]
      break;
 8002c90:	e02d      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	0c9b      	lsrs	r3, r3, #18
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ca4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d013      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cb0:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	0c5b      	lsrs	r3, r3, #17
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002cc4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	4a0e      	ldr	r2, [pc, #56]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cca:	fb02 f203 	mul.w	r2, r2, r3
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd6:	e004      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	4a0b      	ldr	r2, [pc, #44]	; (8002d08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cdc:	fb02 f303 	mul.w	r3, r2, r3
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	623b      	str	r3, [r7, #32]
      break;
 8002ce6:	e002      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cea:	623b      	str	r3, [r7, #32]
      break;
 8002cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cee:	6a3b      	ldr	r3, [r7, #32]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3728      	adds	r7, #40	; 0x28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc90      	pop	{r4, r7}
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	08005154 	.word	0x08005154
 8002d00:	40021000 	.word	0x40021000
 8002d04:	007a1200 	.word	0x007a1200
 8002d08:	003d0900 	.word	0x003d0900

08002d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d10:	4b02      	ldr	r3, [pc, #8]	; (8002d1c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d12:	681b      	ldr	r3, [r3, #0]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr
 8002d1c:	20000030 	.word	0x20000030

08002d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d24:	f7ff fff2 	bl	8002d0c <HAL_RCC_GetHCLKFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	0a1b      	lsrs	r3, r3, #8
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	4903      	ldr	r1, [pc, #12]	; (8002d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40021000 	.word	0x40021000
 8002d44:	08005174 	.word	0x08005174

08002d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d4c:	f7ff ffde 	bl	8002d0c <HAL_RCC_GetHCLKFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	0adb      	lsrs	r3, r3, #11
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	4903      	ldr	r1, [pc, #12]	; (8002d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	08005174 	.word	0x08005174

08002d70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d78:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <RCC_Delay+0x34>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0a      	ldr	r2, [pc, #40]	; (8002da8 <RCC_Delay+0x38>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	0a5b      	lsrs	r3, r3, #9
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	fb02 f303 	mul.w	r3, r2, r3
 8002d8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d8c:	bf00      	nop
  }
  while (Delay --);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1e5a      	subs	r2, r3, #1
 8002d92:	60fa      	str	r2, [r7, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1f9      	bne.n	8002d8c <RCC_Delay+0x1c>
}
 8002d98:	bf00      	nop
 8002d9a:	bf00      	nop
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr
 8002da4:	20000030 	.word	0x20000030
 8002da8:	10624dd3 	.word	0x10624dd3

08002dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e041      	b.n	8002e42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7fe fed8 	bl	8001b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3304      	adds	r3, #4
 8002de8:	4619      	mov	r1, r3
 8002dea:	4610      	mov	r0, r2
 8002dec:	f000 fc28 	bl	8003640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d001      	beq.n	8002e64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e03a      	b.n	8002eda <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a18      	ldr	r2, [pc, #96]	; (8002ee4 <HAL_TIM_Base_Start_IT+0x98>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00e      	beq.n	8002ea4 <HAL_TIM_Base_Start_IT+0x58>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8e:	d009      	beq.n	8002ea4 <HAL_TIM_Base_Start_IT+0x58>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a14      	ldr	r2, [pc, #80]	; (8002ee8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d004      	beq.n	8002ea4 <HAL_TIM_Base_Start_IT+0x58>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a13      	ldr	r2, [pc, #76]	; (8002eec <HAL_TIM_Base_Start_IT+0xa0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d111      	bne.n	8002ec8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b06      	cmp	r3, #6
 8002eb4:	d010      	beq.n	8002ed8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 0201 	orr.w	r2, r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec6:	e007      	b.n	8002ed8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr
 8002ee4:	40012c00 	.word	0x40012c00
 8002ee8:	40000400 	.word	0x40000400
 8002eec:	40000800 	.word	0x40000800

08002ef0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e041      	b.n	8002f86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f839 	bl	8002f8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4610      	mov	r0, r2
 8002f30:	f000 fb86 	bl	8003640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <HAL_TIM_PWM_Start+0x24>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	bf14      	ite	ne
 8002fbc:	2301      	movne	r3, #1
 8002fbe:	2300      	moveq	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	e022      	b.n	800300a <HAL_TIM_PWM_Start+0x6a>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d109      	bne.n	8002fde <HAL_TIM_PWM_Start+0x3e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	bf14      	ite	ne
 8002fd6:	2301      	movne	r3, #1
 8002fd8:	2300      	moveq	r3, #0
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	e015      	b.n	800300a <HAL_TIM_PWM_Start+0x6a>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d109      	bne.n	8002ff8 <HAL_TIM_PWM_Start+0x58>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	bf14      	ite	ne
 8002ff0:	2301      	movne	r3, #1
 8002ff2:	2300      	moveq	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	e008      	b.n	800300a <HAL_TIM_PWM_Start+0x6a>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	bf14      	ite	ne
 8003004:	2301      	movne	r3, #1
 8003006:	2300      	moveq	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e05e      	b.n	80030d0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d104      	bne.n	8003022 <HAL_TIM_PWM_Start+0x82>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003020:	e013      	b.n	800304a <HAL_TIM_PWM_Start+0xaa>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b04      	cmp	r3, #4
 8003026:	d104      	bne.n	8003032 <HAL_TIM_PWM_Start+0x92>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003030:	e00b      	b.n	800304a <HAL_TIM_PWM_Start+0xaa>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b08      	cmp	r3, #8
 8003036:	d104      	bne.n	8003042 <HAL_TIM_PWM_Start+0xa2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003040:	e003      	b.n	800304a <HAL_TIM_PWM_Start+0xaa>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2202      	movs	r2, #2
 8003046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2201      	movs	r2, #1
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fd74 	bl	8003b40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a1e      	ldr	r2, [pc, #120]	; (80030d8 <HAL_TIM_PWM_Start+0x138>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d107      	bne.n	8003072 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003070:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a18      	ldr	r2, [pc, #96]	; (80030d8 <HAL_TIM_PWM_Start+0x138>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00e      	beq.n	800309a <HAL_TIM_PWM_Start+0xfa>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003084:	d009      	beq.n	800309a <HAL_TIM_PWM_Start+0xfa>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a14      	ldr	r2, [pc, #80]	; (80030dc <HAL_TIM_PWM_Start+0x13c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <HAL_TIM_PWM_Start+0xfa>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a12      	ldr	r2, [pc, #72]	; (80030e0 <HAL_TIM_PWM_Start+0x140>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d111      	bne.n	80030be <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2b06      	cmp	r3, #6
 80030aa:	d010      	beq.n	80030ce <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030bc:	e007      	b.n	80030ce <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0201 	orr.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40012c00 	.word	0x40012c00
 80030dc:	40000400 	.word	0x40000400
 80030e0:	40000800 	.word	0x40000800

080030e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d122      	bne.n	8003140 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b02      	cmp	r3, #2
 8003106:	d11b      	bne.n	8003140 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0202 	mvn.w	r2, #2
 8003110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fa6f 	bl	800360a <HAL_TIM_IC_CaptureCallback>
 800312c:	e005      	b.n	800313a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fa62 	bl	80035f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fa71 	bl	800361c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b04      	cmp	r3, #4
 800314c:	d122      	bne.n	8003194 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b04      	cmp	r3, #4
 800315a:	d11b      	bne.n	8003194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0204 	mvn.w	r2, #4
 8003164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2202      	movs	r2, #2
 800316a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fa45 	bl	800360a <HAL_TIM_IC_CaptureCallback>
 8003180:	e005      	b.n	800318e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fa38 	bl	80035f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fa47 	bl	800361c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d122      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d11b      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0208 	mvn.w	r2, #8
 80031b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2204      	movs	r2, #4
 80031be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fa1b 	bl	800360a <HAL_TIM_IC_CaptureCallback>
 80031d4:	e005      	b.n	80031e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fa0e 	bl	80035f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 fa1d 	bl	800361c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b10      	cmp	r3, #16
 80031f4:	d122      	bne.n	800323c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b10      	cmp	r3, #16
 8003202:	d11b      	bne.n	800323c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f06f 0210 	mvn.w	r2, #16
 800320c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2208      	movs	r2, #8
 8003212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f9f1 	bl	800360a <HAL_TIM_IC_CaptureCallback>
 8003228:	e005      	b.n	8003236 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f9e4 	bl	80035f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f9f3 	bl	800361c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b01      	cmp	r3, #1
 8003248:	d10e      	bne.n	8003268 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b01      	cmp	r3, #1
 8003256:	d107      	bne.n	8003268 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0201 	mvn.w	r2, #1
 8003260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fe fa88 	bl	8001778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003272:	2b80      	cmp	r3, #128	; 0x80
 8003274:	d10e      	bne.n	8003294 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003280:	2b80      	cmp	r3, #128	; 0x80
 8003282:	d107      	bne.n	8003294 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800328c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fce1 	bl	8003c56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329e:	2b40      	cmp	r3, #64	; 0x40
 80032a0:	d10e      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ac:	2b40      	cmp	r3, #64	; 0x40
 80032ae:	d107      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f9b7 	bl	800362e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b20      	cmp	r3, #32
 80032cc:	d10e      	bne.n	80032ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d107      	bne.n	80032ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0220 	mvn.w	r2, #32
 80032e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 fcac 	bl	8003c44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800330a:	2302      	movs	r3, #2
 800330c:	e0ac      	b.n	8003468 <HAL_TIM_PWM_ConfigChannel+0x174>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b0c      	cmp	r3, #12
 800331a:	f200 809f 	bhi.w	800345c <HAL_TIM_PWM_ConfigChannel+0x168>
 800331e:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003324:	08003359 	.word	0x08003359
 8003328:	0800345d 	.word	0x0800345d
 800332c:	0800345d 	.word	0x0800345d
 8003330:	0800345d 	.word	0x0800345d
 8003334:	08003399 	.word	0x08003399
 8003338:	0800345d 	.word	0x0800345d
 800333c:	0800345d 	.word	0x0800345d
 8003340:	0800345d 	.word	0x0800345d
 8003344:	080033db 	.word	0x080033db
 8003348:	0800345d 	.word	0x0800345d
 800334c:	0800345d 	.word	0x0800345d
 8003350:	0800345d 	.word	0x0800345d
 8003354:	0800341b 	.word	0x0800341b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f9d0 	bl	8003704 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0208 	orr.w	r2, r2, #8
 8003372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0204 	bic.w	r2, r2, #4
 8003382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6999      	ldr	r1, [r3, #24]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	619a      	str	r2, [r3, #24]
      break;
 8003396:	e062      	b.n	800345e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fa16 	bl	80037d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6999      	ldr	r1, [r3, #24]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	021a      	lsls	r2, r3, #8
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	619a      	str	r2, [r3, #24]
      break;
 80033d8:	e041      	b.n	800345e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fa5f 	bl	80038a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69da      	ldr	r2, [r3, #28]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0208 	orr.w	r2, r2, #8
 80033f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0204 	bic.w	r2, r2, #4
 8003404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69d9      	ldr	r1, [r3, #28]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	61da      	str	r2, [r3, #28]
      break;
 8003418:	e021      	b.n	800345e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	4618      	mov	r0, r3
 8003422:	f000 faa9 	bl	8003978 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69d9      	ldr	r1, [r3, #28]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	021a      	lsls	r2, r3, #8
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	61da      	str	r2, [r3, #28]
      break;
 800345a:	e000      	b.n	800345e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800345c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_TIM_ConfigClockSource+0x18>
 8003484:	2302      	movs	r3, #2
 8003486:	e0b3      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x180>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c0:	d03e      	beq.n	8003540 <HAL_TIM_ConfigClockSource+0xd0>
 80034c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c6:	f200 8087 	bhi.w	80035d8 <HAL_TIM_ConfigClockSource+0x168>
 80034ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ce:	f000 8085 	beq.w	80035dc <HAL_TIM_ConfigClockSource+0x16c>
 80034d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d6:	d87f      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x168>
 80034d8:	2b70      	cmp	r3, #112	; 0x70
 80034da:	d01a      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0xa2>
 80034dc:	2b70      	cmp	r3, #112	; 0x70
 80034de:	d87b      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x168>
 80034e0:	2b60      	cmp	r3, #96	; 0x60
 80034e2:	d050      	beq.n	8003586 <HAL_TIM_ConfigClockSource+0x116>
 80034e4:	2b60      	cmp	r3, #96	; 0x60
 80034e6:	d877      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x168>
 80034e8:	2b50      	cmp	r3, #80	; 0x50
 80034ea:	d03c      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0xf6>
 80034ec:	2b50      	cmp	r3, #80	; 0x50
 80034ee:	d873      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x168>
 80034f0:	2b40      	cmp	r3, #64	; 0x40
 80034f2:	d058      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0x136>
 80034f4:	2b40      	cmp	r3, #64	; 0x40
 80034f6:	d86f      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x168>
 80034f8:	2b30      	cmp	r3, #48	; 0x30
 80034fa:	d064      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x156>
 80034fc:	2b30      	cmp	r3, #48	; 0x30
 80034fe:	d86b      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x168>
 8003500:	2b20      	cmp	r3, #32
 8003502:	d060      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x156>
 8003504:	2b20      	cmp	r3, #32
 8003506:	d867      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x168>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d05c      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x156>
 800350c:	2b10      	cmp	r3, #16
 800350e:	d05a      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003510:	e062      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	6899      	ldr	r1, [r3, #8]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f000 faee 	bl	8003b02 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003534:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	609a      	str	r2, [r3, #8]
      break;
 800353e:	e04e      	b.n	80035de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	6899      	ldr	r1, [r3, #8]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f000 fad7 	bl	8003b02 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003562:	609a      	str	r2, [r3, #8]
      break;
 8003564:	e03b      	b.n	80035de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	6859      	ldr	r1, [r3, #4]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	461a      	mov	r2, r3
 8003574:	f000 fa4e 	bl	8003a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2150      	movs	r1, #80	; 0x50
 800357e:	4618      	mov	r0, r3
 8003580:	f000 faa5 	bl	8003ace <TIM_ITRx_SetConfig>
      break;
 8003584:	e02b      	b.n	80035de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6859      	ldr	r1, [r3, #4]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	461a      	mov	r2, r3
 8003594:	f000 fa6c 	bl	8003a70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2160      	movs	r1, #96	; 0x60
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fa95 	bl	8003ace <TIM_ITRx_SetConfig>
      break;
 80035a4:	e01b      	b.n	80035de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6859      	ldr	r1, [r3, #4]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	461a      	mov	r2, r3
 80035b4:	f000 fa2e 	bl	8003a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2140      	movs	r1, #64	; 0x40
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fa85 	bl	8003ace <TIM_ITRx_SetConfig>
      break;
 80035c4:	e00b      	b.n	80035de <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4619      	mov	r1, r3
 80035d0:	4610      	mov	r0, r2
 80035d2:	f000 fa7c 	bl	8003ace <TIM_ITRx_SetConfig>
        break;
 80035d6:	e002      	b.n	80035de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035d8:	bf00      	nop
 80035da:	e000      	b.n	80035de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr

0800361c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr

08003640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a29      	ldr	r2, [pc, #164]	; (80036f8 <TIM_Base_SetConfig+0xb8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00b      	beq.n	8003670 <TIM_Base_SetConfig+0x30>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365e:	d007      	beq.n	8003670 <TIM_Base_SetConfig+0x30>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a26      	ldr	r2, [pc, #152]	; (80036fc <TIM_Base_SetConfig+0xbc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d003      	beq.n	8003670 <TIM_Base_SetConfig+0x30>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a25      	ldr	r2, [pc, #148]	; (8003700 <TIM_Base_SetConfig+0xc0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d108      	bne.n	8003682 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a1c      	ldr	r2, [pc, #112]	; (80036f8 <TIM_Base_SetConfig+0xb8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00b      	beq.n	80036a2 <TIM_Base_SetConfig+0x62>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003690:	d007      	beq.n	80036a2 <TIM_Base_SetConfig+0x62>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a19      	ldr	r2, [pc, #100]	; (80036fc <TIM_Base_SetConfig+0xbc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d003      	beq.n	80036a2 <TIM_Base_SetConfig+0x62>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a18      	ldr	r2, [pc, #96]	; (8003700 <TIM_Base_SetConfig+0xc0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d108      	bne.n	80036b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a07      	ldr	r2, [pc, #28]	; (80036f8 <TIM_Base_SetConfig+0xb8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d103      	bne.n	80036e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	615a      	str	r2, [r3, #20]
}
 80036ee:	bf00      	nop
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	40012c00 	.word	0x40012c00
 80036fc:	40000400 	.word	0x40000400
 8003700:	40000800 	.word	0x40000800

08003704 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	f023 0201 	bic.w	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0303 	bic.w	r3, r3, #3
 800373a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f023 0302 	bic.w	r3, r3, #2
 800374c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a1c      	ldr	r2, [pc, #112]	; (80037cc <TIM_OC1_SetConfig+0xc8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d10c      	bne.n	800377a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f023 0308 	bic.w	r3, r3, #8
 8003766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f023 0304 	bic.w	r3, r3, #4
 8003778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a13      	ldr	r2, [pc, #76]	; (80037cc <TIM_OC1_SetConfig+0xc8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d111      	bne.n	80037a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	621a      	str	r2, [r3, #32]
}
 80037c0:	bf00      	nop
 80037c2:	371c      	adds	r7, #28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40012c00 	.word	0x40012c00

080037d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	f023 0210 	bic.w	r2, r3, #16
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	021b      	lsls	r3, r3, #8
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f023 0320 	bic.w	r3, r3, #32
 800381a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a1d      	ldr	r2, [pc, #116]	; (80038a0 <TIM_OC2_SetConfig+0xd0>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d10d      	bne.n	800384c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800384a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a14      	ldr	r2, [pc, #80]	; (80038a0 <TIM_OC2_SetConfig+0xd0>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d113      	bne.n	800387c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800385a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003862:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	621a      	str	r2, [r3, #32]
}
 8003896:	bf00      	nop
 8003898:	371c      	adds	r7, #28
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr
 80038a0:	40012c00 	.word	0x40012c00

080038a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a1d      	ldr	r2, [pc, #116]	; (8003974 <TIM_OC3_SetConfig+0xd0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d10d      	bne.n	800391e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003908:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	021b      	lsls	r3, r3, #8
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800391c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a14      	ldr	r2, [pc, #80]	; (8003974 <TIM_OC3_SetConfig+0xd0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d113      	bne.n	800394e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800392c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	621a      	str	r2, [r3, #32]
}
 8003968:	bf00      	nop
 800396a:	371c      	adds	r7, #28
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40012c00 	.word	0x40012c00

08003978 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	021b      	lsls	r3, r3, #8
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	031b      	lsls	r3, r3, #12
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a0f      	ldr	r2, [pc, #60]	; (8003a10 <TIM_OC4_SetConfig+0x98>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d109      	bne.n	80039ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	621a      	str	r2, [r3, #32]
}
 8003a06:	bf00      	nop
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr
 8003a10:	40012c00 	.word	0x40012c00

08003a14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f023 0201 	bic.w	r2, r3, #1
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f023 030a 	bic.w	r3, r3, #10
 8003a50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	621a      	str	r2, [r3, #32]
}
 8003a66:	bf00      	nop
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr

08003a70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	f023 0210 	bic.w	r2, r3, #16
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	031b      	lsls	r3, r3, #12
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003aac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	621a      	str	r2, [r3, #32]
}
 8003ac4:	bf00      	nop
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr

08003ace <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b085      	sub	sp, #20
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f043 0307 	orr.w	r3, r3, #7
 8003af0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	609a      	str	r2, [r3, #8]
}
 8003af8:	bf00      	nop
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr

08003b02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b087      	sub	sp, #28
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
 8003b0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b1c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	021a      	lsls	r2, r3, #8
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	431a      	orrs	r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	609a      	str	r2, [r3, #8]
}
 8003b36:	bf00      	nop
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr

08003b40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	2201      	movs	r2, #1
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a1a      	ldr	r2, [r3, #32]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	43db      	mvns	r3, r3
 8003b62:	401a      	ands	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a1a      	ldr	r2, [r3, #32]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	f003 031f 	and.w	r3, r3, #31
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	fa01 f303 	lsl.w	r3, r1, r3
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	621a      	str	r2, [r3, #32]
}
 8003b7e:	bf00      	nop
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr

08003b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e046      	b.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a16      	ldr	r2, [pc, #88]	; (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00e      	beq.n	8003c02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bec:	d009      	beq.n	8003c02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a12      	ldr	r2, [pc, #72]	; (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d004      	beq.n	8003c02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a10      	ldr	r2, [pc, #64]	; (8003c40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d10c      	bne.n	8003c1c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr
 8003c38:	40012c00 	.word	0x40012c00
 8003c3c:	40000400 	.word	0x40000400
 8003c40:	40000800 	.word	0x40000800

08003c44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr

08003c56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr

08003c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e03f      	b.n	8003cfa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fd ffe4 	bl	8001c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2224      	movs	r2, #36	; 0x24
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fc85 	bl	80045bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b08a      	sub	sp, #40	; 0x28
 8003d06:	af02      	add	r7, sp, #8
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	603b      	str	r3, [r7, #0]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	d17c      	bne.n	8003e1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <HAL_UART_Transmit+0x2c>
 8003d28:	88fb      	ldrh	r3, [r7, #6]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e075      	b.n	8003e1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_UART_Transmit+0x3e>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e06e      	b.n	8003e1e <HAL_UART_Transmit+0x11c>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2221      	movs	r2, #33	; 0x21
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d56:	f7fe f893 	bl	8001e80 <HAL_GetTick>
 8003d5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	88fa      	ldrh	r2, [r7, #6]
 8003d60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	88fa      	ldrh	r2, [r7, #6]
 8003d66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d70:	d108      	bne.n	8003d84 <HAL_UART_Transmit+0x82>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d104      	bne.n	8003d84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	e003      	b.n	8003d8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d94:	e02a      	b.n	8003dec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2180      	movs	r1, #128	; 0x80
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 fa38 	bl	8004216 <UART_WaitOnFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e036      	b.n	8003e1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10b      	bne.n	8003dce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	3302      	adds	r3, #2
 8003dca:	61bb      	str	r3, [r7, #24]
 8003dcc:	e007      	b.n	8003dde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	781a      	ldrb	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1cf      	bne.n	8003d96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2140      	movs	r1, #64	; 0x40
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 fa08 	bl	8004216 <UART_WaitOnFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e006      	b.n	8003e1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e000      	b.n	8003e1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e1c:	2302      	movs	r3, #2
  }
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	4613      	mov	r3, r2
 8003e32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d11d      	bne.n	8003e7c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <HAL_UART_Receive_IT+0x26>
 8003e46:	88fb      	ldrh	r3, [r7, #6]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e016      	b.n	8003e7e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_UART_Receive_IT+0x38>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e00f      	b.n	8003e7e <HAL_UART_Receive_IT+0x58>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003e6c:	88fb      	ldrh	r3, [r7, #6]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fa19 	bl	80042aa <UART_Start_Receive_IT>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	e000      	b.n	8003e7e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
  }
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	; 0x28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10d      	bne.n	8003eda <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <HAL_UART_IRQHandler+0x52>
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	f003 0320 	and.w	r3, r3, #32
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fac9 	bl	800446a <UART_Receive_IT>
      return;
 8003ed8:	e17b      	b.n	80041d2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 80b1 	beq.w	8004044 <HAL_UART_IRQHandler+0x1bc>
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d105      	bne.n	8003ef8 <HAL_UART_IRQHandler+0x70>
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80a6 	beq.w	8004044 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_UART_IRQHandler+0x90>
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	f043 0201 	orr.w	r2, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_UART_IRQHandler+0xb0>
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	f043 0202 	orr.w	r2, r3, #2
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <HAL_UART_IRQHandler+0xd0>
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	f043 0204 	orr.w	r2, r3, #4
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00f      	beq.n	8003f82 <HAL_UART_IRQHandler+0xfa>
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d104      	bne.n	8003f76 <HAL_UART_IRQHandler+0xee>
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f043 0208 	orr.w	r2, r3, #8
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 811e 	beq.w	80041c8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x11e>
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fa62 	bl	800446a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bf14      	ite	ne
 8003fb4:	2301      	movne	r3, #1
 8003fb6:	2300      	moveq	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d102      	bne.n	8003fce <HAL_UART_IRQHandler+0x146>
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d031      	beq.n	8004032 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f9a4 	bl	800431c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d023      	beq.n	800402a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695a      	ldr	r2, [r3, #20]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ff0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d013      	beq.n	8004022 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	4a76      	ldr	r2, [pc, #472]	; (80041d8 <HAL_UART_IRQHandler+0x350>)
 8004000:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	4618      	mov	r0, r3
 8004008:	f7fe f88c 	bl	8002124 <HAL_DMA_Abort_IT>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d016      	beq.n	8004040 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800401c:	4610      	mov	r0, r2
 800401e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004020:	e00e      	b.n	8004040 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f8e3 	bl	80041ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004028:	e00a      	b.n	8004040 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f8df 	bl	80041ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004030:	e006      	b.n	8004040 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f8db 	bl	80041ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800403e:	e0c3      	b.n	80041c8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004040:	bf00      	nop
    return;
 8004042:	e0c1      	b.n	80041c8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	2b01      	cmp	r3, #1
 800404a:	f040 80a1 	bne.w	8004190 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 809b 	beq.w	8004190 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 8095 	beq.w	8004190 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d04e      	beq.n	8004128 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004094:	8a3b      	ldrh	r3, [r7, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 8098 	beq.w	80041cc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040a0:	8a3a      	ldrh	r2, [r7, #16]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	f080 8092 	bcs.w	80041cc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8a3a      	ldrh	r2, [r7, #16]
 80040ac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	2b20      	cmp	r3, #32
 80040b6:	d02b      	beq.n	8004110 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040c6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695a      	ldr	r2, [r3, #20]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0201 	bic.w	r2, r2, #1
 80040d6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695a      	ldr	r2, [r3, #20]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0210 	bic.w	r2, r2, #16
 8004104:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410a:	4618      	mov	r0, r3
 800410c:	f7fd ffcf 	bl	80020ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004118:	b29b      	uxth	r3, r3
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	b29b      	uxth	r3, r3
 800411e:	4619      	mov	r1, r3
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f86d 	bl	8004200 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004126:	e051      	b.n	80041cc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004130:	b29b      	uxth	r3, r3
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d047      	beq.n	80041d0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004140:	8a7b      	ldrh	r3, [r7, #18]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d044      	beq.n	80041d0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004154:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695a      	ldr	r2, [r3, #20]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0201 	bic.w	r2, r2, #1
 8004164:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2220      	movs	r2, #32
 800416a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0210 	bic.w	r2, r2, #16
 8004182:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004184:	8a7b      	ldrh	r3, [r7, #18]
 8004186:	4619      	mov	r1, r3
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f839 	bl	8004200 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800418e:	e01f      	b.n	80041d0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004196:	2b00      	cmp	r3, #0
 8004198:	d008      	beq.n	80041ac <HAL_UART_IRQHandler+0x324>
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f8f9 	bl	800439c <UART_Transmit_IT>
    return;
 80041aa:	e012      	b.n	80041d2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00d      	beq.n	80041d2 <HAL_UART_IRQHandler+0x34a>
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f93a 	bl	800443a <UART_EndTransmit_IT>
    return;
 80041c6:	e004      	b.n	80041d2 <HAL_UART_IRQHandler+0x34a>
    return;
 80041c8:	bf00      	nop
 80041ca:	e002      	b.n	80041d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80041cc:	bf00      	nop
 80041ce:	e000      	b.n	80041d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80041d0:	bf00      	nop
  }
}
 80041d2:	3728      	adds	r7, #40	; 0x28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	08004375 	.word	0x08004375

080041dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bc80      	pop	{r7}
 80041ec:	4770      	bx	lr

080041ee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr

08004200 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr

08004216 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b084      	sub	sp, #16
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	4613      	mov	r3, r2
 8004224:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004226:	e02c      	b.n	8004282 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422e:	d028      	beq.n	8004282 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d007      	beq.n	8004246 <UART_WaitOnFlagUntilTimeout+0x30>
 8004236:	f7fd fe23 	bl	8001e80 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	429a      	cmp	r2, r3
 8004244:	d21d      	bcs.n	8004282 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004254:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695a      	ldr	r2, [r3, #20]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e00f      	b.n	80042a2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4013      	ands	r3, r2
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	429a      	cmp	r2, r3
 8004290:	bf0c      	ite	eq
 8004292:	2301      	moveq	r3, #1
 8004294:	2300      	movne	r3, #0
 8004296:	b2db      	uxtb	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	429a      	cmp	r2, r3
 800429e:	d0c3      	beq.n	8004228 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b085      	sub	sp, #20
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	4613      	mov	r3, r2
 80042b6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	88fa      	ldrh	r2, [r7, #6]
 80042c2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	88fa      	ldrh	r2, [r7, #6]
 80042c8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2222      	movs	r2, #34	; 0x22
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042ee:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0220 	orr.w	r2, r2, #32
 800430e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004332:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695a      	ldr	r2, [r3, #20]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0201 	bic.w	r2, r2, #1
 8004342:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004348:	2b01      	cmp	r3, #1
 800434a:	d107      	bne.n	800435c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0210 	bic.w	r2, r2, #16
 800435a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	631a      	str	r2, [r3, #48]	; 0x30
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr

08004374 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f7ff ff2d 	bl	80041ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004394:	bf00      	nop
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b21      	cmp	r3, #33	; 0x21
 80043ae:	d13e      	bne.n	800442e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b8:	d114      	bne.n	80043e4 <UART_Transmit_IT+0x48>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d110      	bne.n	80043e4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	461a      	mov	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	1c9a      	adds	r2, r3, #2
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	621a      	str	r2, [r3, #32]
 80043e2:	e008      	b.n	80043f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	1c59      	adds	r1, r3, #1
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6211      	str	r1, [r2, #32]
 80043ee:	781a      	ldrb	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29b      	uxth	r3, r3
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	4619      	mov	r1, r3
 8004404:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10f      	bne.n	800442a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68da      	ldr	r2, [r3, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004418:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004428:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	e000      	b.n	8004430 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800442e:	2302      	movs	r3, #2
  }
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr

0800443a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b082      	sub	sp, #8
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004450:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7ff febe 	bl	80041dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b086      	sub	sp, #24
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b22      	cmp	r3, #34	; 0x22
 800447c:	f040 8099 	bne.w	80045b2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004488:	d117      	bne.n	80044ba <UART_Receive_IT+0x50>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d113      	bne.n	80044ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b2:	1c9a      	adds	r2, r3, #2
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	629a      	str	r2, [r3, #40]	; 0x28
 80044b8:	e026      	b.n	8004508 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044be:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044cc:	d007      	beq.n	80044de <UART_Receive_IT+0x74>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10a      	bne.n	80044ec <UART_Receive_IT+0x82>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d106      	bne.n	80044ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	701a      	strb	r2, [r3, #0]
 80044ea:	e008      	b.n	80044fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29b      	uxth	r3, r3
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	4619      	mov	r1, r3
 8004516:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004518:	2b00      	cmp	r3, #0
 800451a:	d148      	bne.n	80045ae <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0220 	bic.w	r2, r2, #32
 800452a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800453a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695a      	ldr	r2, [r3, #20]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0201 	bic.w	r2, r2, #1
 800454a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004558:	2b01      	cmp	r3, #1
 800455a:	d123      	bne.n	80045a4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0210 	bic.w	r2, r2, #16
 8004570:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b10      	cmp	r3, #16
 800457e:	d10a      	bne.n	8004596 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800459a:	4619      	mov	r1, r3
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7ff fe2f 	bl	8004200 <HAL_UARTEx_RxEventCallback>
 80045a2:	e002      	b.n	80045aa <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7fc fec3 	bl	8001330 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	e002      	b.n	80045b4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e000      	b.n	80045b4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80045b2:	2302      	movs	r3, #2
  }
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80045f6:	f023 030c 	bic.w	r3, r3, #12
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6812      	ldr	r2, [r2, #0]
 80045fe:	68b9      	ldr	r1, [r7, #8]
 8004600:	430b      	orrs	r3, r1
 8004602:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699a      	ldr	r2, [r3, #24]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a2c      	ldr	r2, [pc, #176]	; (80046d0 <UART_SetConfig+0x114>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d103      	bne.n	800462c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004624:	f7fe fb90 	bl	8002d48 <HAL_RCC_GetPCLK2Freq>
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	e002      	b.n	8004632 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800462c:	f7fe fb78 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 8004630:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	009a      	lsls	r2, r3, #2
 800463c:	441a      	add	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	fbb2 f3f3 	udiv	r3, r2, r3
 8004648:	4a22      	ldr	r2, [pc, #136]	; (80046d4 <UART_SetConfig+0x118>)
 800464a:	fba2 2303 	umull	r2, r3, r2, r3
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	0119      	lsls	r1, r3, #4
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4613      	mov	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	009a      	lsls	r2, r3, #2
 800465c:	441a      	add	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	fbb2 f2f3 	udiv	r2, r2, r3
 8004668:	4b1a      	ldr	r3, [pc, #104]	; (80046d4 <UART_SetConfig+0x118>)
 800466a:	fba3 0302 	umull	r0, r3, r3, r2
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	2064      	movs	r0, #100	; 0x64
 8004672:	fb00 f303 	mul.w	r3, r0, r3
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	3332      	adds	r3, #50	; 0x32
 800467c:	4a15      	ldr	r2, [pc, #84]	; (80046d4 <UART_SetConfig+0x118>)
 800467e:	fba2 2303 	umull	r2, r3, r2, r3
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004688:	4419      	add	r1, r3
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	4613      	mov	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	009a      	lsls	r2, r3, #2
 8004694:	441a      	add	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	fbb2 f2f3 	udiv	r2, r2, r3
 80046a0:	4b0c      	ldr	r3, [pc, #48]	; (80046d4 <UART_SetConfig+0x118>)
 80046a2:	fba3 0302 	umull	r0, r3, r3, r2
 80046a6:	095b      	lsrs	r3, r3, #5
 80046a8:	2064      	movs	r0, #100	; 0x64
 80046aa:	fb00 f303 	mul.w	r3, r0, r3
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	3332      	adds	r3, #50	; 0x32
 80046b4:	4a07      	ldr	r2, [pc, #28]	; (80046d4 <UART_SetConfig+0x118>)
 80046b6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	f003 020f 	and.w	r2, r3, #15
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	440a      	add	r2, r1
 80046c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046c8:	bf00      	nop
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40013800 	.word	0x40013800
 80046d4:	51eb851f 	.word	0x51eb851f

080046d8 <__libc_init_array>:
 80046d8:	b570      	push	{r4, r5, r6, lr}
 80046da:	2600      	movs	r6, #0
 80046dc:	4d0c      	ldr	r5, [pc, #48]	; (8004710 <__libc_init_array+0x38>)
 80046de:	4c0d      	ldr	r4, [pc, #52]	; (8004714 <__libc_init_array+0x3c>)
 80046e0:	1b64      	subs	r4, r4, r5
 80046e2:	10a4      	asrs	r4, r4, #2
 80046e4:	42a6      	cmp	r6, r4
 80046e6:	d109      	bne.n	80046fc <__libc_init_array+0x24>
 80046e8:	f000 fc7a 	bl	8004fe0 <_init>
 80046ec:	2600      	movs	r6, #0
 80046ee:	4d0a      	ldr	r5, [pc, #40]	; (8004718 <__libc_init_array+0x40>)
 80046f0:	4c0a      	ldr	r4, [pc, #40]	; (800471c <__libc_init_array+0x44>)
 80046f2:	1b64      	subs	r4, r4, r5
 80046f4:	10a4      	asrs	r4, r4, #2
 80046f6:	42a6      	cmp	r6, r4
 80046f8:	d105      	bne.n	8004706 <__libc_init_array+0x2e>
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
 80046fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004700:	4798      	blx	r3
 8004702:	3601      	adds	r6, #1
 8004704:	e7ee      	b.n	80046e4 <__libc_init_array+0xc>
 8004706:	f855 3b04 	ldr.w	r3, [r5], #4
 800470a:	4798      	blx	r3
 800470c:	3601      	adds	r6, #1
 800470e:	e7f2      	b.n	80046f6 <__libc_init_array+0x1e>
 8004710:	080051b0 	.word	0x080051b0
 8004714:	080051b0 	.word	0x080051b0
 8004718:	080051b0 	.word	0x080051b0
 800471c:	080051b4 	.word	0x080051b4

08004720 <malloc>:
 8004720:	4b02      	ldr	r3, [pc, #8]	; (800472c <malloc+0xc>)
 8004722:	4601      	mov	r1, r0
 8004724:	6818      	ldr	r0, [r3, #0]
 8004726:	f000 b85f 	b.w	80047e8 <_malloc_r>
 800472a:	bf00      	nop
 800472c:	2000003c 	.word	0x2000003c

08004730 <free>:
 8004730:	4b02      	ldr	r3, [pc, #8]	; (800473c <free+0xc>)
 8004732:	4601      	mov	r1, r0
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	f000 b80b 	b.w	8004750 <_free_r>
 800473a:	bf00      	nop
 800473c:	2000003c 	.word	0x2000003c

08004740 <memset>:
 8004740:	4603      	mov	r3, r0
 8004742:	4402      	add	r2, r0
 8004744:	4293      	cmp	r3, r2
 8004746:	d100      	bne.n	800474a <memset+0xa>
 8004748:	4770      	bx	lr
 800474a:	f803 1b01 	strb.w	r1, [r3], #1
 800474e:	e7f9      	b.n	8004744 <memset+0x4>

08004750 <_free_r>:
 8004750:	b538      	push	{r3, r4, r5, lr}
 8004752:	4605      	mov	r5, r0
 8004754:	2900      	cmp	r1, #0
 8004756:	d043      	beq.n	80047e0 <_free_r+0x90>
 8004758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800475c:	1f0c      	subs	r4, r1, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	bfb8      	it	lt
 8004762:	18e4      	addlt	r4, r4, r3
 8004764:	f000 f8ca 	bl	80048fc <__malloc_lock>
 8004768:	4a1e      	ldr	r2, [pc, #120]	; (80047e4 <_free_r+0x94>)
 800476a:	6813      	ldr	r3, [r2, #0]
 800476c:	4610      	mov	r0, r2
 800476e:	b933      	cbnz	r3, 800477e <_free_r+0x2e>
 8004770:	6063      	str	r3, [r4, #4]
 8004772:	6014      	str	r4, [r2, #0]
 8004774:	4628      	mov	r0, r5
 8004776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800477a:	f000 b8c5 	b.w	8004908 <__malloc_unlock>
 800477e:	42a3      	cmp	r3, r4
 8004780:	d90a      	bls.n	8004798 <_free_r+0x48>
 8004782:	6821      	ldr	r1, [r4, #0]
 8004784:	1862      	adds	r2, r4, r1
 8004786:	4293      	cmp	r3, r2
 8004788:	bf01      	itttt	eq
 800478a:	681a      	ldreq	r2, [r3, #0]
 800478c:	685b      	ldreq	r3, [r3, #4]
 800478e:	1852      	addeq	r2, r2, r1
 8004790:	6022      	streq	r2, [r4, #0]
 8004792:	6063      	str	r3, [r4, #4]
 8004794:	6004      	str	r4, [r0, #0]
 8004796:	e7ed      	b.n	8004774 <_free_r+0x24>
 8004798:	461a      	mov	r2, r3
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	b10b      	cbz	r3, 80047a2 <_free_r+0x52>
 800479e:	42a3      	cmp	r3, r4
 80047a0:	d9fa      	bls.n	8004798 <_free_r+0x48>
 80047a2:	6811      	ldr	r1, [r2, #0]
 80047a4:	1850      	adds	r0, r2, r1
 80047a6:	42a0      	cmp	r0, r4
 80047a8:	d10b      	bne.n	80047c2 <_free_r+0x72>
 80047aa:	6820      	ldr	r0, [r4, #0]
 80047ac:	4401      	add	r1, r0
 80047ae:	1850      	adds	r0, r2, r1
 80047b0:	4283      	cmp	r3, r0
 80047b2:	6011      	str	r1, [r2, #0]
 80047b4:	d1de      	bne.n	8004774 <_free_r+0x24>
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	4401      	add	r1, r0
 80047bc:	6011      	str	r1, [r2, #0]
 80047be:	6053      	str	r3, [r2, #4]
 80047c0:	e7d8      	b.n	8004774 <_free_r+0x24>
 80047c2:	d902      	bls.n	80047ca <_free_r+0x7a>
 80047c4:	230c      	movs	r3, #12
 80047c6:	602b      	str	r3, [r5, #0]
 80047c8:	e7d4      	b.n	8004774 <_free_r+0x24>
 80047ca:	6820      	ldr	r0, [r4, #0]
 80047cc:	1821      	adds	r1, r4, r0
 80047ce:	428b      	cmp	r3, r1
 80047d0:	bf01      	itttt	eq
 80047d2:	6819      	ldreq	r1, [r3, #0]
 80047d4:	685b      	ldreq	r3, [r3, #4]
 80047d6:	1809      	addeq	r1, r1, r0
 80047d8:	6021      	streq	r1, [r4, #0]
 80047da:	6063      	str	r3, [r4, #4]
 80047dc:	6054      	str	r4, [r2, #4]
 80047de:	e7c9      	b.n	8004774 <_free_r+0x24>
 80047e0:	bd38      	pop	{r3, r4, r5, pc}
 80047e2:	bf00      	nop
 80047e4:	200000d4 	.word	0x200000d4

080047e8 <_malloc_r>:
 80047e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ea:	1ccd      	adds	r5, r1, #3
 80047ec:	f025 0503 	bic.w	r5, r5, #3
 80047f0:	3508      	adds	r5, #8
 80047f2:	2d0c      	cmp	r5, #12
 80047f4:	bf38      	it	cc
 80047f6:	250c      	movcc	r5, #12
 80047f8:	2d00      	cmp	r5, #0
 80047fa:	4606      	mov	r6, r0
 80047fc:	db01      	blt.n	8004802 <_malloc_r+0x1a>
 80047fe:	42a9      	cmp	r1, r5
 8004800:	d903      	bls.n	800480a <_malloc_r+0x22>
 8004802:	230c      	movs	r3, #12
 8004804:	6033      	str	r3, [r6, #0]
 8004806:	2000      	movs	r0, #0
 8004808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800480a:	f000 f877 	bl	80048fc <__malloc_lock>
 800480e:	4921      	ldr	r1, [pc, #132]	; (8004894 <_malloc_r+0xac>)
 8004810:	680a      	ldr	r2, [r1, #0]
 8004812:	4614      	mov	r4, r2
 8004814:	b99c      	cbnz	r4, 800483e <_malloc_r+0x56>
 8004816:	4f20      	ldr	r7, [pc, #128]	; (8004898 <_malloc_r+0xb0>)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	b923      	cbnz	r3, 8004826 <_malloc_r+0x3e>
 800481c:	4621      	mov	r1, r4
 800481e:	4630      	mov	r0, r6
 8004820:	f000 f83c 	bl	800489c <_sbrk_r>
 8004824:	6038      	str	r0, [r7, #0]
 8004826:	4629      	mov	r1, r5
 8004828:	4630      	mov	r0, r6
 800482a:	f000 f837 	bl	800489c <_sbrk_r>
 800482e:	1c43      	adds	r3, r0, #1
 8004830:	d123      	bne.n	800487a <_malloc_r+0x92>
 8004832:	230c      	movs	r3, #12
 8004834:	4630      	mov	r0, r6
 8004836:	6033      	str	r3, [r6, #0]
 8004838:	f000 f866 	bl	8004908 <__malloc_unlock>
 800483c:	e7e3      	b.n	8004806 <_malloc_r+0x1e>
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	1b5b      	subs	r3, r3, r5
 8004842:	d417      	bmi.n	8004874 <_malloc_r+0x8c>
 8004844:	2b0b      	cmp	r3, #11
 8004846:	d903      	bls.n	8004850 <_malloc_r+0x68>
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	441c      	add	r4, r3
 800484c:	6025      	str	r5, [r4, #0]
 800484e:	e004      	b.n	800485a <_malloc_r+0x72>
 8004850:	6863      	ldr	r3, [r4, #4]
 8004852:	42a2      	cmp	r2, r4
 8004854:	bf0c      	ite	eq
 8004856:	600b      	streq	r3, [r1, #0]
 8004858:	6053      	strne	r3, [r2, #4]
 800485a:	4630      	mov	r0, r6
 800485c:	f000 f854 	bl	8004908 <__malloc_unlock>
 8004860:	f104 000b 	add.w	r0, r4, #11
 8004864:	1d23      	adds	r3, r4, #4
 8004866:	f020 0007 	bic.w	r0, r0, #7
 800486a:	1ac2      	subs	r2, r0, r3
 800486c:	d0cc      	beq.n	8004808 <_malloc_r+0x20>
 800486e:	1a1b      	subs	r3, r3, r0
 8004870:	50a3      	str	r3, [r4, r2]
 8004872:	e7c9      	b.n	8004808 <_malloc_r+0x20>
 8004874:	4622      	mov	r2, r4
 8004876:	6864      	ldr	r4, [r4, #4]
 8004878:	e7cc      	b.n	8004814 <_malloc_r+0x2c>
 800487a:	1cc4      	adds	r4, r0, #3
 800487c:	f024 0403 	bic.w	r4, r4, #3
 8004880:	42a0      	cmp	r0, r4
 8004882:	d0e3      	beq.n	800484c <_malloc_r+0x64>
 8004884:	1a21      	subs	r1, r4, r0
 8004886:	4630      	mov	r0, r6
 8004888:	f000 f808 	bl	800489c <_sbrk_r>
 800488c:	3001      	adds	r0, #1
 800488e:	d1dd      	bne.n	800484c <_malloc_r+0x64>
 8004890:	e7cf      	b.n	8004832 <_malloc_r+0x4a>
 8004892:	bf00      	nop
 8004894:	200000d4 	.word	0x200000d4
 8004898:	200000d8 	.word	0x200000d8

0800489c <_sbrk_r>:
 800489c:	b538      	push	{r3, r4, r5, lr}
 800489e:	2300      	movs	r3, #0
 80048a0:	4d05      	ldr	r5, [pc, #20]	; (80048b8 <_sbrk_r+0x1c>)
 80048a2:	4604      	mov	r4, r0
 80048a4:	4608      	mov	r0, r1
 80048a6:	602b      	str	r3, [r5, #0]
 80048a8:	f000 fb8c 	bl	8004fc4 <_sbrk>
 80048ac:	1c43      	adds	r3, r0, #1
 80048ae:	d102      	bne.n	80048b6 <_sbrk_r+0x1a>
 80048b0:	682b      	ldr	r3, [r5, #0]
 80048b2:	b103      	cbz	r3, 80048b6 <_sbrk_r+0x1a>
 80048b4:	6023      	str	r3, [r4, #0]
 80048b6:	bd38      	pop	{r3, r4, r5, pc}
 80048b8:	200002d8 	.word	0x200002d8

080048bc <siprintf>:
 80048bc:	b40e      	push	{r1, r2, r3}
 80048be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048c2:	b500      	push	{lr}
 80048c4:	b09c      	sub	sp, #112	; 0x70
 80048c6:	ab1d      	add	r3, sp, #116	; 0x74
 80048c8:	9002      	str	r0, [sp, #8]
 80048ca:	9006      	str	r0, [sp, #24]
 80048cc:	9107      	str	r1, [sp, #28]
 80048ce:	9104      	str	r1, [sp, #16]
 80048d0:	4808      	ldr	r0, [pc, #32]	; (80048f4 <siprintf+0x38>)
 80048d2:	4909      	ldr	r1, [pc, #36]	; (80048f8 <siprintf+0x3c>)
 80048d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80048d8:	9105      	str	r1, [sp, #20]
 80048da:	6800      	ldr	r0, [r0, #0]
 80048dc:	a902      	add	r1, sp, #8
 80048de:	9301      	str	r3, [sp, #4]
 80048e0:	f000 f874 	bl	80049cc <_svfiprintf_r>
 80048e4:	2200      	movs	r2, #0
 80048e6:	9b02      	ldr	r3, [sp, #8]
 80048e8:	701a      	strb	r2, [r3, #0]
 80048ea:	b01c      	add	sp, #112	; 0x70
 80048ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80048f0:	b003      	add	sp, #12
 80048f2:	4770      	bx	lr
 80048f4:	2000003c 	.word	0x2000003c
 80048f8:	ffff0208 	.word	0xffff0208

080048fc <__malloc_lock>:
 80048fc:	4801      	ldr	r0, [pc, #4]	; (8004904 <__malloc_lock+0x8>)
 80048fe:	f000 bafb 	b.w	8004ef8 <__retarget_lock_acquire_recursive>
 8004902:	bf00      	nop
 8004904:	200002e0 	.word	0x200002e0

08004908 <__malloc_unlock>:
 8004908:	4801      	ldr	r0, [pc, #4]	; (8004910 <__malloc_unlock+0x8>)
 800490a:	f000 baf6 	b.w	8004efa <__retarget_lock_release_recursive>
 800490e:	bf00      	nop
 8004910:	200002e0 	.word	0x200002e0

08004914 <__ssputs_r>:
 8004914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004918:	688e      	ldr	r6, [r1, #8]
 800491a:	4682      	mov	sl, r0
 800491c:	429e      	cmp	r6, r3
 800491e:	460c      	mov	r4, r1
 8004920:	4690      	mov	r8, r2
 8004922:	461f      	mov	r7, r3
 8004924:	d838      	bhi.n	8004998 <__ssputs_r+0x84>
 8004926:	898a      	ldrh	r2, [r1, #12]
 8004928:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800492c:	d032      	beq.n	8004994 <__ssputs_r+0x80>
 800492e:	6825      	ldr	r5, [r4, #0]
 8004930:	6909      	ldr	r1, [r1, #16]
 8004932:	3301      	adds	r3, #1
 8004934:	eba5 0901 	sub.w	r9, r5, r1
 8004938:	6965      	ldr	r5, [r4, #20]
 800493a:	444b      	add	r3, r9
 800493c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004940:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004944:	106d      	asrs	r5, r5, #1
 8004946:	429d      	cmp	r5, r3
 8004948:	bf38      	it	cc
 800494a:	461d      	movcc	r5, r3
 800494c:	0553      	lsls	r3, r2, #21
 800494e:	d531      	bpl.n	80049b4 <__ssputs_r+0xa0>
 8004950:	4629      	mov	r1, r5
 8004952:	f7ff ff49 	bl	80047e8 <_malloc_r>
 8004956:	4606      	mov	r6, r0
 8004958:	b950      	cbnz	r0, 8004970 <__ssputs_r+0x5c>
 800495a:	230c      	movs	r3, #12
 800495c:	f04f 30ff 	mov.w	r0, #4294967295
 8004960:	f8ca 3000 	str.w	r3, [sl]
 8004964:	89a3      	ldrh	r3, [r4, #12]
 8004966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800496a:	81a3      	strh	r3, [r4, #12]
 800496c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004970:	464a      	mov	r2, r9
 8004972:	6921      	ldr	r1, [r4, #16]
 8004974:	f000 fad0 	bl	8004f18 <memcpy>
 8004978:	89a3      	ldrh	r3, [r4, #12]
 800497a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800497e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004982:	81a3      	strh	r3, [r4, #12]
 8004984:	6126      	str	r6, [r4, #16]
 8004986:	444e      	add	r6, r9
 8004988:	6026      	str	r6, [r4, #0]
 800498a:	463e      	mov	r6, r7
 800498c:	6165      	str	r5, [r4, #20]
 800498e:	eba5 0509 	sub.w	r5, r5, r9
 8004992:	60a5      	str	r5, [r4, #8]
 8004994:	42be      	cmp	r6, r7
 8004996:	d900      	bls.n	800499a <__ssputs_r+0x86>
 8004998:	463e      	mov	r6, r7
 800499a:	4632      	mov	r2, r6
 800499c:	4641      	mov	r1, r8
 800499e:	6820      	ldr	r0, [r4, #0]
 80049a0:	f000 fac8 	bl	8004f34 <memmove>
 80049a4:	68a3      	ldr	r3, [r4, #8]
 80049a6:	6822      	ldr	r2, [r4, #0]
 80049a8:	1b9b      	subs	r3, r3, r6
 80049aa:	4432      	add	r2, r6
 80049ac:	2000      	movs	r0, #0
 80049ae:	60a3      	str	r3, [r4, #8]
 80049b0:	6022      	str	r2, [r4, #0]
 80049b2:	e7db      	b.n	800496c <__ssputs_r+0x58>
 80049b4:	462a      	mov	r2, r5
 80049b6:	f000 fad7 	bl	8004f68 <_realloc_r>
 80049ba:	4606      	mov	r6, r0
 80049bc:	2800      	cmp	r0, #0
 80049be:	d1e1      	bne.n	8004984 <__ssputs_r+0x70>
 80049c0:	4650      	mov	r0, sl
 80049c2:	6921      	ldr	r1, [r4, #16]
 80049c4:	f7ff fec4 	bl	8004750 <_free_r>
 80049c8:	e7c7      	b.n	800495a <__ssputs_r+0x46>
	...

080049cc <_svfiprintf_r>:
 80049cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d0:	4698      	mov	r8, r3
 80049d2:	898b      	ldrh	r3, [r1, #12]
 80049d4:	4607      	mov	r7, r0
 80049d6:	061b      	lsls	r3, r3, #24
 80049d8:	460d      	mov	r5, r1
 80049da:	4614      	mov	r4, r2
 80049dc:	b09d      	sub	sp, #116	; 0x74
 80049de:	d50e      	bpl.n	80049fe <_svfiprintf_r+0x32>
 80049e0:	690b      	ldr	r3, [r1, #16]
 80049e2:	b963      	cbnz	r3, 80049fe <_svfiprintf_r+0x32>
 80049e4:	2140      	movs	r1, #64	; 0x40
 80049e6:	f7ff feff 	bl	80047e8 <_malloc_r>
 80049ea:	6028      	str	r0, [r5, #0]
 80049ec:	6128      	str	r0, [r5, #16]
 80049ee:	b920      	cbnz	r0, 80049fa <_svfiprintf_r+0x2e>
 80049f0:	230c      	movs	r3, #12
 80049f2:	603b      	str	r3, [r7, #0]
 80049f4:	f04f 30ff 	mov.w	r0, #4294967295
 80049f8:	e0d1      	b.n	8004b9e <_svfiprintf_r+0x1d2>
 80049fa:	2340      	movs	r3, #64	; 0x40
 80049fc:	616b      	str	r3, [r5, #20]
 80049fe:	2300      	movs	r3, #0
 8004a00:	9309      	str	r3, [sp, #36]	; 0x24
 8004a02:	2320      	movs	r3, #32
 8004a04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a08:	2330      	movs	r3, #48	; 0x30
 8004a0a:	f04f 0901 	mov.w	r9, #1
 8004a0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004bb8 <_svfiprintf_r+0x1ec>
 8004a16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a1a:	4623      	mov	r3, r4
 8004a1c:	469a      	mov	sl, r3
 8004a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a22:	b10a      	cbz	r2, 8004a28 <_svfiprintf_r+0x5c>
 8004a24:	2a25      	cmp	r2, #37	; 0x25
 8004a26:	d1f9      	bne.n	8004a1c <_svfiprintf_r+0x50>
 8004a28:	ebba 0b04 	subs.w	fp, sl, r4
 8004a2c:	d00b      	beq.n	8004a46 <_svfiprintf_r+0x7a>
 8004a2e:	465b      	mov	r3, fp
 8004a30:	4622      	mov	r2, r4
 8004a32:	4629      	mov	r1, r5
 8004a34:	4638      	mov	r0, r7
 8004a36:	f7ff ff6d 	bl	8004914 <__ssputs_r>
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	f000 80aa 	beq.w	8004b94 <_svfiprintf_r+0x1c8>
 8004a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a42:	445a      	add	r2, fp
 8004a44:	9209      	str	r2, [sp, #36]	; 0x24
 8004a46:	f89a 3000 	ldrb.w	r3, [sl]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 80a2 	beq.w	8004b94 <_svfiprintf_r+0x1c8>
 8004a50:	2300      	movs	r3, #0
 8004a52:	f04f 32ff 	mov.w	r2, #4294967295
 8004a56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a5a:	f10a 0a01 	add.w	sl, sl, #1
 8004a5e:	9304      	str	r3, [sp, #16]
 8004a60:	9307      	str	r3, [sp, #28]
 8004a62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a66:	931a      	str	r3, [sp, #104]	; 0x68
 8004a68:	4654      	mov	r4, sl
 8004a6a:	2205      	movs	r2, #5
 8004a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a70:	4851      	ldr	r0, [pc, #324]	; (8004bb8 <_svfiprintf_r+0x1ec>)
 8004a72:	f000 fa43 	bl	8004efc <memchr>
 8004a76:	9a04      	ldr	r2, [sp, #16]
 8004a78:	b9d8      	cbnz	r0, 8004ab2 <_svfiprintf_r+0xe6>
 8004a7a:	06d0      	lsls	r0, r2, #27
 8004a7c:	bf44      	itt	mi
 8004a7e:	2320      	movmi	r3, #32
 8004a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a84:	0711      	lsls	r1, r2, #28
 8004a86:	bf44      	itt	mi
 8004a88:	232b      	movmi	r3, #43	; 0x2b
 8004a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a92:	2b2a      	cmp	r3, #42	; 0x2a
 8004a94:	d015      	beq.n	8004ac2 <_svfiprintf_r+0xf6>
 8004a96:	4654      	mov	r4, sl
 8004a98:	2000      	movs	r0, #0
 8004a9a:	f04f 0c0a 	mov.w	ip, #10
 8004a9e:	9a07      	ldr	r2, [sp, #28]
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004aa6:	3b30      	subs	r3, #48	; 0x30
 8004aa8:	2b09      	cmp	r3, #9
 8004aaa:	d94e      	bls.n	8004b4a <_svfiprintf_r+0x17e>
 8004aac:	b1b0      	cbz	r0, 8004adc <_svfiprintf_r+0x110>
 8004aae:	9207      	str	r2, [sp, #28]
 8004ab0:	e014      	b.n	8004adc <_svfiprintf_r+0x110>
 8004ab2:	eba0 0308 	sub.w	r3, r0, r8
 8004ab6:	fa09 f303 	lsl.w	r3, r9, r3
 8004aba:	4313      	orrs	r3, r2
 8004abc:	46a2      	mov	sl, r4
 8004abe:	9304      	str	r3, [sp, #16]
 8004ac0:	e7d2      	b.n	8004a68 <_svfiprintf_r+0x9c>
 8004ac2:	9b03      	ldr	r3, [sp, #12]
 8004ac4:	1d19      	adds	r1, r3, #4
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	9103      	str	r1, [sp, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bfbb      	ittet	lt
 8004ace:	425b      	neglt	r3, r3
 8004ad0:	f042 0202 	orrlt.w	r2, r2, #2
 8004ad4:	9307      	strge	r3, [sp, #28]
 8004ad6:	9307      	strlt	r3, [sp, #28]
 8004ad8:	bfb8      	it	lt
 8004ada:	9204      	strlt	r2, [sp, #16]
 8004adc:	7823      	ldrb	r3, [r4, #0]
 8004ade:	2b2e      	cmp	r3, #46	; 0x2e
 8004ae0:	d10c      	bne.n	8004afc <_svfiprintf_r+0x130>
 8004ae2:	7863      	ldrb	r3, [r4, #1]
 8004ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ae6:	d135      	bne.n	8004b54 <_svfiprintf_r+0x188>
 8004ae8:	9b03      	ldr	r3, [sp, #12]
 8004aea:	3402      	adds	r4, #2
 8004aec:	1d1a      	adds	r2, r3, #4
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	9203      	str	r2, [sp, #12]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	bfb8      	it	lt
 8004af6:	f04f 33ff 	movlt.w	r3, #4294967295
 8004afa:	9305      	str	r3, [sp, #20]
 8004afc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004bc8 <_svfiprintf_r+0x1fc>
 8004b00:	2203      	movs	r2, #3
 8004b02:	4650      	mov	r0, sl
 8004b04:	7821      	ldrb	r1, [r4, #0]
 8004b06:	f000 f9f9 	bl	8004efc <memchr>
 8004b0a:	b140      	cbz	r0, 8004b1e <_svfiprintf_r+0x152>
 8004b0c:	2340      	movs	r3, #64	; 0x40
 8004b0e:	eba0 000a 	sub.w	r0, r0, sl
 8004b12:	fa03 f000 	lsl.w	r0, r3, r0
 8004b16:	9b04      	ldr	r3, [sp, #16]
 8004b18:	3401      	adds	r4, #1
 8004b1a:	4303      	orrs	r3, r0
 8004b1c:	9304      	str	r3, [sp, #16]
 8004b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b22:	2206      	movs	r2, #6
 8004b24:	4825      	ldr	r0, [pc, #148]	; (8004bbc <_svfiprintf_r+0x1f0>)
 8004b26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b2a:	f000 f9e7 	bl	8004efc <memchr>
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	d038      	beq.n	8004ba4 <_svfiprintf_r+0x1d8>
 8004b32:	4b23      	ldr	r3, [pc, #140]	; (8004bc0 <_svfiprintf_r+0x1f4>)
 8004b34:	bb1b      	cbnz	r3, 8004b7e <_svfiprintf_r+0x1b2>
 8004b36:	9b03      	ldr	r3, [sp, #12]
 8004b38:	3307      	adds	r3, #7
 8004b3a:	f023 0307 	bic.w	r3, r3, #7
 8004b3e:	3308      	adds	r3, #8
 8004b40:	9303      	str	r3, [sp, #12]
 8004b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b44:	4433      	add	r3, r6
 8004b46:	9309      	str	r3, [sp, #36]	; 0x24
 8004b48:	e767      	b.n	8004a1a <_svfiprintf_r+0x4e>
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	2001      	movs	r0, #1
 8004b4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b52:	e7a5      	b.n	8004aa0 <_svfiprintf_r+0xd4>
 8004b54:	2300      	movs	r3, #0
 8004b56:	f04f 0c0a 	mov.w	ip, #10
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	3401      	adds	r4, #1
 8004b5e:	9305      	str	r3, [sp, #20]
 8004b60:	4620      	mov	r0, r4
 8004b62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b66:	3a30      	subs	r2, #48	; 0x30
 8004b68:	2a09      	cmp	r2, #9
 8004b6a:	d903      	bls.n	8004b74 <_svfiprintf_r+0x1a8>
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0c5      	beq.n	8004afc <_svfiprintf_r+0x130>
 8004b70:	9105      	str	r1, [sp, #20]
 8004b72:	e7c3      	b.n	8004afc <_svfiprintf_r+0x130>
 8004b74:	4604      	mov	r4, r0
 8004b76:	2301      	movs	r3, #1
 8004b78:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b7c:	e7f0      	b.n	8004b60 <_svfiprintf_r+0x194>
 8004b7e:	ab03      	add	r3, sp, #12
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	462a      	mov	r2, r5
 8004b84:	4638      	mov	r0, r7
 8004b86:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <_svfiprintf_r+0x1f8>)
 8004b88:	a904      	add	r1, sp, #16
 8004b8a:	f3af 8000 	nop.w
 8004b8e:	1c42      	adds	r2, r0, #1
 8004b90:	4606      	mov	r6, r0
 8004b92:	d1d6      	bne.n	8004b42 <_svfiprintf_r+0x176>
 8004b94:	89ab      	ldrh	r3, [r5, #12]
 8004b96:	065b      	lsls	r3, r3, #25
 8004b98:	f53f af2c 	bmi.w	80049f4 <_svfiprintf_r+0x28>
 8004b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b9e:	b01d      	add	sp, #116	; 0x74
 8004ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba4:	ab03      	add	r3, sp, #12
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	462a      	mov	r2, r5
 8004baa:	4638      	mov	r0, r7
 8004bac:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <_svfiprintf_r+0x1f8>)
 8004bae:	a904      	add	r1, sp, #16
 8004bb0:	f000 f87c 	bl	8004cac <_printf_i>
 8004bb4:	e7eb      	b.n	8004b8e <_svfiprintf_r+0x1c2>
 8004bb6:	bf00      	nop
 8004bb8:	0800517c 	.word	0x0800517c
 8004bbc:	08005186 	.word	0x08005186
 8004bc0:	00000000 	.word	0x00000000
 8004bc4:	08004915 	.word	0x08004915
 8004bc8:	08005182 	.word	0x08005182

08004bcc <_printf_common>:
 8004bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd0:	4616      	mov	r6, r2
 8004bd2:	4699      	mov	r9, r3
 8004bd4:	688a      	ldr	r2, [r1, #8]
 8004bd6:	690b      	ldr	r3, [r1, #16]
 8004bd8:	4607      	mov	r7, r0
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	bfb8      	it	lt
 8004bde:	4613      	movlt	r3, r2
 8004be0:	6033      	str	r3, [r6, #0]
 8004be2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004be6:	460c      	mov	r4, r1
 8004be8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bec:	b10a      	cbz	r2, 8004bf2 <_printf_common+0x26>
 8004bee:	3301      	adds	r3, #1
 8004bf0:	6033      	str	r3, [r6, #0]
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	0699      	lsls	r1, r3, #26
 8004bf6:	bf42      	ittt	mi
 8004bf8:	6833      	ldrmi	r3, [r6, #0]
 8004bfa:	3302      	addmi	r3, #2
 8004bfc:	6033      	strmi	r3, [r6, #0]
 8004bfe:	6825      	ldr	r5, [r4, #0]
 8004c00:	f015 0506 	ands.w	r5, r5, #6
 8004c04:	d106      	bne.n	8004c14 <_printf_common+0x48>
 8004c06:	f104 0a19 	add.w	sl, r4, #25
 8004c0a:	68e3      	ldr	r3, [r4, #12]
 8004c0c:	6832      	ldr	r2, [r6, #0]
 8004c0e:	1a9b      	subs	r3, r3, r2
 8004c10:	42ab      	cmp	r3, r5
 8004c12:	dc28      	bgt.n	8004c66 <_printf_common+0x9a>
 8004c14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c18:	1e13      	subs	r3, r2, #0
 8004c1a:	6822      	ldr	r2, [r4, #0]
 8004c1c:	bf18      	it	ne
 8004c1e:	2301      	movne	r3, #1
 8004c20:	0692      	lsls	r2, r2, #26
 8004c22:	d42d      	bmi.n	8004c80 <_printf_common+0xb4>
 8004c24:	4649      	mov	r1, r9
 8004c26:	4638      	mov	r0, r7
 8004c28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c2c:	47c0      	blx	r8
 8004c2e:	3001      	adds	r0, #1
 8004c30:	d020      	beq.n	8004c74 <_printf_common+0xa8>
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	68e5      	ldr	r5, [r4, #12]
 8004c36:	f003 0306 	and.w	r3, r3, #6
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	bf18      	it	ne
 8004c3e:	2500      	movne	r5, #0
 8004c40:	6832      	ldr	r2, [r6, #0]
 8004c42:	f04f 0600 	mov.w	r6, #0
 8004c46:	68a3      	ldr	r3, [r4, #8]
 8004c48:	bf08      	it	eq
 8004c4a:	1aad      	subeq	r5, r5, r2
 8004c4c:	6922      	ldr	r2, [r4, #16]
 8004c4e:	bf08      	it	eq
 8004c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c54:	4293      	cmp	r3, r2
 8004c56:	bfc4      	itt	gt
 8004c58:	1a9b      	subgt	r3, r3, r2
 8004c5a:	18ed      	addgt	r5, r5, r3
 8004c5c:	341a      	adds	r4, #26
 8004c5e:	42b5      	cmp	r5, r6
 8004c60:	d11a      	bne.n	8004c98 <_printf_common+0xcc>
 8004c62:	2000      	movs	r0, #0
 8004c64:	e008      	b.n	8004c78 <_printf_common+0xac>
 8004c66:	2301      	movs	r3, #1
 8004c68:	4652      	mov	r2, sl
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	4638      	mov	r0, r7
 8004c6e:	47c0      	blx	r8
 8004c70:	3001      	adds	r0, #1
 8004c72:	d103      	bne.n	8004c7c <_printf_common+0xb0>
 8004c74:	f04f 30ff 	mov.w	r0, #4294967295
 8004c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c7c:	3501      	adds	r5, #1
 8004c7e:	e7c4      	b.n	8004c0a <_printf_common+0x3e>
 8004c80:	2030      	movs	r0, #48	; 0x30
 8004c82:	18e1      	adds	r1, r4, r3
 8004c84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c8e:	4422      	add	r2, r4
 8004c90:	3302      	adds	r3, #2
 8004c92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c96:	e7c5      	b.n	8004c24 <_printf_common+0x58>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	4622      	mov	r2, r4
 8004c9c:	4649      	mov	r1, r9
 8004c9e:	4638      	mov	r0, r7
 8004ca0:	47c0      	blx	r8
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	d0e6      	beq.n	8004c74 <_printf_common+0xa8>
 8004ca6:	3601      	adds	r6, #1
 8004ca8:	e7d9      	b.n	8004c5e <_printf_common+0x92>
	...

08004cac <_printf_i>:
 8004cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb0:	460c      	mov	r4, r1
 8004cb2:	7e27      	ldrb	r7, [r4, #24]
 8004cb4:	4691      	mov	r9, r2
 8004cb6:	2f78      	cmp	r7, #120	; 0x78
 8004cb8:	4680      	mov	r8, r0
 8004cba:	469a      	mov	sl, r3
 8004cbc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004cbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cc2:	d807      	bhi.n	8004cd4 <_printf_i+0x28>
 8004cc4:	2f62      	cmp	r7, #98	; 0x62
 8004cc6:	d80a      	bhi.n	8004cde <_printf_i+0x32>
 8004cc8:	2f00      	cmp	r7, #0
 8004cca:	f000 80d9 	beq.w	8004e80 <_printf_i+0x1d4>
 8004cce:	2f58      	cmp	r7, #88	; 0x58
 8004cd0:	f000 80a4 	beq.w	8004e1c <_printf_i+0x170>
 8004cd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cdc:	e03a      	b.n	8004d54 <_printf_i+0xa8>
 8004cde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ce2:	2b15      	cmp	r3, #21
 8004ce4:	d8f6      	bhi.n	8004cd4 <_printf_i+0x28>
 8004ce6:	a001      	add	r0, pc, #4	; (adr r0, 8004cec <_printf_i+0x40>)
 8004ce8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004cec:	08004d45 	.word	0x08004d45
 8004cf0:	08004d59 	.word	0x08004d59
 8004cf4:	08004cd5 	.word	0x08004cd5
 8004cf8:	08004cd5 	.word	0x08004cd5
 8004cfc:	08004cd5 	.word	0x08004cd5
 8004d00:	08004cd5 	.word	0x08004cd5
 8004d04:	08004d59 	.word	0x08004d59
 8004d08:	08004cd5 	.word	0x08004cd5
 8004d0c:	08004cd5 	.word	0x08004cd5
 8004d10:	08004cd5 	.word	0x08004cd5
 8004d14:	08004cd5 	.word	0x08004cd5
 8004d18:	08004e67 	.word	0x08004e67
 8004d1c:	08004d89 	.word	0x08004d89
 8004d20:	08004e49 	.word	0x08004e49
 8004d24:	08004cd5 	.word	0x08004cd5
 8004d28:	08004cd5 	.word	0x08004cd5
 8004d2c:	08004e89 	.word	0x08004e89
 8004d30:	08004cd5 	.word	0x08004cd5
 8004d34:	08004d89 	.word	0x08004d89
 8004d38:	08004cd5 	.word	0x08004cd5
 8004d3c:	08004cd5 	.word	0x08004cd5
 8004d40:	08004e51 	.word	0x08004e51
 8004d44:	680b      	ldr	r3, [r1, #0]
 8004d46:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d4a:	1d1a      	adds	r2, r3, #4
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	600a      	str	r2, [r1, #0]
 8004d50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d54:	2301      	movs	r3, #1
 8004d56:	e0a4      	b.n	8004ea2 <_printf_i+0x1f6>
 8004d58:	6825      	ldr	r5, [r4, #0]
 8004d5a:	6808      	ldr	r0, [r1, #0]
 8004d5c:	062e      	lsls	r6, r5, #24
 8004d5e:	f100 0304 	add.w	r3, r0, #4
 8004d62:	d50a      	bpl.n	8004d7a <_printf_i+0xce>
 8004d64:	6805      	ldr	r5, [r0, #0]
 8004d66:	600b      	str	r3, [r1, #0]
 8004d68:	2d00      	cmp	r5, #0
 8004d6a:	da03      	bge.n	8004d74 <_printf_i+0xc8>
 8004d6c:	232d      	movs	r3, #45	; 0x2d
 8004d6e:	426d      	negs	r5, r5
 8004d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d74:	230a      	movs	r3, #10
 8004d76:	485e      	ldr	r0, [pc, #376]	; (8004ef0 <_printf_i+0x244>)
 8004d78:	e019      	b.n	8004dae <_printf_i+0x102>
 8004d7a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d7e:	6805      	ldr	r5, [r0, #0]
 8004d80:	600b      	str	r3, [r1, #0]
 8004d82:	bf18      	it	ne
 8004d84:	b22d      	sxthne	r5, r5
 8004d86:	e7ef      	b.n	8004d68 <_printf_i+0xbc>
 8004d88:	680b      	ldr	r3, [r1, #0]
 8004d8a:	6825      	ldr	r5, [r4, #0]
 8004d8c:	1d18      	adds	r0, r3, #4
 8004d8e:	6008      	str	r0, [r1, #0]
 8004d90:	0628      	lsls	r0, r5, #24
 8004d92:	d501      	bpl.n	8004d98 <_printf_i+0xec>
 8004d94:	681d      	ldr	r5, [r3, #0]
 8004d96:	e002      	b.n	8004d9e <_printf_i+0xf2>
 8004d98:	0669      	lsls	r1, r5, #25
 8004d9a:	d5fb      	bpl.n	8004d94 <_printf_i+0xe8>
 8004d9c:	881d      	ldrh	r5, [r3, #0]
 8004d9e:	2f6f      	cmp	r7, #111	; 0x6f
 8004da0:	bf0c      	ite	eq
 8004da2:	2308      	moveq	r3, #8
 8004da4:	230a      	movne	r3, #10
 8004da6:	4852      	ldr	r0, [pc, #328]	; (8004ef0 <_printf_i+0x244>)
 8004da8:	2100      	movs	r1, #0
 8004daa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dae:	6866      	ldr	r6, [r4, #4]
 8004db0:	2e00      	cmp	r6, #0
 8004db2:	bfa8      	it	ge
 8004db4:	6821      	ldrge	r1, [r4, #0]
 8004db6:	60a6      	str	r6, [r4, #8]
 8004db8:	bfa4      	itt	ge
 8004dba:	f021 0104 	bicge.w	r1, r1, #4
 8004dbe:	6021      	strge	r1, [r4, #0]
 8004dc0:	b90d      	cbnz	r5, 8004dc6 <_printf_i+0x11a>
 8004dc2:	2e00      	cmp	r6, #0
 8004dc4:	d04d      	beq.n	8004e62 <_printf_i+0x1b6>
 8004dc6:	4616      	mov	r6, r2
 8004dc8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004dcc:	fb03 5711 	mls	r7, r3, r1, r5
 8004dd0:	5dc7      	ldrb	r7, [r0, r7]
 8004dd2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004dd6:	462f      	mov	r7, r5
 8004dd8:	42bb      	cmp	r3, r7
 8004dda:	460d      	mov	r5, r1
 8004ddc:	d9f4      	bls.n	8004dc8 <_printf_i+0x11c>
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d10b      	bne.n	8004dfa <_printf_i+0x14e>
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	07df      	lsls	r7, r3, #31
 8004de6:	d508      	bpl.n	8004dfa <_printf_i+0x14e>
 8004de8:	6923      	ldr	r3, [r4, #16]
 8004dea:	6861      	ldr	r1, [r4, #4]
 8004dec:	4299      	cmp	r1, r3
 8004dee:	bfde      	ittt	le
 8004df0:	2330      	movle	r3, #48	; 0x30
 8004df2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004df6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004dfa:	1b92      	subs	r2, r2, r6
 8004dfc:	6122      	str	r2, [r4, #16]
 8004dfe:	464b      	mov	r3, r9
 8004e00:	4621      	mov	r1, r4
 8004e02:	4640      	mov	r0, r8
 8004e04:	f8cd a000 	str.w	sl, [sp]
 8004e08:	aa03      	add	r2, sp, #12
 8004e0a:	f7ff fedf 	bl	8004bcc <_printf_common>
 8004e0e:	3001      	adds	r0, #1
 8004e10:	d14c      	bne.n	8004eac <_printf_i+0x200>
 8004e12:	f04f 30ff 	mov.w	r0, #4294967295
 8004e16:	b004      	add	sp, #16
 8004e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e1c:	4834      	ldr	r0, [pc, #208]	; (8004ef0 <_printf_i+0x244>)
 8004e1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e22:	680e      	ldr	r6, [r1, #0]
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	f856 5b04 	ldr.w	r5, [r6], #4
 8004e2a:	061f      	lsls	r7, r3, #24
 8004e2c:	600e      	str	r6, [r1, #0]
 8004e2e:	d514      	bpl.n	8004e5a <_printf_i+0x1ae>
 8004e30:	07d9      	lsls	r1, r3, #31
 8004e32:	bf44      	itt	mi
 8004e34:	f043 0320 	orrmi.w	r3, r3, #32
 8004e38:	6023      	strmi	r3, [r4, #0]
 8004e3a:	b91d      	cbnz	r5, 8004e44 <_printf_i+0x198>
 8004e3c:	6823      	ldr	r3, [r4, #0]
 8004e3e:	f023 0320 	bic.w	r3, r3, #32
 8004e42:	6023      	str	r3, [r4, #0]
 8004e44:	2310      	movs	r3, #16
 8004e46:	e7af      	b.n	8004da8 <_printf_i+0xfc>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	f043 0320 	orr.w	r3, r3, #32
 8004e4e:	6023      	str	r3, [r4, #0]
 8004e50:	2378      	movs	r3, #120	; 0x78
 8004e52:	4828      	ldr	r0, [pc, #160]	; (8004ef4 <_printf_i+0x248>)
 8004e54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e58:	e7e3      	b.n	8004e22 <_printf_i+0x176>
 8004e5a:	065e      	lsls	r6, r3, #25
 8004e5c:	bf48      	it	mi
 8004e5e:	b2ad      	uxthmi	r5, r5
 8004e60:	e7e6      	b.n	8004e30 <_printf_i+0x184>
 8004e62:	4616      	mov	r6, r2
 8004e64:	e7bb      	b.n	8004dde <_printf_i+0x132>
 8004e66:	680b      	ldr	r3, [r1, #0]
 8004e68:	6826      	ldr	r6, [r4, #0]
 8004e6a:	1d1d      	adds	r5, r3, #4
 8004e6c:	6960      	ldr	r0, [r4, #20]
 8004e6e:	600d      	str	r5, [r1, #0]
 8004e70:	0635      	lsls	r5, r6, #24
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	d501      	bpl.n	8004e7a <_printf_i+0x1ce>
 8004e76:	6018      	str	r0, [r3, #0]
 8004e78:	e002      	b.n	8004e80 <_printf_i+0x1d4>
 8004e7a:	0671      	lsls	r1, r6, #25
 8004e7c:	d5fb      	bpl.n	8004e76 <_printf_i+0x1ca>
 8004e7e:	8018      	strh	r0, [r3, #0]
 8004e80:	2300      	movs	r3, #0
 8004e82:	4616      	mov	r6, r2
 8004e84:	6123      	str	r3, [r4, #16]
 8004e86:	e7ba      	b.n	8004dfe <_printf_i+0x152>
 8004e88:	680b      	ldr	r3, [r1, #0]
 8004e8a:	1d1a      	adds	r2, r3, #4
 8004e8c:	600a      	str	r2, [r1, #0]
 8004e8e:	681e      	ldr	r6, [r3, #0]
 8004e90:	2100      	movs	r1, #0
 8004e92:	4630      	mov	r0, r6
 8004e94:	6862      	ldr	r2, [r4, #4]
 8004e96:	f000 f831 	bl	8004efc <memchr>
 8004e9a:	b108      	cbz	r0, 8004ea0 <_printf_i+0x1f4>
 8004e9c:	1b80      	subs	r0, r0, r6
 8004e9e:	6060      	str	r0, [r4, #4]
 8004ea0:	6863      	ldr	r3, [r4, #4]
 8004ea2:	6123      	str	r3, [r4, #16]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eaa:	e7a8      	b.n	8004dfe <_printf_i+0x152>
 8004eac:	4632      	mov	r2, r6
 8004eae:	4649      	mov	r1, r9
 8004eb0:	4640      	mov	r0, r8
 8004eb2:	6923      	ldr	r3, [r4, #16]
 8004eb4:	47d0      	blx	sl
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	d0ab      	beq.n	8004e12 <_printf_i+0x166>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	079b      	lsls	r3, r3, #30
 8004ebe:	d413      	bmi.n	8004ee8 <_printf_i+0x23c>
 8004ec0:	68e0      	ldr	r0, [r4, #12]
 8004ec2:	9b03      	ldr	r3, [sp, #12]
 8004ec4:	4298      	cmp	r0, r3
 8004ec6:	bfb8      	it	lt
 8004ec8:	4618      	movlt	r0, r3
 8004eca:	e7a4      	b.n	8004e16 <_printf_i+0x16a>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	4632      	mov	r2, r6
 8004ed0:	4649      	mov	r1, r9
 8004ed2:	4640      	mov	r0, r8
 8004ed4:	47d0      	blx	sl
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	d09b      	beq.n	8004e12 <_printf_i+0x166>
 8004eda:	3501      	adds	r5, #1
 8004edc:	68e3      	ldr	r3, [r4, #12]
 8004ede:	9903      	ldr	r1, [sp, #12]
 8004ee0:	1a5b      	subs	r3, r3, r1
 8004ee2:	42ab      	cmp	r3, r5
 8004ee4:	dcf2      	bgt.n	8004ecc <_printf_i+0x220>
 8004ee6:	e7eb      	b.n	8004ec0 <_printf_i+0x214>
 8004ee8:	2500      	movs	r5, #0
 8004eea:	f104 0619 	add.w	r6, r4, #25
 8004eee:	e7f5      	b.n	8004edc <_printf_i+0x230>
 8004ef0:	0800518d 	.word	0x0800518d
 8004ef4:	0800519e 	.word	0x0800519e

08004ef8 <__retarget_lock_acquire_recursive>:
 8004ef8:	4770      	bx	lr

08004efa <__retarget_lock_release_recursive>:
 8004efa:	4770      	bx	lr

08004efc <memchr>:
 8004efc:	4603      	mov	r3, r0
 8004efe:	b510      	push	{r4, lr}
 8004f00:	b2c9      	uxtb	r1, r1
 8004f02:	4402      	add	r2, r0
 8004f04:	4293      	cmp	r3, r2
 8004f06:	4618      	mov	r0, r3
 8004f08:	d101      	bne.n	8004f0e <memchr+0x12>
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	e003      	b.n	8004f16 <memchr+0x1a>
 8004f0e:	7804      	ldrb	r4, [r0, #0]
 8004f10:	3301      	adds	r3, #1
 8004f12:	428c      	cmp	r4, r1
 8004f14:	d1f6      	bne.n	8004f04 <memchr+0x8>
 8004f16:	bd10      	pop	{r4, pc}

08004f18 <memcpy>:
 8004f18:	440a      	add	r2, r1
 8004f1a:	4291      	cmp	r1, r2
 8004f1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f20:	d100      	bne.n	8004f24 <memcpy+0xc>
 8004f22:	4770      	bx	lr
 8004f24:	b510      	push	{r4, lr}
 8004f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f2a:	4291      	cmp	r1, r2
 8004f2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f30:	d1f9      	bne.n	8004f26 <memcpy+0xe>
 8004f32:	bd10      	pop	{r4, pc}

08004f34 <memmove>:
 8004f34:	4288      	cmp	r0, r1
 8004f36:	b510      	push	{r4, lr}
 8004f38:	eb01 0402 	add.w	r4, r1, r2
 8004f3c:	d902      	bls.n	8004f44 <memmove+0x10>
 8004f3e:	4284      	cmp	r4, r0
 8004f40:	4623      	mov	r3, r4
 8004f42:	d807      	bhi.n	8004f54 <memmove+0x20>
 8004f44:	1e43      	subs	r3, r0, #1
 8004f46:	42a1      	cmp	r1, r4
 8004f48:	d008      	beq.n	8004f5c <memmove+0x28>
 8004f4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f52:	e7f8      	b.n	8004f46 <memmove+0x12>
 8004f54:	4601      	mov	r1, r0
 8004f56:	4402      	add	r2, r0
 8004f58:	428a      	cmp	r2, r1
 8004f5a:	d100      	bne.n	8004f5e <memmove+0x2a>
 8004f5c:	bd10      	pop	{r4, pc}
 8004f5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f66:	e7f7      	b.n	8004f58 <memmove+0x24>

08004f68 <_realloc_r>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	4607      	mov	r7, r0
 8004f6c:	4614      	mov	r4, r2
 8004f6e:	460e      	mov	r6, r1
 8004f70:	b921      	cbnz	r1, 8004f7c <_realloc_r+0x14>
 8004f72:	4611      	mov	r1, r2
 8004f74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f78:	f7ff bc36 	b.w	80047e8 <_malloc_r>
 8004f7c:	b922      	cbnz	r2, 8004f88 <_realloc_r+0x20>
 8004f7e:	f7ff fbe7 	bl	8004750 <_free_r>
 8004f82:	4625      	mov	r5, r4
 8004f84:	4628      	mov	r0, r5
 8004f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f88:	f000 f814 	bl	8004fb4 <_malloc_usable_size_r>
 8004f8c:	42a0      	cmp	r0, r4
 8004f8e:	d20f      	bcs.n	8004fb0 <_realloc_r+0x48>
 8004f90:	4621      	mov	r1, r4
 8004f92:	4638      	mov	r0, r7
 8004f94:	f7ff fc28 	bl	80047e8 <_malloc_r>
 8004f98:	4605      	mov	r5, r0
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	d0f2      	beq.n	8004f84 <_realloc_r+0x1c>
 8004f9e:	4631      	mov	r1, r6
 8004fa0:	4622      	mov	r2, r4
 8004fa2:	f7ff ffb9 	bl	8004f18 <memcpy>
 8004fa6:	4631      	mov	r1, r6
 8004fa8:	4638      	mov	r0, r7
 8004faa:	f7ff fbd1 	bl	8004750 <_free_r>
 8004fae:	e7e9      	b.n	8004f84 <_realloc_r+0x1c>
 8004fb0:	4635      	mov	r5, r6
 8004fb2:	e7e7      	b.n	8004f84 <_realloc_r+0x1c>

08004fb4 <_malloc_usable_size_r>:
 8004fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fb8:	1f18      	subs	r0, r3, #4
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	bfbc      	itt	lt
 8004fbe:	580b      	ldrlt	r3, [r1, r0]
 8004fc0:	18c0      	addlt	r0, r0, r3
 8004fc2:	4770      	bx	lr

08004fc4 <_sbrk>:
 8004fc4:	4b04      	ldr	r3, [pc, #16]	; (8004fd8 <_sbrk+0x14>)
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	6819      	ldr	r1, [r3, #0]
 8004fca:	b909      	cbnz	r1, 8004fd0 <_sbrk+0xc>
 8004fcc:	4903      	ldr	r1, [pc, #12]	; (8004fdc <_sbrk+0x18>)
 8004fce:	6019      	str	r1, [r3, #0]
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	4402      	add	r2, r0
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	4770      	bx	lr
 8004fd8:	200000dc 	.word	0x200000dc
 8004fdc:	200002e8 	.word	0x200002e8

08004fe0 <_init>:
 8004fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe2:	bf00      	nop
 8004fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe6:	bc08      	pop	{r3}
 8004fe8:	469e      	mov	lr, r3
 8004fea:	4770      	bx	lr

08004fec <_fini>:
 8004fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fee:	bf00      	nop
 8004ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ff2:	bc08      	pop	{r3}
 8004ff4:	469e      	mov	lr, r3
 8004ff6:	4770      	bx	lr
