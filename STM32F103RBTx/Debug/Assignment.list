
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003010  08003010  00013010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003030  08003030  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08003030  08003030  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003030  08003030  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003030  08003030  00013030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003034  08003034  00013034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08003038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000030  08003068  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08003068  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d03c  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000234b  00000000  00000000  0002d095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0002f3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002feb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a03  00000000  00000000  00030850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d720  00000000  00000000  00048253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000845bd  00000000  00000000  00055973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d9f30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002980  00000000  00000000  000d9f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ff8 	.word	0x08002ff8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08002ff8 	.word	0x08002ff8

0800014c <getKeyInput>:
		button_flag[i] = 0;
		TimerForKeyPress[i] = 200;
	}
}

void getKeyInput() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
    for (int i = 1; i <= NO_BUTTONS; i++) {
 8000152:	2301      	movs	r3, #1
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e098      	b.n	800028a <getKeyInput+0x13e>
        KeyReg0[i] = KeyReg1[i];
 8000158:	4a50      	ldr	r2, [pc, #320]	; (800029c <getKeyInput+0x150>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000160:	494f      	ldr	r1, [pc, #316]	; (80002a0 <getKeyInput+0x154>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg1[i] = KeyReg2[i];
 8000168:	4a4e      	ldr	r2, [pc, #312]	; (80002a4 <getKeyInput+0x158>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000170:	494a      	ldr	r1, [pc, #296]	; (800029c <getKeyInput+0x150>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        if (i == 1) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b01      	cmp	r3, #1
 800017c:	d109      	bne.n	8000192 <getKeyInput+0x46>
 800017e:	2102      	movs	r1, #2
 8000180:	4849      	ldr	r0, [pc, #292]	; (80002a8 <getKeyInput+0x15c>)
 8000182:	f001 fb97 	bl	80018b4 <HAL_GPIO_ReadPin>
 8000186:	4603      	mov	r3, r0
 8000188:	4619      	mov	r1, r3
 800018a:	4a46      	ldr	r2, [pc, #280]	; (80002a4 <getKeyInput+0x158>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 2) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2b02      	cmp	r3, #2
 8000196:	d109      	bne.n	80001ac <getKeyInput+0x60>
 8000198:	2110      	movs	r1, #16
 800019a:	4843      	ldr	r0, [pc, #268]	; (80002a8 <getKeyInput+0x15c>)
 800019c:	f001 fb8a 	bl	80018b4 <HAL_GPIO_ReadPin>
 80001a0:	4603      	mov	r3, r0
 80001a2:	4619      	mov	r1, r3
 80001a4:	4a3f      	ldr	r2, [pc, #252]	; (80002a4 <getKeyInput+0x158>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 3) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2b03      	cmp	r3, #3
 80001b0:	d109      	bne.n	80001c6 <getKeyInput+0x7a>
 80001b2:	2101      	movs	r1, #1
 80001b4:	483d      	ldr	r0, [pc, #244]	; (80002ac <getKeyInput+0x160>)
 80001b6:	f001 fb7d 	bl	80018b4 <HAL_GPIO_ReadPin>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4619      	mov	r1, r3
 80001be:	4a39      	ldr	r2, [pc, #228]	; (80002a4 <getKeyInput+0x158>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 4) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_PEDESTRIAN_GPIO_Port, BUTTON_PEDESTRIAN_Pin);
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2b04      	cmp	r3, #4
 80001ca:	d109      	bne.n	80001e0 <getKeyInput+0x94>
 80001cc:	2101      	movs	r1, #1
 80001ce:	4836      	ldr	r0, [pc, #216]	; (80002a8 <getKeyInput+0x15c>)
 80001d0:	f001 fb70 	bl	80018b4 <HAL_GPIO_ReadPin>
 80001d4:	4603      	mov	r3, r0
 80001d6:	4619      	mov	r1, r3
 80001d8:	4a32      	ldr	r2, [pc, #200]	; (80002a4 <getKeyInput+0x158>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80001e0:	4a2f      	ldr	r2, [pc, #188]	; (80002a0 <getKeyInput+0x154>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e8:	492c      	ldr	r1, [pc, #176]	; (800029c <getKeyInput+0x150>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001f0:	429a      	cmp	r2, r3
 80001f2:	d147      	bne.n	8000284 <getKeyInput+0x138>
 80001f4:	4a29      	ldr	r2, [pc, #164]	; (800029c <getKeyInput+0x150>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fc:	4929      	ldr	r1, [pc, #164]	; (80002a4 <getKeyInput+0x158>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000204:	429a      	cmp	r2, r3
 8000206:	d13d      	bne.n	8000284 <getKeyInput+0x138>
            if (KeyReg3[i] != KeyReg2[i]) {
 8000208:	4a29      	ldr	r2, [pc, #164]	; (80002b0 <getKeyInput+0x164>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	4924      	ldr	r1, [pc, #144]	; (80002a4 <getKeyInput+0x158>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000218:	429a      	cmp	r2, r3
 800021a:	d016      	beq.n	800024a <getKeyInput+0xfe>
                KeyReg3[i] = KeyReg2[i];
 800021c:	4a21      	ldr	r2, [pc, #132]	; (80002a4 <getKeyInput+0x158>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000224:	4922      	ldr	r1, [pc, #136]	; (80002b0 <getKeyInput+0x164>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                if (KeyReg2[i] == PRESSED_STATE) {
 800022c:	4a1d      	ldr	r2, [pc, #116]	; (80002a4 <getKeyInput+0x158>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d125      	bne.n	8000284 <getKeyInput+0x138>
                    subKeyProcess(i);
 8000238:	6878      	ldr	r0, [r7, #4]
 800023a:	f000 f85b 	bl	80002f4 <subKeyProcess>
                    TimerForKeyPress[i] = 200;
 800023e:	4a1d      	ldr	r2, [pc, #116]	; (80002b4 <getKeyInput+0x168>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	21c8      	movs	r1, #200	; 0xc8
 8000244:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000248:	e01c      	b.n	8000284 <getKeyInput+0x138>
                }
            } else {
                TimerForKeyPress[i]--;
 800024a:	4a1a      	ldr	r2, [pc, #104]	; (80002b4 <getKeyInput+0x168>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000252:	1e5a      	subs	r2, r3, #1
 8000254:	4917      	ldr	r1, [pc, #92]	; (80002b4 <getKeyInput+0x168>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TimerForKeyPress[i] == 0) {
 800025c:	4a15      	ldr	r2, [pc, #84]	; (80002b4 <getKeyInput+0x168>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d10d      	bne.n	8000284 <getKeyInput+0x138>
                    if (KeyReg2[i] == PRESSED_STATE) {
 8000268:	4a0e      	ldr	r2, [pc, #56]	; (80002a4 <getKeyInput+0x158>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d102      	bne.n	800027a <getKeyInput+0x12e>
                        subKeyProcess(i);
 8000274:	6878      	ldr	r0, [r7, #4]
 8000276:	f000 f83d 	bl	80002f4 <subKeyProcess>
                    }

                    TimerForKeyPress[i] = 200;
 800027a:	4a0e      	ldr	r2, [pc, #56]	; (80002b4 <getKeyInput+0x168>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	21c8      	movs	r1, #200	; 0xc8
 8000280:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 1; i <= NO_BUTTONS; i++) {
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	3301      	adds	r3, #1
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2b04      	cmp	r3, #4
 800028e:	f77f af63 	ble.w	8000158 <getKeyInput+0xc>
                }
            }
        }
    }
}
 8000292:	bf00      	nop
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	200000cc 	.word	0x200000cc
 80002a0:	20000070 	.word	0x20000070
 80002a4:	20000108 	.word	0x20000108
 80002a8:	40010800 	.word	0x40010800
 80002ac:	40010c00 	.word	0x40010c00
 80002b0:	2000005c 	.word	0x2000005c
 80002b4:	200000e0 	.word	0x200000e0

080002b8 <isButtonPressed>:

int isButtonPressed(int index) {
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	if (index > NO_BUTTONS)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b04      	cmp	r3, #4
 80002c4:	dd01      	ble.n	80002ca <isButtonPressed+0x12>
		return 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	e00d      	b.n	80002e6 <isButtonPressed+0x2e>

	if (button_flag[index]) {
 80002ca:	4a09      	ldr	r2, [pc, #36]	; (80002f0 <isButtonPressed+0x38>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d006      	beq.n	80002e4 <isButtonPressed+0x2c>
		button_flag[index] = 0;
 80002d6:	4a06      	ldr	r2, [pc, #24]	; (80002f0 <isButtonPressed+0x38>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2100      	movs	r1, #0
 80002dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80002e0:	2301      	movs	r3, #1
 80002e2:	e000      	b.n	80002e6 <isButtonPressed+0x2e>
	}
	return 0;
 80002e4:	2300      	movs	r3, #0
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	200000f4 	.word	0x200000f4

080002f4 <subKeyProcess>:

void subKeyProcess(int index) {
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 80002fc:	4a04      	ldr	r2, [pc, #16]	; (8000310 <subKeyProcess+0x1c>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2101      	movs	r1, #1
 8000302:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr
 8000310:	200000f4 	.word	0x200000f4

08000314 <fsm_automatic_run>:
 *      Author: ProX
 */

#include "fsm_automatic.h"

void fsm_automatic_run(void) {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    /* CHANGE TO MANUAL MODE WHEN BUTTON1 IS PRESSED */
    if (isButtonPressed(1)) {
 8000318:	2001      	movs	r0, #1
 800031a:	f7ff ffcd 	bl	80002b8 <isButtonPressed>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d007      	beq.n	8000334 <fsm_automatic_run+0x20>
    	status = MANUAL_MODE;
 8000324:	4b7c      	ldr	r3, [pc, #496]	; (8000518 <fsm_automatic_run+0x204>)
 8000326:	2205      	movs	r2, #5
 8000328:	601a      	str	r2, [r3, #0]
		setTimer(0, 5000);				// reuse timer 0 to 5 seconds for manual event
 800032a:	f241 3188 	movw	r1, #5000	; 0x1388
 800032e:	2000      	movs	r0, #0
 8000330:	f000 fe82 	bl	8001038 <setTimer>
    }

    if (timer_flag[2] == 1) {
 8000334:	4b79      	ldr	r3, [pc, #484]	; (800051c <fsm_automatic_run+0x208>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	2b01      	cmp	r3, #1
 800033a:	d10e      	bne.n	800035a <fsm_automatic_run+0x46>
    	counter_light_1--;
 800033c:	4b78      	ldr	r3, [pc, #480]	; (8000520 <fsm_automatic_run+0x20c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	3b01      	subs	r3, #1
 8000342:	4a77      	ldr	r2, [pc, #476]	; (8000520 <fsm_automatic_run+0x20c>)
 8000344:	6013      	str	r3, [r2, #0]
    	counter_light_2--;
 8000346:	4b77      	ldr	r3, [pc, #476]	; (8000524 <fsm_automatic_run+0x210>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3b01      	subs	r3, #1
 800034c:	4a75      	ldr	r2, [pc, #468]	; (8000524 <fsm_automatic_run+0x210>)
 800034e:	6013      	str	r3, [r2, #0]
        setTimer(2, 1000); // set timer 2 to 1 second to update counter light
 8000350:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000354:	2002      	movs	r0, #2
 8000356:	f000 fe6f 	bl	8001038 <setTimer>
    }

    switch (traffic_status) {
 800035a:	4b73      	ldr	r3, [pc, #460]	; (8000528 <fsm_automatic_run+0x214>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2b03      	cmp	r3, #3
 8000360:	d04e      	beq.n	8000400 <fsm_automatic_run+0xec>
 8000362:	2b03      	cmp	r3, #3
 8000364:	f2c0 80d5 	blt.w	8000512 <fsm_automatic_run+0x1fe>
 8000368:	2b50      	cmp	r3, #80	; 0x50
 800036a:	f300 80d2 	bgt.w	8000512 <fsm_automatic_run+0x1fe>
 800036e:	2b32      	cmp	r3, #50	; 0x32
 8000370:	f2c0 80cf 	blt.w	8000512 <fsm_automatic_run+0x1fe>
 8000374:	3b32      	subs	r3, #50	; 0x32
 8000376:	2b1e      	cmp	r3, #30
 8000378:	f200 80cb 	bhi.w	8000512 <fsm_automatic_run+0x1fe>
 800037c:	a201      	add	r2, pc, #4	; (adr r2, 8000384 <fsm_automatic_run+0x70>)
 800037e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000382:	bf00      	nop
 8000384:	0800043b 	.word	0x0800043b
 8000388:	08000513 	.word	0x08000513
 800038c:	08000513 	.word	0x08000513
 8000390:	08000513 	.word	0x08000513
 8000394:	08000513 	.word	0x08000513
 8000398:	08000513 	.word	0x08000513
 800039c:	08000513 	.word	0x08000513
 80003a0:	08000513 	.word	0x08000513
 80003a4:	08000513 	.word	0x08000513
 80003a8:	08000513 	.word	0x08000513
 80003ac:	08000463 	.word	0x08000463
 80003b0:	08000513 	.word	0x08000513
 80003b4:	08000513 	.word	0x08000513
 80003b8:	08000513 	.word	0x08000513
 80003bc:	08000513 	.word	0x08000513
 80003c0:	08000513 	.word	0x08000513
 80003c4:	08000513 	.word	0x08000513
 80003c8:	08000513 	.word	0x08000513
 80003cc:	08000513 	.word	0x08000513
 80003d0:	08000513 	.word	0x08000513
 80003d4:	0800049b 	.word	0x0800049b
 80003d8:	08000513 	.word	0x08000513
 80003dc:	08000513 	.word	0x08000513
 80003e0:	08000513 	.word	0x08000513
 80003e4:	08000513 	.word	0x08000513
 80003e8:	08000513 	.word	0x08000513
 80003ec:	08000513 	.word	0x08000513
 80003f0:	08000513 	.word	0x08000513
 80003f4:	08000513 	.word	0x08000513
 80003f8:	08000513 	.word	0x08000513
 80003fc:	080004c3 	.word	0x080004c3
    case INIT:
    	/* INACTIVE pedestrian light when in INIT state */
    	pedestrian_status = PEDESTRIAN_INACTIVE;
 8000400:	4b4a      	ldr	r3, [pc, #296]	; (800052c <fsm_automatic_run+0x218>)
 8000402:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000406:	601a      	str	r2, [r3, #0]

        Red_Green();
 8000408:	f000 fb04 	bl	8000a14 <Red_Green>
        traffic_status = RED_GREEN;
 800040c:	4b46      	ldr	r3, [pc, #280]	; (8000528 <fsm_automatic_run+0x214>)
 800040e:	2232      	movs	r2, #50	; 0x32
 8000410:	601a      	str	r2, [r3, #0]
        setTimer(0, green_counter);
 8000412:	4b47      	ldr	r3, [pc, #284]	; (8000530 <fsm_automatic_run+0x21c>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4619      	mov	r1, r3
 8000418:	2000      	movs	r0, #0
 800041a:	f000 fe0d 	bl	8001038 <setTimer>

        setTimer(2, 1000); // set timer 2 to 1 second to update counter light
 800041e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000422:	2002      	movs	r0, #2
 8000424:	f000 fe08 	bl	8001038 <setTimer>

        counter_light_1 = red_counter;
 8000428:	4b42      	ldr	r3, [pc, #264]	; (8000534 <fsm_automatic_run+0x220>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a3c      	ldr	r2, [pc, #240]	; (8000520 <fsm_automatic_run+0x20c>)
 800042e:	6013      	str	r3, [r2, #0]
        counter_light_2 = green_counter;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <fsm_automatic_run+0x21c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a3b      	ldr	r2, [pc, #236]	; (8000524 <fsm_automatic_run+0x210>)
 8000436:	6013      	str	r3, [r2, #0]

        break;
 8000438:	e06b      	b.n	8000512 <fsm_automatic_run+0x1fe>

    case RED_GREEN:
        Red_Green();
 800043a:	f000 faeb 	bl	8000a14 <Red_Green>

        if (timer_flag[0] == 1) {
 800043e:	4b37      	ldr	r3, [pc, #220]	; (800051c <fsm_automatic_run+0x208>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b01      	cmp	r3, #1
 8000444:	d15e      	bne.n	8000504 <fsm_automatic_run+0x1f0>
            traffic_status = RED_AMBER;
 8000446:	4b38      	ldr	r3, [pc, #224]	; (8000528 <fsm_automatic_run+0x214>)
 8000448:	223c      	movs	r2, #60	; 0x3c
 800044a:	601a      	str	r2, [r3, #0]
            setTimer(0, amber_counter);
 800044c:	4b3a      	ldr	r3, [pc, #232]	; (8000538 <fsm_automatic_run+0x224>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4619      	mov	r1, r3
 8000452:	2000      	movs	r0, #0
 8000454:	f000 fdf0 	bl	8001038 <setTimer>

            counter_light_2 = amber_counter;
 8000458:	4b37      	ldr	r3, [pc, #220]	; (8000538 <fsm_automatic_run+0x224>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a31      	ldr	r2, [pc, #196]	; (8000524 <fsm_automatic_run+0x210>)
 800045e:	6013      	str	r3, [r2, #0]
        }    

        break;
 8000460:	e050      	b.n	8000504 <fsm_automatic_run+0x1f0>

    case RED_AMBER:
        Red_Amber();
 8000462:	f000 faf5 	bl	8000a50 <Red_Amber>

        if (timer_flag[0] == 1) {
 8000466:	4b2d      	ldr	r3, [pc, #180]	; (800051c <fsm_automatic_run+0x208>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2b01      	cmp	r3, #1
 800046c:	d14c      	bne.n	8000508 <fsm_automatic_run+0x1f4>
            traffic_status = GREEN_RED;
 800046e:	4b2e      	ldr	r3, [pc, #184]	; (8000528 <fsm_automatic_run+0x214>)
 8000470:	2246      	movs	r2, #70	; 0x46
 8000472:	601a      	str	r2, [r3, #0]
            setTimer(0, green_counter);
 8000474:	4b2e      	ldr	r3, [pc, #184]	; (8000530 <fsm_automatic_run+0x21c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4619      	mov	r1, r3
 800047a:	2000      	movs	r0, #0
 800047c:	f000 fddc 	bl	8001038 <setTimer>

            counter_light_1 = green_counter;
 8000480:	4b2b      	ldr	r3, [pc, #172]	; (8000530 <fsm_automatic_run+0x21c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a26      	ldr	r2, [pc, #152]	; (8000520 <fsm_automatic_run+0x20c>)
 8000486:	6013      	str	r3, [r2, #0]
            counter_light_2 = red_counter;
 8000488:	4b2a      	ldr	r3, [pc, #168]	; (8000534 <fsm_automatic_run+0x220>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a25      	ldr	r2, [pc, #148]	; (8000524 <fsm_automatic_run+0x210>)
 800048e:	6013      	str	r3, [r2, #0]

            /* INACTIVE pedestrian light when traffic light is backing to GREEN_RED mode */
            pedestrian_status = PEDESTRIAN_INACTIVE;
 8000490:	4b26      	ldr	r3, [pc, #152]	; (800052c <fsm_automatic_run+0x218>)
 8000492:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000496:	601a      	str	r2, [r3, #0]
        }

        break;
 8000498:	e036      	b.n	8000508 <fsm_automatic_run+0x1f4>

    case GREEN_RED:
        Green_Red();
 800049a:	f000 faf7 	bl	8000a8c <Green_Red>

        if (timer_flag[0] == 1) {
 800049e:	4b1f      	ldr	r3, [pc, #124]	; (800051c <fsm_automatic_run+0x208>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	2b01      	cmp	r3, #1
 80004a4:	d132      	bne.n	800050c <fsm_automatic_run+0x1f8>
            traffic_status = AMBER_RED;
 80004a6:	4b20      	ldr	r3, [pc, #128]	; (8000528 <fsm_automatic_run+0x214>)
 80004a8:	2250      	movs	r2, #80	; 0x50
 80004aa:	601a      	str	r2, [r3, #0]
            setTimer(0, amber_counter);
 80004ac:	4b22      	ldr	r3, [pc, #136]	; (8000538 <fsm_automatic_run+0x224>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4619      	mov	r1, r3
 80004b2:	2000      	movs	r0, #0
 80004b4:	f000 fdc0 	bl	8001038 <setTimer>

            counter_light_1 = amber_counter;
 80004b8:	4b1f      	ldr	r3, [pc, #124]	; (8000538 <fsm_automatic_run+0x224>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a18      	ldr	r2, [pc, #96]	; (8000520 <fsm_automatic_run+0x20c>)
 80004be:	6013      	str	r3, [r2, #0]
        }

        break;
 80004c0:	e024      	b.n	800050c <fsm_automatic_run+0x1f8>

    case AMBER_RED:
    	Amber_Red();
 80004c2:	f000 fb01 	bl	8000ac8 <Amber_Red>

        if (timer_flag[0] == 1) {
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <fsm_automatic_run+0x208>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d120      	bne.n	8000510 <fsm_automatic_run+0x1fc>
            traffic_status = RED_GREEN;
 80004ce:	4b16      	ldr	r3, [pc, #88]	; (8000528 <fsm_automatic_run+0x214>)
 80004d0:	2232      	movs	r2, #50	; 0x32
 80004d2:	601a      	str	r2, [r3, #0]
            setTimer(0, green_counter);
 80004d4:	4b16      	ldr	r3, [pc, #88]	; (8000530 <fsm_automatic_run+0x21c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4619      	mov	r1, r3
 80004da:	2000      	movs	r0, #0
 80004dc:	f000 fdac 	bl	8001038 <setTimer>

            counter_light_1 = red_counter;
 80004e0:	4b14      	ldr	r3, [pc, #80]	; (8000534 <fsm_automatic_run+0x220>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <fsm_automatic_run+0x20c>)
 80004e6:	6013      	str	r3, [r2, #0]
            counter_light_2 = green_counter;
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <fsm_automatic_run+0x21c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0d      	ldr	r2, [pc, #52]	; (8000524 <fsm_automatic_run+0x210>)
 80004ee:	6013      	str	r3, [r2, #0]

            /* If the pedestrian light is PEDESTRIAN_RED, change to PEDESTRIAN_GREEN when the traffic light is backing to RED_GREEN mode */
            /* If the pedestrian light is INACTIVE => no change */
            if(pedestrian_status == PEDESTRIAN_RED){
 80004f0:	4b0e      	ldr	r3, [pc, #56]	; (800052c <fsm_automatic_run+0x218>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80004f8:	d10a      	bne.n	8000510 <fsm_automatic_run+0x1fc>
            	pedestrian_status = PEDESTRIAN_GREEN;
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <fsm_automatic_run+0x218>)
 80004fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000500:	601a      	str	r2, [r3, #0]
            }
        }
        break;
 8000502:	e005      	b.n	8000510 <fsm_automatic_run+0x1fc>
        break;
 8000504:	bf00      	nop
 8000506:	e004      	b.n	8000512 <fsm_automatic_run+0x1fe>
        break;
 8000508:	bf00      	nop
 800050a:	e002      	b.n	8000512 <fsm_automatic_run+0x1fe>
        break;
 800050c:	bf00      	nop
 800050e:	e000      	b.n	8000512 <fsm_automatic_run+0x1fe>
        break;
 8000510:	bf00      	nop
    }
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000000 	.word	0x20000000
 800051c:	20000178 	.word	0x20000178
 8000520:	2000001c 	.word	0x2000001c
 8000524:	20000020 	.word	0x20000020
 8000528:	2000000c 	.word	0x2000000c
 800052c:	20000004 	.word	0x20000004
 8000530:	20000018 	.word	0x20000018
 8000534:	20000010 	.word	0x20000010
 8000538:	20000014 	.word	0x20000014

0800053c <fsm_manual_run>:
 *      Author: ProX
 */

#include "fsm_manual.h"

void fsm_manual_run(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	switch (traffic_status) {
 8000540:	4b72      	ldr	r3, [pc, #456]	; (800070c <fsm_manual_run+0x1d0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000548:	f000 8093 	beq.w	8000672 <fsm_manual_run+0x136>
 800054c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000550:	f300 80d1 	bgt.w	80006f6 <fsm_manual_run+0x1ba>
 8000554:	2b64      	cmp	r3, #100	; 0x64
 8000556:	d002      	beq.n	800055e <fsm_manual_run+0x22>
 8000558:	2bc8      	cmp	r3, #200	; 0xc8
 800055a:	d045      	beq.n	80005e8 <fsm_manual_run+0xac>
 800055c:	e0cb      	b.n	80006f6 <fsm_manual_run+0x1ba>
	case MAN_RED:
		/* TURN OFF LIGHTS */

		/* BLINK LEDs */
		if (timer_flag[1] == 1) {
 800055e:	4b6c      	ldr	r3, [pc, #432]	; (8000710 <fsm_manual_run+0x1d4>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d106      	bne.n	8000574 <fsm_manual_run+0x38>
			Toggle_Red();
 8000566:	f000 facd 	bl	8000b04 <Toggle_Red>
			setTimer(1, 500);
 800056a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800056e:	2001      	movs	r0, #1
 8000570:	f000 fd62 	bl	8001038 <setTimer>
		}

		/* OUT OF TIME FOR MANUAL EVENTS */
		if (timer_flag[0] == 1) {
 8000574:	4b66      	ldr	r3, [pc, #408]	; (8000710 <fsm_manual_run+0x1d4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d105      	bne.n	8000588 <fsm_manual_run+0x4c>
			status = AUTOMATIC_MODE;
 800057c:	4b65      	ldr	r3, [pc, #404]	; (8000714 <fsm_manual_run+0x1d8>)
 800057e:	2204      	movs	r2, #4
 8000580:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 8000582:	4b62      	ldr	r3, [pc, #392]	; (800070c <fsm_manual_run+0x1d0>)
 8000584:	2203      	movs	r2, #3
 8000586:	601a      	str	r2, [r3, #0]
		}

		/* CHANGE MODE = 3 (MAN_AMBER) WHEN BUTTON1 IS PRESSED */
		if (isButtonPressed(1)) {
 8000588:	2001      	movs	r0, #1
 800058a:	f7ff fe95 	bl	80002b8 <isButtonPressed>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d007      	beq.n	80005a4 <fsm_manual_run+0x68>
			traffic_status = MAN_AMBER;
 8000594:	4b5d      	ldr	r3, [pc, #372]	; (800070c <fsm_manual_run+0x1d0>)
 8000596:	22c8      	movs	r2, #200	; 0xc8
 8000598:	601a      	str	r2, [r3, #0]
			setTimer(0, 5000);	// reuse timer 0 to 5 seconds for manual event
 800059a:	f241 3188 	movw	r1, #5000	; 0x1388
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 fd4a 	bl	8001038 <setTimer>
		}

		/* MODIFY TIME LENGTH */
		if (isButtonPressed(2)) {
 80005a4:	2002      	movs	r0, #2
 80005a6:	f7ff fe87 	bl	80002b8 <isButtonPressed>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d002      	beq.n	80005b6 <fsm_manual_run+0x7a>
			status = TUNING_MODE;
 80005b0:	4b58      	ldr	r3, [pc, #352]	; (8000714 <fsm_manual_run+0x1d8>)
 80005b2:	2206      	movs	r2, #6
 80005b4:	601a      	str	r2, [r3, #0]
		}

		/* CONFIRM TIME LENGTH */
		if (isButtonPressed(3)) {
 80005b6:	2003      	movs	r0, #3
 80005b8:	f7ff fe7e 	bl	80002b8 <isButtonPressed>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	f000 809d 	beq.w	80006fe <fsm_manual_run+0x1c2>
			red_counter = time_modify_counter;
 80005c4:	4b54      	ldr	r3, [pc, #336]	; (8000718 <fsm_manual_run+0x1dc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a54      	ldr	r2, [pc, #336]	; (800071c <fsm_manual_run+0x1e0>)
 80005ca:	6013      	str	r3, [r2, #0]
			green_counter = red_counter - amber_counter;
 80005cc:	4b53      	ldr	r3, [pc, #332]	; (800071c <fsm_manual_run+0x1e0>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b53      	ldr	r3, [pc, #332]	; (8000720 <fsm_manual_run+0x1e4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	4a53      	ldr	r2, [pc, #332]	; (8000724 <fsm_manual_run+0x1e8>)
 80005d8:	6013      	str	r3, [r2, #0]
			status = AUTOMATIC_MODE;
 80005da:	4b4e      	ldr	r3, [pc, #312]	; (8000714 <fsm_manual_run+0x1d8>)
 80005dc:	2204      	movs	r2, #4
 80005de:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 80005e0:	4b4a      	ldr	r3, [pc, #296]	; (800070c <fsm_manual_run+0x1d0>)
 80005e2:	2203      	movs	r2, #3
 80005e4:	601a      	str	r2, [r3, #0]
		}

		break;
 80005e6:	e08a      	b.n	80006fe <fsm_manual_run+0x1c2>

	case MAN_AMBER:
		/* TURN OFF LIGHTS */

		/* BLINK LEDs */
		if (timer_flag[1] == 1) {
 80005e8:	4b49      	ldr	r3, [pc, #292]	; (8000710 <fsm_manual_run+0x1d4>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d106      	bne.n	80005fe <fsm_manual_run+0xc2>
			Toggle_Amber();
 80005f0:	f000 fac8 	bl	8000b84 <Toggle_Amber>
			setTimer(1, 500);
 80005f4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005f8:	2001      	movs	r0, #1
 80005fa:	f000 fd1d 	bl	8001038 <setTimer>
		}

		/* OUT OF TIME FOR MANUAL EVENTS */
		if (timer_flag[0] == 1) {
 80005fe:	4b44      	ldr	r3, [pc, #272]	; (8000710 <fsm_manual_run+0x1d4>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d105      	bne.n	8000612 <fsm_manual_run+0xd6>
			status = AUTOMATIC_MODE;
 8000606:	4b43      	ldr	r3, [pc, #268]	; (8000714 <fsm_manual_run+0x1d8>)
 8000608:	2204      	movs	r2, #4
 800060a:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 800060c:	4b3f      	ldr	r3, [pc, #252]	; (800070c <fsm_manual_run+0x1d0>)
 800060e:	2203      	movs	r2, #3
 8000610:	601a      	str	r2, [r3, #0]
		}

		/* CHANGE MODE = 4 (MAN_GREEN) WHEN BUTTON1 IS PRESSED */
		if (isButtonPressed(1)) {
 8000612:	2001      	movs	r0, #1
 8000614:	f7ff fe50 	bl	80002b8 <isButtonPressed>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d008      	beq.n	8000630 <fsm_manual_run+0xf4>
			traffic_status = MAN_GREEN;
 800061e:	4b3b      	ldr	r3, [pc, #236]	; (800070c <fsm_manual_run+0x1d0>)
 8000620:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000624:	601a      	str	r2, [r3, #0]
			setTimer(0, 5000);	// reuse timer 0 to 5 seconds for manual event
 8000626:	f241 3188 	movw	r1, #5000	; 0x1388
 800062a:	2000      	movs	r0, #0
 800062c:	f000 fd04 	bl	8001038 <setTimer>
		}

		/* MODIFY TIME LENGTH */
		if (isButtonPressed(2)) {
 8000630:	2002      	movs	r0, #2
 8000632:	f7ff fe41 	bl	80002b8 <isButtonPressed>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d002      	beq.n	8000642 <fsm_manual_run+0x106>
			status = TUNING_MODE;
 800063c:	4b35      	ldr	r3, [pc, #212]	; (8000714 <fsm_manual_run+0x1d8>)
 800063e:	2206      	movs	r2, #6
 8000640:	601a      	str	r2, [r3, #0]
		}

		/* CONFIRM TIME LENGTH */
		if (isButtonPressed(3)) {
 8000642:	2003      	movs	r0, #3
 8000644:	f7ff fe38 	bl	80002b8 <isButtonPressed>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d059      	beq.n	8000702 <fsm_manual_run+0x1c6>
			amber_counter = time_modify_counter;
 800064e:	4b32      	ldr	r3, [pc, #200]	; (8000718 <fsm_manual_run+0x1dc>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a33      	ldr	r2, [pc, #204]	; (8000720 <fsm_manual_run+0x1e4>)
 8000654:	6013      	str	r3, [r2, #0]
			red_counter = amber_counter + green_counter;
 8000656:	4b32      	ldr	r3, [pc, #200]	; (8000720 <fsm_manual_run+0x1e4>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	4b32      	ldr	r3, [pc, #200]	; (8000724 <fsm_manual_run+0x1e8>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4413      	add	r3, r2
 8000660:	4a2e      	ldr	r2, [pc, #184]	; (800071c <fsm_manual_run+0x1e0>)
 8000662:	6013      	str	r3, [r2, #0]
			status = AUTOMATIC_MODE;
 8000664:	4b2b      	ldr	r3, [pc, #172]	; (8000714 <fsm_manual_run+0x1d8>)
 8000666:	2204      	movs	r2, #4
 8000668:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 800066a:	4b28      	ldr	r3, [pc, #160]	; (800070c <fsm_manual_run+0x1d0>)
 800066c:	2203      	movs	r2, #3
 800066e:	601a      	str	r2, [r3, #0]
		}

		break;
 8000670:	e047      	b.n	8000702 <fsm_manual_run+0x1c6>

	case MAN_GREEN:
		/* TURN OFF LIGHTS */

		/* BLINK LEDs */
		if (timer_flag[1] == 1) {
 8000672:	4b27      	ldr	r3, [pc, #156]	; (8000710 <fsm_manual_run+0x1d4>)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d106      	bne.n	8000688 <fsm_manual_run+0x14c>
			Toggle_Green();
 800067a:	f000 fac3 	bl	8000c04 <Toggle_Green>
			setTimer(1, 500);
 800067e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000682:	2001      	movs	r0, #1
 8000684:	f000 fcd8 	bl	8001038 <setTimer>
		}

		/* OUT OF TIME FOR MANUAL EVENTS */
		if (timer_flag[0] == 1) {
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <fsm_manual_run+0x1d4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d105      	bne.n	800069c <fsm_manual_run+0x160>
			status = AUTOMATIC_MODE;
 8000690:	4b20      	ldr	r3, [pc, #128]	; (8000714 <fsm_manual_run+0x1d8>)
 8000692:	2204      	movs	r2, #4
 8000694:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 8000696:	4b1d      	ldr	r3, [pc, #116]	; (800070c <fsm_manual_run+0x1d0>)
 8000698:	2203      	movs	r2, #3
 800069a:	601a      	str	r2, [r3, #0]
		}

		/* CHANGE MODE = 1 (AUTOMATIC) WHEN BUTTON1 IS PRESSED */
		if (isButtonPressed(1)) {
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff fe0b 	bl	80002b8 <isButtonPressed>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d005      	beq.n	80006b4 <fsm_manual_run+0x178>
			status = AUTOMATIC_MODE;
 80006a8:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <fsm_manual_run+0x1d8>)
 80006aa:	2204      	movs	r2, #4
 80006ac:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <fsm_manual_run+0x1d0>)
 80006b0:	2203      	movs	r2, #3
 80006b2:	601a      	str	r2, [r3, #0]
		}

		/* MODIFY TIME LENGTH */
		if (isButtonPressed(2)) {
 80006b4:	2002      	movs	r0, #2
 80006b6:	f7ff fdff 	bl	80002b8 <isButtonPressed>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d002      	beq.n	80006c6 <fsm_manual_run+0x18a>
			status = TUNING_MODE;
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <fsm_manual_run+0x1d8>)
 80006c2:	2206      	movs	r2, #6
 80006c4:	601a      	str	r2, [r3, #0]
		}

		/* CONFIRM TIME LENGTH */
		if (isButtonPressed(3)) {
 80006c6:	2003      	movs	r0, #3
 80006c8:	f7ff fdf6 	bl	80002b8 <isButtonPressed>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d019      	beq.n	8000706 <fsm_manual_run+0x1ca>
			green_counter = time_modify_counter;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <fsm_manual_run+0x1dc>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a13      	ldr	r2, [pc, #76]	; (8000724 <fsm_manual_run+0x1e8>)
 80006d8:	6013      	str	r3, [r2, #0]
			red_counter = amber_counter + green_counter;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <fsm_manual_run+0x1e4>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <fsm_manual_run+0x1e8>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4413      	add	r3, r2
 80006e4:	4a0d      	ldr	r2, [pc, #52]	; (800071c <fsm_manual_run+0x1e0>)
 80006e6:	6013      	str	r3, [r2, #0]
			status = AUTOMATIC_MODE;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <fsm_manual_run+0x1d8>)
 80006ea:	2204      	movs	r2, #4
 80006ec:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <fsm_manual_run+0x1d0>)
 80006f0:	2203      	movs	r2, #3
 80006f2:	601a      	str	r2, [r3, #0]
		}
		break;
 80006f4:	e007      	b.n	8000706 <fsm_manual_run+0x1ca>
	default: // change traffic state to MAN_RED when change from AUTOMATIC to MANUAL
		traffic_status = MAN_RED;
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <fsm_manual_run+0x1d0>)
 80006f8:	2264      	movs	r2, #100	; 0x64
 80006fa:	601a      	str	r2, [r3, #0]
		break;
 80006fc:	e004      	b.n	8000708 <fsm_manual_run+0x1cc>
		break;
 80006fe:	bf00      	nop
 8000700:	e002      	b.n	8000708 <fsm_manual_run+0x1cc>
		break;
 8000702:	bf00      	nop
 8000704:	e000      	b.n	8000708 <fsm_manual_run+0x1cc>
		break;
 8000706:	bf00      	nop
	}
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000000c 	.word	0x2000000c
 8000710:	20000178 	.word	0x20000178
 8000714:	20000000 	.word	0x20000000
 8000718:	20000054 	.word	0x20000054
 800071c:	20000010 	.word	0x20000010
 8000720:	20000014 	.word	0x20000014
 8000724:	20000018 	.word	0x20000018

08000728 <PedestrianRed>:
 *      Author: ProX
 */

#include "fsm_pedestrian.h"

void PedestrianRed() {
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, 1);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <PedestrianRed+0x20>)
 8000734:	f001 f8d5 	bl	80018e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800073e:	4803      	ldr	r0, [pc, #12]	; (800074c <PedestrianRed+0x24>)
 8000740:	f001 f8cf 	bl	80018e2 <HAL_GPIO_WritePin>
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40010c00 	.word	0x40010c00
 800074c:	40010800 	.word	0x40010800

08000750 <PedestrianGreen>:

void PedestrianGreen() {
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <PedestrianGreen+0x20>)
 800075c:	f001 f8c1 	bl	80018e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, 1);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000766:	4803      	ldr	r0, [pc, #12]	; (8000774 <PedestrianGreen+0x24>)
 8000768:	f001 f8bb 	bl	80018e2 <HAL_GPIO_WritePin>
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40010c00 	.word	0x40010c00
 8000774:	40010800 	.word	0x40010800

08000778 <PedestrianInvalid>:

void PedestrianInvalid() {
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <PedestrianInvalid+0x20>)
 8000784:	f001 f8ad 	bl	80018e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800078e:	4803      	ldr	r0, [pc, #12]	; (800079c <PedestrianInvalid+0x24>)
 8000790:	f001 f8a7 	bl	80018e2 <HAL_GPIO_WritePin>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40010c00 	.word	0x40010c00
 800079c:	40010800 	.word	0x40010800

080007a0 <fsm_pedestrian_run>:

void fsm_pedestrian_run(void) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	switch (pedestrian_status) {
 80007a4:	4b22      	ldr	r3, [pc, #136]	; (8000830 <fsm_pedestrian_run+0x90>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80007ac:	d03a      	beq.n	8000824 <fsm_pedestrian_run+0x84>
 80007ae:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80007b2:	dc3b      	bgt.n	800082c <fsm_pedestrian_run+0x8c>
 80007b4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80007b8:	d003      	beq.n	80007c2 <fsm_pedestrian_run+0x22>
 80007ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007be:	d02b      	beq.n	8000818 <fsm_pedestrian_run+0x78>

	case PEDESTRIAN_RED:
		PedestrianRed();
		break;
	}
}
 80007c0:	e034      	b.n	800082c <fsm_pedestrian_run+0x8c>
		PedestrianInvalid();
 80007c2:	f7ff ffd9 	bl	8000778 <PedestrianInvalid>
		buzzer_status = OFF;
 80007c6:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <fsm_pedestrian_run+0x94>)
 80007c8:	2209      	movs	r2, #9
 80007ca:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(4)) {
 80007cc:	2004      	movs	r0, #4
 80007ce:	f7ff fd73 	bl	80002b8 <isButtonPressed>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d028      	beq.n	800082a <fsm_pedestrian_run+0x8a>
			if (traffic_status == RED_AMBER || traffic_status == RED_GREEN) {
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <fsm_pedestrian_run+0x98>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b3c      	cmp	r3, #60	; 0x3c
 80007de:	d003      	beq.n	80007e8 <fsm_pedestrian_run+0x48>
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <fsm_pedestrian_run+0x98>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b32      	cmp	r3, #50	; 0x32
 80007e6:	d104      	bne.n	80007f2 <fsm_pedestrian_run+0x52>
				pedestrian_status = PEDESTRIAN_GREEN;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <fsm_pedestrian_run+0x90>)
 80007ea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	e011      	b.n	8000816 <fsm_pedestrian_run+0x76>
			else if (traffic_status == GREEN_RED || traffic_status == AMBER_RED) {
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <fsm_pedestrian_run+0x98>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b46      	cmp	r3, #70	; 0x46
 80007f8:	d003      	beq.n	8000802 <fsm_pedestrian_run+0x62>
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <fsm_pedestrian_run+0x98>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b50      	cmp	r3, #80	; 0x50
 8000800:	d104      	bne.n	800080c <fsm_pedestrian_run+0x6c>
				pedestrian_status = PEDESTRIAN_RED;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <fsm_pedestrian_run+0x90>)
 8000804:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	e004      	b.n	8000816 <fsm_pedestrian_run+0x76>
				pedestrian_status = PEDESTRIAN_INACTIVE;
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <fsm_pedestrian_run+0x90>)
 800080e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000812:	601a      	str	r2, [r3, #0]
		break;
 8000814:	e009      	b.n	800082a <fsm_pedestrian_run+0x8a>
 8000816:	e008      	b.n	800082a <fsm_pedestrian_run+0x8a>
		PedestrianGreen();
 8000818:	f7ff ff9a 	bl	8000750 <PedestrianGreen>
		buzzer_status = ON;
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <fsm_pedestrian_run+0x94>)
 800081e:	2207      	movs	r2, #7
 8000820:	601a      	str	r2, [r3, #0]
		break;
 8000822:	e003      	b.n	800082c <fsm_pedestrian_run+0x8c>
		PedestrianRed();
 8000824:	f7ff ff80 	bl	8000728 <PedestrianRed>
		break;
 8000828:	e000      	b.n	800082c <fsm_pedestrian_run+0x8c>
		break;
 800082a:	bf00      	nop
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000004 	.word	0x20000004
 8000834:	20000008 	.word	0x20000008
 8000838:	2000000c 	.word	0x2000000c

0800083c <fsm_buzzer_run>:

int buzzer_volume = 0;
int freq = 0;			

void fsm_buzzer_run() {
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
   switch(buzzer_status) {
 8000840:	4b38      	ldr	r3, [pc, #224]	; (8000924 <fsm_buzzer_run+0xe8>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b09      	cmp	r3, #9
 8000846:	d006      	beq.n	8000856 <fsm_buzzer_run+0x1a>
 8000848:	2b09      	cmp	r3, #9
 800084a:	dc69      	bgt.n	8000920 <fsm_buzzer_run+0xe4>
 800084c:	2b07      	cmp	r3, #7
 800084e:	d00b      	beq.n	8000868 <fsm_buzzer_run+0x2c>
 8000850:	2b08      	cmp	r3, #8
 8000852:	d031      	beq.n	80008b8 <fsm_buzzer_run+0x7c>
			setTimer(3, (1000 - freq * 10));
		}

		break;
	}
}
 8000854:	e064      	b.n	8000920 <fsm_buzzer_run+0xe4>
		buzzer_volume = 0;
 8000856:	4b34      	ldr	r3, [pc, #208]	; (8000928 <fsm_buzzer_run+0xec>)
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, buzzer_volume);
 800085c:	4b32      	ldr	r3, [pc, #200]	; (8000928 <fsm_buzzer_run+0xec>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	4b32      	ldr	r3, [pc, #200]	; (800092c <fsm_buzzer_run+0xf0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000866:	e05b      	b.n	8000920 <fsm_buzzer_run+0xe4>
		if (status == RED_AMBER && timer_counter[0] <= amber_counter) {
 8000868:	4b31      	ldr	r3, [pc, #196]	; (8000930 <fsm_buzzer_run+0xf4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b3c      	cmp	r3, #60	; 0x3c
 800086e:	d10b      	bne.n	8000888 <fsm_buzzer_run+0x4c>
 8000870:	4b30      	ldr	r3, [pc, #192]	; (8000934 <fsm_buzzer_run+0xf8>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b30      	ldr	r3, [pc, #192]	; (8000938 <fsm_buzzer_run+0xfc>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	dc05      	bgt.n	8000888 <fsm_buzzer_run+0x4c>
			buzzer_status = HURRY;
 800087c:	4b29      	ldr	r3, [pc, #164]	; (8000924 <fsm_buzzer_run+0xe8>)
 800087e:	2208      	movs	r2, #8
 8000880:	601a      	str	r2, [r3, #0]
			buzzer_volume = 20;
 8000882:	4b29      	ldr	r3, [pc, #164]	; (8000928 <fsm_buzzer_run+0xec>)
 8000884:	2214      	movs	r2, #20
 8000886:	601a      	str	r2, [r3, #0]
		if (timer_flag[3] == 1) {
 8000888:	4b2c      	ldr	r3, [pc, #176]	; (800093c <fsm_buzzer_run+0x100>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d144      	bne.n	800091a <fsm_buzzer_run+0xde>
			buzzer_volume = (buzzer_volume == 0) ? 20 : 0;
 8000890:	4b25      	ldr	r3, [pc, #148]	; (8000928 <fsm_buzzer_run+0xec>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d101      	bne.n	800089c <fsm_buzzer_run+0x60>
 8000898:	2314      	movs	r3, #20
 800089a:	e000      	b.n	800089e <fsm_buzzer_run+0x62>
 800089c:	2300      	movs	r3, #0
 800089e:	4a22      	ldr	r2, [pc, #136]	; (8000928 <fsm_buzzer_run+0xec>)
 80008a0:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, buzzer_volume);
 80008a2:	4b21      	ldr	r3, [pc, #132]	; (8000928 <fsm_buzzer_run+0xec>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <fsm_buzzer_run+0xf0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	635a      	str	r2, [r3, #52]	; 0x34
			setTimer(3, 1000);
 80008ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008b0:	2003      	movs	r0, #3
 80008b2:	f000 fbc1 	bl	8001038 <setTimer>
		break;
 80008b6:	e030      	b.n	800091a <fsm_buzzer_run+0xde>
		if (status != RED_AMBER && status != RED_GREEN) {
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <fsm_buzzer_run+0xf4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b3c      	cmp	r3, #60	; 0x3c
 80008be:	d006      	beq.n	80008ce <fsm_buzzer_run+0x92>
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <fsm_buzzer_run+0xf4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b32      	cmp	r3, #50	; 0x32
 80008c6:	d002      	beq.n	80008ce <fsm_buzzer_run+0x92>
			buzzer_status = OFF;
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <fsm_buzzer_run+0xe8>)
 80008ca:	2209      	movs	r2, #9
 80008cc:	601a      	str	r2, [r3, #0]
		freq += 20;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <fsm_buzzer_run+0x104>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	3314      	adds	r3, #20
 80008d4:	4a1a      	ldr	r2, [pc, #104]	; (8000940 <fsm_buzzer_run+0x104>)
 80008d6:	6013      	str	r3, [r2, #0]
		if (timer_flag[3] == 1) {
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <fsm_buzzer_run+0x100>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d11e      	bne.n	800091e <fsm_buzzer_run+0xe2>
			buzzer_volume = (buzzer_volume == 0) ? (20 + freq) : 0;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <fsm_buzzer_run+0xec>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d103      	bne.n	80008f0 <fsm_buzzer_run+0xb4>
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <fsm_buzzer_run+0x104>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	3314      	adds	r3, #20
 80008ee:	e000      	b.n	80008f2 <fsm_buzzer_run+0xb6>
 80008f0:	2300      	movs	r3, #0
 80008f2:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <fsm_buzzer_run+0xec>)
 80008f4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, buzzer_volume);
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <fsm_buzzer_run+0xec>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <fsm_buzzer_run+0xf0>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	635a      	str	r2, [r3, #52]	; 0x34
			setTimer(3, (1000 - freq * 10));
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <fsm_buzzer_run+0x104>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f06f 0209 	mvn.w	r2, #9
 8000908:	fb02 f303 	mul.w	r3, r2, r3
 800090c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000910:	4619      	mov	r1, r3
 8000912:	2003      	movs	r0, #3
 8000914:	f000 fb90 	bl	8001038 <setTimer>
		break;
 8000918:	e001      	b.n	800091e <fsm_buzzer_run+0xe2>
		break;
 800091a:	bf00      	nop
 800091c:	e000      	b.n	8000920 <fsm_buzzer_run+0xe4>
		break;
 800091e:	bf00      	nop
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000008 	.word	0x20000008
 8000928:	2000004c 	.word	0x2000004c
 800092c:	20000084 	.word	0x20000084
 8000930:	20000000 	.word	0x20000000
 8000934:	20000164 	.word	0x20000164
 8000938:	20000014 	.word	0x20000014
 800093c:	20000178 	.word	0x20000178
 8000940:	20000050 	.word	0x20000050

08000944 <fsm_tuning_run>:
 *      Author: ASUS
 */

#include "fsm_tuning.h"

void fsm_tuning_run(void) {
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
	switch (traffic_status) {
 8000948:	4b2b      	ldr	r3, [pc, #172]	; (80009f8 <fsm_tuning_run+0xb4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000950:	d035      	beq.n	80009be <fsm_tuning_run+0x7a>
 8000952:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000956:	dc49      	bgt.n	80009ec <fsm_tuning_run+0xa8>
 8000958:	2b64      	cmp	r3, #100	; 0x64
 800095a:	d002      	beq.n	8000962 <fsm_tuning_run+0x1e>
 800095c:	2bc8      	cmp	r3, #200	; 0xc8
 800095e:	d017      	beq.n	8000990 <fsm_tuning_run+0x4c>

		status = MANUAL_MODE;
		break;

	default:
		break;
 8000960:	e044      	b.n	80009ec <fsm_tuning_run+0xa8>
		time_modify_counter = red_counter;
 8000962:	4b26      	ldr	r3, [pc, #152]	; (80009fc <fsm_tuning_run+0xb8>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a26      	ldr	r2, [pc, #152]	; (8000a00 <fsm_tuning_run+0xbc>)
 8000968:	6013      	str	r3, [r2, #0]
		if (time_modify_counter == MAX_TIME) {
 800096a:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <fsm_tuning_run+0xbc>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a25      	ldr	r2, [pc, #148]	; (8000a04 <fsm_tuning_run+0xc0>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d103      	bne.n	800097c <fsm_tuning_run+0x38>
			time_modify_counter = 0;
 8000974:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <fsm_tuning_run+0xbc>)
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	e005      	b.n	8000988 <fsm_tuning_run+0x44>
			time_modify_counter += UPDATED_TIME;
 800097c:	4b20      	ldr	r3, [pc, #128]	; (8000a00 <fsm_tuning_run+0xbc>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000984:	4a1e      	ldr	r2, [pc, #120]	; (8000a00 <fsm_tuning_run+0xbc>)
 8000986:	6013      	str	r3, [r2, #0]
		status = MANUAL_MODE;
 8000988:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <fsm_tuning_run+0xc4>)
 800098a:	2205      	movs	r2, #5
 800098c:	601a      	str	r2, [r3, #0]
		break;
 800098e:	e02e      	b.n	80009ee <fsm_tuning_run+0xaa>
		time_modify_counter = amber_counter;
 8000990:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <fsm_tuning_run+0xc8>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a1a      	ldr	r2, [pc, #104]	; (8000a00 <fsm_tuning_run+0xbc>)
 8000996:	6013      	str	r3, [r2, #0]
		if (time_modify_counter == MAX_TIME) {
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <fsm_tuning_run+0xbc>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a19      	ldr	r2, [pc, #100]	; (8000a04 <fsm_tuning_run+0xc0>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d103      	bne.n	80009aa <fsm_tuning_run+0x66>
			time_modify_counter = 0;
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <fsm_tuning_run+0xbc>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	e005      	b.n	80009b6 <fsm_tuning_run+0x72>
			time_modify_counter += UPDATED_TIME;
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <fsm_tuning_run+0xbc>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80009b2:	4a13      	ldr	r2, [pc, #76]	; (8000a00 <fsm_tuning_run+0xbc>)
 80009b4:	6013      	str	r3, [r2, #0]
		status = MANUAL_MODE;
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <fsm_tuning_run+0xc4>)
 80009b8:	2205      	movs	r2, #5
 80009ba:	601a      	str	r2, [r3, #0]
		break;
 80009bc:	e017      	b.n	80009ee <fsm_tuning_run+0xaa>
		time_modify_counter = green_counter;
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <fsm_tuning_run+0xcc>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <fsm_tuning_run+0xbc>)
 80009c4:	6013      	str	r3, [r2, #0]
		if (time_modify_counter == MAX_TIME) {
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <fsm_tuning_run+0xbc>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <fsm_tuning_run+0xc0>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d103      	bne.n	80009d8 <fsm_tuning_run+0x94>
			time_modify_counter = 0;
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <fsm_tuning_run+0xbc>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	e005      	b.n	80009e4 <fsm_tuning_run+0xa0>
			time_modify_counter += UPDATED_TIME;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <fsm_tuning_run+0xbc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <fsm_tuning_run+0xbc>)
 80009e2:	6013      	str	r3, [r2, #0]
		status = MANUAL_MODE;
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <fsm_tuning_run+0xc4>)
 80009e6:	2205      	movs	r2, #5
 80009e8:	601a      	str	r2, [r3, #0]
		break;
 80009ea:	e000      	b.n	80009ee <fsm_tuning_run+0xaa>
		break;
 80009ec:	bf00      	nop
	}
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	2000000c 	.word	0x2000000c
 80009fc:	20000010 	.word	0x20000010
 8000a00:	20000054 	.word	0x20000054
 8000a04:	000182b8 	.word	0x000182b8
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000014 	.word	0x20000014
 8000a10:	20000018 	.word	0x20000018

08000a14 <Red_Green>:
 *      Author: ASUS
 */

#include "graphics.h"

void Red_Green(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
    /* Red */
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a1e:	480a      	ldr	r0, [pc, #40]	; (8000a48 <Red_Green+0x34>)
 8000a20:	f000 ff5f 	bl	80018e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2108      	movs	r1, #8
 8000a28:	4808      	ldr	r0, [pc, #32]	; (8000a4c <Red_Green+0x38>)
 8000a2a:	f000 ff5a 	bl	80018e2 <HAL_GPIO_WritePin>

    /* Green */
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2120      	movs	r1, #32
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <Red_Green+0x38>)
 8000a34:	f000 ff55 	bl	80018e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 1);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2110      	movs	r1, #16
 8000a3c:	4803      	ldr	r0, [pc, #12]	; (8000a4c <Red_Green+0x38>)
 8000a3e:	f000 ff50 	bl	80018e2 <HAL_GPIO_WritePin>
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40010800 	.word	0x40010800
 8000a4c:	40010c00 	.word	0x40010c00

08000a50 <Red_Amber>:

void Red_Amber(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
    /* Red */
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a5a:	480a      	ldr	r0, [pc, #40]	; (8000a84 <Red_Amber+0x34>)
 8000a5c:	f000 ff41 	bl	80018e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2108      	movs	r1, #8
 8000a64:	4808      	ldr	r0, [pc, #32]	; (8000a88 <Red_Amber+0x38>)
 8000a66:	f000 ff3c 	bl	80018e2 <HAL_GPIO_WritePin>

    /* Amber */
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2120      	movs	r1, #32
 8000a6e:	4806      	ldr	r0, [pc, #24]	; (8000a88 <Red_Amber+0x38>)
 8000a70:	f000 ff37 	bl	80018e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 1);
 8000a74:	2201      	movs	r2, #1
 8000a76:	2110      	movs	r1, #16
 8000a78:	4803      	ldr	r0, [pc, #12]	; (8000a88 <Red_Amber+0x38>)
 8000a7a:	f000 ff32 	bl	80018e2 <HAL_GPIO_WritePin>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40010800 	.word	0x40010800
 8000a88:	40010c00 	.word	0x40010c00

08000a8c <Green_Red>:

void Green_Red(void) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
    /* Green */
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a96:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <Green_Red+0x34>)
 8000a98:	f000 ff23 	bl	80018e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2108      	movs	r1, #8
 8000aa0:	4808      	ldr	r0, [pc, #32]	; (8000ac4 <Green_Red+0x38>)
 8000aa2:	f000 ff1e 	bl	80018e2 <HAL_GPIO_WritePin>

    /* Red */
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2120      	movs	r1, #32
 8000aaa:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <Green_Red+0x38>)
 8000aac:	f000 ff19 	bl	80018e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <Green_Red+0x38>)
 8000ab6:	f000 ff14 	bl	80018e2 <HAL_GPIO_WritePin>
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40010800 	.word	0x40010800
 8000ac4:	40010c00 	.word	0x40010c00

08000ac8 <Amber_Red>:

void Amber_Red(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
    /* Amber */
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 8000acc:	2201      	movs	r2, #1
 8000ace:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad2:	480a      	ldr	r0, [pc, #40]	; (8000afc <Amber_Red+0x34>)
 8000ad4:	f000 ff05 	bl	80018e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2108      	movs	r1, #8
 8000adc:	4808      	ldr	r0, [pc, #32]	; (8000b00 <Amber_Red+0x38>)
 8000ade:	f000 ff00 	bl	80018e2 <HAL_GPIO_WritePin>

    /* Red */
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	4806      	ldr	r0, [pc, #24]	; (8000b00 <Amber_Red+0x38>)
 8000ae8:	f000 fefb 	bl	80018e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2110      	movs	r1, #16
 8000af0:	4803      	ldr	r0, [pc, #12]	; (8000b00 <Amber_Red+0x38>)
 8000af2:	f000 fef6 	bl	80018e2 <HAL_GPIO_WritePin>
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40010800 	.word	0x40010800
 8000b00:	40010c00 	.word	0x40010c00

08000b04 <Toggle_Red>:
    HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
}

int toggleIndex = 0;

void Toggle_Red(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
    if (toggleIndex == 0) {
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <Toggle_Red+0x74>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d118      	bne.n	8000b42 <Toggle_Red+0x3e>
        /* On */
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 8000b10:	2201      	movs	r2, #1
 8000b12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b16:	4819      	ldr	r0, [pc, #100]	; (8000b7c <Toggle_Red+0x78>)
 8000b18:	f000 fee3 	bl	80018e2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2108      	movs	r1, #8
 8000b20:	4817      	ldr	r0, [pc, #92]	; (8000b80 <Toggle_Red+0x7c>)
 8000b22:	f000 fede 	bl	80018e2 <HAL_GPIO_WritePin>

        /* On */
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2120      	movs	r1, #32
 8000b2a:	4815      	ldr	r0, [pc, #84]	; (8000b80 <Toggle_Red+0x7c>)
 8000b2c:	f000 fed9 	bl	80018e2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2110      	movs	r1, #16
 8000b34:	4812      	ldr	r0, [pc, #72]	; (8000b80 <Toggle_Red+0x7c>)
 8000b36:	f000 fed4 	bl	80018e2 <HAL_GPIO_WritePin>

        toggleIndex = 1;
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <Toggle_Red+0x74>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);

        toggleIndex = 0;
    }
}
 8000b40:	e017      	b.n	8000b72 <Toggle_Red+0x6e>
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b48:	480c      	ldr	r0, [pc, #48]	; (8000b7c <Toggle_Red+0x78>)
 8000b4a:	f000 feca 	bl	80018e2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2108      	movs	r1, #8
 8000b52:	480b      	ldr	r0, [pc, #44]	; (8000b80 <Toggle_Red+0x7c>)
 8000b54:	f000 fec5 	bl	80018e2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2120      	movs	r1, #32
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <Toggle_Red+0x7c>)
 8000b5e:	f000 fec0 	bl	80018e2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2110      	movs	r1, #16
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <Toggle_Red+0x7c>)
 8000b68:	f000 febb 	bl	80018e2 <HAL_GPIO_WritePin>
        toggleIndex = 0;
 8000b6c:	4b02      	ldr	r3, [pc, #8]	; (8000b78 <Toggle_Red+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000058 	.word	0x20000058
 8000b7c:	40010800 	.word	0x40010800
 8000b80:	40010c00 	.word	0x40010c00

08000b84 <Toggle_Amber>:

void Toggle_Amber(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
    if (toggleIndex == 0) {
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <Toggle_Amber+0x74>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d118      	bne.n	8000bc2 <Toggle_Amber+0x3e>
        /* On */
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 8000b90:	2201      	movs	r2, #1
 8000b92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b96:	4819      	ldr	r0, [pc, #100]	; (8000bfc <Toggle_Amber+0x78>)
 8000b98:	f000 fea3 	bl	80018e2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2108      	movs	r1, #8
 8000ba0:	4817      	ldr	r0, [pc, #92]	; (8000c00 <Toggle_Amber+0x7c>)
 8000ba2:	f000 fe9e 	bl	80018e2 <HAL_GPIO_WritePin>

        /* On */
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2120      	movs	r1, #32
 8000baa:	4815      	ldr	r0, [pc, #84]	; (8000c00 <Toggle_Amber+0x7c>)
 8000bac:	f000 fe99 	bl	80018e2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 1);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2110      	movs	r1, #16
 8000bb4:	4812      	ldr	r0, [pc, #72]	; (8000c00 <Toggle_Amber+0x7c>)
 8000bb6:	f000 fe94 	bl	80018e2 <HAL_GPIO_WritePin>

        toggleIndex = 1;
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <Toggle_Amber+0x74>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);

        toggleIndex = 0;
    }
}
 8000bc0:	e017      	b.n	8000bf2 <Toggle_Amber+0x6e>
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc8:	480c      	ldr	r0, [pc, #48]	; (8000bfc <Toggle_Amber+0x78>)
 8000bca:	f000 fe8a 	bl	80018e2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2108      	movs	r1, #8
 8000bd2:	480b      	ldr	r0, [pc, #44]	; (8000c00 <Toggle_Amber+0x7c>)
 8000bd4:	f000 fe85 	bl	80018e2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2120      	movs	r1, #32
 8000bdc:	4808      	ldr	r0, [pc, #32]	; (8000c00 <Toggle_Amber+0x7c>)
 8000bde:	f000 fe80 	bl	80018e2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2110      	movs	r1, #16
 8000be6:	4806      	ldr	r0, [pc, #24]	; (8000c00 <Toggle_Amber+0x7c>)
 8000be8:	f000 fe7b 	bl	80018e2 <HAL_GPIO_WritePin>
        toggleIndex = 0;
 8000bec:	4b02      	ldr	r3, [pc, #8]	; (8000bf8 <Toggle_Amber+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000058 	.word	0x20000058
 8000bfc:	40010800 	.word	0x40010800
 8000c00:	40010c00 	.word	0x40010c00

08000c04 <Toggle_Green>:

void Toggle_Green(void) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
    if (toggleIndex == 0) {
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <Toggle_Green+0x74>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d118      	bne.n	8000c42 <Toggle_Green+0x3e>
        /* On */
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c16:	4819      	ldr	r0, [pc, #100]	; (8000c7c <Toggle_Green+0x78>)
 8000c18:	f000 fe63 	bl	80018e2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2108      	movs	r1, #8
 8000c20:	4817      	ldr	r0, [pc, #92]	; (8000c80 <Toggle_Green+0x7c>)
 8000c22:	f000 fe5e 	bl	80018e2 <HAL_GPIO_WritePin>

        /* On */
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2120      	movs	r1, #32
 8000c2a:	4815      	ldr	r0, [pc, #84]	; (8000c80 <Toggle_Green+0x7c>)
 8000c2c:	f000 fe59 	bl	80018e2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 1);
 8000c30:	2201      	movs	r2, #1
 8000c32:	2110      	movs	r1, #16
 8000c34:	4812      	ldr	r0, [pc, #72]	; (8000c80 <Toggle_Green+0x7c>)
 8000c36:	f000 fe54 	bl	80018e2 <HAL_GPIO_WritePin>

        toggleIndex = 1;
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <Toggle_Green+0x74>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);

        toggleIndex = 0;
    }
}
 8000c40:	e017      	b.n	8000c72 <Toggle_Green+0x6e>
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c48:	480c      	ldr	r0, [pc, #48]	; (8000c7c <Toggle_Green+0x78>)
 8000c4a:	f000 fe4a 	bl	80018e2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2108      	movs	r1, #8
 8000c52:	480b      	ldr	r0, [pc, #44]	; (8000c80 <Toggle_Green+0x7c>)
 8000c54:	f000 fe45 	bl	80018e2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2120      	movs	r1, #32
 8000c5c:	4808      	ldr	r0, [pc, #32]	; (8000c80 <Toggle_Green+0x7c>)
 8000c5e:	f000 fe40 	bl	80018e2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2110      	movs	r1, #16
 8000c66:	4806      	ldr	r0, [pc, #24]	; (8000c80 <Toggle_Green+0x7c>)
 8000c68:	f000 fe3b 	bl	80018e2 <HAL_GPIO_WritePin>
        toggleIndex = 0;
 8000c6c:	4b02      	ldr	r3, [pc, #8]	; (8000c78 <Toggle_Green+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000058 	.word	0x20000058
 8000c7c:	40010800 	.word	0x40010800
 8000c80:	40010c00 	.word	0x40010c00

08000c84 <fsm_mode>:
 *      Author: ProX
 */

#include "led_display.h"

void fsm_mode() {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	switch (status) {
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <fsm_mode+0x4c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	d81b      	bhi.n	8000cca <fsm_mode+0x46>
 8000c92:	a201      	add	r2, pc, #4	; (adr r2, 8000c98 <fsm_mode+0x14>)
 8000c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c98:	08000ca9 	.word	0x08000ca9
 8000c9c:	08000cb1 	.word	0x08000cb1
 8000ca0:	08000cbf 	.word	0x08000cbf
 8000ca4:	08000cc5 	.word	0x08000cc5
	    case INIT:
	        status = AUTOMATIC_MODE;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <fsm_mode+0x4c>)
 8000caa:	2204      	movs	r2, #4
 8000cac:	601a      	str	r2, [r3, #0]
	        break;
 8000cae:	e00d      	b.n	8000ccc <fsm_mode+0x48>

	    case AUTOMATIC_MODE:
	        fsm_automatic_run();
 8000cb0:	f7ff fb30 	bl	8000314 <fsm_automatic_run>
	        fsm_pedestrian_run();
 8000cb4:	f7ff fd74 	bl	80007a0 <fsm_pedestrian_run>
	        fsm_buzzer_run();
 8000cb8:	f7ff fdc0 	bl	800083c <fsm_buzzer_run>

	        break;
 8000cbc:	e006      	b.n	8000ccc <fsm_mode+0x48>

	    case MANUAL_MODE:
	        fsm_manual_run();
 8000cbe:	f7ff fc3d 	bl	800053c <fsm_manual_run>
	        break;
 8000cc2:	e003      	b.n	8000ccc <fsm_mode+0x48>

	    case TUNING_MODE:
	        fsm_tuning_run();
 8000cc4:	f7ff fe3e 	bl	8000944 <fsm_tuning_run>
	        break;
 8000cc8:	e000      	b.n	8000ccc <fsm_mode+0x48>

	    default:
	        break;
 8000cca:	bf00      	nop
	    }
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000000 	.word	0x20000000

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd8:	f000 faf8 	bl	80012cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cdc:	f000 f828 	bl	8000d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000ce0:	f000 f868 	bl	8000db4 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000ce4:	f000 f928 	bl	8000f38 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000ce8:	f000 f8b0 	bl	8000e4c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000cec:	480e      	ldr	r0, [pc, #56]	; (8000d28 <main+0x54>)
 8000cee:	f001 fa49 	bl	8002184 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <main+0x58>)
 8000cf6:	f001 faef 	bl	80022d8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(0, 1000);
 8000cfa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 f99a 	bl	8001038 <setTimer>
  setTimer(1, 1000);
 8000d04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f000 f995 	bl	8001038 <setTimer>
  setTimer(2, 1000);
 8000d0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d12:	2002      	movs	r0, #2
 8000d14:	f000 f990 	bl	8001038 <setTimer>
  setTimer(3, 1000);
 8000d18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 f98b 	bl	8001038 <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_mode();
 8000d22:	f7ff ffaf 	bl	8000c84 <fsm_mode>
 8000d26:	e7fc      	b.n	8000d22 <main+0x4e>
 8000d28:	2000011c 	.word	0x2000011c
 8000d2c:	20000084 	.word	0x20000084

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b090      	sub	sp, #64	; 0x40
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 0318 	add.w	r3, r7, #24
 8000d3a:	2228      	movs	r2, #40	; 0x28
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 f952 	bl	8002fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d56:	2301      	movs	r3, #1
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d62:	2300      	movs	r3, #0
 8000d64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d66:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6c:	f107 0318 	add.w	r3, r7, #24
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 fdcf 	bl	8001914 <HAL_RCC_OscConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d7c:	f000 f956 	bl	800102c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d80:	230f      	movs	r3, #15
 8000d82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d84:	2302      	movs	r3, #2
 8000d86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2102      	movs	r1, #2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 f83a 	bl	8001e14 <HAL_RCC_ClockConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000da6:	f000 f941 	bl	800102c <Error_Handler>
  }
}
 8000daa:	bf00      	nop
 8000dac:	3740      	adds	r7, #64	; 0x40
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc8:	463b      	mov	r3, r7
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <MX_TIM2_Init+0x94>)
 8000dd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <MX_TIM2_Init+0x94>)
 8000dda:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000dde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <MX_TIM2_Init+0x94>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8000de6:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <MX_TIM2_Init+0x94>)
 8000de8:	224f      	movs	r2, #79	; 0x4f
 8000dea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dec:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <MX_TIM2_Init+0x94>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <MX_TIM2_Init+0x94>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000df8:	4813      	ldr	r0, [pc, #76]	; (8000e48 <MX_TIM2_Init+0x94>)
 8000dfa:	f001 f973 	bl	80020e4 <HAL_TIM_Base_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e04:	f000 f912 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e0e:	f107 0308 	add.w	r3, r7, #8
 8000e12:	4619      	mov	r1, r3
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <MX_TIM2_Init+0x94>)
 8000e16:	f001 fcc7 	bl	80027a8 <HAL_TIM_ConfigClockSource>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e20:	f000 f904 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e24:	2300      	movs	r3, #0
 8000e26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_TIM2_Init+0x94>)
 8000e32:	f002 f845 	bl	8002ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e3c:	f000 f8f6 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000011c 	.word	0x2000011c

08000e4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08e      	sub	sp, #56	; 0x38
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e60:	f107 0320 	add.w	r3, r7, #32
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
 8000e78:	615a      	str	r2, [r3, #20]
 8000e7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e7c:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <MX_TIM3_Init+0xe4>)
 8000e7e:	4a2d      	ldr	r2, [pc, #180]	; (8000f34 <MX_TIM3_Init+0xe8>)
 8000e80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000e82:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <MX_TIM3_Init+0xe4>)
 8000e84:	224f      	movs	r2, #79	; 0x4f
 8000e86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e88:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <MX_TIM3_Init+0xe4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 8000e8e:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <MX_TIM3_Init+0xe4>)
 8000e90:	224f      	movs	r2, #79	; 0x4f
 8000e92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e94:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <MX_TIM3_Init+0xe4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9a:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <MX_TIM3_Init+0xe4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ea0:	4823      	ldr	r0, [pc, #140]	; (8000f30 <MX_TIM3_Init+0xe4>)
 8000ea2:	f001 f91f 	bl	80020e4 <HAL_TIM_Base_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000eac:	f000 f8be 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	481c      	ldr	r0, [pc, #112]	; (8000f30 <MX_TIM3_Init+0xe4>)
 8000ebe:	f001 fc73 	bl	80027a8 <HAL_TIM_ConfigClockSource>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000ec8:	f000 f8b0 	bl	800102c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ecc:	4818      	ldr	r0, [pc, #96]	; (8000f30 <MX_TIM3_Init+0xe4>)
 8000ece:	f001 f9ab 	bl	8002228 <HAL_TIM_PWM_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000ed8:	f000 f8a8 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ee4:	f107 0320 	add.w	r3, r7, #32
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4811      	ldr	r0, [pc, #68]	; (8000f30 <MX_TIM3_Init+0xe4>)
 8000eec:	f001 ffe8 	bl	8002ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000ef6:	f000 f899 	bl	800102c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000efa:	2360      	movs	r3, #96	; 0x60
 8000efc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4807      	ldr	r0, [pc, #28]	; (8000f30 <MX_TIM3_Init+0xe4>)
 8000f12:	f001 fb8b 	bl	800262c <HAL_TIM_PWM_ConfigChannel>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000f1c:	f000 f886 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <MX_TIM3_Init+0xe4>)
 8000f22:	f000 f943 	bl	80011ac <HAL_TIM_MspPostInit>

}
 8000f26:	bf00      	nop
 8000f28:	3738      	adds	r7, #56	; 0x38
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000084 	.word	0x20000084
 8000f34:	40000400 	.word	0x40000400

08000f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <MX_GPIO_Init+0xd0>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a2d      	ldr	r2, [pc, #180]	; (8001008 <MX_GPIO_Init+0xd0>)
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <MX_GPIO_Init+0xd0>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f64:	4b28      	ldr	r3, [pc, #160]	; (8001008 <MX_GPIO_Init+0xd0>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a27      	ldr	r2, [pc, #156]	; (8001008 <MX_GPIO_Init+0xd0>)
 8000f6a:	f043 0308 	orr.w	r3, r3, #8
 8000f6e:	6193      	str	r3, [r2, #24]
 8000f70:	4b25      	ldr	r3, [pc, #148]	; (8001008 <MX_GPIO_Init+0xd0>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f003 0308 	and.w	r3, r3, #8
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PEDESTRIAN_Pin|LED_2_Pin|LED_4_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000f82:	4822      	ldr	r0, [pc, #136]	; (800100c <MX_GPIO_Init+0xd4>)
 8000f84:	f000 fcad 	bl	80018e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PEDESTRIAN_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000f8e:	4820      	ldr	r0, [pc, #128]	; (8001010 <MX_GPIO_Init+0xd8>)
 8000f90:	f000 fca7 	bl	80018e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_PEDESTRIAN_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_PEDESTRIAN_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8000f94:	2313      	movs	r3, #19
 8000f96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	481a      	ldr	r0, [pc, #104]	; (8001010 <MX_GPIO_Init+0xd8>)
 8000fa8:	f000 fb00 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin;
 8000fac:	2301      	movs	r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_3_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 0308 	add.w	r3, r7, #8
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4813      	ldr	r0, [pc, #76]	; (800100c <MX_GPIO_Init+0xd4>)
 8000fc0:	f000 faf4 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PEDESTRIAN_Pin LED_2_Pin LED_4_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = D6_PEDESTRIAN_Pin|LED_2_Pin|LED_4_Pin|LED_3_Pin;
 8000fc4:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000fc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f107 0308 	add.w	r3, r7, #8
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480b      	ldr	r0, [pc, #44]	; (800100c <MX_GPIO_Init+0xd4>)
 8000fde:	f000 fae5 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_PEDESTRIAN_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = D7_PEDESTRIAN_Pin|LED_1_Pin;
 8000fe2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000fe6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_GPIO_Init+0xd8>)
 8000ffc:	f000 fad6 	bl	80015ac <HAL_GPIO_Init>

}
 8001000:	bf00      	nop
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021000 	.word	0x40021000
 800100c:	40010c00 	.word	0x40010c00
 8001010:	40010800 	.word	0x40010800

08001014 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  timerRun();
 800101c:	f000 f82c 	bl	8001078 <timerRun>
  getKeyInput();
 8001020:	f7ff f894 	bl	800014c <getKeyInput>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001034:	e7fe      	b.n	8001034 <Error_Handler+0x8>
	...

08001038 <setTimer>:
#define TIMER_CYCLE 10

int timer_flag[NO_TIMERS + 1];
int timer_counter[NO_TIMERS + 1];

void setTimer(int flagNo, int duration) {
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	timer_counter[flagNo] = duration / TIMER_CYCLE;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	4a09      	ldr	r2, [pc, #36]	; (800106c <setTimer+0x34>)
 8001046:	fb82 1203 	smull	r1, r2, r2, r3
 800104a:	1092      	asrs	r2, r2, #2
 800104c:	17db      	asrs	r3, r3, #31
 800104e:	1ad2      	subs	r2, r2, r3
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <setTimer+0x38>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[flagNo] = 0;
 8001058:	4a06      	ldr	r2, [pc, #24]	; (8001074 <setTimer+0x3c>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2100      	movs	r1, #0
 800105e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	66666667 	.word	0x66666667
 8001070:	20000164 	.word	0x20000164
 8001074:	20000178 	.word	0x20000178

08001078 <timerRun>:

void timerRun() {
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
	for (int flagNo = 0; flagNo < NO_TIMERS; flagNo++) {
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	e01c      	b.n	80010be <timerRun+0x46>
		if (timer_counter[flagNo] > 0) {
 8001084:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <timerRun+0x58>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108c:	2b00      	cmp	r3, #0
 800108e:	dd13      	ble.n	80010b8 <timerRun+0x40>
			timer_counter[flagNo]--;
 8001090:	4a0f      	ldr	r2, [pc, #60]	; (80010d0 <timerRun+0x58>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001098:	1e5a      	subs	r2, r3, #1
 800109a:	490d      	ldr	r1, [pc, #52]	; (80010d0 <timerRun+0x58>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[flagNo] <= 0) {
 80010a2:	4a0b      	ldr	r2, [pc, #44]	; (80010d0 <timerRun+0x58>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	dc04      	bgt.n	80010b8 <timerRun+0x40>
				timer_flag[flagNo] = 1;
 80010ae:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <timerRun+0x5c>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2101      	movs	r1, #1
 80010b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int flagNo = 0; flagNo < NO_TIMERS; flagNo++) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3301      	adds	r3, #1
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	dddf      	ble.n	8001084 <timerRun+0xc>
			}
		}
	}
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	20000164 	.word	0x20000164
 80010d4:	20000178 	.word	0x20000178

080010d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_MspInit+0x5c>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	4a14      	ldr	r2, [pc, #80]	; (8001134 <HAL_MspInit+0x5c>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6193      	str	r3, [r2, #24]
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_MspInit+0x5c>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_MspInit+0x5c>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <HAL_MspInit+0x5c>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001100:	61d3      	str	r3, [r2, #28]
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HAL_MspInit+0x5c>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <HAL_MspInit+0x60>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <HAL_MspInit+0x60>)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	40021000 	.word	0x40021000
 8001138:	40010000 	.word	0x40010000

0800113c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800114c:	d114      	bne.n	8001178 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_TIM_Base_MspInit+0x68>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <HAL_TIM_Base_MspInit+0x68>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	61d3      	str	r3, [r2, #28]
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_TIM_Base_MspInit+0x68>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	201c      	movs	r0, #28
 800116c:	f000 f9e7 	bl	800153e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001170:	201c      	movs	r0, #28
 8001172:	f000 fa00 	bl	8001576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001176:	e010      	b.n	800119a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <HAL_TIM_Base_MspInit+0x6c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d10b      	bne.n	800119a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <HAL_TIM_Base_MspInit+0x68>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_TIM_Base_MspInit+0x68>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	61d3      	str	r3, [r2, #28]
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_TIM_Base_MspInit+0x68>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40000400 	.word	0x40000400

080011ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <HAL_TIM_MspPostInit+0x58>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d117      	bne.n	80011fc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011cc:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_TIM_MspPostInit+0x5c>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <HAL_TIM_MspPostInit+0x5c>)
 80011d2:	f043 0304 	orr.w	r3, r3, #4
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_TIM_MspPostInit+0x5c>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011e4:	2340      	movs	r3, #64	; 0x40
 80011e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	4619      	mov	r1, r3
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <HAL_TIM_MspPostInit+0x60>)
 80011f8:	f000 f9d8 	bl	80015ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011fc:	bf00      	nop
 80011fe:	3720      	adds	r7, #32
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40000400 	.word	0x40000400
 8001208:	40021000 	.word	0x40021000
 800120c:	40010800 	.word	0x40010800

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x4>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr

0800123a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr

08001246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr

08001252 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001256:	f000 f87f 	bl	8001358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <TIM2_IRQHandler+0x10>)
 8001266:	f001 f8d9 	bl	800241c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000011c 	.word	0x2000011c

08001274 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001282:	490d      	ldr	r1, [pc, #52]	; (80012b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001298:	4c0a      	ldr	r4, [pc, #40]	; (80012c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012a6:	f7ff ffe5 	bl	8001274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012aa:	f001 fe79 	bl	8002fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ae:	f7ff fd11 	bl	8000cd4 <main>
  bx lr
 80012b2:	4770      	bx	lr
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b8:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80012bc:	08003038 	.word	0x08003038
  ldr r2, =_sbss
 80012c0:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80012c4:	20000190 	.word	0x20000190

080012c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC1_2_IRQHandler>
	...

080012cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_Init+0x28>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <HAL_Init+0x28>)
 80012d6:	f043 0310 	orr.w	r3, r3, #16
 80012da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012dc:	2003      	movs	r0, #3
 80012de:	f000 f923 	bl	8001528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e2:	200f      	movs	r0, #15
 80012e4:	f000 f808 	bl	80012f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e8:	f7ff fef6 	bl	80010d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40022000 	.word	0x40022000

080012f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_InitTick+0x54>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_InitTick+0x58>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001312:	fbb2 f3f3 	udiv	r3, r2, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f93b 	bl	8001592 <HAL_SYSTICK_Config>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e00e      	b.n	8001344 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b0f      	cmp	r3, #15
 800132a:	d80a      	bhi.n	8001342 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132c:	2200      	movs	r2, #0
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f000 f903 	bl	800153e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001338:	4a06      	ldr	r2, [pc, #24]	; (8001354 <HAL_InitTick+0x5c>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	e000      	b.n	8001344 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000024 	.word	0x20000024
 8001350:	2000002c 	.word	0x2000002c
 8001354:	20000028 	.word	0x20000028

08001358 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_IncTick+0x1c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_IncTick+0x20>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a03      	ldr	r2, [pc, #12]	; (8001378 <HAL_IncTick+0x20>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	2000002c 	.word	0x2000002c
 8001378:	2000018c 	.word	0x2000018c

0800137c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;
 8001380:	4b02      	ldr	r3, [pc, #8]	; (800138c <HAL_GetTick+0x10>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	2000018c 	.word	0x2000018c

08001390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ac:	4013      	ands	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	60d3      	str	r3, [r2, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <__NVIC_GetPriorityGrouping+0x18>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	f003 0307 	and.w	r3, r3, #7
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db0b      	blt.n	800141e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 021f 	and.w	r2, r3, #31
 800140c:	4906      	ldr	r1, [pc, #24]	; (8001428 <__NVIC_EnableIRQ+0x34>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100

0800142c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db0a      	blt.n	8001456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	490c      	ldr	r1, [pc, #48]	; (8001478 <__NVIC_SetPriority+0x4c>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	440b      	add	r3, r1
 8001450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001454:	e00a      	b.n	800146c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4908      	ldr	r1, [pc, #32]	; (800147c <__NVIC_SetPriority+0x50>)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	3b04      	subs	r3, #4
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	440b      	add	r3, r1
 800146a:	761a      	strb	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	; 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f1c3 0307 	rsb	r3, r3, #7
 800149a:	2b04      	cmp	r3, #4
 800149c:	bf28      	it	cs
 800149e:	2304      	movcs	r3, #4
 80014a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3304      	adds	r3, #4
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d902      	bls.n	80014b0 <NVIC_EncodePriority+0x30>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3b03      	subs	r3, #3
 80014ae:	e000      	b.n	80014b2 <NVIC_EncodePriority+0x32>
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43d9      	mvns	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	4313      	orrs	r3, r2
         );
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f4:	d301      	bcc.n	80014fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00f      	b.n	800151a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <SysTick_Config+0x40>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001502:	210f      	movs	r1, #15
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f7ff ff90 	bl	800142c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <SysTick_Config+0x40>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001512:	4b04      	ldr	r3, [pc, #16]	; (8001524 <SysTick_Config+0x40>)
 8001514:	2207      	movs	r2, #7
 8001516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	e000e010 	.word	0xe000e010

08001528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ff2d 	bl	8001390 <__NVIC_SetPriorityGrouping>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001550:	f7ff ff42 	bl	80013d8 <__NVIC_GetPriorityGrouping>
 8001554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	6978      	ldr	r0, [r7, #20]
 800155c:	f7ff ff90 	bl	8001480 <NVIC_EncodePriority>
 8001560:	4602      	mov	r2, r0
 8001562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff5f 	bl	800142c <__NVIC_SetPriority>
}
 800156e:	bf00      	nop
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff35 	bl	80013f4 <__NVIC_EnableIRQ>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff ffa2 	bl	80014e4 <SysTick_Config>
 80015a0:	4603      	mov	r3, r0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b08b      	sub	sp, #44	; 0x2c
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015be:	e169      	b.n	8001894 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015c0:	2201      	movs	r2, #1
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	429a      	cmp	r2, r3
 80015da:	f040 8158 	bne.w	800188e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4a9a      	ldr	r2, [pc, #616]	; (800184c <HAL_GPIO_Init+0x2a0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d05e      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
 80015e8:	4a98      	ldr	r2, [pc, #608]	; (800184c <HAL_GPIO_Init+0x2a0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d875      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 80015ee:	4a98      	ldr	r2, [pc, #608]	; (8001850 <HAL_GPIO_Init+0x2a4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d058      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
 80015f4:	4a96      	ldr	r2, [pc, #600]	; (8001850 <HAL_GPIO_Init+0x2a4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d86f      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 80015fa:	4a96      	ldr	r2, [pc, #600]	; (8001854 <HAL_GPIO_Init+0x2a8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d052      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
 8001600:	4a94      	ldr	r2, [pc, #592]	; (8001854 <HAL_GPIO_Init+0x2a8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d869      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 8001606:	4a94      	ldr	r2, [pc, #592]	; (8001858 <HAL_GPIO_Init+0x2ac>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d04c      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
 800160c:	4a92      	ldr	r2, [pc, #584]	; (8001858 <HAL_GPIO_Init+0x2ac>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d863      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 8001612:	4a92      	ldr	r2, [pc, #584]	; (800185c <HAL_GPIO_Init+0x2b0>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d046      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
 8001618:	4a90      	ldr	r2, [pc, #576]	; (800185c <HAL_GPIO_Init+0x2b0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d85d      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 800161e:	2b12      	cmp	r3, #18
 8001620:	d82a      	bhi.n	8001678 <HAL_GPIO_Init+0xcc>
 8001622:	2b12      	cmp	r3, #18
 8001624:	d859      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 8001626:	a201      	add	r2, pc, #4	; (adr r2, 800162c <HAL_GPIO_Init+0x80>)
 8001628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162c:	080016a7 	.word	0x080016a7
 8001630:	08001681 	.word	0x08001681
 8001634:	08001693 	.word	0x08001693
 8001638:	080016d5 	.word	0x080016d5
 800163c:	080016db 	.word	0x080016db
 8001640:	080016db 	.word	0x080016db
 8001644:	080016db 	.word	0x080016db
 8001648:	080016db 	.word	0x080016db
 800164c:	080016db 	.word	0x080016db
 8001650:	080016db 	.word	0x080016db
 8001654:	080016db 	.word	0x080016db
 8001658:	080016db 	.word	0x080016db
 800165c:	080016db 	.word	0x080016db
 8001660:	080016db 	.word	0x080016db
 8001664:	080016db 	.word	0x080016db
 8001668:	080016db 	.word	0x080016db
 800166c:	080016db 	.word	0x080016db
 8001670:	08001689 	.word	0x08001689
 8001674:	0800169d 	.word	0x0800169d
 8001678:	4a79      	ldr	r2, [pc, #484]	; (8001860 <HAL_GPIO_Init+0x2b4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d013      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800167e:	e02c      	b.n	80016da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	623b      	str	r3, [r7, #32]
          break;
 8001686:	e029      	b.n	80016dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	3304      	adds	r3, #4
 800168e:	623b      	str	r3, [r7, #32]
          break;
 8001690:	e024      	b.n	80016dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	3308      	adds	r3, #8
 8001698:	623b      	str	r3, [r7, #32]
          break;
 800169a:	e01f      	b.n	80016dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	330c      	adds	r3, #12
 80016a2:	623b      	str	r3, [r7, #32]
          break;
 80016a4:	e01a      	b.n	80016dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d102      	bne.n	80016b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ae:	2304      	movs	r3, #4
 80016b0:	623b      	str	r3, [r7, #32]
          break;
 80016b2:	e013      	b.n	80016dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d105      	bne.n	80016c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016bc:	2308      	movs	r3, #8
 80016be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69fa      	ldr	r2, [r7, #28]
 80016c4:	611a      	str	r2, [r3, #16]
          break;
 80016c6:	e009      	b.n	80016dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c8:	2308      	movs	r3, #8
 80016ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69fa      	ldr	r2, [r7, #28]
 80016d0:	615a      	str	r2, [r3, #20]
          break;
 80016d2:	e003      	b.n	80016dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016d4:	2300      	movs	r3, #0
 80016d6:	623b      	str	r3, [r7, #32]
          break;
 80016d8:	e000      	b.n	80016dc <HAL_GPIO_Init+0x130>
          break;
 80016da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2bff      	cmp	r3, #255	; 0xff
 80016e0:	d801      	bhi.n	80016e6 <HAL_GPIO_Init+0x13a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	e001      	b.n	80016ea <HAL_GPIO_Init+0x13e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2bff      	cmp	r3, #255	; 0xff
 80016f0:	d802      	bhi.n	80016f8 <HAL_GPIO_Init+0x14c>
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	e002      	b.n	80016fe <HAL_GPIO_Init+0x152>
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	3b08      	subs	r3, #8
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	210f      	movs	r1, #15
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	fa01 f303 	lsl.w	r3, r1, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	401a      	ands	r2, r3
 8001710:	6a39      	ldr	r1, [r7, #32]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	fa01 f303 	lsl.w	r3, r1, r3
 8001718:	431a      	orrs	r2, r3
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 80b1 	beq.w	800188e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800172c:	4b4d      	ldr	r3, [pc, #308]	; (8001864 <HAL_GPIO_Init+0x2b8>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a4c      	ldr	r2, [pc, #304]	; (8001864 <HAL_GPIO_Init+0x2b8>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b4a      	ldr	r3, [pc, #296]	; (8001864 <HAL_GPIO_Init+0x2b8>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001744:	4a48      	ldr	r2, [pc, #288]	; (8001868 <HAL_GPIO_Init+0x2bc>)
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	3302      	adds	r3, #2
 800174c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001750:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	220f      	movs	r2, #15
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4013      	ands	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a40      	ldr	r2, [pc, #256]	; (800186c <HAL_GPIO_Init+0x2c0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d013      	beq.n	8001798 <HAL_GPIO_Init+0x1ec>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a3f      	ldr	r2, [pc, #252]	; (8001870 <HAL_GPIO_Init+0x2c4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d00d      	beq.n	8001794 <HAL_GPIO_Init+0x1e8>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a3e      	ldr	r2, [pc, #248]	; (8001874 <HAL_GPIO_Init+0x2c8>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d007      	beq.n	8001790 <HAL_GPIO_Init+0x1e4>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a3d      	ldr	r2, [pc, #244]	; (8001878 <HAL_GPIO_Init+0x2cc>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d101      	bne.n	800178c <HAL_GPIO_Init+0x1e0>
 8001788:	2303      	movs	r3, #3
 800178a:	e006      	b.n	800179a <HAL_GPIO_Init+0x1ee>
 800178c:	2304      	movs	r3, #4
 800178e:	e004      	b.n	800179a <HAL_GPIO_Init+0x1ee>
 8001790:	2302      	movs	r3, #2
 8001792:	e002      	b.n	800179a <HAL_GPIO_Init+0x1ee>
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <HAL_GPIO_Init+0x1ee>
 8001798:	2300      	movs	r3, #0
 800179a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800179c:	f002 0203 	and.w	r2, r2, #3
 80017a0:	0092      	lsls	r2, r2, #2
 80017a2:	4093      	lsls	r3, r2
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017aa:	492f      	ldr	r1, [pc, #188]	; (8001868 <HAL_GPIO_Init+0x2bc>)
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	3302      	adds	r3, #2
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d006      	beq.n	80017d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017c4:	4b2d      	ldr	r3, [pc, #180]	; (800187c <HAL_GPIO_Init+0x2d0>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	492c      	ldr	r1, [pc, #176]	; (800187c <HAL_GPIO_Init+0x2d0>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017d2:	4b2a      	ldr	r3, [pc, #168]	; (800187c <HAL_GPIO_Init+0x2d0>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	43db      	mvns	r3, r3
 80017da:	4928      	ldr	r1, [pc, #160]	; (800187c <HAL_GPIO_Init+0x2d0>)
 80017dc:	4013      	ands	r3, r2
 80017de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d006      	beq.n	80017fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017ec:	4b23      	ldr	r3, [pc, #140]	; (800187c <HAL_GPIO_Init+0x2d0>)
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	4922      	ldr	r1, [pc, #136]	; (800187c <HAL_GPIO_Init+0x2d0>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]
 80017f8:	e006      	b.n	8001808 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_GPIO_Init+0x2d0>)
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	43db      	mvns	r3, r3
 8001802:	491e      	ldr	r1, [pc, #120]	; (800187c <HAL_GPIO_Init+0x2d0>)
 8001804:	4013      	ands	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_GPIO_Init+0x2d0>)
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	4918      	ldr	r1, [pc, #96]	; (800187c <HAL_GPIO_Init+0x2d0>)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	608b      	str	r3, [r1, #8]
 8001820:	e006      	b.n	8001830 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <HAL_GPIO_Init+0x2d0>)
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	43db      	mvns	r3, r3
 800182a:	4914      	ldr	r1, [pc, #80]	; (800187c <HAL_GPIO_Init+0x2d0>)
 800182c:	4013      	ands	r3, r2
 800182e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d021      	beq.n	8001880 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <HAL_GPIO_Init+0x2d0>)
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	490e      	ldr	r1, [pc, #56]	; (800187c <HAL_GPIO_Init+0x2d0>)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	60cb      	str	r3, [r1, #12]
 8001848:	e021      	b.n	800188e <HAL_GPIO_Init+0x2e2>
 800184a:	bf00      	nop
 800184c:	10320000 	.word	0x10320000
 8001850:	10310000 	.word	0x10310000
 8001854:	10220000 	.word	0x10220000
 8001858:	10210000 	.word	0x10210000
 800185c:	10120000 	.word	0x10120000
 8001860:	10110000 	.word	0x10110000
 8001864:	40021000 	.word	0x40021000
 8001868:	40010000 	.word	0x40010000
 800186c:	40010800 	.word	0x40010800
 8001870:	40010c00 	.word	0x40010c00
 8001874:	40011000 	.word	0x40011000
 8001878:	40011400 	.word	0x40011400
 800187c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_GPIO_Init+0x304>)
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	43db      	mvns	r3, r3
 8001888:	4909      	ldr	r1, [pc, #36]	; (80018b0 <HAL_GPIO_Init+0x304>)
 800188a:	4013      	ands	r3, r2
 800188c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	3301      	adds	r3, #1
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	fa22 f303 	lsr.w	r3, r2, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f47f ae8e 	bne.w	80015c0 <HAL_GPIO_Init+0x14>
  }
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	372c      	adds	r7, #44	; 0x2c
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	40010400 	.word	0x40010400

080018b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	e001      	b.n	80018d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr

080018e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	460b      	mov	r3, r1
 80018ec:	807b      	strh	r3, [r7, #2]
 80018ee:	4613      	mov	r3, r2
 80018f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018f2:	787b      	ldrb	r3, [r7, #1]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018f8:	887a      	ldrh	r2, [r7, #2]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018fe:	e003      	b.n	8001908 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001900:	887b      	ldrh	r3, [r7, #2]
 8001902:	041a      	lsls	r2, r3, #16
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	611a      	str	r2, [r3, #16]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
	...

08001914 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e26c      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 8087 	beq.w	8001a42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001934:	4b92      	ldr	r3, [pc, #584]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b04      	cmp	r3, #4
 800193e:	d00c      	beq.n	800195a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001940:	4b8f      	ldr	r3, [pc, #572]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d112      	bne.n	8001972 <HAL_RCC_OscConfig+0x5e>
 800194c:	4b8c      	ldr	r3, [pc, #560]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001958:	d10b      	bne.n	8001972 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195a:	4b89      	ldr	r3, [pc, #548]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d06c      	beq.n	8001a40 <HAL_RCC_OscConfig+0x12c>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d168      	bne.n	8001a40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e246      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197a:	d106      	bne.n	800198a <HAL_RCC_OscConfig+0x76>
 800197c:	4b80      	ldr	r3, [pc, #512]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a7f      	ldr	r2, [pc, #508]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	e02e      	b.n	80019e8 <HAL_RCC_OscConfig+0xd4>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x98>
 8001992:	4b7b      	ldr	r3, [pc, #492]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a7a      	ldr	r2, [pc, #488]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	4b78      	ldr	r3, [pc, #480]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a77      	ldr	r2, [pc, #476]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e01d      	b.n	80019e8 <HAL_RCC_OscConfig+0xd4>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0xbc>
 80019b6:	4b72      	ldr	r3, [pc, #456]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a71      	ldr	r2, [pc, #452]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b6f      	ldr	r3, [pc, #444]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a6e      	ldr	r2, [pc, #440]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_OscConfig+0xd4>
 80019d0:	4b6b      	ldr	r3, [pc, #428]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a6a      	ldr	r2, [pc, #424]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b68      	ldr	r3, [pc, #416]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a67      	ldr	r2, [pc, #412]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d013      	beq.n	8001a18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fcc4 	bl	800137c <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff fcc0 	bl	800137c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e1fa      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	4b5d      	ldr	r3, [pc, #372]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0xe4>
 8001a16:	e014      	b.n	8001a42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff fcb0 	bl	800137c <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff fcac 	bl	800137c <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e1e6      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	4b53      	ldr	r3, [pc, #332]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x10c>
 8001a3e:	e000      	b.n	8001a42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d063      	beq.n	8001b16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a4e:	4b4c      	ldr	r3, [pc, #304]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a5a:	4b49      	ldr	r3, [pc, #292]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d11c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x18c>
 8001a66:	4b46      	ldr	r3, [pc, #280]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d116      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a72:	4b43      	ldr	r3, [pc, #268]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d005      	beq.n	8001a8a <HAL_RCC_OscConfig+0x176>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e1ba      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8a:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4939      	ldr	r1, [pc, #228]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9e:	e03a      	b.n	8001b16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d020      	beq.n	8001aea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa8:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aae:	f7ff fc65 	bl	800137c <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab6:	f7ff fc61 	bl	800137c <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e19b      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4927      	ldr	r1, [pc, #156]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	600b      	str	r3, [r1, #0]
 8001ae8:	e015      	b.n	8001b16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aea:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <HAL_RCC_OscConfig+0x270>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff fc44 	bl	800137c <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af8:	f7ff fc40 	bl	800137c <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e17a      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d03a      	beq.n	8001b98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d019      	beq.n	8001b5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b30:	f7ff fc24 	bl	800137c <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b38:	f7ff fc20 	bl	800137c <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e15a      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b56:	2001      	movs	r0, #1
 8001b58:	f000 faa6 	bl	80020a8 <RCC_Delay>
 8001b5c:	e01c      	b.n	8001b98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_RCC_OscConfig+0x274>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b64:	f7ff fc0a 	bl	800137c <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6a:	e00f      	b.n	8001b8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6c:	f7ff fc06 	bl	800137c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d908      	bls.n	8001b8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e140      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	42420000 	.word	0x42420000
 8001b88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8c:	4b9e      	ldr	r3, [pc, #632]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1e9      	bne.n	8001b6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80a6 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001baa:	4b97      	ldr	r3, [pc, #604]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10d      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	4b94      	ldr	r3, [pc, #592]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	4a93      	ldr	r2, [pc, #588]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	61d3      	str	r3, [r2, #28]
 8001bc2:	4b91      	ldr	r3, [pc, #580]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd2:	4b8e      	ldr	r3, [pc, #568]	; (8001e0c <HAL_RCC_OscConfig+0x4f8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d118      	bne.n	8001c10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bde:	4b8b      	ldr	r3, [pc, #556]	; (8001e0c <HAL_RCC_OscConfig+0x4f8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a8a      	ldr	r2, [pc, #552]	; (8001e0c <HAL_RCC_OscConfig+0x4f8>)
 8001be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bea:	f7ff fbc7 	bl	800137c <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf2:	f7ff fbc3 	bl	800137c <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b64      	cmp	r3, #100	; 0x64
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e0fd      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c04:	4b81      	ldr	r3, [pc, #516]	; (8001e0c <HAL_RCC_OscConfig+0x4f8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d106      	bne.n	8001c26 <HAL_RCC_OscConfig+0x312>
 8001c18:	4b7b      	ldr	r3, [pc, #492]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	4a7a      	ldr	r2, [pc, #488]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6213      	str	r3, [r2, #32]
 8001c24:	e02d      	b.n	8001c82 <HAL_RCC_OscConfig+0x36e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x334>
 8001c2e:	4b76      	ldr	r3, [pc, #472]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	4a75      	ldr	r2, [pc, #468]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	f023 0301 	bic.w	r3, r3, #1
 8001c38:	6213      	str	r3, [r2, #32]
 8001c3a:	4b73      	ldr	r3, [pc, #460]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	4a72      	ldr	r2, [pc, #456]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	f023 0304 	bic.w	r3, r3, #4
 8001c44:	6213      	str	r3, [r2, #32]
 8001c46:	e01c      	b.n	8001c82 <HAL_RCC_OscConfig+0x36e>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2b05      	cmp	r3, #5
 8001c4e:	d10c      	bne.n	8001c6a <HAL_RCC_OscConfig+0x356>
 8001c50:	4b6d      	ldr	r3, [pc, #436]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	4a6c      	ldr	r2, [pc, #432]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	f043 0304 	orr.w	r3, r3, #4
 8001c5a:	6213      	str	r3, [r2, #32]
 8001c5c:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	4a69      	ldr	r2, [pc, #420]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6213      	str	r3, [r2, #32]
 8001c68:	e00b      	b.n	8001c82 <HAL_RCC_OscConfig+0x36e>
 8001c6a:	4b67      	ldr	r3, [pc, #412]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	4a66      	ldr	r2, [pc, #408]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	6213      	str	r3, [r2, #32]
 8001c76:	4b64      	ldr	r3, [pc, #400]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	4a63      	ldr	r2, [pc, #396]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001c7c:	f023 0304 	bic.w	r3, r3, #4
 8001c80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d015      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8a:	f7ff fb77 	bl	800137c <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c90:	e00a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c92:	f7ff fb73 	bl	800137c <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e0ab      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca8:	4b57      	ldr	r3, [pc, #348]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0ee      	beq.n	8001c92 <HAL_RCC_OscConfig+0x37e>
 8001cb4:	e014      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff fb61 	bl	800137c <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cbc:	e00a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cbe:	f7ff fb5d 	bl	800137c <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e095      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd4:	4b4c      	ldr	r3, [pc, #304]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1ee      	bne.n	8001cbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d105      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce6:	4b48      	ldr	r3, [pc, #288]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	4a47      	ldr	r2, [pc, #284]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 8081 	beq.w	8001dfe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cfc:	4b42      	ldr	r3, [pc, #264]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d061      	beq.n	8001dcc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d146      	bne.n	8001d9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d10:	4b3f      	ldr	r3, [pc, #252]	; (8001e10 <HAL_RCC_OscConfig+0x4fc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7ff fb31 	bl	800137c <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7ff fb2d 	bl	800137c <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e067      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d30:	4b35      	ldr	r3, [pc, #212]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f0      	bne.n	8001d1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d44:	d108      	bne.n	8001d58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d46:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	492d      	ldr	r1, [pc, #180]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d58:	4b2b      	ldr	r3, [pc, #172]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a19      	ldr	r1, [r3, #32]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	4927      	ldr	r1, [pc, #156]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d70:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <HAL_RCC_OscConfig+0x4fc>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d76:	f7ff fb01 	bl	800137c <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7ff fafd 	bl	800137c <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e037      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x46a>
 8001d9c:	e02f      	b.n	8001dfe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <HAL_RCC_OscConfig+0x4fc>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff faea 	bl	800137c <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dac:	f7ff fae6 	bl	800137c <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e020      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbe:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x498>
 8001dca:	e018      	b.n	8001dfe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e013      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d106      	bne.n	8001dfa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d001      	beq.n	8001dfe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	42420060 	.word	0x42420060

08001e14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0d0      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e28:	4b6a      	ldr	r3, [pc, #424]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d910      	bls.n	8001e58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b67      	ldr	r3, [pc, #412]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 0207 	bic.w	r2, r3, #7
 8001e3e:	4965      	ldr	r1, [pc, #404]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b63      	ldr	r3, [pc, #396]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0b8      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d020      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e70:	4b59      	ldr	r3, [pc, #356]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	4a58      	ldr	r2, [pc, #352]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e88:	4b53      	ldr	r3, [pc, #332]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4a52      	ldr	r2, [pc, #328]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e94:	4b50      	ldr	r3, [pc, #320]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	494d      	ldr	r1, [pc, #308]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d040      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d107      	bne.n	8001eca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eba:	4b47      	ldr	r3, [pc, #284]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d115      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e07f      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d107      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed2:	4b41      	ldr	r3, [pc, #260]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d109      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e073      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee2:	4b3d      	ldr	r3, [pc, #244]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e06b      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ef2:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f023 0203 	bic.w	r2, r3, #3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4936      	ldr	r1, [pc, #216]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f04:	f7ff fa3a 	bl	800137c <HAL_GetTick>
 8001f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0a:	e00a      	b.n	8001f22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0c:	f7ff fa36 	bl	800137c <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e053      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f22:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 020c 	and.w	r2, r3, #12
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d1eb      	bne.n	8001f0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f34:	4b27      	ldr	r3, [pc, #156]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d210      	bcs.n	8001f64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 0207 	bic.w	r2, r3, #7
 8001f4a:	4922      	ldr	r1, [pc, #136]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e032      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f70:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4916      	ldr	r1, [pc, #88]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d009      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	490e      	ldr	r1, [pc, #56]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fa2:	f000 f821 	bl	8001fe8 <HAL_RCC_GetSysClockFreq>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	490a      	ldr	r1, [pc, #40]	; (8001fdc <HAL_RCC_ClockConfig+0x1c8>)
 8001fb4:	5ccb      	ldrb	r3, [r1, r3]
 8001fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fba:	4a09      	ldr	r2, [pc, #36]	; (8001fe0 <HAL_RCC_ClockConfig+0x1cc>)
 8001fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <HAL_RCC_ClockConfig+0x1d0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff f998 	bl	80012f8 <HAL_InitTick>

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40022000 	.word	0x40022000
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	08003020 	.word	0x08003020
 8001fe0:	20000024 	.word	0x20000024
 8001fe4:	20000028 	.word	0x20000028

08001fe8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe8:	b490      	push	{r4, r7}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fee:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ff0:	1d3c      	adds	r4, r7, #4
 8001ff2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ff4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ff8:	f240 2301 	movw	r3, #513	; 0x201
 8001ffc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	2300      	movs	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002012:	4b22      	ldr	r3, [pc, #136]	; (800209c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b04      	cmp	r3, #4
 8002020:	d002      	beq.n	8002028 <HAL_RCC_GetSysClockFreq+0x40>
 8002022:	2b08      	cmp	r3, #8
 8002024:	d003      	beq.n	800202e <HAL_RCC_GetSysClockFreq+0x46>
 8002026:	e02d      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002028:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800202a:	623b      	str	r3, [r7, #32]
      break;
 800202c:	e02d      	b.n	800208a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	0c9b      	lsrs	r3, r3, #18
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800203a:	4413      	add	r3, r2
 800203c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002040:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d013      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <HAL_RCC_GetSysClockFreq+0xb4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	0c5b      	lsrs	r3, r3, #17
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800205a:	4413      	add	r3, r2
 800205c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002060:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	4a0e      	ldr	r2, [pc, #56]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002066:	fb02 f203 	mul.w	r2, r2, r3
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
 8002072:	e004      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002078:	fb02 f303 	mul.w	r3, r2, r3
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	623b      	str	r3, [r7, #32]
      break;
 8002082:	e002      	b.n	800208a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002086:	623b      	str	r3, [r7, #32]
      break;
 8002088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800208a:	6a3b      	ldr	r3, [r7, #32]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3728      	adds	r7, #40	; 0x28
 8002090:	46bd      	mov	sp, r7
 8002092:	bc90      	pop	{r4, r7}
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	08003010 	.word	0x08003010
 800209c:	40021000 	.word	0x40021000
 80020a0:	007a1200 	.word	0x007a1200
 80020a4:	003d0900 	.word	0x003d0900

080020a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020b0:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <RCC_Delay+0x34>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <RCC_Delay+0x38>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	0a5b      	lsrs	r3, r3, #9
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	fb02 f303 	mul.w	r3, r2, r3
 80020c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020c4:	bf00      	nop
  }
  while (Delay --);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1e5a      	subs	r2, r3, #1
 80020ca:	60fa      	str	r2, [r7, #12]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f9      	bne.n	80020c4 <RCC_Delay+0x1c>
}
 80020d0:	bf00      	nop
 80020d2:	bf00      	nop
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	20000024 	.word	0x20000024
 80020e0:	10624dd3 	.word	0x10624dd3

080020e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e041      	b.n	800217a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d106      	bne.n	8002110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff f816 	bl	800113c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2202      	movs	r2, #2
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3304      	adds	r3, #4
 8002120:	4619      	mov	r1, r3
 8002122:	4610      	mov	r0, r2
 8002124:	f000 fc28 	bl	8002978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b01      	cmp	r3, #1
 8002196:	d001      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e03a      	b.n	8002212 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a18      	ldr	r2, [pc, #96]	; (800221c <HAL_TIM_Base_Start_IT+0x98>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00e      	beq.n	80021dc <HAL_TIM_Base_Start_IT+0x58>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c6:	d009      	beq.n	80021dc <HAL_TIM_Base_Start_IT+0x58>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a14      	ldr	r2, [pc, #80]	; (8002220 <HAL_TIM_Base_Start_IT+0x9c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d004      	beq.n	80021dc <HAL_TIM_Base_Start_IT+0x58>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a13      	ldr	r2, [pc, #76]	; (8002224 <HAL_TIM_Base_Start_IT+0xa0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d111      	bne.n	8002200 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d010      	beq.n	8002210 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 0201 	orr.w	r2, r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021fe:	e007      	b.n	8002210 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	40012c00 	.word	0x40012c00
 8002220:	40000400 	.word	0x40000400
 8002224:	40000800 	.word	0x40000800

08002228 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e041      	b.n	80022be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f839 	bl	80022c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3304      	adds	r3, #4
 8002264:	4619      	mov	r1, r3
 8002266:	4610      	mov	r0, r2
 8002268:	f000 fb86 	bl	8002978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d109      	bne.n	80022fc <HAL_TIM_PWM_Start+0x24>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	bf14      	ite	ne
 80022f4:	2301      	movne	r3, #1
 80022f6:	2300      	moveq	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	e022      	b.n	8002342 <HAL_TIM_PWM_Start+0x6a>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d109      	bne.n	8002316 <HAL_TIM_PWM_Start+0x3e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b01      	cmp	r3, #1
 800230c:	bf14      	ite	ne
 800230e:	2301      	movne	r3, #1
 8002310:	2300      	moveq	r3, #0
 8002312:	b2db      	uxtb	r3, r3
 8002314:	e015      	b.n	8002342 <HAL_TIM_PWM_Start+0x6a>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b08      	cmp	r3, #8
 800231a:	d109      	bne.n	8002330 <HAL_TIM_PWM_Start+0x58>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b01      	cmp	r3, #1
 8002326:	bf14      	ite	ne
 8002328:	2301      	movne	r3, #1
 800232a:	2300      	moveq	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	e008      	b.n	8002342 <HAL_TIM_PWM_Start+0x6a>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b01      	cmp	r3, #1
 800233a:	bf14      	ite	ne
 800233c:	2301      	movne	r3, #1
 800233e:	2300      	moveq	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e05e      	b.n	8002408 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d104      	bne.n	800235a <HAL_TIM_PWM_Start+0x82>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002358:	e013      	b.n	8002382 <HAL_TIM_PWM_Start+0xaa>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b04      	cmp	r3, #4
 800235e:	d104      	bne.n	800236a <HAL_TIM_PWM_Start+0x92>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002368:	e00b      	b.n	8002382 <HAL_TIM_PWM_Start+0xaa>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b08      	cmp	r3, #8
 800236e:	d104      	bne.n	800237a <HAL_TIM_PWM_Start+0xa2>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002378:	e003      	b.n	8002382 <HAL_TIM_PWM_Start+0xaa>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2202      	movs	r2, #2
 800237e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2201      	movs	r2, #1
 8002388:	6839      	ldr	r1, [r7, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fd74 	bl	8002e78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a1e      	ldr	r2, [pc, #120]	; (8002410 <HAL_TIM_PWM_Start+0x138>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d107      	bne.n	80023aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a18      	ldr	r2, [pc, #96]	; (8002410 <HAL_TIM_PWM_Start+0x138>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d00e      	beq.n	80023d2 <HAL_TIM_PWM_Start+0xfa>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023bc:	d009      	beq.n	80023d2 <HAL_TIM_PWM_Start+0xfa>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a14      	ldr	r2, [pc, #80]	; (8002414 <HAL_TIM_PWM_Start+0x13c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d004      	beq.n	80023d2 <HAL_TIM_PWM_Start+0xfa>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a12      	ldr	r2, [pc, #72]	; (8002418 <HAL_TIM_PWM_Start+0x140>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d111      	bne.n	80023f6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b06      	cmp	r3, #6
 80023e2:	d010      	beq.n	8002406 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023f4:	e007      	b.n	8002406 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0201 	orr.w	r2, r2, #1
 8002404:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40012c00 	.word	0x40012c00
 8002414:	40000400 	.word	0x40000400
 8002418:	40000800 	.word	0x40000800

0800241c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b02      	cmp	r3, #2
 8002430:	d122      	bne.n	8002478 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b02      	cmp	r3, #2
 800243e:	d11b      	bne.n	8002478 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0202 	mvn.w	r2, #2
 8002448:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fa6f 	bl	8002942 <HAL_TIM_IC_CaptureCallback>
 8002464:	e005      	b.n	8002472 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fa62 	bl	8002930 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 fa71 	bl	8002954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b04      	cmp	r3, #4
 8002484:	d122      	bne.n	80024cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b04      	cmp	r3, #4
 8002492:	d11b      	bne.n	80024cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 0204 	mvn.w	r2, #4
 800249c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2202      	movs	r2, #2
 80024a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fa45 	bl	8002942 <HAL_TIM_IC_CaptureCallback>
 80024b8:	e005      	b.n	80024c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 fa38 	bl	8002930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fa47 	bl	8002954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d122      	bne.n	8002520 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d11b      	bne.n	8002520 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f06f 0208 	mvn.w	r2, #8
 80024f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2204      	movs	r2, #4
 80024f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fa1b 	bl	8002942 <HAL_TIM_IC_CaptureCallback>
 800250c:	e005      	b.n	800251a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fa0e 	bl	8002930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 fa1d 	bl	8002954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	2b10      	cmp	r3, #16
 800252c:	d122      	bne.n	8002574 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	2b10      	cmp	r3, #16
 800253a:	d11b      	bne.n	8002574 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0210 	mvn.w	r2, #16
 8002544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2208      	movs	r2, #8
 800254a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f9f1 	bl	8002942 <HAL_TIM_IC_CaptureCallback>
 8002560:	e005      	b.n	800256e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f9e4 	bl	8002930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f9f3 	bl	8002954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b01      	cmp	r3, #1
 8002580:	d10e      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b01      	cmp	r3, #1
 800258e:	d107      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0201 	mvn.w	r2, #1
 8002598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7fe fd3a 	bl	8001014 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025aa:	2b80      	cmp	r3, #128	; 0x80
 80025ac:	d10e      	bne.n	80025cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b8:	2b80      	cmp	r3, #128	; 0x80
 80025ba:	d107      	bne.n	80025cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fce1 	bl	8002f8e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b40      	cmp	r3, #64	; 0x40
 80025d8:	d10e      	bne.n	80025f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e4:	2b40      	cmp	r3, #64	; 0x40
 80025e6:	d107      	bne.n	80025f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f9b7 	bl	8002966 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f003 0320 	and.w	r3, r3, #32
 8002602:	2b20      	cmp	r3, #32
 8002604:	d10e      	bne.n	8002624 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b20      	cmp	r3, #32
 8002612:	d107      	bne.n	8002624 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0220 	mvn.w	r2, #32
 800261c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 fcac 	bl	8002f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002624:	bf00      	nop
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002642:	2302      	movs	r3, #2
 8002644:	e0ac      	b.n	80027a0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b0c      	cmp	r3, #12
 8002652:	f200 809f 	bhi.w	8002794 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002656:	a201      	add	r2, pc, #4	; (adr r2, 800265c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265c:	08002691 	.word	0x08002691
 8002660:	08002795 	.word	0x08002795
 8002664:	08002795 	.word	0x08002795
 8002668:	08002795 	.word	0x08002795
 800266c:	080026d1 	.word	0x080026d1
 8002670:	08002795 	.word	0x08002795
 8002674:	08002795 	.word	0x08002795
 8002678:	08002795 	.word	0x08002795
 800267c:	08002713 	.word	0x08002713
 8002680:	08002795 	.word	0x08002795
 8002684:	08002795 	.word	0x08002795
 8002688:	08002795 	.word	0x08002795
 800268c:	08002753 	.word	0x08002753
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	4618      	mov	r0, r3
 8002698:	f000 f9d0 	bl	8002a3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0208 	orr.w	r2, r2, #8
 80026aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699a      	ldr	r2, [r3, #24]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0204 	bic.w	r2, r2, #4
 80026ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6999      	ldr	r1, [r3, #24]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	691a      	ldr	r2, [r3, #16]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	619a      	str	r2, [r3, #24]
      break;
 80026ce:	e062      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 fa16 	bl	8002b08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699a      	ldr	r2, [r3, #24]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6999      	ldr	r1, [r3, #24]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	021a      	lsls	r2, r3, #8
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	619a      	str	r2, [r3, #24]
      break;
 8002710:	e041      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fa5f 	bl	8002bdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69da      	ldr	r2, [r3, #28]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0208 	orr.w	r2, r2, #8
 800272c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69da      	ldr	r2, [r3, #28]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0204 	bic.w	r2, r2, #4
 800273c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	69d9      	ldr	r1, [r3, #28]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	61da      	str	r2, [r3, #28]
      break;
 8002750:	e021      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68b9      	ldr	r1, [r7, #8]
 8002758:	4618      	mov	r0, r3
 800275a:	f000 faa9 	bl	8002cb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	69da      	ldr	r2, [r3, #28]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800276c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	69da      	ldr	r2, [r3, #28]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800277c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69d9      	ldr	r1, [r3, #28]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	021a      	lsls	r2, r3, #8
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	61da      	str	r2, [r3, #28]
      break;
 8002792:	e000      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002794:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_TIM_ConfigClockSource+0x18>
 80027bc:	2302      	movs	r3, #2
 80027be:	e0b3      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x180>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f8:	d03e      	beq.n	8002878 <HAL_TIM_ConfigClockSource+0xd0>
 80027fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027fe:	f200 8087 	bhi.w	8002910 <HAL_TIM_ConfigClockSource+0x168>
 8002802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002806:	f000 8085 	beq.w	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 800280a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280e:	d87f      	bhi.n	8002910 <HAL_TIM_ConfigClockSource+0x168>
 8002810:	2b70      	cmp	r3, #112	; 0x70
 8002812:	d01a      	beq.n	800284a <HAL_TIM_ConfigClockSource+0xa2>
 8002814:	2b70      	cmp	r3, #112	; 0x70
 8002816:	d87b      	bhi.n	8002910 <HAL_TIM_ConfigClockSource+0x168>
 8002818:	2b60      	cmp	r3, #96	; 0x60
 800281a:	d050      	beq.n	80028be <HAL_TIM_ConfigClockSource+0x116>
 800281c:	2b60      	cmp	r3, #96	; 0x60
 800281e:	d877      	bhi.n	8002910 <HAL_TIM_ConfigClockSource+0x168>
 8002820:	2b50      	cmp	r3, #80	; 0x50
 8002822:	d03c      	beq.n	800289e <HAL_TIM_ConfigClockSource+0xf6>
 8002824:	2b50      	cmp	r3, #80	; 0x50
 8002826:	d873      	bhi.n	8002910 <HAL_TIM_ConfigClockSource+0x168>
 8002828:	2b40      	cmp	r3, #64	; 0x40
 800282a:	d058      	beq.n	80028de <HAL_TIM_ConfigClockSource+0x136>
 800282c:	2b40      	cmp	r3, #64	; 0x40
 800282e:	d86f      	bhi.n	8002910 <HAL_TIM_ConfigClockSource+0x168>
 8002830:	2b30      	cmp	r3, #48	; 0x30
 8002832:	d064      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0x156>
 8002834:	2b30      	cmp	r3, #48	; 0x30
 8002836:	d86b      	bhi.n	8002910 <HAL_TIM_ConfigClockSource+0x168>
 8002838:	2b20      	cmp	r3, #32
 800283a:	d060      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0x156>
 800283c:	2b20      	cmp	r3, #32
 800283e:	d867      	bhi.n	8002910 <HAL_TIM_ConfigClockSource+0x168>
 8002840:	2b00      	cmp	r3, #0
 8002842:	d05c      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0x156>
 8002844:	2b10      	cmp	r3, #16
 8002846:	d05a      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002848:	e062      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6818      	ldr	r0, [r3, #0]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	6899      	ldr	r1, [r3, #8]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f000 faee 	bl	8002e3a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800286c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	609a      	str	r2, [r3, #8]
      break;
 8002876:	e04e      	b.n	8002916 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	6899      	ldr	r1, [r3, #8]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f000 fad7 	bl	8002e3a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800289a:	609a      	str	r2, [r3, #8]
      break;
 800289c:	e03b      	b.n	8002916 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	6859      	ldr	r1, [r3, #4]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	461a      	mov	r2, r3
 80028ac:	f000 fa4e 	bl	8002d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2150      	movs	r1, #80	; 0x50
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 faa5 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 80028bc:	e02b      	b.n	8002916 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6859      	ldr	r1, [r3, #4]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	461a      	mov	r2, r3
 80028cc:	f000 fa6c 	bl	8002da8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2160      	movs	r1, #96	; 0x60
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fa95 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 80028dc:	e01b      	b.n	8002916 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6859      	ldr	r1, [r3, #4]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	461a      	mov	r2, r3
 80028ec:	f000 fa2e 	bl	8002d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2140      	movs	r1, #64	; 0x40
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fa85 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 80028fc:	e00b      	b.n	8002916 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4619      	mov	r1, r3
 8002908:	4610      	mov	r0, r2
 800290a:	f000 fa7c 	bl	8002e06 <TIM_ITRx_SetConfig>
        break;
 800290e:	e002      	b.n	8002916 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002910:	bf00      	nop
 8002912:	e000      	b.n	8002916 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002914:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr

08002942 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr

08002966 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a29      	ldr	r2, [pc, #164]	; (8002a30 <TIM_Base_SetConfig+0xb8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d00b      	beq.n	80029a8 <TIM_Base_SetConfig+0x30>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002996:	d007      	beq.n	80029a8 <TIM_Base_SetConfig+0x30>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a26      	ldr	r2, [pc, #152]	; (8002a34 <TIM_Base_SetConfig+0xbc>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d003      	beq.n	80029a8 <TIM_Base_SetConfig+0x30>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a25      	ldr	r2, [pc, #148]	; (8002a38 <TIM_Base_SetConfig+0xc0>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d108      	bne.n	80029ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a1c      	ldr	r2, [pc, #112]	; (8002a30 <TIM_Base_SetConfig+0xb8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00b      	beq.n	80029da <TIM_Base_SetConfig+0x62>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c8:	d007      	beq.n	80029da <TIM_Base_SetConfig+0x62>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a19      	ldr	r2, [pc, #100]	; (8002a34 <TIM_Base_SetConfig+0xbc>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d003      	beq.n	80029da <TIM_Base_SetConfig+0x62>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a18      	ldr	r2, [pc, #96]	; (8002a38 <TIM_Base_SetConfig+0xc0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d108      	bne.n	80029ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a07      	ldr	r2, [pc, #28]	; (8002a30 <TIM_Base_SetConfig+0xb8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d103      	bne.n	8002a20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	615a      	str	r2, [r3, #20]
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	40012c00 	.word	0x40012c00
 8002a34:	40000400 	.word	0x40000400
 8002a38:	40000800 	.word	0x40000800

08002a3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	f023 0201 	bic.w	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 0303 	bic.w	r3, r3, #3
 8002a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f023 0302 	bic.w	r3, r3, #2
 8002a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a1c      	ldr	r2, [pc, #112]	; (8002b04 <TIM_OC1_SetConfig+0xc8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d10c      	bne.n	8002ab2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f023 0308 	bic.w	r3, r3, #8
 8002a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f023 0304 	bic.w	r3, r3, #4
 8002ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <TIM_OC1_SetConfig+0xc8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d111      	bne.n	8002ade <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	621a      	str	r2, [r3, #32]
}
 8002af8:	bf00      	nop
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40012c00 	.word	0x40012c00

08002b08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	f023 0210 	bic.w	r2, r3, #16
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f023 0320 	bic.w	r3, r3, #32
 8002b52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a1d      	ldr	r2, [pc, #116]	; (8002bd8 <TIM_OC2_SetConfig+0xd0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d10d      	bne.n	8002b84 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a14      	ldr	r2, [pc, #80]	; (8002bd8 <TIM_OC2_SetConfig+0xd0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d113      	bne.n	8002bb4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	621a      	str	r2, [r3, #32]
}
 8002bce:	bf00      	nop
 8002bd0:	371c      	adds	r7, #28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr
 8002bd8:	40012c00 	.word	0x40012c00

08002bdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f023 0303 	bic.w	r3, r3, #3
 8002c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	021b      	lsls	r3, r3, #8
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a1d      	ldr	r2, [pc, #116]	; (8002cac <TIM_OC3_SetConfig+0xd0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d10d      	bne.n	8002c56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a14      	ldr	r2, [pc, #80]	; (8002cac <TIM_OC3_SetConfig+0xd0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d113      	bne.n	8002c86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	621a      	str	r2, [r3, #32]
}
 8002ca0:	bf00      	nop
 8002ca2:	371c      	adds	r7, #28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40012c00 	.word	0x40012c00

08002cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	021b      	lsls	r3, r3, #8
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	031b      	lsls	r3, r3, #12
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a0f      	ldr	r2, [pc, #60]	; (8002d48 <TIM_OC4_SetConfig+0x98>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d109      	bne.n	8002d24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	019b      	lsls	r3, r3, #6
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	621a      	str	r2, [r3, #32]
}
 8002d3e:	bf00      	nop
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	40012c00 	.word	0x40012c00

08002d4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	f023 0201 	bic.w	r2, r3, #1
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f023 030a 	bic.w	r3, r3, #10
 8002d88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	621a      	str	r2, [r3, #32]
}
 8002d9e:	bf00      	nop
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	f023 0210 	bic.w	r2, r3, #16
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	031b      	lsls	r3, r3, #12
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002de4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	621a      	str	r2, [r3, #32]
}
 8002dfc:	bf00      	nop
 8002dfe:	371c      	adds	r7, #28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f043 0307 	orr.w	r3, r3, #7
 8002e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	609a      	str	r2, [r3, #8]
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b087      	sub	sp, #28
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	021a      	lsls	r2, r3, #8
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	609a      	str	r2, [r3, #8]
}
 8002e6e:	bf00      	nop
 8002e70:	371c      	adds	r7, #28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 031f 	and.w	r3, r3, #31
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a1a      	ldr	r2, [r3, #32]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a1a      	ldr	r2, [r3, #32]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	621a      	str	r2, [r3, #32]
}
 8002eb6:	bf00      	nop
 8002eb8:	371c      	adds	r7, #28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e046      	b.n	8002f66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d00e      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f24:	d009      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a12      	ldr	r2, [pc, #72]	; (8002f74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d004      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a10      	ldr	r2, [pc, #64]	; (8002f78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d10c      	bne.n	8002f54 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr
 8002f70:	40012c00 	.word	0x40012c00
 8002f74:	40000400 	.word	0x40000400
 8002f78:	40000800 	.word	0x40000800

08002f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr

08002f8e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <__libc_init_array>:
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	2600      	movs	r6, #0
 8002fa4:	4d0c      	ldr	r5, [pc, #48]	; (8002fd8 <__libc_init_array+0x38>)
 8002fa6:	4c0d      	ldr	r4, [pc, #52]	; (8002fdc <__libc_init_array+0x3c>)
 8002fa8:	1b64      	subs	r4, r4, r5
 8002faa:	10a4      	asrs	r4, r4, #2
 8002fac:	42a6      	cmp	r6, r4
 8002fae:	d109      	bne.n	8002fc4 <__libc_init_array+0x24>
 8002fb0:	f000 f822 	bl	8002ff8 <_init>
 8002fb4:	2600      	movs	r6, #0
 8002fb6:	4d0a      	ldr	r5, [pc, #40]	; (8002fe0 <__libc_init_array+0x40>)
 8002fb8:	4c0a      	ldr	r4, [pc, #40]	; (8002fe4 <__libc_init_array+0x44>)
 8002fba:	1b64      	subs	r4, r4, r5
 8002fbc:	10a4      	asrs	r4, r4, #2
 8002fbe:	42a6      	cmp	r6, r4
 8002fc0:	d105      	bne.n	8002fce <__libc_init_array+0x2e>
 8002fc2:	bd70      	pop	{r4, r5, r6, pc}
 8002fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc8:	4798      	blx	r3
 8002fca:	3601      	adds	r6, #1
 8002fcc:	e7ee      	b.n	8002fac <__libc_init_array+0xc>
 8002fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd2:	4798      	blx	r3
 8002fd4:	3601      	adds	r6, #1
 8002fd6:	e7f2      	b.n	8002fbe <__libc_init_array+0x1e>
 8002fd8:	08003030 	.word	0x08003030
 8002fdc:	08003030 	.word	0x08003030
 8002fe0:	08003030 	.word	0x08003030
 8002fe4:	08003034 	.word	0x08003034

08002fe8 <memset>:
 8002fe8:	4603      	mov	r3, r0
 8002fea:	4402      	add	r2, r0
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d100      	bne.n	8002ff2 <memset+0xa>
 8002ff0:	4770      	bx	lr
 8002ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ff6:	e7f9      	b.n	8002fec <memset+0x4>

08002ff8 <_init>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	bf00      	nop
 8002ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffe:	bc08      	pop	{r3}
 8003000:	469e      	mov	lr, r3
 8003002:	4770      	bx	lr

08003004 <_fini>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	bf00      	nop
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr
