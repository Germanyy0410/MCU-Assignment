
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08004ab0  08004ab0  00014ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c44  08004c44  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08004c44  08004c44  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c44  08004c44  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c44  08004c44  00014c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c48  08004c48  00014c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08004c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000094  08004ce0  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08004ce0  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133ee  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c2  00000000  00000000  000334ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00035e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  00036bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001914e  00000000  00000000  000377e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101ba  00000000  00000000  0005092e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008abdf  00000000  00000000  00060ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb6c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003928  00000000  00000000  000eb71c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a98 	.word	0x08004a98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08004a98 	.word	0x08004a98

0800014c <getKeyInput>:
		button_flag[i] = 0;
		TimerForKeyPress[i] = 200;
	}
}

void getKeyInput() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
    for (int i = 1; i <= NO_BUTTONS; i++) {
 8000152:	2301      	movs	r3, #1
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e098      	b.n	800028a <getKeyInput+0x13e>
        KeyReg0[i] = KeyReg1[i];
 8000158:	4a50      	ldr	r2, [pc, #320]	; (800029c <getKeyInput+0x150>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000160:	494f      	ldr	r1, [pc, #316]	; (80002a0 <getKeyInput+0x154>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg1[i] = KeyReg2[i];
 8000168:	4a4e      	ldr	r2, [pc, #312]	; (80002a4 <getKeyInput+0x158>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000170:	494a      	ldr	r1, [pc, #296]	; (800029c <getKeyInput+0x150>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        if (i == 1) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b01      	cmp	r3, #1
 800017c:	d109      	bne.n	8000192 <getKeyInput+0x46>
 800017e:	2102      	movs	r1, #2
 8000180:	4849      	ldr	r0, [pc, #292]	; (80002a8 <getKeyInput+0x15c>)
 8000182:	f001 ff35 	bl	8001ff0 <HAL_GPIO_ReadPin>
 8000186:	4603      	mov	r3, r0
 8000188:	4619      	mov	r1, r3
 800018a:	4a46      	ldr	r2, [pc, #280]	; (80002a4 <getKeyInput+0x158>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 2) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2b02      	cmp	r3, #2
 8000196:	d109      	bne.n	80001ac <getKeyInput+0x60>
 8000198:	2110      	movs	r1, #16
 800019a:	4843      	ldr	r0, [pc, #268]	; (80002a8 <getKeyInput+0x15c>)
 800019c:	f001 ff28 	bl	8001ff0 <HAL_GPIO_ReadPin>
 80001a0:	4603      	mov	r3, r0
 80001a2:	4619      	mov	r1, r3
 80001a4:	4a3f      	ldr	r2, [pc, #252]	; (80002a4 <getKeyInput+0x158>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 3) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2b03      	cmp	r3, #3
 80001b0:	d109      	bne.n	80001c6 <getKeyInput+0x7a>
 80001b2:	2101      	movs	r1, #1
 80001b4:	483d      	ldr	r0, [pc, #244]	; (80002ac <getKeyInput+0x160>)
 80001b6:	f001 ff1b 	bl	8001ff0 <HAL_GPIO_ReadPin>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4619      	mov	r1, r3
 80001be:	4a39      	ldr	r2, [pc, #228]	; (80002a4 <getKeyInput+0x158>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (i == 4) KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_PEDESTRIAN_GPIO_Port, BUTTON_PEDESTRIAN_Pin);
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2b04      	cmp	r3, #4
 80001ca:	d109      	bne.n	80001e0 <getKeyInput+0x94>
 80001cc:	2101      	movs	r1, #1
 80001ce:	4836      	ldr	r0, [pc, #216]	; (80002a8 <getKeyInput+0x15c>)
 80001d0:	f001 ff0e 	bl	8001ff0 <HAL_GPIO_ReadPin>
 80001d4:	4603      	mov	r3, r0
 80001d6:	4619      	mov	r1, r3
 80001d8:	4a32      	ldr	r2, [pc, #200]	; (80002a4 <getKeyInput+0x158>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80001e0:	4a2f      	ldr	r2, [pc, #188]	; (80002a0 <getKeyInput+0x154>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e8:	492c      	ldr	r1, [pc, #176]	; (800029c <getKeyInput+0x150>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001f0:	429a      	cmp	r2, r3
 80001f2:	d147      	bne.n	8000284 <getKeyInput+0x138>
 80001f4:	4a29      	ldr	r2, [pc, #164]	; (800029c <getKeyInput+0x150>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fc:	4929      	ldr	r1, [pc, #164]	; (80002a4 <getKeyInput+0x158>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000204:	429a      	cmp	r2, r3
 8000206:	d13d      	bne.n	8000284 <getKeyInput+0x138>
            if (KeyReg3[i] != KeyReg2[i]) {
 8000208:	4a29      	ldr	r2, [pc, #164]	; (80002b0 <getKeyInput+0x164>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	4924      	ldr	r1, [pc, #144]	; (80002a4 <getKeyInput+0x158>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000218:	429a      	cmp	r2, r3
 800021a:	d016      	beq.n	800024a <getKeyInput+0xfe>
                KeyReg3[i] = KeyReg2[i];
 800021c:	4a21      	ldr	r2, [pc, #132]	; (80002a4 <getKeyInput+0x158>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000224:	4922      	ldr	r1, [pc, #136]	; (80002b0 <getKeyInput+0x164>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                if (KeyReg2[i] == PRESSED_STATE) {
 800022c:	4a1d      	ldr	r2, [pc, #116]	; (80002a4 <getKeyInput+0x158>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d125      	bne.n	8000284 <getKeyInput+0x138>
                    subKeyProcess(i);
 8000238:	6878      	ldr	r0, [r7, #4]
 800023a:	f000 f85b 	bl	80002f4 <subKeyProcess>
                    TimerForKeyPress[i] = 200;
 800023e:	4a1d      	ldr	r2, [pc, #116]	; (80002b4 <getKeyInput+0x168>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	21c8      	movs	r1, #200	; 0xc8
 8000244:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000248:	e01c      	b.n	8000284 <getKeyInput+0x138>
                }
            } else {
                TimerForKeyPress[i]--;
 800024a:	4a1a      	ldr	r2, [pc, #104]	; (80002b4 <getKeyInput+0x168>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000252:	1e5a      	subs	r2, r3, #1
 8000254:	4917      	ldr	r1, [pc, #92]	; (80002b4 <getKeyInput+0x168>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TimerForKeyPress[i] == 0) {
 800025c:	4a15      	ldr	r2, [pc, #84]	; (80002b4 <getKeyInput+0x168>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d10d      	bne.n	8000284 <getKeyInput+0x138>
                    if (KeyReg2[i] == PRESSED_STATE) {
 8000268:	4a0e      	ldr	r2, [pc, #56]	; (80002a4 <getKeyInput+0x158>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d102      	bne.n	800027a <getKeyInput+0x12e>
                        subKeyProcess(i);
 8000274:	6878      	ldr	r0, [r7, #4]
 8000276:	f000 f83d 	bl	80002f4 <subKeyProcess>
                    }

                    TimerForKeyPress[i] = 200;
 800027a:	4a0e      	ldr	r2, [pc, #56]	; (80002b4 <getKeyInput+0x168>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	21c8      	movs	r1, #200	; 0xc8
 8000280:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 1; i <= NO_BUTTONS; i++) {
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	3301      	adds	r3, #1
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2b04      	cmp	r3, #4
 800028e:	f77f af63 	ble.w	8000158 <getKeyInput+0xc>
                }
            }
        }
    }
}
 8000292:	bf00      	nop
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000140 	.word	0x20000140
 80002a0:	200000e4 	.word	0x200000e4
 80002a4:	2000017c 	.word	0x2000017c
 80002a8:	40010800 	.word	0x40010800
 80002ac:	40010c00 	.word	0x40010c00
 80002b0:	200000d0 	.word	0x200000d0
 80002b4:	20000154 	.word	0x20000154

080002b8 <isButtonPressed>:

int isButtonPressed(int index) {
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	if (index > NO_BUTTONS)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b04      	cmp	r3, #4
 80002c4:	dd01      	ble.n	80002ca <isButtonPressed+0x12>
		return 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	e00d      	b.n	80002e6 <isButtonPressed+0x2e>

	if (button_flag[index]) {
 80002ca:	4a09      	ldr	r2, [pc, #36]	; (80002f0 <isButtonPressed+0x38>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d006      	beq.n	80002e4 <isButtonPressed+0x2c>
		button_flag[index] = 0;
 80002d6:	4a06      	ldr	r2, [pc, #24]	; (80002f0 <isButtonPressed+0x38>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2100      	movs	r1, #0
 80002dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80002e0:	2301      	movs	r3, #1
 80002e2:	e000      	b.n	80002e6 <isButtonPressed+0x2e>
	}
	return 0;
 80002e4:	2300      	movs	r3, #0
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	20000168 	.word	0x20000168

080002f4 <subKeyProcess>:

void subKeyProcess(int index) {
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 80002fc:	4a04      	ldr	r2, [pc, #16]	; (8000310 <subKeyProcess+0x1c>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2101      	movs	r1, #1
 8000302:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr
 8000310:	20000168 	.word	0x20000168

08000314 <fsm_automatic_run>:
 *      Author: ProX
 */

#include "fsm_automatic.h"

void fsm_automatic_run(UART_HandleTypeDef huart2) {
 8000314:	b084      	sub	sp, #16
 8000316:	b580      	push	{r7, lr}
 8000318:	af00      	add	r7, sp, #0
 800031a:	f107 0c08 	add.w	ip, r7, #8
 800031e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    /* CHANGE TO MANUAL MODE WHEN BUTTON1 IS PRESSED */
    if (isButtonPressed(1)) {
 8000322:	2001      	movs	r0, #1
 8000324:	f7ff ffc8 	bl	80002b8 <isButtonPressed>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d006      	beq.n	800033c <fsm_automatic_run+0x28>
    	status = MANUAL_MODE;
 800032e:	4bb3      	ldr	r3, [pc, #716]	; (80005fc <fsm_automatic_run+0x2e8>)
 8000330:	2203      	movs	r2, #3
 8000332:	601a      	str	r2, [r3, #0]
		traffic_status = INIT;
 8000334:	4bb2      	ldr	r3, [pc, #712]	; (8000600 <fsm_automatic_run+0x2ec>)
 8000336:	2201      	movs	r2, #1
 8000338:	601a      	str	r2, [r3, #0]
		return;
 800033a:	e159      	b.n	80005f0 <fsm_automatic_run+0x2dc>
    }

    switch (traffic_status) {
 800033c:	4bb0      	ldr	r3, [pc, #704]	; (8000600 <fsm_automatic_run+0x2ec>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d04d      	beq.n	80003e0 <fsm_automatic_run+0xcc>
 8000344:	2b00      	cmp	r3, #0
 8000346:	f340 8153 	ble.w	80005f0 <fsm_automatic_run+0x2dc>
 800034a:	2b50      	cmp	r3, #80	; 0x50
 800034c:	f300 8150 	bgt.w	80005f0 <fsm_automatic_run+0x2dc>
 8000350:	2b32      	cmp	r3, #50	; 0x32
 8000352:	f2c0 814d 	blt.w	80005f0 <fsm_automatic_run+0x2dc>
 8000356:	3b32      	subs	r3, #50	; 0x32
 8000358:	2b1e      	cmp	r3, #30
 800035a:	f200 8149 	bhi.w	80005f0 <fsm_automatic_run+0x2dc>
 800035e:	a201      	add	r2, pc, #4	; (adr r2, 8000364 <fsm_automatic_run+0x50>)
 8000360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000364:	08000465 	.word	0x08000465
 8000368:	080005f1 	.word	0x080005f1
 800036c:	080005f1 	.word	0x080005f1
 8000370:	080005f1 	.word	0x080005f1
 8000374:	080005f1 	.word	0x080005f1
 8000378:	080005f1 	.word	0x080005f1
 800037c:	080005f1 	.word	0x080005f1
 8000380:	080005f1 	.word	0x080005f1
 8000384:	080005f1 	.word	0x080005f1
 8000388:	080005f1 	.word	0x080005f1
 800038c:	080004b5 	.word	0x080004b5
 8000390:	080005f1 	.word	0x080005f1
 8000394:	080005f1 	.word	0x080005f1
 8000398:	080005f1 	.word	0x080005f1
 800039c:	080005f1 	.word	0x080005f1
 80003a0:	080005f1 	.word	0x080005f1
 80003a4:	080005f1 	.word	0x080005f1
 80003a8:	080005f1 	.word	0x080005f1
 80003ac:	080005f1 	.word	0x080005f1
 80003b0:	080005f1 	.word	0x080005f1
 80003b4:	08000521 	.word	0x08000521
 80003b8:	080005f1 	.word	0x080005f1
 80003bc:	080005f1 	.word	0x080005f1
 80003c0:	080005f1 	.word	0x080005f1
 80003c4:	080005f1 	.word	0x080005f1
 80003c8:	080005f1 	.word	0x080005f1
 80003cc:	080005f1 	.word	0x080005f1
 80003d0:	080005f1 	.word	0x080005f1
 80003d4:	080005f1 	.word	0x080005f1
 80003d8:	080005f1 	.word	0x080005f1
 80003dc:	0800056f 	.word	0x0800056f
    case INIT:
    	/* UART COMMUNICATION */
    	HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Mode: Automatic mode\r\n"), 1000);
 80003e0:	4988      	ldr	r1, [pc, #544]	; (8000604 <fsm_automatic_run+0x2f0>)
 80003e2:	4889      	ldr	r0, [pc, #548]	; (8000608 <fsm_automatic_run+0x2f4>)
 80003e4:	f003 ff10 	bl	8004208 <siprintf>
 80003e8:	4603      	mov	r3, r0
 80003ea:	b29a      	uxth	r2, r3
 80003ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003f0:	4985      	ldr	r1, [pc, #532]	; (8000608 <fsm_automatic_run+0x2f4>)
 80003f2:	f107 0008 	add.w	r0, r7, #8
 80003f6:	f003 f9f0 	bl	80037da <HAL_UART_Transmit>

    	resetLights();
 80003fa:	f000 fcef 	bl	8000ddc <resetLights>
    	/* INACTIVE pedestrian light when in INIT state */
    	pedestrian_status = PEDESTRIAN_INACTIVE;
 80003fe:	4b83      	ldr	r3, [pc, #524]	; (800060c <fsm_automatic_run+0x2f8>)
 8000400:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000404:	601a      	str	r2, [r3, #0]

        traffic_status = RED_GREEN;
 8000406:	4b7e      	ldr	r3, [pc, #504]	; (8000600 <fsm_automatic_run+0x2ec>)
 8000408:	2232      	movs	r2, #50	; 0x32
 800040a:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "RED   GREEN\r\n"), 1000);
 800040c:	4980      	ldr	r1, [pc, #512]	; (8000610 <fsm_automatic_run+0x2fc>)
 800040e:	487e      	ldr	r0, [pc, #504]	; (8000608 <fsm_automatic_run+0x2f4>)
 8000410:	f003 fefa 	bl	8004208 <siprintf>
 8000414:	4603      	mov	r3, r0
 8000416:	b29a      	uxth	r2, r3
 8000418:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800041c:	497a      	ldr	r1, [pc, #488]	; (8000608 <fsm_automatic_run+0x2f4>)
 800041e:	f107 0008 	add.w	r0, r7, #8
 8000422:	f003 f9da 	bl	80037da <HAL_UART_Transmit>

        setTimer(1, green_counter);
 8000426:	4b7b      	ldr	r3, [pc, #492]	; (8000614 <fsm_automatic_run+0x300>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4619      	mov	r1, r3
 800042c:	2001      	movs	r0, #1
 800042e:	f001 f895 	bl	800155c <setTimer>

		setTimer(3, 250); 		// timer 3 for counting light
 8000432:	21fa      	movs	r1, #250	; 0xfa
 8000434:	2003      	movs	r0, #3
 8000436:	f001 f891 	bl	800155c <setTimer>

        counter_light_1 = red_counter / 1000;
 800043a:	4b77      	ldr	r3, [pc, #476]	; (8000618 <fsm_automatic_run+0x304>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a77      	ldr	r2, [pc, #476]	; (800061c <fsm_automatic_run+0x308>)
 8000440:	fb82 1203 	smull	r1, r2, r2, r3
 8000444:	1192      	asrs	r2, r2, #6
 8000446:	17db      	asrs	r3, r3, #31
 8000448:	1ad3      	subs	r3, r2, r3
 800044a:	4a75      	ldr	r2, [pc, #468]	; (8000620 <fsm_automatic_run+0x30c>)
 800044c:	6013      	str	r3, [r2, #0]
        counter_light_2 = green_counter / 1000;
 800044e:	4b71      	ldr	r3, [pc, #452]	; (8000614 <fsm_automatic_run+0x300>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a72      	ldr	r2, [pc, #456]	; (800061c <fsm_automatic_run+0x308>)
 8000454:	fb82 1203 	smull	r1, r2, r2, r3
 8000458:	1192      	asrs	r2, r2, #6
 800045a:	17db      	asrs	r3, r3, #31
 800045c:	1ad3      	subs	r3, r2, r3
 800045e:	4a71      	ldr	r2, [pc, #452]	; (8000624 <fsm_automatic_run+0x310>)
 8000460:	6013      	str	r3, [r2, #0]
//        counter_lights = READ_UART;

        break;
 8000462:	e0c5      	b.n	80005f0 <fsm_automatic_run+0x2dc>

    case RED_GREEN:
    	Red_Green();
 8000464:	f000 fce2 	bl	8000e2c <Red_Green>

        if (timer_flag[1] == 1) {
 8000468:	4b6f      	ldr	r3, [pc, #444]	; (8000628 <fsm_automatic_run+0x314>)
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	2b01      	cmp	r3, #1
 800046e:	f040 80b8 	bne.w	80005e2 <fsm_automatic_run+0x2ce>
            traffic_status = RED_AMBER;
 8000472:	4b63      	ldr	r3, [pc, #396]	; (8000600 <fsm_automatic_run+0x2ec>)
 8000474:	223c      	movs	r2, #60	; 0x3c
 8000476:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "RED   AMBER\r\n"), 1000);
 8000478:	496c      	ldr	r1, [pc, #432]	; (800062c <fsm_automatic_run+0x318>)
 800047a:	4863      	ldr	r0, [pc, #396]	; (8000608 <fsm_automatic_run+0x2f4>)
 800047c:	f003 fec4 	bl	8004208 <siprintf>
 8000480:	4603      	mov	r3, r0
 8000482:	b29a      	uxth	r2, r3
 8000484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000488:	495f      	ldr	r1, [pc, #380]	; (8000608 <fsm_automatic_run+0x2f4>)
 800048a:	f107 0008 	add.w	r0, r7, #8
 800048e:	f003 f9a4 	bl	80037da <HAL_UART_Transmit>
            setTimer(1, amber_counter);
 8000492:	4b67      	ldr	r3, [pc, #412]	; (8000630 <fsm_automatic_run+0x31c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4619      	mov	r1, r3
 8000498:	2001      	movs	r0, #1
 800049a:	f001 f85f 	bl	800155c <setTimer>

            counter_light_2 = amber_counter / 1000;
 800049e:	4b64      	ldr	r3, [pc, #400]	; (8000630 <fsm_automatic_run+0x31c>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a5e      	ldr	r2, [pc, #376]	; (800061c <fsm_automatic_run+0x308>)
 80004a4:	fb82 1203 	smull	r1, r2, r2, r3
 80004a8:	1192      	asrs	r2, r2, #6
 80004aa:	17db      	asrs	r3, r3, #31
 80004ac:	1ad3      	subs	r3, r2, r3
 80004ae:	4a5d      	ldr	r2, [pc, #372]	; (8000624 <fsm_automatic_run+0x310>)
 80004b0:	6013      	str	r3, [r2, #0]
        }    

        break;
 80004b2:	e096      	b.n	80005e2 <fsm_automatic_run+0x2ce>

    case RED_AMBER:
    	Red_Amber();
 80004b4:	f000 fcd8 	bl	8000e68 <Red_Amber>

        if (timer_flag[1] == 1) {
 80004b8:	4b5b      	ldr	r3, [pc, #364]	; (8000628 <fsm_automatic_run+0x314>)
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	f040 8092 	bne.w	80005e6 <fsm_automatic_run+0x2d2>
            traffic_status = GREEN_RED;
 80004c2:	4b4f      	ldr	r3, [pc, #316]	; (8000600 <fsm_automatic_run+0x2ec>)
 80004c4:	2246      	movs	r2, #70	; 0x46
 80004c6:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "GREEN   RED\r\n"), 1000);
 80004c8:	495a      	ldr	r1, [pc, #360]	; (8000634 <fsm_automatic_run+0x320>)
 80004ca:	484f      	ldr	r0, [pc, #316]	; (8000608 <fsm_automatic_run+0x2f4>)
 80004cc:	f003 fe9c 	bl	8004208 <siprintf>
 80004d0:	4603      	mov	r3, r0
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004d8:	494b      	ldr	r1, [pc, #300]	; (8000608 <fsm_automatic_run+0x2f4>)
 80004da:	f107 0008 	add.w	r0, r7, #8
 80004de:	f003 f97c 	bl	80037da <HAL_UART_Transmit>
            setTimer(1, green_counter);
 80004e2:	4b4c      	ldr	r3, [pc, #304]	; (8000614 <fsm_automatic_run+0x300>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4619      	mov	r1, r3
 80004e8:	2001      	movs	r0, #1
 80004ea:	f001 f837 	bl	800155c <setTimer>

            counter_light_1 = green_counter / 1000;
 80004ee:	4b49      	ldr	r3, [pc, #292]	; (8000614 <fsm_automatic_run+0x300>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a4a      	ldr	r2, [pc, #296]	; (800061c <fsm_automatic_run+0x308>)
 80004f4:	fb82 1203 	smull	r1, r2, r2, r3
 80004f8:	1192      	asrs	r2, r2, #6
 80004fa:	17db      	asrs	r3, r3, #31
 80004fc:	1ad3      	subs	r3, r2, r3
 80004fe:	4a48      	ldr	r2, [pc, #288]	; (8000620 <fsm_automatic_run+0x30c>)
 8000500:	6013      	str	r3, [r2, #0]
            counter_light_2 = red_counter / 1000;
 8000502:	4b45      	ldr	r3, [pc, #276]	; (8000618 <fsm_automatic_run+0x304>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a45      	ldr	r2, [pc, #276]	; (800061c <fsm_automatic_run+0x308>)
 8000508:	fb82 1203 	smull	r1, r2, r2, r3
 800050c:	1192      	asrs	r2, r2, #6
 800050e:	17db      	asrs	r3, r3, #31
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	4a44      	ldr	r2, [pc, #272]	; (8000624 <fsm_automatic_run+0x310>)
 8000514:	6013      	str	r3, [r2, #0]

            /* INACTIVE pedestrian light when traffic light is backing to GREEN_RED mode */
            pedestrian_status = PEDESTRIAN_INACTIVE;
 8000516:	4b3d      	ldr	r3, [pc, #244]	; (800060c <fsm_automatic_run+0x2f8>)
 8000518:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800051c:	601a      	str	r2, [r3, #0]
        }

        break;
 800051e:	e062      	b.n	80005e6 <fsm_automatic_run+0x2d2>

    case GREEN_RED:
    	Green_Red();
 8000520:	f000 fcc0 	bl	8000ea4 <Green_Red>

        if (timer_flag[1] == 1) {
 8000524:	4b40      	ldr	r3, [pc, #256]	; (8000628 <fsm_automatic_run+0x314>)
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d15e      	bne.n	80005ea <fsm_automatic_run+0x2d6>
            traffic_status = AMBER_RED;
 800052c:	4b34      	ldr	r3, [pc, #208]	; (8000600 <fsm_automatic_run+0x2ec>)
 800052e:	2250      	movs	r2, #80	; 0x50
 8000530:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "AMBER   RED\r\n"), 1000);
 8000532:	4941      	ldr	r1, [pc, #260]	; (8000638 <fsm_automatic_run+0x324>)
 8000534:	4834      	ldr	r0, [pc, #208]	; (8000608 <fsm_automatic_run+0x2f4>)
 8000536:	f003 fe67 	bl	8004208 <siprintf>
 800053a:	4603      	mov	r3, r0
 800053c:	b29a      	uxth	r2, r3
 800053e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000542:	4931      	ldr	r1, [pc, #196]	; (8000608 <fsm_automatic_run+0x2f4>)
 8000544:	f107 0008 	add.w	r0, r7, #8
 8000548:	f003 f947 	bl	80037da <HAL_UART_Transmit>
            setTimer(1, amber_counter);
 800054c:	4b38      	ldr	r3, [pc, #224]	; (8000630 <fsm_automatic_run+0x31c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	2001      	movs	r0, #1
 8000554:	f001 f802 	bl	800155c <setTimer>

            counter_light_1 = amber_counter / 1000;
 8000558:	4b35      	ldr	r3, [pc, #212]	; (8000630 <fsm_automatic_run+0x31c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a2f      	ldr	r2, [pc, #188]	; (800061c <fsm_automatic_run+0x308>)
 800055e:	fb82 1203 	smull	r1, r2, r2, r3
 8000562:	1192      	asrs	r2, r2, #6
 8000564:	17db      	asrs	r3, r3, #31
 8000566:	1ad3      	subs	r3, r2, r3
 8000568:	4a2d      	ldr	r2, [pc, #180]	; (8000620 <fsm_automatic_run+0x30c>)
 800056a:	6013      	str	r3, [r2, #0]
        }

        break;
 800056c:	e03d      	b.n	80005ea <fsm_automatic_run+0x2d6>

    case AMBER_RED:
    	Amber_Red();
 800056e:	f000 fcb7 	bl	8000ee0 <Amber_Red>

        if (timer_flag[1] == 1) {
 8000572:	4b2d      	ldr	r3, [pc, #180]	; (8000628 <fsm_automatic_run+0x314>)
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d139      	bne.n	80005ee <fsm_automatic_run+0x2da>
            traffic_status = RED_GREEN;
 800057a:	4b21      	ldr	r3, [pc, #132]	; (8000600 <fsm_automatic_run+0x2ec>)
 800057c:	2232      	movs	r2, #50	; 0x32
 800057e:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "RED   GREEN\r\n"), 1000);
 8000580:	4923      	ldr	r1, [pc, #140]	; (8000610 <fsm_automatic_run+0x2fc>)
 8000582:	4821      	ldr	r0, [pc, #132]	; (8000608 <fsm_automatic_run+0x2f4>)
 8000584:	f003 fe40 	bl	8004208 <siprintf>
 8000588:	4603      	mov	r3, r0
 800058a:	b29a      	uxth	r2, r3
 800058c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000590:	491d      	ldr	r1, [pc, #116]	; (8000608 <fsm_automatic_run+0x2f4>)
 8000592:	f107 0008 	add.w	r0, r7, #8
 8000596:	f003 f920 	bl	80037da <HAL_UART_Transmit>
            setTimer(1, green_counter);
 800059a:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <fsm_automatic_run+0x300>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4619      	mov	r1, r3
 80005a0:	2001      	movs	r0, #1
 80005a2:	f000 ffdb 	bl	800155c <setTimer>

            counter_light_1 = red_counter / 1000;
 80005a6:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <fsm_automatic_run+0x304>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a1c      	ldr	r2, [pc, #112]	; (800061c <fsm_automatic_run+0x308>)
 80005ac:	fb82 1203 	smull	r1, r2, r2, r3
 80005b0:	1192      	asrs	r2, r2, #6
 80005b2:	17db      	asrs	r3, r3, #31
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	4a1a      	ldr	r2, [pc, #104]	; (8000620 <fsm_automatic_run+0x30c>)
 80005b8:	6013      	str	r3, [r2, #0]
            counter_light_2 = green_counter / 1000;
 80005ba:	4b16      	ldr	r3, [pc, #88]	; (8000614 <fsm_automatic_run+0x300>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a17      	ldr	r2, [pc, #92]	; (800061c <fsm_automatic_run+0x308>)
 80005c0:	fb82 1203 	smull	r1, r2, r2, r3
 80005c4:	1192      	asrs	r2, r2, #6
 80005c6:	17db      	asrs	r3, r3, #31
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	4a16      	ldr	r2, [pc, #88]	; (8000624 <fsm_automatic_run+0x310>)
 80005cc:	6013      	str	r3, [r2, #0]

            /* If the pedestrian light is PEDESTRIAN_RED, change to PEDESTRIAN_GREEN when the traffic light is backing to RED_GREEN mode */
            /* If the pedestrian light is INACTIVE => no change */
            if(pedestrian_status == PEDESTRIAN_RED){
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <fsm_automatic_run+0x2f8>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80005d6:	d10a      	bne.n	80005ee <fsm_automatic_run+0x2da>
            	pedestrian_status = PEDESTRIAN_GREEN;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <fsm_automatic_run+0x2f8>)
 80005da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005de:	601a      	str	r2, [r3, #0]
            }
        }
        break;
 80005e0:	e005      	b.n	80005ee <fsm_automatic_run+0x2da>
        break;
 80005e2:	bf00      	nop
 80005e4:	e004      	b.n	80005f0 <fsm_automatic_run+0x2dc>
        break;
 80005e6:	bf00      	nop
 80005e8:	e002      	b.n	80005f0 <fsm_automatic_run+0x2dc>
        break;
 80005ea:	bf00      	nop
 80005ec:	e000      	b.n	80005f0 <fsm_automatic_run+0x2dc>
        break;
 80005ee:	bf00      	nop
    }
}
 80005f0:	46bd      	mov	sp, r7
 80005f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005f6:	b004      	add	sp, #16
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000000 	.word	0x20000000
 8000600:	2000000c 	.word	0x2000000c
 8000604:	08004ab0 	.word	0x08004ab0
 8000608:	200001b0 	.word	0x200001b0
 800060c:	20000004 	.word	0x20000004
 8000610:	08004ac8 	.word	0x08004ac8
 8000614:	20000018 	.word	0x20000018
 8000618:	20000010 	.word	0x20000010
 800061c:	10624dd3 	.word	0x10624dd3
 8000620:	2000001c 	.word	0x2000001c
 8000624:	20000020 	.word	0x20000020
 8000628:	20000270 	.word	0x20000270
 800062c:	08004ad8 	.word	0x08004ad8
 8000630:	20000014 	.word	0x20000014
 8000634:	08004ae8 	.word	0x08004ae8
 8000638:	08004af8 	.word	0x08004af8

0800063c <fsm_manual_run>:
 *      Author: ProX
 */

#include "fsm_manual.h"

void fsm_manual_run(UART_HandleTypeDef huart2) {
 800063c:	b084      	sub	sp, #16
 800063e:	b580      	push	{r7, lr}
 8000640:	af00      	add	r7, sp, #0
 8000642:	f107 0c08 	add.w	ip, r7, #8
 8000646:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	/* OUT OF TIME FOR MANUAL EVENTS */
	if (timer_flag[1] == 1) {
 800064a:	4b9a      	ldr	r3, [pc, #616]	; (80008b4 <fsm_manual_run+0x278>)
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d106      	bne.n	8000660 <fsm_manual_run+0x24>
		status = AUTOMATIC_MODE;
 8000652:	4b99      	ldr	r3, [pc, #612]	; (80008b8 <fsm_manual_run+0x27c>)
 8000654:	2202      	movs	r2, #2
 8000656:	601a      	str	r2, [r3, #0]
		traffic_status = INIT;
 8000658:	4b98      	ldr	r3, [pc, #608]	; (80008bc <fsm_manual_run+0x280>)
 800065a:	2201      	movs	r2, #1
 800065c:	601a      	str	r2, [r3, #0]
		return;
 800065e:	e2ae      	b.n	8000bbe <fsm_manual_run+0x582>
	}

	switch (traffic_status) {
 8000660:	4b96      	ldr	r3, [pc, #600]	; (80008bc <fsm_manual_run+0x280>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000668:	f000 8217 	beq.w	8000a9a <fsm_manual_run+0x45e>
 800066c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000670:	f300 829e 	bgt.w	8000bb0 <fsm_manual_run+0x574>
 8000674:	2bdc      	cmp	r3, #220	; 0xdc
 8000676:	f000 8143 	beq.w	8000900 <fsm_manual_run+0x2c4>
 800067a:	2bdc      	cmp	r3, #220	; 0xdc
 800067c:	f300 8298 	bgt.w	8000bb0 <fsm_manual_run+0x574>
 8000680:	2b01      	cmp	r3, #1
 8000682:	d002      	beq.n	800068a <fsm_manual_run+0x4e>
 8000684:	2b78      	cmp	r3, #120	; 0x78
 8000686:	d04e      	beq.n	8000726 <fsm_manual_run+0xea>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "GREEN counter = %d\r\n", counter_light_1), 1000);
		}

		break;
	default:
		break;
 8000688:	e292      	b.n	8000bb0 <fsm_manual_run+0x574>
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Mode: Manual mode\r\n"), 1000);
 800068a:	498d      	ldr	r1, [pc, #564]	; (80008c0 <fsm_manual_run+0x284>)
 800068c:	488d      	ldr	r0, [pc, #564]	; (80008c4 <fsm_manual_run+0x288>)
 800068e:	f003 fdbb 	bl	8004208 <siprintf>
 8000692:	4603      	mov	r3, r0
 8000694:	b29a      	uxth	r2, r3
 8000696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069a:	498a      	ldr	r1, [pc, #552]	; (80008c4 <fsm_manual_run+0x288>)
 800069c:	f107 0008 	add.w	r0, r7, #8
 80006a0:	f003 f89b 	bl	80037da <HAL_UART_Transmit>
		traffic_status = MAN_RED;
 80006a4:	4b85      	ldr	r3, [pc, #532]	; (80008bc <fsm_manual_run+0x280>)
 80006a6:	2278      	movs	r2, #120	; 0x78
 80006a8:	601a      	str	r2, [r3, #0]
		time_modify_counter = red_counter; // update temporary counter storing red led delay
 80006aa:	4b87      	ldr	r3, [pc, #540]	; (80008c8 <fsm_manual_run+0x28c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a87      	ldr	r2, [pc, #540]	; (80008cc <fsm_manual_run+0x290>)
 80006b0:	6013      	str	r3, [r2, #0]
		counter_light_1 = red_counter / 1000; 		// counter light 1 show the value of current manual light
 80006b2:	4b85      	ldr	r3, [pc, #532]	; (80008c8 <fsm_manual_run+0x28c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a86      	ldr	r2, [pc, #536]	; (80008d0 <fsm_manual_run+0x294>)
 80006b8:	fb82 1203 	smull	r1, r2, r2, r3
 80006bc:	1192      	asrs	r2, r2, #6
 80006be:	17db      	asrs	r3, r3, #31
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	4a84      	ldr	r2, [pc, #528]	; (80008d4 <fsm_manual_run+0x298>)
 80006c4:	6013      	str	r3, [r2, #0]
		counter_light_2 = traffic_status;					// counter light 2 show the mode
 80006c6:	4b7d      	ldr	r3, [pc, #500]	; (80008bc <fsm_manual_run+0x280>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a83      	ldr	r2, [pc, #524]	; (80008d8 <fsm_manual_run+0x29c>)
 80006cc:	6013      	str	r3, [r2, #0]
		setTimer(1, 5000);				// reuse timer 0 to 5 seconds for manual event
 80006ce:	f241 3188 	movw	r1, #5000	; 0x1388
 80006d2:	2001      	movs	r0, #1
 80006d4:	f000 ff42 	bl	800155c <setTimer>
		setTimer(2, 500); 				// set timer 1 for led blinking
 80006d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006dc:	2002      	movs	r0, #2
 80006de:	f000 ff3d 	bl	800155c <setTimer>
		setTimer(3, 250);				// timer 3 still counting 7-seg light
 80006e2:	21fa      	movs	r1, #250	; 0xfa
 80006e4:	2003      	movs	r0, #3
 80006e6:	f000 ff39 	bl	800155c <setTimer>
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Mode 2: Modifying RED\r\n"), 1000);
 80006ea:	497c      	ldr	r1, [pc, #496]	; (80008dc <fsm_manual_run+0x2a0>)
 80006ec:	4875      	ldr	r0, [pc, #468]	; (80008c4 <fsm_manual_run+0x288>)
 80006ee:	f003 fd8b 	bl	8004208 <siprintf>
 80006f2:	4603      	mov	r3, r0
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fa:	4972      	ldr	r1, [pc, #456]	; (80008c4 <fsm_manual_run+0x288>)
 80006fc:	f107 0008 	add.w	r0, r7, #8
 8000700:	f003 f86b 	bl	80037da <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Current time = %d\r\n", counter_light_1), 1000);
 8000704:	4b73      	ldr	r3, [pc, #460]	; (80008d4 <fsm_manual_run+0x298>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	4975      	ldr	r1, [pc, #468]	; (80008e0 <fsm_manual_run+0x2a4>)
 800070c:	486d      	ldr	r0, [pc, #436]	; (80008c4 <fsm_manual_run+0x288>)
 800070e:	f003 fd7b 	bl	8004208 <siprintf>
 8000712:	4603      	mov	r3, r0
 8000714:	b29a      	uxth	r2, r3
 8000716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071a:	496a      	ldr	r1, [pc, #424]	; (80008c4 <fsm_manual_run+0x288>)
 800071c:	f107 0008 	add.w	r0, r7, #8
 8000720:	f003 f85b 	bl	80037da <HAL_UART_Transmit>
		break;
 8000724:	e24b      	b.n	8000bbe <fsm_manual_run+0x582>
		if (timer_flag[2] == 1) {
 8000726:	4b63      	ldr	r3, [pc, #396]	; (80008b4 <fsm_manual_run+0x278>)
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d106      	bne.n	800073c <fsm_manual_run+0x100>
			Toggle_Red();
 800072e:	f000 fbf5 	bl	8000f1c <Toggle_Red>
			setTimer(2, 500);
 8000732:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000736:	2002      	movs	r0, #2
 8000738:	f000 ff10 	bl	800155c <setTimer>
		if (isButtonPressed(1)) {
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff fdbb 	bl	80002b8 <isButtonPressed>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d03f      	beq.n	80007c8 <fsm_manual_run+0x18c>
			traffic_status = MAN_AMBER;
 8000748:	4b5c      	ldr	r3, [pc, #368]	; (80008bc <fsm_manual_run+0x280>)
 800074a:	22dc      	movs	r2, #220	; 0xdc
 800074c:	601a      	str	r2, [r3, #0]
			time_modify_counter = amber_counter;	// update temporary counter storing red led delay
 800074e:	4b65      	ldr	r3, [pc, #404]	; (80008e4 <fsm_manual_run+0x2a8>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a5e      	ldr	r2, [pc, #376]	; (80008cc <fsm_manual_run+0x290>)
 8000754:	6013      	str	r3, [r2, #0]
			counter_light_1 = amber_counter / 1000;	// counter light 1 show the value of current manual light
 8000756:	4b63      	ldr	r3, [pc, #396]	; (80008e4 <fsm_manual_run+0x2a8>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a5d      	ldr	r2, [pc, #372]	; (80008d0 <fsm_manual_run+0x294>)
 800075c:	fb82 1203 	smull	r1, r2, r2, r3
 8000760:	1192      	asrs	r2, r2, #6
 8000762:	17db      	asrs	r3, r3, #31
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	4a5b      	ldr	r2, [pc, #364]	; (80008d4 <fsm_manual_run+0x298>)
 8000768:	6013      	str	r3, [r2, #0]
			counter_light_2 = traffic_status;				// counter light 2 show the mode
 800076a:	4b54      	ldr	r3, [pc, #336]	; (80008bc <fsm_manual_run+0x280>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a5a      	ldr	r2, [pc, #360]	; (80008d8 <fsm_manual_run+0x29c>)
 8000770:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);			// reuse timer 0 to 5 seconds for manual event
 8000772:	f241 3188 	movw	r1, #5000	; 0x1388
 8000776:	2001      	movs	r0, #1
 8000778:	f000 fef0 	bl	800155c <setTimer>
			setTimer(2, 500); 			// set timer 1 for led blinking
 800077c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000780:	2002      	movs	r0, #2
 8000782:	f000 feeb 	bl	800155c <setTimer>
			setTimer(3, 250);			// timer 3 still counting 7-seg light
 8000786:	21fa      	movs	r1, #250	; 0xfa
 8000788:	2003      	movs	r0, #3
 800078a:	f000 fee7 	bl	800155c <setTimer>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Mode 3: Modifying AMBER\r\n"), 1000);
 800078e:	4956      	ldr	r1, [pc, #344]	; (80008e8 <fsm_manual_run+0x2ac>)
 8000790:	484c      	ldr	r0, [pc, #304]	; (80008c4 <fsm_manual_run+0x288>)
 8000792:	f003 fd39 	bl	8004208 <siprintf>
 8000796:	4603      	mov	r3, r0
 8000798:	b29a      	uxth	r2, r3
 800079a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079e:	4949      	ldr	r1, [pc, #292]	; (80008c4 <fsm_manual_run+0x288>)
 80007a0:	f107 0008 	add.w	r0, r7, #8
 80007a4:	f003 f819 	bl	80037da <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Current time = %d\r\n", counter_light_1), 1000);
 80007a8:	4b4a      	ldr	r3, [pc, #296]	; (80008d4 <fsm_manual_run+0x298>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	494c      	ldr	r1, [pc, #304]	; (80008e0 <fsm_manual_run+0x2a4>)
 80007b0:	4844      	ldr	r0, [pc, #272]	; (80008c4 <fsm_manual_run+0x288>)
 80007b2:	f003 fd29 	bl	8004208 <siprintf>
 80007b6:	4603      	mov	r3, r0
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007be:	4941      	ldr	r1, [pc, #260]	; (80008c4 <fsm_manual_run+0x288>)
 80007c0:	f107 0008 	add.w	r0, r7, #8
 80007c4:	f003 f809 	bl	80037da <HAL_UART_Transmit>
		if (isButtonPressed(2) == 1) { // increasing 7-segment light counter
 80007c8:	2002      	movs	r0, #2
 80007ca:	f7ff fd75 	bl	80002b8 <isButtonPressed>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d129      	bne.n	8000828 <fsm_manual_run+0x1ec>
			time_modify_counter += UPDATED_TIME;
 80007d4:	4b3d      	ldr	r3, [pc, #244]	; (80008cc <fsm_manual_run+0x290>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80007dc:	4a3b      	ldr	r2, [pc, #236]	; (80008cc <fsm_manual_run+0x290>)
 80007de:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Updated time = %d\r\n", time_modify_counter / 1000), 1000);
 80007e0:	4b3a      	ldr	r3, [pc, #232]	; (80008cc <fsm_manual_run+0x290>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a3a      	ldr	r2, [pc, #232]	; (80008d0 <fsm_manual_run+0x294>)
 80007e6:	fb82 1203 	smull	r1, r2, r2, r3
 80007ea:	1192      	asrs	r2, r2, #6
 80007ec:	17db      	asrs	r3, r3, #31
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	461a      	mov	r2, r3
 80007f2:	493e      	ldr	r1, [pc, #248]	; (80008ec <fsm_manual_run+0x2b0>)
 80007f4:	4833      	ldr	r0, [pc, #204]	; (80008c4 <fsm_manual_run+0x288>)
 80007f6:	f003 fd07 	bl	8004208 <siprintf>
 80007fa:	4603      	mov	r3, r0
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000802:	4930      	ldr	r1, [pc, #192]	; (80008c4 <fsm_manual_run+0x288>)
 8000804:	f107 0008 	add.w	r0, r7, #8
 8000808:	f002 ffe7 	bl	80037da <HAL_UART_Transmit>
			if (time_modify_counter > MAX_TIME)
 800080c:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <fsm_manual_run+0x290>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a37      	ldr	r2, [pc, #220]	; (80008f0 <fsm_manual_run+0x2b4>)
 8000812:	4293      	cmp	r3, r2
 8000814:	dd03      	ble.n	800081e <fsm_manual_run+0x1e2>
				time_modify_counter = 1000; // 1 second
 8000816:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <fsm_manual_run+0x290>)
 8000818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800081c:	601a      	str	r2, [r3, #0]
			setTimer(1, 5000); // set 5 seconds for manual events
 800081e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000822:	2001      	movs	r0, #1
 8000824:	f000 fe9a 	bl	800155c <setTimer>
		if (isButtonPressed(3) == 1) { // set the new value for 7-segment light counter
 8000828:	2003      	movs	r0, #3
 800082a:	f7ff fd45 	bl	80002b8 <isButtonPressed>
 800082e:	4603      	mov	r3, r0
 8000830:	2b01      	cmp	r3, #1
 8000832:	f040 81bf 	bne.w	8000bb4 <fsm_manual_run+0x578>
			red_counter = time_modify_counter;
 8000836:	4b25      	ldr	r3, [pc, #148]	; (80008cc <fsm_manual_run+0x290>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a23      	ldr	r2, [pc, #140]	; (80008c8 <fsm_manual_run+0x28c>)
 800083c:	6013      	str	r3, [r2, #0]
			green_counter = red_counter - amber_counter;
 800083e:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <fsm_manual_run+0x28c>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <fsm_manual_run+0x2a8>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	4a2a      	ldr	r2, [pc, #168]	; (80008f4 <fsm_manual_run+0x2b8>)
 800084a:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);								// set 5 seconds for manual events
 800084c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000850:	2001      	movs	r0, #1
 8000852:	f000 fe83 	bl	800155c <setTimer>
			counter_light_1 = red_counter / 1000; // counter light 1 show the value of current manual light
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <fsm_manual_run+0x28c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a1d      	ldr	r2, [pc, #116]	; (80008d0 <fsm_manual_run+0x294>)
 800085c:	fb82 1203 	smull	r1, r2, r2, r3
 8000860:	1192      	asrs	r2, r2, #6
 8000862:	17db      	asrs	r3, r3, #31
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	4a1b      	ldr	r2, [pc, #108]	; (80008d4 <fsm_manual_run+0x298>)
 8000868:	6013      	str	r3, [r2, #0]
			status = AUTOMATIC_MODE;
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <fsm_manual_run+0x27c>)
 800086c:	2202      	movs	r2, #2
 800086e:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <fsm_manual_run+0x280>)
 8000872:	2201      	movs	r2, #1
 8000874:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Upon update:\r\n"), 1000);
 8000876:	4920      	ldr	r1, [pc, #128]	; (80008f8 <fsm_manual_run+0x2bc>)
 8000878:	4812      	ldr	r0, [pc, #72]	; (80008c4 <fsm_manual_run+0x288>)
 800087a:	f003 fcc5 	bl	8004208 <siprintf>
 800087e:	4603      	mov	r3, r0
 8000880:	b29a      	uxth	r2, r3
 8000882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000886:	490f      	ldr	r1, [pc, #60]	; (80008c4 <fsm_manual_run+0x288>)
 8000888:	f107 0008 	add.w	r0, r7, #8
 800088c:	f002 ffa5 	bl	80037da <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "RED counter = %d\r\n", counter_light_1), 1000);
 8000890:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <fsm_manual_run+0x298>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4919      	ldr	r1, [pc, #100]	; (80008fc <fsm_manual_run+0x2c0>)
 8000898:	480a      	ldr	r0, [pc, #40]	; (80008c4 <fsm_manual_run+0x288>)
 800089a:	f003 fcb5 	bl	8004208 <siprintf>
 800089e:	4603      	mov	r3, r0
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a6:	4907      	ldr	r1, [pc, #28]	; (80008c4 <fsm_manual_run+0x288>)
 80008a8:	f107 0008 	add.w	r0, r7, #8
 80008ac:	f002 ff95 	bl	80037da <HAL_UART_Transmit>
		break;
 80008b0:	e180      	b.n	8000bb4 <fsm_manual_run+0x578>
 80008b2:	bf00      	nop
 80008b4:	20000270 	.word	0x20000270
 80008b8:	20000000 	.word	0x20000000
 80008bc:	2000000c 	.word	0x2000000c
 80008c0:	08004b08 	.word	0x08004b08
 80008c4:	200001b0 	.word	0x200001b0
 80008c8:	20000010 	.word	0x20000010
 80008cc:	200000b8 	.word	0x200000b8
 80008d0:	10624dd3 	.word	0x10624dd3
 80008d4:	2000001c 	.word	0x2000001c
 80008d8:	20000020 	.word	0x20000020
 80008dc:	08004b1c 	.word	0x08004b1c
 80008e0:	08004b34 	.word	0x08004b34
 80008e4:	20000014 	.word	0x20000014
 80008e8:	08004b48 	.word	0x08004b48
 80008ec:	08004b64 	.word	0x08004b64
 80008f0:	000182b8 	.word	0x000182b8
 80008f4:	20000018 	.word	0x20000018
 80008f8:	08004b78 	.word	0x08004b78
 80008fc:	08004b88 	.word	0x08004b88
		if (timer_flag[2] == 1) {
 8000900:	4bb1      	ldr	r3, [pc, #708]	; (8000bc8 <fsm_manual_run+0x58c>)
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d106      	bne.n	8000916 <fsm_manual_run+0x2da>
			Toggle_Amber();
 8000908:	f000 fb48 	bl	8000f9c <Toggle_Amber>
			setTimer(2, 500);
 800090c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000910:	2002      	movs	r0, #2
 8000912:	f000 fe23 	bl	800155c <setTimer>
		if (isButtonPressed(1)) {
 8000916:	2001      	movs	r0, #1
 8000918:	f7ff fcce 	bl	80002b8 <isButtonPressed>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d046      	beq.n	80009b0 <fsm_manual_run+0x374>
			traffic_status = MAN_GREEN;
 8000922:	4baa      	ldr	r3, [pc, #680]	; (8000bcc <fsm_manual_run+0x590>)
 8000924:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000928:	601a      	str	r2, [r3, #0]
			time_modify_counter = green_counter / 1000;	// update temporary counter storing red led delay
 800092a:	4ba9      	ldr	r3, [pc, #676]	; (8000bd0 <fsm_manual_run+0x594>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4aa9      	ldr	r2, [pc, #676]	; (8000bd4 <fsm_manual_run+0x598>)
 8000930:	fb82 1203 	smull	r1, r2, r2, r3
 8000934:	1192      	asrs	r2, r2, #6
 8000936:	17db      	asrs	r3, r3, #31
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	4aa7      	ldr	r2, [pc, #668]	; (8000bd8 <fsm_manual_run+0x59c>)
 800093c:	6013      	str	r3, [r2, #0]
			counter_light_1 = green_counter / 1000;			// counter light 1 show the value of current manual light
 800093e:	4ba4      	ldr	r3, [pc, #656]	; (8000bd0 <fsm_manual_run+0x594>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4aa4      	ldr	r2, [pc, #656]	; (8000bd4 <fsm_manual_run+0x598>)
 8000944:	fb82 1203 	smull	r1, r2, r2, r3
 8000948:	1192      	asrs	r2, r2, #6
 800094a:	17db      	asrs	r3, r3, #31
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	4aa3      	ldr	r2, [pc, #652]	; (8000bdc <fsm_manual_run+0x5a0>)
 8000950:	6013      	str	r3, [r2, #0]
			counter_light_2 = traffic_status;						// counter light 2 show the mode
 8000952:	4b9e      	ldr	r3, [pc, #632]	; (8000bcc <fsm_manual_run+0x590>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4aa2      	ldr	r2, [pc, #648]	; (8000be0 <fsm_manual_run+0x5a4>)
 8000958:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);				// reuse timer 0 to 5 seconds for manual event
 800095a:	f241 3188 	movw	r1, #5000	; 0x1388
 800095e:	2001      	movs	r0, #1
 8000960:	f000 fdfc 	bl	800155c <setTimer>
			setTimer(2, 500); 				// set timer 1 for led blinking
 8000964:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000968:	2002      	movs	r0, #2
 800096a:	f000 fdf7 	bl	800155c <setTimer>
			setTimer(3, 250);				// timer 3 still counting 7-seg light
 800096e:	21fa      	movs	r1, #250	; 0xfa
 8000970:	2003      	movs	r0, #3
 8000972:	f000 fdf3 	bl	800155c <setTimer>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Mode 4: Modifying GREEN\r\n"), 1000);
 8000976:	499b      	ldr	r1, [pc, #620]	; (8000be4 <fsm_manual_run+0x5a8>)
 8000978:	489b      	ldr	r0, [pc, #620]	; (8000be8 <fsm_manual_run+0x5ac>)
 800097a:	f003 fc45 	bl	8004208 <siprintf>
 800097e:	4603      	mov	r3, r0
 8000980:	b29a      	uxth	r2, r3
 8000982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000986:	4998      	ldr	r1, [pc, #608]	; (8000be8 <fsm_manual_run+0x5ac>)
 8000988:	f107 0008 	add.w	r0, r7, #8
 800098c:	f002 ff25 	bl	80037da <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Current time = %d\r\n", counter_light_1), 1000);
 8000990:	4b92      	ldr	r3, [pc, #584]	; (8000bdc <fsm_manual_run+0x5a0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4995      	ldr	r1, [pc, #596]	; (8000bec <fsm_manual_run+0x5b0>)
 8000998:	4893      	ldr	r0, [pc, #588]	; (8000be8 <fsm_manual_run+0x5ac>)
 800099a:	f003 fc35 	bl	8004208 <siprintf>
 800099e:	4603      	mov	r3, r0
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a6:	4990      	ldr	r1, [pc, #576]	; (8000be8 <fsm_manual_run+0x5ac>)
 80009a8:	f107 0008 	add.w	r0, r7, #8
 80009ac:	f002 ff15 	bl	80037da <HAL_UART_Transmit>
		if (isButtonPressed(2) == 1) { // increasing 7-segment light counter
 80009b0:	2002      	movs	r0, #2
 80009b2:	f7ff fc81 	bl	80002b8 <isButtonPressed>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d129      	bne.n	8000a10 <fsm_manual_run+0x3d4>
			time_modify_counter += UPDATED_TIME;
 80009bc:	4b86      	ldr	r3, [pc, #536]	; (8000bd8 <fsm_manual_run+0x59c>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80009c4:	4a84      	ldr	r2, [pc, #528]	; (8000bd8 <fsm_manual_run+0x59c>)
 80009c6:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Updated time = %d\r\n", time_modify_counter / 1000), 1000);
 80009c8:	4b83      	ldr	r3, [pc, #524]	; (8000bd8 <fsm_manual_run+0x59c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a81      	ldr	r2, [pc, #516]	; (8000bd4 <fsm_manual_run+0x598>)
 80009ce:	fb82 1203 	smull	r1, r2, r2, r3
 80009d2:	1192      	asrs	r2, r2, #6
 80009d4:	17db      	asrs	r3, r3, #31
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	461a      	mov	r2, r3
 80009da:	4985      	ldr	r1, [pc, #532]	; (8000bf0 <fsm_manual_run+0x5b4>)
 80009dc:	4882      	ldr	r0, [pc, #520]	; (8000be8 <fsm_manual_run+0x5ac>)
 80009de:	f003 fc13 	bl	8004208 <siprintf>
 80009e2:	4603      	mov	r3, r0
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ea:	497f      	ldr	r1, [pc, #508]	; (8000be8 <fsm_manual_run+0x5ac>)
 80009ec:	f107 0008 	add.w	r0, r7, #8
 80009f0:	f002 fef3 	bl	80037da <HAL_UART_Transmit>
			if (time_modify_counter > MAX_TIME)
 80009f4:	4b78      	ldr	r3, [pc, #480]	; (8000bd8 <fsm_manual_run+0x59c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a7e      	ldr	r2, [pc, #504]	; (8000bf4 <fsm_manual_run+0x5b8>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	dd03      	ble.n	8000a06 <fsm_manual_run+0x3ca>
				time_modify_counter = 1000; // 1 second
 80009fe:	4b76      	ldr	r3, [pc, #472]	; (8000bd8 <fsm_manual_run+0x59c>)
 8000a00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a04:	601a      	str	r2, [r3, #0]
			setTimer(1, 5000); // set 5 seconds for manual events
 8000a06:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f000 fda6 	bl	800155c <setTimer>
		if (isButtonPressed(3) == 1) { // set the new value for 7-segment light counter
 8000a10:	2003      	movs	r0, #3
 8000a12:	f7ff fc51 	bl	80002b8 <isButtonPressed>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	f040 80cd 	bne.w	8000bb8 <fsm_manual_run+0x57c>
			amber_counter = time_modify_counter;
 8000a1e:	4b6e      	ldr	r3, [pc, #440]	; (8000bd8 <fsm_manual_run+0x59c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a75      	ldr	r2, [pc, #468]	; (8000bf8 <fsm_manual_run+0x5bc>)
 8000a24:	6013      	str	r3, [r2, #0]
			red_counter = amber_counter + green_counter;
 8000a26:	4b74      	ldr	r3, [pc, #464]	; (8000bf8 <fsm_manual_run+0x5bc>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	4b69      	ldr	r3, [pc, #420]	; (8000bd0 <fsm_manual_run+0x594>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a72      	ldr	r2, [pc, #456]	; (8000bfc <fsm_manual_run+0x5c0>)
 8000a32:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);									// set 5 seconds for manual events
 8000a34:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f000 fd8f 	bl	800155c <setTimer>
			counter_light_1 = amber_counter / 1000; // counter light 1 show the value of current manual light
 8000a3e:	4b6e      	ldr	r3, [pc, #440]	; (8000bf8 <fsm_manual_run+0x5bc>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a64      	ldr	r2, [pc, #400]	; (8000bd4 <fsm_manual_run+0x598>)
 8000a44:	fb82 1203 	smull	r1, r2, r2, r3
 8000a48:	1192      	asrs	r2, r2, #6
 8000a4a:	17db      	asrs	r3, r3, #31
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	4a63      	ldr	r2, [pc, #396]	; (8000bdc <fsm_manual_run+0x5a0>)
 8000a50:	6013      	str	r3, [r2, #0]
			status = AUTOMATIC_MODE;
 8000a52:	4b6b      	ldr	r3, [pc, #428]	; (8000c00 <fsm_manual_run+0x5c4>)
 8000a54:	2202      	movs	r2, #2
 8000a56:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 8000a58:	4b5c      	ldr	r3, [pc, #368]	; (8000bcc <fsm_manual_run+0x590>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Upon update:\r\n"), 1000);
 8000a5e:	4969      	ldr	r1, [pc, #420]	; (8000c04 <fsm_manual_run+0x5c8>)
 8000a60:	4861      	ldr	r0, [pc, #388]	; (8000be8 <fsm_manual_run+0x5ac>)
 8000a62:	f003 fbd1 	bl	8004208 <siprintf>
 8000a66:	4603      	mov	r3, r0
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6e:	495e      	ldr	r1, [pc, #376]	; (8000be8 <fsm_manual_run+0x5ac>)
 8000a70:	f107 0008 	add.w	r0, r7, #8
 8000a74:	f002 feb1 	bl	80037da <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "AMBER counter = %d\r\n", counter_light_1), 1000);
 8000a78:	4b58      	ldr	r3, [pc, #352]	; (8000bdc <fsm_manual_run+0x5a0>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4962      	ldr	r1, [pc, #392]	; (8000c08 <fsm_manual_run+0x5cc>)
 8000a80:	4859      	ldr	r0, [pc, #356]	; (8000be8 <fsm_manual_run+0x5ac>)
 8000a82:	f003 fbc1 	bl	8004208 <siprintf>
 8000a86:	4603      	mov	r3, r0
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8e:	4956      	ldr	r1, [pc, #344]	; (8000be8 <fsm_manual_run+0x5ac>)
 8000a90:	f107 0008 	add.w	r0, r7, #8
 8000a94:	f002 fea1 	bl	80037da <HAL_UART_Transmit>
		break;
 8000a98:	e08e      	b.n	8000bb8 <fsm_manual_run+0x57c>
		if (timer_flag[2] == 1) {
 8000a9a:	4b4b      	ldr	r3, [pc, #300]	; (8000bc8 <fsm_manual_run+0x58c>)
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d106      	bne.n	8000ab0 <fsm_manual_run+0x474>
			Toggle_Green();
 8000aa2:	f000 fabb 	bl	800101c <Toggle_Green>
			setTimer(2, 500);
 8000aa6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000aaa:	2002      	movs	r0, #2
 8000aac:	f000 fd56 	bl	800155c <setTimer>
		if (isButtonPressed(1)) {
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f7ff fc01 	bl	80002b8 <isButtonPressed>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d005      	beq.n	8000ac8 <fsm_manual_run+0x48c>
			status = AUTOMATIC_MODE;
 8000abc:	4b50      	ldr	r3, [pc, #320]	; (8000c00 <fsm_manual_run+0x5c4>)
 8000abe:	2202      	movs	r2, #2
 8000ac0:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 8000ac2:	4b42      	ldr	r3, [pc, #264]	; (8000bcc <fsm_manual_run+0x590>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(2) == 1) { // increasing 7-segment light counter
 8000ac8:	2002      	movs	r0, #2
 8000aca:	f7ff fbf5 	bl	80002b8 <isButtonPressed>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d129      	bne.n	8000b28 <fsm_manual_run+0x4ec>
			time_modify_counter += UPDATED_TIME;
 8000ad4:	4b40      	ldr	r3, [pc, #256]	; (8000bd8 <fsm_manual_run+0x59c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000adc:	4a3e      	ldr	r2, [pc, #248]	; (8000bd8 <fsm_manual_run+0x59c>)
 8000ade:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Updated time = %d\r\n", time_modify_counter / 1000), 1000);
 8000ae0:	4b3d      	ldr	r3, [pc, #244]	; (8000bd8 <fsm_manual_run+0x59c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a3b      	ldr	r2, [pc, #236]	; (8000bd4 <fsm_manual_run+0x598>)
 8000ae6:	fb82 1203 	smull	r1, r2, r2, r3
 8000aea:	1192      	asrs	r2, r2, #6
 8000aec:	17db      	asrs	r3, r3, #31
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	493f      	ldr	r1, [pc, #252]	; (8000bf0 <fsm_manual_run+0x5b4>)
 8000af4:	483c      	ldr	r0, [pc, #240]	; (8000be8 <fsm_manual_run+0x5ac>)
 8000af6:	f003 fb87 	bl	8004208 <siprintf>
 8000afa:	4603      	mov	r3, r0
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b02:	4939      	ldr	r1, [pc, #228]	; (8000be8 <fsm_manual_run+0x5ac>)
 8000b04:	f107 0008 	add.w	r0, r7, #8
 8000b08:	f002 fe67 	bl	80037da <HAL_UART_Transmit>
			if (time_modify_counter > MAX_TIME)
 8000b0c:	4b32      	ldr	r3, [pc, #200]	; (8000bd8 <fsm_manual_run+0x59c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a38      	ldr	r2, [pc, #224]	; (8000bf4 <fsm_manual_run+0x5b8>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	dd03      	ble.n	8000b1e <fsm_manual_run+0x4e2>
				time_modify_counter = 1000; // 1 second
 8000b16:	4b30      	ldr	r3, [pc, #192]	; (8000bd8 <fsm_manual_run+0x59c>)
 8000b18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b1c:	601a      	str	r2, [r3, #0]
			setTimer(1, 5000); // set 5 seconds for manual events
 8000b1e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000b22:	2001      	movs	r0, #1
 8000b24:	f000 fd1a 	bl	800155c <setTimer>
		if (isButtonPressed(3) == 1) { // set the new value for 7-segment light counter
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f7ff fbc5 	bl	80002b8 <isButtonPressed>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d143      	bne.n	8000bbc <fsm_manual_run+0x580>
			green_counter = time_modify_counter;
 8000b34:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <fsm_manual_run+0x59c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a25      	ldr	r2, [pc, #148]	; (8000bd0 <fsm_manual_run+0x594>)
 8000b3a:	6013      	str	r3, [r2, #0]
			red_counter = amber_counter + green_counter;
 8000b3c:	4b2e      	ldr	r3, [pc, #184]	; (8000bf8 <fsm_manual_run+0x5bc>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <fsm_manual_run+0x594>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4413      	add	r3, r2
 8000b46:	4a2d      	ldr	r2, [pc, #180]	; (8000bfc <fsm_manual_run+0x5c0>)
 8000b48:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);									// set 5 seconds for manual events
 8000b4a:	f241 3188 	movw	r1, #5000	; 0x1388
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f000 fd04 	bl	800155c <setTimer>
			counter_light_1 = green_counter / 1000; // counter light 1 show the value of current manual light
 8000b54:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <fsm_manual_run+0x594>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a1e      	ldr	r2, [pc, #120]	; (8000bd4 <fsm_manual_run+0x598>)
 8000b5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b5e:	1192      	asrs	r2, r2, #6
 8000b60:	17db      	asrs	r3, r3, #31
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	4a1d      	ldr	r2, [pc, #116]	; (8000bdc <fsm_manual_run+0x5a0>)
 8000b66:	6013      	str	r3, [r2, #0]
			status = AUTOMATIC_MODE;
 8000b68:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <fsm_manual_run+0x5c4>)
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <fsm_manual_run+0x590>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "Upon update:\r\n"), 1000);
 8000b74:	4923      	ldr	r1, [pc, #140]	; (8000c04 <fsm_manual_run+0x5c8>)
 8000b76:	481c      	ldr	r0, [pc, #112]	; (8000be8 <fsm_manual_run+0x5ac>)
 8000b78:	f003 fb46 	bl	8004208 <siprintf>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b84:	4918      	ldr	r1, [pc, #96]	; (8000be8 <fsm_manual_run+0x5ac>)
 8000b86:	f107 0008 	add.w	r0, r7, #8
 8000b8a:	f002 fe26 	bl	80037da <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "GREEN counter = %d\r\n", counter_light_1), 1000);
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <fsm_manual_run+0x5a0>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	491d      	ldr	r1, [pc, #116]	; (8000c0c <fsm_manual_run+0x5d0>)
 8000b96:	4814      	ldr	r0, [pc, #80]	; (8000be8 <fsm_manual_run+0x5ac>)
 8000b98:	f003 fb36 	bl	8004208 <siprintf>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba4:	4910      	ldr	r1, [pc, #64]	; (8000be8 <fsm_manual_run+0x5ac>)
 8000ba6:	f107 0008 	add.w	r0, r7, #8
 8000baa:	f002 fe16 	bl	80037da <HAL_UART_Transmit>
		break;
 8000bae:	e005      	b.n	8000bbc <fsm_manual_run+0x580>
		break;
 8000bb0:	bf00      	nop
 8000bb2:	e004      	b.n	8000bbe <fsm_manual_run+0x582>
		break;
 8000bb4:	bf00      	nop
 8000bb6:	e002      	b.n	8000bbe <fsm_manual_run+0x582>
		break;
 8000bb8:	bf00      	nop
 8000bba:	e000      	b.n	8000bbe <fsm_manual_run+0x582>
		break;
 8000bbc:	bf00      	nop
	}
}
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr
 8000bc8:	20000270 	.word	0x20000270
 8000bcc:	2000000c 	.word	0x2000000c
 8000bd0:	20000018 	.word	0x20000018
 8000bd4:	10624dd3 	.word	0x10624dd3
 8000bd8:	200000b8 	.word	0x200000b8
 8000bdc:	2000001c 	.word	0x2000001c
 8000be0:	20000020 	.word	0x20000020
 8000be4:	08004b9c 	.word	0x08004b9c
 8000be8:	200001b0 	.word	0x200001b0
 8000bec:	08004b34 	.word	0x08004b34
 8000bf0:	08004b64 	.word	0x08004b64
 8000bf4:	000182b8 	.word	0x000182b8
 8000bf8:	20000014 	.word	0x20000014
 8000bfc:	20000010 	.word	0x20000010
 8000c00:	20000000 	.word	0x20000000
 8000c04:	08004b78 	.word	0x08004b78
 8000c08:	08004bb8 	.word	0x08004bb8
 8000c0c:	08004bd0 	.word	0x08004bd0

08000c10 <PedestrianRed>:
 *      Author: ProX
 */

#include "fsm_pedestrian.h"

void PedestrianRed() {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, 1);
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <PedestrianRed+0x20>)
 8000c1c:	f001 f9ff 	bl	800201e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c26:	4803      	ldr	r0, [pc, #12]	; (8000c34 <PedestrianRed+0x24>)
 8000c28:	f001 f9f9 	bl	800201e <HAL_GPIO_WritePin>
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40010c00 	.word	0x40010c00
 8000c34:	40010800 	.word	0x40010800

08000c38 <PedestrianGreen>:

void PedestrianGreen() {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, 0);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <PedestrianGreen+0x20>)
 8000c44:	f001 f9eb 	bl	800201e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, 1);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c4e:	4803      	ldr	r0, [pc, #12]	; (8000c5c <PedestrianGreen+0x24>)
 8000c50:	f001 f9e5 	bl	800201e <HAL_GPIO_WritePin>
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40010c00 	.word	0x40010c00
 8000c5c:	40010800 	.word	0x40010800

08000c60 <PedestrianInvalid>:

void PedestrianInvalid() {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDESTRIAN_GPIO_Port, D6_PEDESTRIAN_Pin, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <PedestrianInvalid+0x20>)
 8000c6c:	f001 f9d7 	bl	800201e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDESTRIAN_GPIO_Port, D7_PEDESTRIAN_Pin, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c76:	4803      	ldr	r0, [pc, #12]	; (8000c84 <PedestrianInvalid+0x24>)
 8000c78:	f001 f9d1 	bl	800201e <HAL_GPIO_WritePin>
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40010c00 	.word	0x40010c00
 8000c84:	40010800 	.word	0x40010800

08000c88 <fsm_pedestrian_run>:

void fsm_pedestrian_run(void) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	switch (pedestrian_status) {
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <fsm_pedestrian_run+0x90>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000c94:	d03a      	beq.n	8000d0c <fsm_pedestrian_run+0x84>
 8000c96:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000c9a:	dc3b      	bgt.n	8000d14 <fsm_pedestrian_run+0x8c>
 8000c9c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000ca0:	d003      	beq.n	8000caa <fsm_pedestrian_run+0x22>
 8000ca2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ca6:	d02b      	beq.n	8000d00 <fsm_pedestrian_run+0x78>

	case PEDESTRIAN_RED:
		PedestrianRed();
		break;
	}
}
 8000ca8:	e034      	b.n	8000d14 <fsm_pedestrian_run+0x8c>
		PedestrianInvalid();
 8000caa:	f7ff ffd9 	bl	8000c60 <PedestrianInvalid>
		buzzer_status = OFF;
 8000cae:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <fsm_pedestrian_run+0x94>)
 8000cb0:	2209      	movs	r2, #9
 8000cb2:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(4)) {
 8000cb4:	2004      	movs	r0, #4
 8000cb6:	f7ff faff 	bl	80002b8 <isButtonPressed>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d028      	beq.n	8000d12 <fsm_pedestrian_run+0x8a>
			if (traffic_status == RED_AMBER || traffic_status == RED_GREEN) {
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <fsm_pedestrian_run+0x98>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b3c      	cmp	r3, #60	; 0x3c
 8000cc6:	d003      	beq.n	8000cd0 <fsm_pedestrian_run+0x48>
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <fsm_pedestrian_run+0x98>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b32      	cmp	r3, #50	; 0x32
 8000cce:	d104      	bne.n	8000cda <fsm_pedestrian_run+0x52>
				pedestrian_status = PEDESTRIAN_GREEN;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <fsm_pedestrian_run+0x90>)
 8000cd2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	e011      	b.n	8000cfe <fsm_pedestrian_run+0x76>
			else if (traffic_status == GREEN_RED || traffic_status == AMBER_RED) {
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <fsm_pedestrian_run+0x98>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b46      	cmp	r3, #70	; 0x46
 8000ce0:	d003      	beq.n	8000cea <fsm_pedestrian_run+0x62>
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <fsm_pedestrian_run+0x98>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b50      	cmp	r3, #80	; 0x50
 8000ce8:	d104      	bne.n	8000cf4 <fsm_pedestrian_run+0x6c>
				pedestrian_status = PEDESTRIAN_RED;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <fsm_pedestrian_run+0x90>)
 8000cec:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	e004      	b.n	8000cfe <fsm_pedestrian_run+0x76>
				pedestrian_status = PEDESTRIAN_INACTIVE;
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <fsm_pedestrian_run+0x90>)
 8000cf6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000cfa:	601a      	str	r2, [r3, #0]
		break;
 8000cfc:	e009      	b.n	8000d12 <fsm_pedestrian_run+0x8a>
 8000cfe:	e008      	b.n	8000d12 <fsm_pedestrian_run+0x8a>
		PedestrianGreen();
 8000d00:	f7ff ff9a 	bl	8000c38 <PedestrianGreen>
		buzzer_status = ON;
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <fsm_pedestrian_run+0x94>)
 8000d06:	2207      	movs	r2, #7
 8000d08:	601a      	str	r2, [r3, #0]
		break;
 8000d0a:	e003      	b.n	8000d14 <fsm_pedestrian_run+0x8c>
		PedestrianRed();
 8000d0c:	f7ff ff80 	bl	8000c10 <PedestrianRed>
		break;
 8000d10:	e000      	b.n	8000d14 <fsm_pedestrian_run+0x8c>
		break;
 8000d12:	bf00      	nop
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000004 	.word	0x20000004
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	2000000c 	.word	0x2000000c

08000d24 <fsm_buzzer_run>:

int buzzer_volume = 0;
int freq = 0;			

void fsm_buzzer_run() {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
   switch(buzzer_status) {
 8000d28:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <fsm_buzzer_run+0xa0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b09      	cmp	r3, #9
 8000d2e:	d005      	beq.n	8000d3c <fsm_buzzer_run+0x18>
 8000d30:	2b09      	cmp	r3, #9
 8000d32:	dc45      	bgt.n	8000dc0 <fsm_buzzer_run+0x9c>
 8000d34:	2b07      	cmp	r3, #7
 8000d36:	d00a      	beq.n	8000d4e <fsm_buzzer_run+0x2a>
 8000d38:	2b08      	cmp	r3, #8
		// 	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, buzzer_volume);

		// 	setTimer(3, 100);
		// }

		break;
 8000d3a:	e041      	b.n	8000dc0 <fsm_buzzer_run+0x9c>
		buzzer_volume = 0;
 8000d3c:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <fsm_buzzer_run+0xa4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, buzzer_volume);
 8000d42:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <fsm_buzzer_run+0xa4>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <fsm_buzzer_run+0xa8>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000d4c:	e038      	b.n	8000dc0 <fsm_buzzer_run+0x9c>
		if (traffic_status == RED_AMBER) {
 8000d4e:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <fsm_buzzer_run+0xac>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b3c      	cmp	r3, #60	; 0x3c
 8000d54:	d11d      	bne.n	8000d92 <fsm_buzzer_run+0x6e>
			if (timer_flag[3] == 1) {
 8000d56:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <fsm_buzzer_run+0xb0>)
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d12f      	bne.n	8000dbe <fsm_buzzer_run+0x9a>
				freq += 10;
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <fsm_buzzer_run+0xb4>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	330a      	adds	r3, #10
 8000d64:	4a1c      	ldr	r2, [pc, #112]	; (8000dd8 <fsm_buzzer_run+0xb4>)
 8000d66:	6013      	str	r3, [r2, #0]
				buzzer_volume = (buzzer_volume == 0) ? (55 + freq) : 0;
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <fsm_buzzer_run+0xa4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d103      	bne.n	8000d78 <fsm_buzzer_run+0x54>
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <fsm_buzzer_run+0xb4>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	3337      	adds	r3, #55	; 0x37
 8000d76:	e000      	b.n	8000d7a <fsm_buzzer_run+0x56>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	4a13      	ldr	r2, [pc, #76]	; (8000dc8 <fsm_buzzer_run+0xa4>)
 8000d7c:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, buzzer_volume);
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <fsm_buzzer_run+0xa4>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <fsm_buzzer_run+0xa8>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	635a      	str	r2, [r3, #52]	; 0x34
				setTimer(3, 50);
 8000d88:	2132      	movs	r1, #50	; 0x32
 8000d8a:	2003      	movs	r0, #3
 8000d8c:	f000 fbe6 	bl	800155c <setTimer>
		break;
 8000d90:	e015      	b.n	8000dbe <fsm_buzzer_run+0x9a>
				if (timer_flag[3] == 1) {
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <fsm_buzzer_run+0xb0>)
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d111      	bne.n	8000dbe <fsm_buzzer_run+0x9a>
				buzzer_volume = (buzzer_volume == 0) ? 55 : 0;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <fsm_buzzer_run+0xa4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <fsm_buzzer_run+0x82>
 8000da2:	2337      	movs	r3, #55	; 0x37
 8000da4:	e000      	b.n	8000da8 <fsm_buzzer_run+0x84>
 8000da6:	2300      	movs	r3, #0
 8000da8:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <fsm_buzzer_run+0xa4>)
 8000daa:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, buzzer_volume);
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <fsm_buzzer_run+0xa4>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <fsm_buzzer_run+0xa8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	635a      	str	r2, [r3, #52]	; 0x34
				setTimer(3, 250);
 8000db6:	21fa      	movs	r1, #250	; 0xfa
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 fbcf 	bl	800155c <setTimer>
		break;
 8000dbe:	bf00      	nop
	}
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	200000b0 	.word	0x200000b0
 8000dcc:	200000f8 	.word	0x200000f8
 8000dd0:	2000000c 	.word	0x2000000c
 8000dd4:	20000270 	.word	0x20000270
 8000dd8:	200000b4 	.word	0x200000b4

08000ddc <resetLights>:
 *      Author: ASUS
 */

#include "graphics.h"

void resetLights(void) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
    time_modify_counter = 0;
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <resetLights+0x40>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
	traffic_status = INIT;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <resetLights+0x44>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	601a      	str	r2, [r3, #0]

    /* Off */
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df2:	480c      	ldr	r0, [pc, #48]	; (8000e24 <resetLights+0x48>)
 8000df4:	f001 f913 	bl	800201e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2108      	movs	r1, #8
 8000dfc:	480a      	ldr	r0, [pc, #40]	; (8000e28 <resetLights+0x4c>)
 8000dfe:	f001 f90e 	bl	800201e <HAL_GPIO_WritePin>

    /* Off */
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2120      	movs	r1, #32
 8000e06:	4808      	ldr	r0, [pc, #32]	; (8000e28 <resetLights+0x4c>)
 8000e08:	f001 f909 	bl	800201e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2110      	movs	r1, #16
 8000e10:	4805      	ldr	r0, [pc, #20]	; (8000e28 <resetLights+0x4c>)
 8000e12:	f001 f904 	bl	800201e <HAL_GPIO_WritePin>
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200000b8 	.word	0x200000b8
 8000e20:	2000000c 	.word	0x2000000c
 8000e24:	40010800 	.word	0x40010800
 8000e28:	40010c00 	.word	0x40010c00

08000e2c <Red_Green>:

void Red_Green(void) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
    /* Red */
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 8000e30:	2201      	movs	r2, #1
 8000e32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e36:	480a      	ldr	r0, [pc, #40]	; (8000e60 <Red_Green+0x34>)
 8000e38:	f001 f8f1 	bl	800201e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2108      	movs	r1, #8
 8000e40:	4808      	ldr	r0, [pc, #32]	; (8000e64 <Red_Green+0x38>)
 8000e42:	f001 f8ec 	bl	800201e <HAL_GPIO_WritePin>

    /* Green */
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2120      	movs	r1, #32
 8000e4a:	4806      	ldr	r0, [pc, #24]	; (8000e64 <Red_Green+0x38>)
 8000e4c:	f001 f8e7 	bl	800201e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 1);
 8000e50:	2201      	movs	r2, #1
 8000e52:	2110      	movs	r1, #16
 8000e54:	4803      	ldr	r0, [pc, #12]	; (8000e64 <Red_Green+0x38>)
 8000e56:	f001 f8e2 	bl	800201e <HAL_GPIO_WritePin>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40010800 	.word	0x40010800
 8000e64:	40010c00 	.word	0x40010c00

08000e68 <Red_Amber>:

void Red_Amber(void) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
    /* Red */
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e72:	480a      	ldr	r0, [pc, #40]	; (8000e9c <Red_Amber+0x34>)
 8000e74:	f001 f8d3 	bl	800201e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2108      	movs	r1, #8
 8000e7c:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <Red_Amber+0x38>)
 8000e7e:	f001 f8ce 	bl	800201e <HAL_GPIO_WritePin>

    /* Amber */
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 8000e82:	2201      	movs	r2, #1
 8000e84:	2120      	movs	r1, #32
 8000e86:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <Red_Amber+0x38>)
 8000e88:	f001 f8c9 	bl	800201e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 1);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2110      	movs	r1, #16
 8000e90:	4803      	ldr	r0, [pc, #12]	; (8000ea0 <Red_Amber+0x38>)
 8000e92:	f001 f8c4 	bl	800201e <HAL_GPIO_WritePin>
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40010800 	.word	0x40010800
 8000ea0:	40010c00 	.word	0x40010c00

08000ea4 <Green_Red>:

void Green_Red(void) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
    /* Green */
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eae:	480a      	ldr	r0, [pc, #40]	; (8000ed8 <Green_Red+0x34>)
 8000eb0:	f001 f8b5 	bl	800201e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2108      	movs	r1, #8
 8000eb8:	4808      	ldr	r0, [pc, #32]	; (8000edc <Green_Red+0x38>)
 8000eba:	f001 f8b0 	bl	800201e <HAL_GPIO_WritePin>

    /* Red */
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2120      	movs	r1, #32
 8000ec2:	4806      	ldr	r0, [pc, #24]	; (8000edc <Green_Red+0x38>)
 8000ec4:	f001 f8ab 	bl	800201e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2110      	movs	r1, #16
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <Green_Red+0x38>)
 8000ece:	f001 f8a6 	bl	800201e <HAL_GPIO_WritePin>
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40010800 	.word	0x40010800
 8000edc:	40010c00 	.word	0x40010c00

08000ee0 <Amber_Red>:

void Amber_Red(void) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
    /* Amber */
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eea:	480a      	ldr	r0, [pc, #40]	; (8000f14 <Amber_Red+0x34>)
 8000eec:	f001 f897 	bl	800201e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2108      	movs	r1, #8
 8000ef4:	4808      	ldr	r0, [pc, #32]	; (8000f18 <Amber_Red+0x38>)
 8000ef6:	f001 f892 	bl	800201e <HAL_GPIO_WritePin>

    /* Red */
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 8000efa:	2201      	movs	r2, #1
 8000efc:	2120      	movs	r1, #32
 8000efe:	4806      	ldr	r0, [pc, #24]	; (8000f18 <Amber_Red+0x38>)
 8000f00:	f001 f88d 	bl	800201e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2110      	movs	r1, #16
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <Amber_Red+0x38>)
 8000f0a:	f001 f888 	bl	800201e <HAL_GPIO_WritePin>
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40010800 	.word	0x40010800
 8000f18:	40010c00 	.word	0x40010c00

08000f1c <Toggle_Red>:
    HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
}

int toggleIndex = 0;

void Toggle_Red(void) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
    if (toggleIndex == 0) {
 8000f20:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <Toggle_Red+0x74>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d118      	bne.n	8000f5a <Toggle_Red+0x3e>
        /* On */
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2e:	4819      	ldr	r0, [pc, #100]	; (8000f94 <Toggle_Red+0x78>)
 8000f30:	f001 f875 	bl	800201e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2108      	movs	r1, #8
 8000f38:	4817      	ldr	r0, [pc, #92]	; (8000f98 <Toggle_Red+0x7c>)
 8000f3a:	f001 f870 	bl	800201e <HAL_GPIO_WritePin>

        /* On */
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2120      	movs	r1, #32
 8000f42:	4815      	ldr	r0, [pc, #84]	; (8000f98 <Toggle_Red+0x7c>)
 8000f44:	f001 f86b 	bl	800201e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2110      	movs	r1, #16
 8000f4c:	4812      	ldr	r0, [pc, #72]	; (8000f98 <Toggle_Red+0x7c>)
 8000f4e:	f001 f866 	bl	800201e <HAL_GPIO_WritePin>

        toggleIndex = 1;
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <Toggle_Red+0x74>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);

        toggleIndex = 0;
    }
}
 8000f58:	e017      	b.n	8000f8a <Toggle_Red+0x6e>
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <Toggle_Red+0x78>)
 8000f62:	f001 f85c 	bl	800201e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2108      	movs	r1, #8
 8000f6a:	480b      	ldr	r0, [pc, #44]	; (8000f98 <Toggle_Red+0x7c>)
 8000f6c:	f001 f857 	bl	800201e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2120      	movs	r1, #32
 8000f74:	4808      	ldr	r0, [pc, #32]	; (8000f98 <Toggle_Red+0x7c>)
 8000f76:	f001 f852 	bl	800201e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2110      	movs	r1, #16
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <Toggle_Red+0x7c>)
 8000f80:	f001 f84d 	bl	800201e <HAL_GPIO_WritePin>
        toggleIndex = 0;
 8000f84:	4b02      	ldr	r3, [pc, #8]	; (8000f90 <Toggle_Red+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200000c0 	.word	0x200000c0
 8000f94:	40010800 	.word	0x40010800
 8000f98:	40010c00 	.word	0x40010c00

08000f9c <Toggle_Amber>:

void Toggle_Amber(void) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
    if (toggleIndex == 0) {
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <Toggle_Amber+0x74>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d118      	bne.n	8000fda <Toggle_Amber+0x3e>
        /* On */
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 1);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fae:	4819      	ldr	r0, [pc, #100]	; (8001014 <Toggle_Amber+0x78>)
 8000fb0:	f001 f835 	bl	800201e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2108      	movs	r1, #8
 8000fb8:	4817      	ldr	r0, [pc, #92]	; (8001018 <Toggle_Amber+0x7c>)
 8000fba:	f001 f830 	bl	800201e <HAL_GPIO_WritePin>

        /* On */
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2120      	movs	r1, #32
 8000fc2:	4815      	ldr	r0, [pc, #84]	; (8001018 <Toggle_Amber+0x7c>)
 8000fc4:	f001 f82b 	bl	800201e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 1);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2110      	movs	r1, #16
 8000fcc:	4812      	ldr	r0, [pc, #72]	; (8001018 <Toggle_Amber+0x7c>)
 8000fce:	f001 f826 	bl	800201e <HAL_GPIO_WritePin>

        toggleIndex = 1;
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <Toggle_Amber+0x74>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);

        toggleIndex = 0;
    }
}
 8000fd8:	e017      	b.n	800100a <Toggle_Amber+0x6e>
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe0:	480c      	ldr	r0, [pc, #48]	; (8001014 <Toggle_Amber+0x78>)
 8000fe2:	f001 f81c 	bl	800201e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2108      	movs	r1, #8
 8000fea:	480b      	ldr	r0, [pc, #44]	; (8001018 <Toggle_Amber+0x7c>)
 8000fec:	f001 f817 	bl	800201e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2120      	movs	r1, #32
 8000ff4:	4808      	ldr	r0, [pc, #32]	; (8001018 <Toggle_Amber+0x7c>)
 8000ff6:	f001 f812 	bl	800201e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2110      	movs	r1, #16
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <Toggle_Amber+0x7c>)
 8001000:	f001 f80d 	bl	800201e <HAL_GPIO_WritePin>
        toggleIndex = 0;
 8001004:	4b02      	ldr	r3, [pc, #8]	; (8001010 <Toggle_Amber+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200000c0 	.word	0x200000c0
 8001014:	40010800 	.word	0x40010800
 8001018:	40010c00 	.word	0x40010c00

0800101c <Toggle_Green>:

void Toggle_Green(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
    if (toggleIndex == 0) {
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <Toggle_Green+0x74>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d118      	bne.n	800105a <Toggle_Green+0x3e>
        /* On */
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800102e:	4819      	ldr	r0, [pc, #100]	; (8001094 <Toggle_Green+0x78>)
 8001030:	f000 fff5 	bl	800201e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 8001034:	2201      	movs	r2, #1
 8001036:	2108      	movs	r1, #8
 8001038:	4817      	ldr	r0, [pc, #92]	; (8001098 <Toggle_Green+0x7c>)
 800103a:	f000 fff0 	bl	800201e <HAL_GPIO_WritePin>

        /* On */
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2120      	movs	r1, #32
 8001042:	4815      	ldr	r0, [pc, #84]	; (8001098 <Toggle_Green+0x7c>)
 8001044:	f000 ffeb 	bl	800201e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 1);
 8001048:	2201      	movs	r2, #1
 800104a:	2110      	movs	r1, #16
 800104c:	4812      	ldr	r0, [pc, #72]	; (8001098 <Toggle_Green+0x7c>)
 800104e:	f000 ffe6 	bl	800201e <HAL_GPIO_WritePin>

        toggleIndex = 1;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <Toggle_Green+0x74>)
 8001054:	2201      	movs	r2, #1
 8001056:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);

        toggleIndex = 0;
    }
}
 8001058:	e017      	b.n	800108a <Toggle_Green+0x6e>
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001060:	480c      	ldr	r0, [pc, #48]	; (8001094 <Toggle_Green+0x78>)
 8001062:	f000 ffdc 	bl	800201e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2108      	movs	r1, #8
 800106a:	480b      	ldr	r0, [pc, #44]	; (8001098 <Toggle_Green+0x7c>)
 800106c:	f000 ffd7 	bl	800201e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	2120      	movs	r1, #32
 8001074:	4808      	ldr	r0, [pc, #32]	; (8001098 <Toggle_Green+0x7c>)
 8001076:	f000 ffd2 	bl	800201e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2110      	movs	r1, #16
 800107e:	4806      	ldr	r0, [pc, #24]	; (8001098 <Toggle_Green+0x7c>)
 8001080:	f000 ffcd 	bl	800201e <HAL_GPIO_WritePin>
        toggleIndex = 0;
 8001084:	4b02      	ldr	r3, [pc, #8]	; (8001090 <Toggle_Green+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200000c0 	.word	0x200000c0
 8001094:	40010800 	.word	0x40010800
 8001098:	40010c00 	.word	0x40010c00

0800109c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <HAL_UART_RxCpltCallback+0x5c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d11f      	bne.n	80010ee <HAL_UART_RxCpltCallback+0x52>
		buffer[index_buffer++] = temp;
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <HAL_UART_RxCpltCallback+0x60>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	b2d1      	uxtb	r1, r2
 80010b6:	4a11      	ldr	r2, [pc, #68]	; (80010fc <HAL_UART_RxCpltCallback+0x60>)
 80010b8:	7011      	strb	r1, [r2, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <HAL_UART_RxCpltCallback+0x64>)
 80010be:	7819      	ldrb	r1, [r3, #0]
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <HAL_UART_RxCpltCallback+0x68>)
 80010c2:	5499      	strb	r1, [r3, r2]
		if (index_buffer == MAX_BUFFER_SIZE)
 80010c4:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <HAL_UART_RxCpltCallback+0x60>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b1e      	cmp	r3, #30
 80010ca:	d102      	bne.n	80010d2 <HAL_UART_RxCpltCallback+0x36>
			index_buffer = 0;
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_UART_RxCpltCallback+0x60>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <HAL_UART_RxCpltCallback+0x6c>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 80010d8:	2332      	movs	r3, #50	; 0x32
 80010da:	2201      	movs	r2, #1
 80010dc:	4908      	ldr	r1, [pc, #32]	; (8001100 <HAL_UART_RxCpltCallback+0x64>)
 80010de:	480b      	ldr	r0, [pc, #44]	; (800110c <HAL_UART_RxCpltCallback+0x70>)
 80010e0:	f002 fb7b 	bl	80037da <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 80010e4:	2201      	movs	r2, #1
 80010e6:	4906      	ldr	r1, [pc, #24]	; (8001100 <HAL_UART_RxCpltCallback+0x64>)
 80010e8:	4808      	ldr	r0, [pc, #32]	; (800110c <HAL_UART_RxCpltCallback+0x70>)
 80010ea:	f002 fc08 	bl	80038fe <HAL_UART_Receive_IT>
	}
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40004400 	.word	0x40004400
 80010fc:	200000bd 	.word	0x200000bd
 8001100:	200000bc 	.word	0x200000bc
 8001104:	20000190 	.word	0x20000190
 8001108:	200000be 	.word	0x200000be
 800110c:	20000218 	.word	0x20000218

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001112:	b08f      	sub	sp, #60	; 0x3c
 8001114:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001116:	f000 fbc7 	bl	80018a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111a:	f000 f871 	bl	8001200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 800111e:	f000 f8b1 	bl	8001284 <MX_TIM2_Init>
  MX_GPIO_Init();
 8001122:	f000 f99b 	bl	800145c <MX_GPIO_Init>
  MX_TIM3_Init();
 8001126:	f000 f8f9 	bl	800131c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800112a:	f000 f96d 	bl	8001408 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800112e:	482e      	ldr	r0, [pc, #184]	; (80011e8 <main+0xd8>)
 8001130:	f001 fbf8 	bl	8002924 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart2, &temp, 1);
 8001134:	2201      	movs	r2, #1
 8001136:	492d      	ldr	r1, [pc, #180]	; (80011ec <main+0xdc>)
 8001138:	482d      	ldr	r0, [pc, #180]	; (80011f0 <main+0xe0>)
 800113a:	f002 fbe0 	bl	80038fe <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800113e:	2100      	movs	r1, #0
 8001140:	482c      	ldr	r0, [pc, #176]	; (80011f4 <main+0xe4>)
 8001142:	f001 fc99 	bl	8002a78 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(0, 1000);
 8001146:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800114a:	2000      	movs	r0, #0
 800114c:	f000 fa06 	bl	800155c <setTimer>
  setTimer(1, 1000);
 8001150:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001154:	2001      	movs	r0, #1
 8001156:	f000 fa01 	bl	800155c <setTimer>
  setTimer(2, 1000);
 800115a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800115e:	2002      	movs	r0, #2
 8001160:	f000 f9fc 	bl	800155c <setTimer>
  setTimer(3, 1000);
 8001164:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001168:	2003      	movs	r0, #3
 800116a:	f000 f9f7 	bl	800155c <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (buffer_flag == 1) {
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <main+0xe8>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d102      	bne.n	800117c <main+0x6c>
			buffer_flag = 0;
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <main+0xe8>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
		}

		 fsm_pedestrian_run();
 800117c:	f7ff fd84 	bl	8000c88 <fsm_pedestrian_run>
		 fsm_buzzer_run();
 8001180:	f7ff fdd0 	bl	8000d24 <fsm_buzzer_run>

		if (status == AUTOMATIC_MODE)
 8001184:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <main+0xec>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d110      	bne.n	80011ae <main+0x9e>
			fsm_automatic_run(huart2);
 800118c:	4e18      	ldr	r6, [pc, #96]	; (80011f0 <main+0xe0>)
 800118e:	466d      	mov	r5, sp
 8001190:	f106 0410 	add.w	r4, r6, #16
 8001194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a0:	6823      	ldr	r3, [r4, #0]
 80011a2:	602b      	str	r3, [r5, #0]
 80011a4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011a8:	f7ff f8b4 	bl	8000314 <fsm_automatic_run>
 80011ac:	e013      	b.n	80011d6 <main+0xc6>
		else if (status == MANUAL_MODE)
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <main+0xec>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	d10f      	bne.n	80011d6 <main+0xc6>
			fsm_manual_run(huart2);
 80011b6:	4e0e      	ldr	r6, [pc, #56]	; (80011f0 <main+0xe0>)
 80011b8:	466d      	mov	r5, sp
 80011ba:	f106 0410 	add.w	r4, r6, #16
 80011be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ca:	6823      	ldr	r3, [r4, #0]
 80011cc:	602b      	str	r3, [r5, #0]
 80011ce:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011d2:	f7ff fa33 	bl	800063c <fsm_manual_run>

		if (buffer_flag == 1) {
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <main+0xe8>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d1c7      	bne.n	800116e <main+0x5e>
			buffer_flag = 0;
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <main+0xe8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
    if (buffer_flag == 1) {
 80011e4:	e7c3      	b.n	800116e <main+0x5e>
 80011e6:	bf00      	nop
 80011e8:	200001d0 	.word	0x200001d0
 80011ec:	200000bc 	.word	0x200000bc
 80011f0:	20000218 	.word	0x20000218
 80011f4:	200000f8 	.word	0x200000f8
 80011f8:	200000be 	.word	0x200000be
 80011fc:	20000000 	.word	0x20000000

08001200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b090      	sub	sp, #64	; 0x40
 8001204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	2228      	movs	r2, #40	; 0x28
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f002 fff2 	bl	80041f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001222:	2302      	movs	r3, #2
 8001224:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001226:	2301      	movs	r3, #1
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122a:	2310      	movs	r3, #16
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122e:	2302      	movs	r3, #2
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001232:	2300      	movs	r3, #0
 8001234:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001236:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800123a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123c:	f107 0318 	add.w	r3, r7, #24
 8001240:	4618      	mov	r0, r3
 8001242:	f000 ff05 	bl	8002050 <HAL_RCC_OscConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800124c:	f000 f980 	bl	8001550 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001250:	230f      	movs	r3, #15
 8001252:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001254:	2302      	movs	r3, #2
 8001256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800125c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2102      	movs	r1, #2
 800126a:	4618      	mov	r0, r3
 800126c:	f001 f970 	bl	8002550 <HAL_RCC_ClockConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001276:	f000 f96b 	bl	8001550 <Error_Handler>
  }
}
 800127a:	bf00      	nop
 800127c:	3740      	adds	r7, #64	; 0x40
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001298:	463b      	mov	r3, r7
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <MX_TIM2_Init+0x94>)
 80012a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <MX_TIM2_Init+0x94>)
 80012aa:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <MX_TIM2_Init+0x94>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <MX_TIM2_Init+0x94>)
 80012b8:	224f      	movs	r2, #79	; 0x4f
 80012ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_TIM2_Init+0x94>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <MX_TIM2_Init+0x94>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012c8:	4813      	ldr	r0, [pc, #76]	; (8001318 <MX_TIM2_Init+0x94>)
 80012ca:	f001 fadb 	bl	8002884 <HAL_TIM_Base_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012d4:	f000 f93c 	bl	8001550 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	4619      	mov	r1, r3
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <MX_TIM2_Init+0x94>)
 80012e6:	f001 fe2f 	bl	8002f48 <HAL_TIM_ConfigClockSource>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012f0:	f000 f92e 	bl	8001550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012fc:	463b      	mov	r3, r7
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_TIM2_Init+0x94>)
 8001302:	f002 f9ad 	bl	8003660 <HAL_TIMEx_MasterConfigSynchronization>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800130c:	f000 f920 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200001d0 	.word	0x200001d0

0800131c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08e      	sub	sp, #56	; 0x38
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	f107 0320 	add.w	r3, r7, #32
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
 8001348:	615a      	str	r2, [r3, #20]
 800134a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800134c:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <MX_TIM3_Init+0xe4>)
 800134e:	4a2d      	ldr	r2, [pc, #180]	; (8001404 <MX_TIM3_Init+0xe8>)
 8001350:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001352:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <MX_TIM3_Init+0xe4>)
 8001354:	224f      	movs	r2, #79	; 0x4f
 8001356:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001358:	4b29      	ldr	r3, [pc, #164]	; (8001400 <MX_TIM3_Init+0xe4>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 800135e:	4b28      	ldr	r3, [pc, #160]	; (8001400 <MX_TIM3_Init+0xe4>)
 8001360:	224f      	movs	r2, #79	; 0x4f
 8001362:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001364:	4b26      	ldr	r3, [pc, #152]	; (8001400 <MX_TIM3_Init+0xe4>)
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136a:	4b25      	ldr	r3, [pc, #148]	; (8001400 <MX_TIM3_Init+0xe4>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001370:	4823      	ldr	r0, [pc, #140]	; (8001400 <MX_TIM3_Init+0xe4>)
 8001372:	f001 fa87 	bl	8002884 <HAL_TIM_Base_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800137c:	f000 f8e8 	bl	8001550 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800138a:	4619      	mov	r1, r3
 800138c:	481c      	ldr	r0, [pc, #112]	; (8001400 <MX_TIM3_Init+0xe4>)
 800138e:	f001 fddb 	bl	8002f48 <HAL_TIM_ConfigClockSource>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001398:	f000 f8da 	bl	8001550 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800139c:	4818      	ldr	r0, [pc, #96]	; (8001400 <MX_TIM3_Init+0xe4>)
 800139e:	f001 fb13 	bl	80029c8 <HAL_TIM_PWM_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80013a8:	f000 f8d2 	bl	8001550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013b4:	f107 0320 	add.w	r3, r7, #32
 80013b8:	4619      	mov	r1, r3
 80013ba:	4811      	ldr	r0, [pc, #68]	; (8001400 <MX_TIM3_Init+0xe4>)
 80013bc:	f002 f950 	bl	8003660 <HAL_TIMEx_MasterConfigSynchronization>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80013c6:	f000 f8c3 	bl	8001550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ca:	2360      	movs	r3, #96	; 0x60
 80013cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	4619      	mov	r1, r3
 80013e0:	4807      	ldr	r0, [pc, #28]	; (8001400 <MX_TIM3_Init+0xe4>)
 80013e2:	f001 fcf3 	bl	8002dcc <HAL_TIM_PWM_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80013ec:	f000 f8b0 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013f0:	4803      	ldr	r0, [pc, #12]	; (8001400 <MX_TIM3_Init+0xe4>)
 80013f2:	f000 f96d 	bl	80016d0 <HAL_TIM_MspPostInit>

}
 80013f6:	bf00      	nop
 80013f8:	3738      	adds	r7, #56	; 0x38
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200000f8 	.word	0x200000f8
 8001404:	40000400 	.word	0x40000400

08001408 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800140e:	4a12      	ldr	r2, [pc, #72]	; (8001458 <MX_USART2_UART_Init+0x50>)
 8001410:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001414:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001418:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800142e:	220c      	movs	r2, #12
 8001430:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001440:	f002 f97e 	bl	8003740 <HAL_UART_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800144a:	f000 f881 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000218 	.word	0x20000218
 8001458:	40004400 	.word	0x40004400

0800145c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001470:	4b2e      	ldr	r3, [pc, #184]	; (800152c <MX_GPIO_Init+0xd0>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a2d      	ldr	r2, [pc, #180]	; (800152c <MX_GPIO_Init+0xd0>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b2b      	ldr	r3, [pc, #172]	; (800152c <MX_GPIO_Init+0xd0>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001488:	4b28      	ldr	r3, [pc, #160]	; (800152c <MX_GPIO_Init+0xd0>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a27      	ldr	r2, [pc, #156]	; (800152c <MX_GPIO_Init+0xd0>)
 800148e:	f043 0308 	orr.w	r3, r3, #8
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <MX_GPIO_Init+0xd0>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PEDESTRIAN_Pin|LED_2_Pin|LED_4_Pin|LED_3_Pin, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80014a6:	4822      	ldr	r0, [pc, #136]	; (8001530 <MX_GPIO_Init+0xd4>)
 80014a8:	f000 fdb9 	bl	800201e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PEDESTRIAN_Pin|LED_1_Pin, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80014b2:	4820      	ldr	r0, [pc, #128]	; (8001534 <MX_GPIO_Init+0xd8>)
 80014b4:	f000 fdb3 	bl	800201e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_PEDESTRIAN_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_PEDESTRIAN_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 80014b8:	2313      	movs	r3, #19
 80014ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c0:	2301      	movs	r3, #1
 80014c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 0308 	add.w	r3, r7, #8
 80014c8:	4619      	mov	r1, r3
 80014ca:	481a      	ldr	r0, [pc, #104]	; (8001534 <MX_GPIO_Init+0xd8>)
 80014cc:	f000 fc0c 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin;
 80014d0:	2301      	movs	r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d8:	2301      	movs	r3, #1
 80014da:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_3_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0308 	add.w	r3, r7, #8
 80014e0:	4619      	mov	r1, r3
 80014e2:	4813      	ldr	r0, [pc, #76]	; (8001530 <MX_GPIO_Init+0xd4>)
 80014e4:	f000 fc00 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PEDESTRIAN_Pin LED_2_Pin LED_4_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = D6_PEDESTRIAN_Pin|LED_2_Pin|LED_4_Pin|LED_3_Pin;
 80014e8:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80014ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2302      	movs	r3, #2
 80014f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	4619      	mov	r1, r3
 8001500:	480b      	ldr	r0, [pc, #44]	; (8001530 <MX_GPIO_Init+0xd4>)
 8001502:	f000 fbf1 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_PEDESTRIAN_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = D7_PEDESTRIAN_Pin|LED_1_Pin;
 8001506:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800150a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2302      	movs	r3, #2
 8001516:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	4619      	mov	r1, r3
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_GPIO_Init+0xd8>)
 8001520:	f000 fbe2 	bl	8001ce8 <HAL_GPIO_Init>

}
 8001524:	bf00      	nop
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40021000 	.word	0x40021000
 8001530:	40010c00 	.word	0x40010c00
 8001534:	40010800 	.word	0x40010800

08001538 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  timerRun();
 8001540:	f000 f82c 	bl	800159c <timerRun>
  getKeyInput();
 8001544:	f7fe fe02 	bl	800014c <getKeyInput>
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001554:	b672      	cpsid	i
}
 8001556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001558:	e7fe      	b.n	8001558 <Error_Handler+0x8>
	...

0800155c <setTimer>:
#define TIMER_CYCLE 10

int timer_flag[NO_TIMERS + 1];
int timer_counter[NO_TIMERS + 1];

void setTimer(int flagNo, int duration) {
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
	timer_counter[flagNo] = duration / TIMER_CYCLE;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	4a09      	ldr	r2, [pc, #36]	; (8001590 <setTimer+0x34>)
 800156a:	fb82 1203 	smull	r1, r2, r2, r3
 800156e:	1092      	asrs	r2, r2, #2
 8001570:	17db      	asrs	r3, r3, #31
 8001572:	1ad2      	subs	r2, r2, r3
 8001574:	4907      	ldr	r1, [pc, #28]	; (8001594 <setTimer+0x38>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[flagNo] = 0;
 800157c:	4a06      	ldr	r2, [pc, #24]	; (8001598 <setTimer+0x3c>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2100      	movs	r1, #0
 8001582:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	66666667 	.word	0x66666667
 8001594:	2000025c 	.word	0x2000025c
 8001598:	20000270 	.word	0x20000270

0800159c <timerRun>:

void timerRun() {
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
	for (int flagNo = 0; flagNo < NO_TIMERS; flagNo++) {
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	e01c      	b.n	80015e2 <timerRun+0x46>
		if (timer_counter[flagNo] > 0) {
 80015a8:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <timerRun+0x58>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	dd13      	ble.n	80015dc <timerRun+0x40>
			timer_counter[flagNo]--;
 80015b4:	4a0f      	ldr	r2, [pc, #60]	; (80015f4 <timerRun+0x58>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015bc:	1e5a      	subs	r2, r3, #1
 80015be:	490d      	ldr	r1, [pc, #52]	; (80015f4 <timerRun+0x58>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[flagNo] <= 0) {
 80015c6:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <timerRun+0x58>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	dc04      	bgt.n	80015dc <timerRun+0x40>
				timer_flag[flagNo] = 1;
 80015d2:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <timerRun+0x5c>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2101      	movs	r1, #1
 80015d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int flagNo = 0; flagNo < NO_TIMERS; flagNo++) {
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3301      	adds	r3, #1
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	dddf      	ble.n	80015a8 <timerRun+0xc>
			}
		}
	}
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	2000025c 	.word	0x2000025c
 80015f8:	20000270 	.word	0x20000270

080015fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_MspInit+0x5c>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	4a14      	ldr	r2, [pc, #80]	; (8001658 <HAL_MspInit+0x5c>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6193      	str	r3, [r2, #24]
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_MspInit+0x5c>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <HAL_MspInit+0x5c>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <HAL_MspInit+0x5c>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	61d3      	str	r3, [r2, #28]
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <HAL_MspInit+0x5c>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <HAL_MspInit+0x60>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <HAL_MspInit+0x60>)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	40021000 	.word	0x40021000
 800165c:	40010000 	.word	0x40010000

08001660 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001670:	d114      	bne.n	800169c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_TIM_Base_MspInit+0x68>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <HAL_TIM_Base_MspInit+0x68>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	61d3      	str	r3, [r2, #28]
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_TIM_Base_MspInit+0x68>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	201c      	movs	r0, #28
 8001690:	f000 fa43 	bl	8001b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001694:	201c      	movs	r0, #28
 8001696:	f000 fa5c 	bl	8001b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800169a:	e010      	b.n	80016be <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <HAL_TIM_Base_MspInit+0x6c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d10b      	bne.n	80016be <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_TIM_Base_MspInit+0x68>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <HAL_TIM_Base_MspInit+0x68>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	61d3      	str	r3, [r2, #28]
 80016b2:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_TIM_Base_MspInit+0x68>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40000400 	.word	0x40000400

080016d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a0f      	ldr	r2, [pc, #60]	; (8001728 <HAL_TIM_MspPostInit+0x58>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d117      	bne.n	8001720 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f0:	4b0e      	ldr	r3, [pc, #56]	; (800172c <HAL_TIM_MspPostInit+0x5c>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a0d      	ldr	r2, [pc, #52]	; (800172c <HAL_TIM_MspPostInit+0x5c>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_TIM_MspPostInit+0x5c>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001708:	2340      	movs	r3, #64	; 0x40
 800170a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2302      	movs	r3, #2
 8001712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4619      	mov	r1, r3
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <HAL_TIM_MspPostInit+0x60>)
 800171c:	f000 fae4 	bl	8001ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001720:	bf00      	nop
 8001722:	3720      	adds	r7, #32
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40000400 	.word	0x40000400
 800172c:	40021000 	.word	0x40021000
 8001730:	40010800 	.word	0x40010800

08001734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a1f      	ldr	r2, [pc, #124]	; (80017cc <HAL_UART_MspInit+0x98>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d137      	bne.n	80017c4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001754:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <HAL_UART_MspInit+0x9c>)
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	4a1d      	ldr	r2, [pc, #116]	; (80017d0 <HAL_UART_MspInit+0x9c>)
 800175a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175e:	61d3      	str	r3, [r2, #28]
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <HAL_UART_MspInit+0x9c>)
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_UART_MspInit+0x9c>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <HAL_UART_MspInit+0x9c>)
 8001772:	f043 0304 	orr.w	r3, r3, #4
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_UART_MspInit+0x9c>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001784:	2304      	movs	r3, #4
 8001786:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800178c:	2303      	movs	r3, #3
 800178e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	4619      	mov	r1, r3
 8001796:	480f      	ldr	r0, [pc, #60]	; (80017d4 <HAL_UART_MspInit+0xa0>)
 8001798:	f000 faa6 	bl	8001ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800179c:	2308      	movs	r3, #8
 800179e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	4619      	mov	r1, r3
 80017ae:	4809      	ldr	r0, [pc, #36]	; (80017d4 <HAL_UART_MspInit+0xa0>)
 80017b0:	f000 fa9a 	bl	8001ce8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2100      	movs	r1, #0
 80017b8:	2026      	movs	r0, #38	; 0x26
 80017ba:	f000 f9ae 	bl	8001b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017be:	2026      	movs	r0, #38	; 0x26
 80017c0:	f000 f9c7 	bl	8001b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017c4:	bf00      	nop
 80017c6:	3720      	adds	r7, #32
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40004400 	.word	0x40004400
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40010800 	.word	0x40010800

080017d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <NMI_Handler+0x4>

080017de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <HardFault_Handler+0x4>

080017e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <MemManage_Handler+0x4>

080017ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <BusFault_Handler+0x4>

080017f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <UsageFault_Handler+0x4>

080017f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800181e:	f000 f889 	bl	8001934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <TIM2_IRQHandler+0x10>)
 800182e:	f001 f9c5 	bl	8002bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200001d0 	.word	0x200001d0

0800183c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <USART2_IRQHandler+0x10>)
 8001842:	f002 f88d 	bl	8003960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000218 	.word	0x20000218

08001850 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800185c:	480c      	ldr	r0, [pc, #48]	; (8001890 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800185e:	490d      	ldr	r1, [pc, #52]	; (8001894 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001860:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001864:	e002      	b.n	800186c <LoopCopyDataInit>

08001866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186a:	3304      	adds	r3, #4

0800186c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800186c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001870:	d3f9      	bcc.n	8001866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001874:	4c0a      	ldr	r4, [pc, #40]	; (80018a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001878:	e001      	b.n	800187e <LoopFillZerobss>

0800187a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800187c:	3204      	adds	r2, #4

0800187e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001880:	d3fb      	bcc.n	800187a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001882:	f7ff ffe5 	bl	8001850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001886:	f002 fc93 	bl	80041b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800188a:	f7ff fc41 	bl	8001110 <main>
  bx lr
 800188e:	4770      	bx	lr
  ldr r0, =_sdata
 8001890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001894:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001898:	08004c4c 	.word	0x08004c4c
  ldr r2, =_sbss
 800189c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80018a0:	20000298 	.word	0x20000298

080018a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018a4:	e7fe      	b.n	80018a4 <ADC1_2_IRQHandler>
	...

080018a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HAL_Init+0x28>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <HAL_Init+0x28>)
 80018b2:	f043 0310 	orr.w	r3, r3, #16
 80018b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b8:	2003      	movs	r0, #3
 80018ba:	f000 f923 	bl	8001b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018be:	200f      	movs	r0, #15
 80018c0:	f000 f808 	bl	80018d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c4:	f7ff fe9a 	bl	80015fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40022000 	.word	0x40022000

080018d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_InitTick+0x54>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_InitTick+0x58>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 f93b 	bl	8001b6e <HAL_SYSTICK_Config>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e00e      	b.n	8001920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d80a      	bhi.n	800191e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001908:	2200      	movs	r2, #0
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f000 f903 	bl	8001b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001914:	4a06      	ldr	r2, [pc, #24]	; (8001930 <HAL_InitTick+0x5c>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	e000      	b.n	8001920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000024 	.word	0x20000024
 800192c:	2000002c 	.word	0x2000002c
 8001930:	20000028 	.word	0x20000028

08001934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_IncTick+0x1c>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_IncTick+0x20>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4413      	add	r3, r2
 8001944:	4a03      	ldr	r2, [pc, #12]	; (8001954 <HAL_IncTick+0x20>)
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	2000002c 	.word	0x2000002c
 8001954:	20000284 	.word	0x20000284

08001958 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return uwTick;
 800195c:	4b02      	ldr	r3, [pc, #8]	; (8001968 <HAL_GetTick+0x10>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	20000284 	.word	0x20000284

0800196c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <__NVIC_SetPriorityGrouping+0x44>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001988:	4013      	ands	r3, r2
 800198a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199e:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <__NVIC_SetPriorityGrouping+0x44>)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	60d3      	str	r3, [r2, #12]
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <__NVIC_GetPriorityGrouping+0x18>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	f003 0307 	and.w	r3, r3, #7
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	db0b      	blt.n	80019fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	f003 021f 	and.w	r2, r3, #31
 80019e8:	4906      	ldr	r1, [pc, #24]	; (8001a04 <__NVIC_EnableIRQ+0x34>)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	2001      	movs	r0, #1
 80019f2:	fa00 f202 	lsl.w	r2, r0, r2
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	e000e100 	.word	0xe000e100

08001a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	db0a      	blt.n	8001a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	490c      	ldr	r1, [pc, #48]	; (8001a54 <__NVIC_SetPriority+0x4c>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	0112      	lsls	r2, r2, #4
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a30:	e00a      	b.n	8001a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4908      	ldr	r1, [pc, #32]	; (8001a58 <__NVIC_SetPriority+0x50>)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	3b04      	subs	r3, #4
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	440b      	add	r3, r1
 8001a46:	761a      	strb	r2, [r3, #24]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000e100 	.word	0xe000e100
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f1c3 0307 	rsb	r3, r3, #7
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	bf28      	it	cs
 8001a7a:	2304      	movcs	r3, #4
 8001a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3304      	adds	r3, #4
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d902      	bls.n	8001a8c <NVIC_EncodePriority+0x30>
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3b03      	subs	r3, #3
 8001a8a:	e000      	b.n	8001a8e <NVIC_EncodePriority+0x32>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43d9      	mvns	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	4313      	orrs	r3, r2
         );
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3724      	adds	r7, #36	; 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad0:	d301      	bcc.n	8001ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00f      	b.n	8001af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <SysTick_Config+0x40>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ade:	210f      	movs	r1, #15
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f7ff ff90 	bl	8001a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <SysTick_Config+0x40>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <SysTick_Config+0x40>)
 8001af0:	2207      	movs	r2, #7
 8001af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	e000e010 	.word	0xe000e010

08001b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff2d 	bl	800196c <__NVIC_SetPriorityGrouping>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b2c:	f7ff ff42 	bl	80019b4 <__NVIC_GetPriorityGrouping>
 8001b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	6978      	ldr	r0, [r7, #20]
 8001b38:	f7ff ff90 	bl	8001a5c <NVIC_EncodePriority>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff5f 	bl	8001a08 <__NVIC_SetPriority>
}
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff35 	bl	80019d0 <__NVIC_EnableIRQ>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ffa2 	bl	8001ac0 <SysTick_Config>
 8001b7c:	4603      	mov	r3, r0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b085      	sub	sp, #20
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d008      	beq.n	8001bae <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e020      	b.n	8001bf0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 020e 	bic.w	r2, r2, #14
 8001bbc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0201 	bic.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bdc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d005      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2204      	movs	r2, #4
 8001c16:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	e051      	b.n	8001cc2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 020e 	bic.w	r2, r2, #14
 8001c2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0201 	bic.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a22      	ldr	r2, [pc, #136]	; (8001ccc <HAL_DMA_Abort_IT+0xd0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d029      	beq.n	8001c9c <HAL_DMA_Abort_IT+0xa0>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a20      	ldr	r2, [pc, #128]	; (8001cd0 <HAL_DMA_Abort_IT+0xd4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d022      	beq.n	8001c98 <HAL_DMA_Abort_IT+0x9c>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <HAL_DMA_Abort_IT+0xd8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d01a      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x96>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1d      	ldr	r2, [pc, #116]	; (8001cd8 <HAL_DMA_Abort_IT+0xdc>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d012      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x90>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a1c      	ldr	r2, [pc, #112]	; (8001cdc <HAL_DMA_Abort_IT+0xe0>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d00a      	beq.n	8001c86 <HAL_DMA_Abort_IT+0x8a>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a1a      	ldr	r2, [pc, #104]	; (8001ce0 <HAL_DMA_Abort_IT+0xe4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d102      	bne.n	8001c80 <HAL_DMA_Abort_IT+0x84>
 8001c7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c7e:	e00e      	b.n	8001c9e <HAL_DMA_Abort_IT+0xa2>
 8001c80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c84:	e00b      	b.n	8001c9e <HAL_DMA_Abort_IT+0xa2>
 8001c86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c8a:	e008      	b.n	8001c9e <HAL_DMA_Abort_IT+0xa2>
 8001c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c90:	e005      	b.n	8001c9e <HAL_DMA_Abort_IT+0xa2>
 8001c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c96:	e002      	b.n	8001c9e <HAL_DMA_Abort_IT+0xa2>
 8001c98:	2310      	movs	r3, #16
 8001c9a:	e000      	b.n	8001c9e <HAL_DMA_Abort_IT+0xa2>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	4a11      	ldr	r2, [pc, #68]	; (8001ce4 <HAL_DMA_Abort_IT+0xe8>)
 8001ca0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	4798      	blx	r3
    } 
  }
  return status;
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40020008 	.word	0x40020008
 8001cd0:	4002001c 	.word	0x4002001c
 8001cd4:	40020030 	.word	0x40020030
 8001cd8:	40020044 	.word	0x40020044
 8001cdc:	40020058 	.word	0x40020058
 8001ce0:	4002006c 	.word	0x4002006c
 8001ce4:	40020000 	.word	0x40020000

08001ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b08b      	sub	sp, #44	; 0x2c
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfa:	e169      	b.n	8001fd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	f040 8158 	bne.w	8001fca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4a9a      	ldr	r2, [pc, #616]	; (8001f88 <HAL_GPIO_Init+0x2a0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d05e      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d24:	4a98      	ldr	r2, [pc, #608]	; (8001f88 <HAL_GPIO_Init+0x2a0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d875      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d2a:	4a98      	ldr	r2, [pc, #608]	; (8001f8c <HAL_GPIO_Init+0x2a4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d058      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d30:	4a96      	ldr	r2, [pc, #600]	; (8001f8c <HAL_GPIO_Init+0x2a4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d86f      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d36:	4a96      	ldr	r2, [pc, #600]	; (8001f90 <HAL_GPIO_Init+0x2a8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d052      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d3c:	4a94      	ldr	r2, [pc, #592]	; (8001f90 <HAL_GPIO_Init+0x2a8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d869      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d42:	4a94      	ldr	r2, [pc, #592]	; (8001f94 <HAL_GPIO_Init+0x2ac>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d04c      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d48:	4a92      	ldr	r2, [pc, #584]	; (8001f94 <HAL_GPIO_Init+0x2ac>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d863      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d4e:	4a92      	ldr	r2, [pc, #584]	; (8001f98 <HAL_GPIO_Init+0x2b0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d046      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d54:	4a90      	ldr	r2, [pc, #576]	; (8001f98 <HAL_GPIO_Init+0x2b0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d85d      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d5a:	2b12      	cmp	r3, #18
 8001d5c:	d82a      	bhi.n	8001db4 <HAL_GPIO_Init+0xcc>
 8001d5e:	2b12      	cmp	r3, #18
 8001d60:	d859      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d62:	a201      	add	r2, pc, #4	; (adr r2, 8001d68 <HAL_GPIO_Init+0x80>)
 8001d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d68:	08001de3 	.word	0x08001de3
 8001d6c:	08001dbd 	.word	0x08001dbd
 8001d70:	08001dcf 	.word	0x08001dcf
 8001d74:	08001e11 	.word	0x08001e11
 8001d78:	08001e17 	.word	0x08001e17
 8001d7c:	08001e17 	.word	0x08001e17
 8001d80:	08001e17 	.word	0x08001e17
 8001d84:	08001e17 	.word	0x08001e17
 8001d88:	08001e17 	.word	0x08001e17
 8001d8c:	08001e17 	.word	0x08001e17
 8001d90:	08001e17 	.word	0x08001e17
 8001d94:	08001e17 	.word	0x08001e17
 8001d98:	08001e17 	.word	0x08001e17
 8001d9c:	08001e17 	.word	0x08001e17
 8001da0:	08001e17 	.word	0x08001e17
 8001da4:	08001e17 	.word	0x08001e17
 8001da8:	08001e17 	.word	0x08001e17
 8001dac:	08001dc5 	.word	0x08001dc5
 8001db0:	08001dd9 	.word	0x08001dd9
 8001db4:	4a79      	ldr	r2, [pc, #484]	; (8001f9c <HAL_GPIO_Init+0x2b4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d013      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dba:	e02c      	b.n	8001e16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	623b      	str	r3, [r7, #32]
          break;
 8001dc2:	e029      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	623b      	str	r3, [r7, #32]
          break;
 8001dcc:	e024      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	3308      	adds	r3, #8
 8001dd4:	623b      	str	r3, [r7, #32]
          break;
 8001dd6:	e01f      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	330c      	adds	r3, #12
 8001dde:	623b      	str	r3, [r7, #32]
          break;
 8001de0:	e01a      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d102      	bne.n	8001df0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dea:	2304      	movs	r3, #4
 8001dec:	623b      	str	r3, [r7, #32]
          break;
 8001dee:	e013      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d105      	bne.n	8001e04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df8:	2308      	movs	r3, #8
 8001dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	611a      	str	r2, [r3, #16]
          break;
 8001e02:	e009      	b.n	8001e18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e04:	2308      	movs	r3, #8
 8001e06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	615a      	str	r2, [r3, #20]
          break;
 8001e0e:	e003      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
          break;
 8001e14:	e000      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          break;
 8001e16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2bff      	cmp	r3, #255	; 0xff
 8001e1c:	d801      	bhi.n	8001e22 <HAL_GPIO_Init+0x13a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	e001      	b.n	8001e26 <HAL_GPIO_Init+0x13e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3304      	adds	r3, #4
 8001e26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2bff      	cmp	r3, #255	; 0xff
 8001e2c:	d802      	bhi.n	8001e34 <HAL_GPIO_Init+0x14c>
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	e002      	b.n	8001e3a <HAL_GPIO_Init+0x152>
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	3b08      	subs	r3, #8
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	210f      	movs	r1, #15
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	6a39      	ldr	r1, [r7, #32]
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	fa01 f303 	lsl.w	r3, r1, r3
 8001e54:	431a      	orrs	r2, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 80b1 	beq.w	8001fca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e68:	4b4d      	ldr	r3, [pc, #308]	; (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	4a4c      	ldr	r2, [pc, #304]	; (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6193      	str	r3, [r2, #24]
 8001e74:	4b4a      	ldr	r3, [pc, #296]	; (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e80:	4a48      	ldr	r2, [pc, #288]	; (8001fa4 <HAL_GPIO_Init+0x2bc>)
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	089b      	lsrs	r3, r3, #2
 8001e86:	3302      	adds	r3, #2
 8001e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	220f      	movs	r2, #15
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a40      	ldr	r2, [pc, #256]	; (8001fa8 <HAL_GPIO_Init+0x2c0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d013      	beq.n	8001ed4 <HAL_GPIO_Init+0x1ec>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a3f      	ldr	r2, [pc, #252]	; (8001fac <HAL_GPIO_Init+0x2c4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d00d      	beq.n	8001ed0 <HAL_GPIO_Init+0x1e8>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a3e      	ldr	r2, [pc, #248]	; (8001fb0 <HAL_GPIO_Init+0x2c8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d007      	beq.n	8001ecc <HAL_GPIO_Init+0x1e4>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a3d      	ldr	r2, [pc, #244]	; (8001fb4 <HAL_GPIO_Init+0x2cc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d101      	bne.n	8001ec8 <HAL_GPIO_Init+0x1e0>
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e006      	b.n	8001ed6 <HAL_GPIO_Init+0x1ee>
 8001ec8:	2304      	movs	r3, #4
 8001eca:	e004      	b.n	8001ed6 <HAL_GPIO_Init+0x1ee>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e002      	b.n	8001ed6 <HAL_GPIO_Init+0x1ee>
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e000      	b.n	8001ed6 <HAL_GPIO_Init+0x1ee>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed8:	f002 0203 	and.w	r2, r2, #3
 8001edc:	0092      	lsls	r2, r2, #2
 8001ede:	4093      	lsls	r3, r2
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ee6:	492f      	ldr	r1, [pc, #188]	; (8001fa4 <HAL_GPIO_Init+0x2bc>)
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	3302      	adds	r3, #2
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d006      	beq.n	8001f0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f00:	4b2d      	ldr	r3, [pc, #180]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	492c      	ldr	r1, [pc, #176]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	600b      	str	r3, [r1, #0]
 8001f0c:	e006      	b.n	8001f1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f0e:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	4928      	ldr	r1, [pc, #160]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d006      	beq.n	8001f36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f28:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	4922      	ldr	r1, [pc, #136]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f36:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	491e      	ldr	r1, [pc, #120]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f50:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	4918      	ldr	r1, [pc, #96]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	608b      	str	r3, [r1, #8]
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	4914      	ldr	r1, [pc, #80]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d021      	beq.n	8001fbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	490e      	ldr	r1, [pc, #56]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	60cb      	str	r3, [r1, #12]
 8001f84:	e021      	b.n	8001fca <HAL_GPIO_Init+0x2e2>
 8001f86:	bf00      	nop
 8001f88:	10320000 	.word	0x10320000
 8001f8c:	10310000 	.word	0x10310000
 8001f90:	10220000 	.word	0x10220000
 8001f94:	10210000 	.word	0x10210000
 8001f98:	10120000 	.word	0x10120000
 8001f9c:	10110000 	.word	0x10110000
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40010000 	.word	0x40010000
 8001fa8:	40010800 	.word	0x40010800
 8001fac:	40010c00 	.word	0x40010c00
 8001fb0:	40011000 	.word	0x40011000
 8001fb4:	40011400 	.word	0x40011400
 8001fb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_GPIO_Init+0x304>)
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	4909      	ldr	r1, [pc, #36]	; (8001fec <HAL_GPIO_Init+0x304>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	3301      	adds	r3, #1
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f47f ae8e 	bne.w	8001cfc <HAL_GPIO_Init+0x14>
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	372c      	adds	r7, #44	; 0x2c
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	40010400 	.word	0x40010400

08001ff0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	887b      	ldrh	r3, [r7, #2]
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d002      	beq.n	800200e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002008:	2301      	movs	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
 800200c:	e001      	b.n	8002012 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800200e:	2300      	movs	r3, #0
 8002010:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002012:	7bfb      	ldrb	r3, [r7, #15]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	807b      	strh	r3, [r7, #2]
 800202a:	4613      	mov	r3, r2
 800202c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800202e:	787b      	ldrb	r3, [r7, #1]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002034:	887a      	ldrh	r2, [r7, #2]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800203a:	e003      	b.n	8002044 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800203c:	887b      	ldrh	r3, [r7, #2]
 800203e:	041a      	lsls	r2, r3, #16
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	611a      	str	r2, [r3, #16]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr
	...

08002050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e26c      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 8087 	beq.w	800217e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002070:	4b92      	ldr	r3, [pc, #584]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 030c 	and.w	r3, r3, #12
 8002078:	2b04      	cmp	r3, #4
 800207a:	d00c      	beq.n	8002096 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800207c:	4b8f      	ldr	r3, [pc, #572]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b08      	cmp	r3, #8
 8002086:	d112      	bne.n	80020ae <HAL_RCC_OscConfig+0x5e>
 8002088:	4b8c      	ldr	r3, [pc, #560]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002094:	d10b      	bne.n	80020ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002096:	4b89      	ldr	r3, [pc, #548]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d06c      	beq.n	800217c <HAL_RCC_OscConfig+0x12c>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d168      	bne.n	800217c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e246      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b6:	d106      	bne.n	80020c6 <HAL_RCC_OscConfig+0x76>
 80020b8:	4b80      	ldr	r3, [pc, #512]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a7f      	ldr	r2, [pc, #508]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	e02e      	b.n	8002124 <HAL_RCC_OscConfig+0xd4>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x98>
 80020ce:	4b7b      	ldr	r3, [pc, #492]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a7a      	ldr	r2, [pc, #488]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b78      	ldr	r3, [pc, #480]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a77      	ldr	r2, [pc, #476]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e01d      	b.n	8002124 <HAL_RCC_OscConfig+0xd4>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020f0:	d10c      	bne.n	800210c <HAL_RCC_OscConfig+0xbc>
 80020f2:	4b72      	ldr	r3, [pc, #456]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a71      	ldr	r2, [pc, #452]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	4b6f      	ldr	r3, [pc, #444]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a6e      	ldr	r2, [pc, #440]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	e00b      	b.n	8002124 <HAL_RCC_OscConfig+0xd4>
 800210c:	4b6b      	ldr	r3, [pc, #428]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a6a      	ldr	r2, [pc, #424]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	4b68      	ldr	r3, [pc, #416]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a67      	ldr	r2, [pc, #412]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800211e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002122:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d013      	beq.n	8002154 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7ff fc14 	bl	8001958 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002134:	f7ff fc10 	bl	8001958 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	; 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e1fa      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	4b5d      	ldr	r3, [pc, #372]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0xe4>
 8002152:	e014      	b.n	800217e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7ff fc00 	bl	8001958 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800215c:	f7ff fbfc 	bl	8001958 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b64      	cmp	r3, #100	; 0x64
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e1e6      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216e:	4b53      	ldr	r3, [pc, #332]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x10c>
 800217a:	e000      	b.n	800217e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d063      	beq.n	8002252 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800218a:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00b      	beq.n	80021ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002196:	4b49      	ldr	r3, [pc, #292]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d11c      	bne.n	80021dc <HAL_RCC_OscConfig+0x18c>
 80021a2:	4b46      	ldr	r3, [pc, #280]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d116      	bne.n	80021dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ae:	4b43      	ldr	r3, [pc, #268]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d005      	beq.n	80021c6 <HAL_RCC_OscConfig+0x176>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d001      	beq.n	80021c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e1ba      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c6:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4939      	ldr	r1, [pc, #228]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021da:	e03a      	b.n	8002252 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d020      	beq.n	8002226 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e4:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7ff fbb5 	bl	8001958 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f2:	f7ff fbb1 	bl	8001958 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e19b      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002204:	4b2d      	ldr	r3, [pc, #180]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002210:	4b2a      	ldr	r3, [pc, #168]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4927      	ldr	r1, [pc, #156]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002220:	4313      	orrs	r3, r2
 8002222:	600b      	str	r3, [r1, #0]
 8002224:	e015      	b.n	8002252 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7ff fb94 	bl	8001958 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002234:	f7ff fb90 	bl	8001958 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e17a      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d03a      	beq.n	80022d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d019      	beq.n	800229a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002266:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 8002268:	2201      	movs	r2, #1
 800226a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226c:	f7ff fb74 	bl	8001958 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002274:	f7ff fb70 	bl	8001958 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e15a      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002286:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002292:	2001      	movs	r0, #1
 8002294:	f000 fad8 	bl	8002848 <RCC_Delay>
 8002298:	e01c      	b.n	80022d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a0:	f7ff fb5a 	bl	8001958 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a6:	e00f      	b.n	80022c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a8:	f7ff fb56 	bl	8001958 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d908      	bls.n	80022c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e140      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	42420000 	.word	0x42420000
 80022c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c8:	4b9e      	ldr	r3, [pc, #632]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1e9      	bne.n	80022a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80a6 	beq.w	800242e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022e6:	4b97      	ldr	r3, [pc, #604]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10d      	bne.n	800230e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	4b94      	ldr	r3, [pc, #592]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	4a93      	ldr	r2, [pc, #588]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fc:	61d3      	str	r3, [r2, #28]
 80022fe:	4b91      	ldr	r3, [pc, #580]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800230a:	2301      	movs	r3, #1
 800230c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230e:	4b8e      	ldr	r3, [pc, #568]	; (8002548 <HAL_RCC_OscConfig+0x4f8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002316:	2b00      	cmp	r3, #0
 8002318:	d118      	bne.n	800234c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800231a:	4b8b      	ldr	r3, [pc, #556]	; (8002548 <HAL_RCC_OscConfig+0x4f8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a8a      	ldr	r2, [pc, #552]	; (8002548 <HAL_RCC_OscConfig+0x4f8>)
 8002320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002326:	f7ff fb17 	bl	8001958 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800232e:	f7ff fb13 	bl	8001958 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b64      	cmp	r3, #100	; 0x64
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e0fd      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	4b81      	ldr	r3, [pc, #516]	; (8002548 <HAL_RCC_OscConfig+0x4f8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d106      	bne.n	8002362 <HAL_RCC_OscConfig+0x312>
 8002354:	4b7b      	ldr	r3, [pc, #492]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4a7a      	ldr	r2, [pc, #488]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6213      	str	r3, [r2, #32]
 8002360:	e02d      	b.n	80023be <HAL_RCC_OscConfig+0x36e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x334>
 800236a:	4b76      	ldr	r3, [pc, #472]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4a75      	ldr	r2, [pc, #468]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002370:	f023 0301 	bic.w	r3, r3, #1
 8002374:	6213      	str	r3, [r2, #32]
 8002376:	4b73      	ldr	r3, [pc, #460]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	4a72      	ldr	r2, [pc, #456]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800237c:	f023 0304 	bic.w	r3, r3, #4
 8002380:	6213      	str	r3, [r2, #32]
 8002382:	e01c      	b.n	80023be <HAL_RCC_OscConfig+0x36e>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b05      	cmp	r3, #5
 800238a:	d10c      	bne.n	80023a6 <HAL_RCC_OscConfig+0x356>
 800238c:	4b6d      	ldr	r3, [pc, #436]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	4a6c      	ldr	r2, [pc, #432]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	6213      	str	r3, [r2, #32]
 8002398:	4b6a      	ldr	r3, [pc, #424]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4a69      	ldr	r2, [pc, #420]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6213      	str	r3, [r2, #32]
 80023a4:	e00b      	b.n	80023be <HAL_RCC_OscConfig+0x36e>
 80023a6:	4b67      	ldr	r3, [pc, #412]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4a66      	ldr	r2, [pc, #408]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	6213      	str	r3, [r2, #32]
 80023b2:	4b64      	ldr	r3, [pc, #400]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4a63      	ldr	r2, [pc, #396]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80023b8:	f023 0304 	bic.w	r3, r3, #4
 80023bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d015      	beq.n	80023f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c6:	f7ff fac7 	bl	8001958 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023cc:	e00a      	b.n	80023e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ce:	f7ff fac3 	bl	8001958 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023dc:	4293      	cmp	r3, r2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e0ab      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e4:	4b57      	ldr	r3, [pc, #348]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0ee      	beq.n	80023ce <HAL_RCC_OscConfig+0x37e>
 80023f0:	e014      	b.n	800241c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f2:	f7ff fab1 	bl	8001958 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f8:	e00a      	b.n	8002410 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f7ff faad 	bl	8001958 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	; 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e095      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002410:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1ee      	bne.n	80023fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800241c:	7dfb      	ldrb	r3, [r7, #23]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d105      	bne.n	800242e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002422:	4b48      	ldr	r3, [pc, #288]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	4a47      	ldr	r2, [pc, #284]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800242c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 8081 	beq.w	800253a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002438:	4b42      	ldr	r3, [pc, #264]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b08      	cmp	r3, #8
 8002442:	d061      	beq.n	8002508 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	2b02      	cmp	r3, #2
 800244a:	d146      	bne.n	80024da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244c:	4b3f      	ldr	r3, [pc, #252]	; (800254c <HAL_RCC_OscConfig+0x4fc>)
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002452:	f7ff fa81 	bl	8001958 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245a:	f7ff fa7d 	bl	8001958 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e067      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246c:	4b35      	ldr	r3, [pc, #212]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f0      	bne.n	800245a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002480:	d108      	bne.n	8002494 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002482:	4b30      	ldr	r3, [pc, #192]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	492d      	ldr	r1, [pc, #180]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002494:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a19      	ldr	r1, [r3, #32]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	430b      	orrs	r3, r1
 80024a6:	4927      	ldr	r1, [pc, #156]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ac:	4b27      	ldr	r3, [pc, #156]	; (800254c <HAL_RCC_OscConfig+0x4fc>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7ff fa51 	bl	8001958 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ba:	f7ff fa4d 	bl	8001958 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e037      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024cc:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0f0      	beq.n	80024ba <HAL_RCC_OscConfig+0x46a>
 80024d8:	e02f      	b.n	800253a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024da:	4b1c      	ldr	r3, [pc, #112]	; (800254c <HAL_RCC_OscConfig+0x4fc>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7ff fa3a 	bl	8001958 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e8:	f7ff fa36 	bl	8001958 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e020      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x498>
 8002506:	e018      	b.n	800253a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e013      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	429a      	cmp	r2, r3
 8002526:	d106      	bne.n	8002536 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d001      	beq.n	800253a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40021000 	.word	0x40021000
 8002548:	40007000 	.word	0x40007000
 800254c:	42420060 	.word	0x42420060

08002550 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0d0      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002564:	4b6a      	ldr	r3, [pc, #424]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d910      	bls.n	8002594 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002572:	4b67      	ldr	r3, [pc, #412]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 0207 	bic.w	r2, r3, #7
 800257a:	4965      	ldr	r1, [pc, #404]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	4b63      	ldr	r3, [pc, #396]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0b8      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d020      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025ac:	4b59      	ldr	r3, [pc, #356]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4a58      	ldr	r2, [pc, #352]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c4:	4b53      	ldr	r3, [pc, #332]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4a52      	ldr	r2, [pc, #328]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d0:	4b50      	ldr	r3, [pc, #320]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	494d      	ldr	r1, [pc, #308]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d040      	beq.n	8002670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	4b47      	ldr	r3, [pc, #284]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d115      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e07f      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260e:	4b41      	ldr	r3, [pc, #260]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e073      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261e:	4b3d      	ldr	r3, [pc, #244]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e06b      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262e:	4b39      	ldr	r3, [pc, #228]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f023 0203 	bic.w	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4936      	ldr	r1, [pc, #216]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	4313      	orrs	r3, r2
 800263e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002640:	f7ff f98a 	bl	8001958 <HAL_GetTick>
 8002644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002646:	e00a      	b.n	800265e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002648:	f7ff f986 	bl	8001958 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	f241 3288 	movw	r2, #5000	; 0x1388
 8002656:	4293      	cmp	r3, r2
 8002658:	d901      	bls.n	800265e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e053      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265e:	4b2d      	ldr	r3, [pc, #180]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 020c 	and.w	r2, r3, #12
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	429a      	cmp	r2, r3
 800266e:	d1eb      	bne.n	8002648 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002670:	4b27      	ldr	r3, [pc, #156]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d210      	bcs.n	80026a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b24      	ldr	r3, [pc, #144]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 0207 	bic.w	r2, r3, #7
 8002686:	4922      	ldr	r1, [pc, #136]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	4b20      	ldr	r3, [pc, #128]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e032      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4916      	ldr	r1, [pc, #88]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026ca:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	490e      	ldr	r1, [pc, #56]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026de:	f000 f821 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 80026e2:	4602      	mov	r2, r0
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	091b      	lsrs	r3, r3, #4
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	490a      	ldr	r1, [pc, #40]	; (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 80026f0:	5ccb      	ldrb	r3, [r1, r3]
 80026f2:	fa22 f303 	lsr.w	r3, r2, r3
 80026f6:	4a09      	ldr	r2, [pc, #36]	; (800271c <HAL_RCC_ClockConfig+0x1cc>)
 80026f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <HAL_RCC_ClockConfig+0x1d0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff f8e8 	bl	80018d4 <HAL_InitTick>

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40022000 	.word	0x40022000
 8002714:	40021000 	.word	0x40021000
 8002718:	08004bf8 	.word	0x08004bf8
 800271c:	20000024 	.word	0x20000024
 8002720:	20000028 	.word	0x20000028

08002724 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002724:	b490      	push	{r4, r7}
 8002726:	b08a      	sub	sp, #40	; 0x28
 8002728:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800272a:	4b2a      	ldr	r3, [pc, #168]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800272c:	1d3c      	adds	r4, r7, #4
 800272e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002734:	f240 2301 	movw	r3, #513	; 0x201
 8002738:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800274a:	2300      	movs	r3, #0
 800274c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800274e:	4b22      	ldr	r3, [pc, #136]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b04      	cmp	r3, #4
 800275c:	d002      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x40>
 800275e:	2b08      	cmp	r3, #8
 8002760:	d003      	beq.n	800276a <HAL_RCC_GetSysClockFreq+0x46>
 8002762:	e02d      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002764:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002766:	623b      	str	r3, [r7, #32]
      break;
 8002768:	e02d      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	0c9b      	lsrs	r3, r3, #18
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002776:	4413      	add	r3, r2
 8002778:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800277c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d013      	beq.n	80027b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002788:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	0c5b      	lsrs	r3, r3, #17
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002796:	4413      	add	r3, r2
 8002798:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800279c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80027a2:	fb02 f203 	mul.w	r2, r2, r3
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
 80027ae:	e004      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	4a0b      	ldr	r2, [pc, #44]	; (80027e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027b4:	fb02 f303 	mul.w	r3, r2, r3
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	623b      	str	r3, [r7, #32]
      break;
 80027be:	e002      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80027c2:	623b      	str	r3, [r7, #32]
      break;
 80027c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027c6:	6a3b      	ldr	r3, [r7, #32]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3728      	adds	r7, #40	; 0x28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc90      	pop	{r4, r7}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	08004be8 	.word	0x08004be8
 80027d8:	40021000 	.word	0x40021000
 80027dc:	007a1200 	.word	0x007a1200
 80027e0:	003d0900 	.word	0x003d0900

080027e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e8:	4b02      	ldr	r3, [pc, #8]	; (80027f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	20000024 	.word	0x20000024

080027f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027fc:	f7ff fff2 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 8002800:	4602      	mov	r2, r0
 8002802:	4b05      	ldr	r3, [pc, #20]	; (8002818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	4903      	ldr	r1, [pc, #12]	; (800281c <HAL_RCC_GetPCLK1Freq+0x24>)
 800280e:	5ccb      	ldrb	r3, [r1, r3]
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002814:	4618      	mov	r0, r3
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000
 800281c:	08004c08 	.word	0x08004c08

08002820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002824:	f7ff ffde 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 8002828:	4602      	mov	r2, r0
 800282a:	4b05      	ldr	r3, [pc, #20]	; (8002840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	0adb      	lsrs	r3, r3, #11
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	4903      	ldr	r1, [pc, #12]	; (8002844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002836:	5ccb      	ldrb	r3, [r1, r3]
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800283c:	4618      	mov	r0, r3
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000
 8002844:	08004c08 	.word	0x08004c08

08002848 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002850:	4b0a      	ldr	r3, [pc, #40]	; (800287c <RCC_Delay+0x34>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <RCC_Delay+0x38>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	0a5b      	lsrs	r3, r3, #9
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	fb02 f303 	mul.w	r3, r2, r3
 8002862:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002864:	bf00      	nop
  }
  while (Delay --);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1e5a      	subs	r2, r3, #1
 800286a:	60fa      	str	r2, [r7, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f9      	bne.n	8002864 <RCC_Delay+0x1c>
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	20000024 	.word	0x20000024
 8002880:	10624dd3 	.word	0x10624dd3

08002884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e041      	b.n	800291a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe fed8 	bl	8001660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3304      	adds	r3, #4
 80028c0:	4619      	mov	r1, r3
 80028c2:	4610      	mov	r0, r2
 80028c4:	f000 fc28 	bl	8003118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d001      	beq.n	800293c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e03a      	b.n	80029b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a18      	ldr	r2, [pc, #96]	; (80029bc <HAL_TIM_Base_Start_IT+0x98>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d00e      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x58>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002966:	d009      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x58>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a14      	ldr	r2, [pc, #80]	; (80029c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x58>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a13      	ldr	r2, [pc, #76]	; (80029c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d111      	bne.n	80029a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b06      	cmp	r3, #6
 800298c:	d010      	beq.n	80029b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0201 	orr.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800299e:	e007      	b.n	80029b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	40012c00 	.word	0x40012c00
 80029c0:	40000400 	.word	0x40000400
 80029c4:	40000800 	.word	0x40000800

080029c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e041      	b.n	8002a5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f839 	bl	8002a66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3304      	adds	r3, #4
 8002a04:	4619      	mov	r1, r3
 8002a06:	4610      	mov	r0, r2
 8002a08:	f000 fb86 	bl	8003118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d109      	bne.n	8002a9c <HAL_TIM_PWM_Start+0x24>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	bf14      	ite	ne
 8002a94:	2301      	movne	r3, #1
 8002a96:	2300      	moveq	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	e022      	b.n	8002ae2 <HAL_TIM_PWM_Start+0x6a>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d109      	bne.n	8002ab6 <HAL_TIM_PWM_Start+0x3e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	bf14      	ite	ne
 8002aae:	2301      	movne	r3, #1
 8002ab0:	2300      	moveq	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	e015      	b.n	8002ae2 <HAL_TIM_PWM_Start+0x6a>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d109      	bne.n	8002ad0 <HAL_TIM_PWM_Start+0x58>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	bf14      	ite	ne
 8002ac8:	2301      	movne	r3, #1
 8002aca:	2300      	moveq	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	e008      	b.n	8002ae2 <HAL_TIM_PWM_Start+0x6a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	bf14      	ite	ne
 8002adc:	2301      	movne	r3, #1
 8002ade:	2300      	moveq	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e05e      	b.n	8002ba8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d104      	bne.n	8002afa <HAL_TIM_PWM_Start+0x82>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af8:	e013      	b.n	8002b22 <HAL_TIM_PWM_Start+0xaa>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d104      	bne.n	8002b0a <HAL_TIM_PWM_Start+0x92>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b08:	e00b      	b.n	8002b22 <HAL_TIM_PWM_Start+0xaa>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d104      	bne.n	8002b1a <HAL_TIM_PWM_Start+0xa2>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b18:	e003      	b.n	8002b22 <HAL_TIM_PWM_Start+0xaa>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2201      	movs	r2, #1
 8002b28:	6839      	ldr	r1, [r7, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fd74 	bl	8003618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1e      	ldr	r2, [pc, #120]	; (8002bb0 <HAL_TIM_PWM_Start+0x138>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d107      	bne.n	8002b4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a18      	ldr	r2, [pc, #96]	; (8002bb0 <HAL_TIM_PWM_Start+0x138>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d00e      	beq.n	8002b72 <HAL_TIM_PWM_Start+0xfa>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5c:	d009      	beq.n	8002b72 <HAL_TIM_PWM_Start+0xfa>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a14      	ldr	r2, [pc, #80]	; (8002bb4 <HAL_TIM_PWM_Start+0x13c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d004      	beq.n	8002b72 <HAL_TIM_PWM_Start+0xfa>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <HAL_TIM_PWM_Start+0x140>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d111      	bne.n	8002b96 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b06      	cmp	r3, #6
 8002b82:	d010      	beq.n	8002ba6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b94:	e007      	b.n	8002ba6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0201 	orr.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40012c00 	.word	0x40012c00
 8002bb4:	40000400 	.word	0x40000400
 8002bb8:	40000800 	.word	0x40000800

08002bbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d122      	bne.n	8002c18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d11b      	bne.n	8002c18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0202 	mvn.w	r2, #2
 8002be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fa6f 	bl	80030e2 <HAL_TIM_IC_CaptureCallback>
 8002c04:	e005      	b.n	8002c12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fa62 	bl	80030d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 fa71 	bl	80030f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d122      	bne.n	8002c6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d11b      	bne.n	8002c6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0204 	mvn.w	r2, #4
 8002c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2202      	movs	r2, #2
 8002c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fa45 	bl	80030e2 <HAL_TIM_IC_CaptureCallback>
 8002c58:	e005      	b.n	8002c66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fa38 	bl	80030d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 fa47 	bl	80030f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d122      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d11b      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0208 	mvn.w	r2, #8
 8002c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2204      	movs	r2, #4
 8002c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 fa1b 	bl	80030e2 <HAL_TIM_IC_CaptureCallback>
 8002cac:	e005      	b.n	8002cba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fa0e 	bl	80030d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 fa1d 	bl	80030f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b10      	cmp	r3, #16
 8002ccc:	d122      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	2b10      	cmp	r3, #16
 8002cda:	d11b      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0210 	mvn.w	r2, #16
 8002ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2208      	movs	r2, #8
 8002cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f9f1 	bl	80030e2 <HAL_TIM_IC_CaptureCallback>
 8002d00:	e005      	b.n	8002d0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f9e4 	bl	80030d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f9f3 	bl	80030f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d10e      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d107      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0201 	mvn.w	r2, #1
 8002d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fe fbfc 	bl	8001538 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4a:	2b80      	cmp	r3, #128	; 0x80
 8002d4c:	d10e      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d58:	2b80      	cmp	r3, #128	; 0x80
 8002d5a:	d107      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fce1 	bl	800372e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d76:	2b40      	cmp	r3, #64	; 0x40
 8002d78:	d10e      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d84:	2b40      	cmp	r3, #64	; 0x40
 8002d86:	d107      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f9b7 	bl	8003106 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b20      	cmp	r3, #32
 8002da4:	d10e      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	d107      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0220 	mvn.w	r2, #32
 8002dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fcac 	bl	800371c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e0ac      	b.n	8002f40 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b0c      	cmp	r3, #12
 8002df2:	f200 809f 	bhi.w	8002f34 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002df6:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfc:	08002e31 	.word	0x08002e31
 8002e00:	08002f35 	.word	0x08002f35
 8002e04:	08002f35 	.word	0x08002f35
 8002e08:	08002f35 	.word	0x08002f35
 8002e0c:	08002e71 	.word	0x08002e71
 8002e10:	08002f35 	.word	0x08002f35
 8002e14:	08002f35 	.word	0x08002f35
 8002e18:	08002f35 	.word	0x08002f35
 8002e1c:	08002eb3 	.word	0x08002eb3
 8002e20:	08002f35 	.word	0x08002f35
 8002e24:	08002f35 	.word	0x08002f35
 8002e28:	08002f35 	.word	0x08002f35
 8002e2c:	08002ef3 	.word	0x08002ef3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 f9d0 	bl	80031dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0208 	orr.w	r2, r2, #8
 8002e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699a      	ldr	r2, [r3, #24]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0204 	bic.w	r2, r2, #4
 8002e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6999      	ldr	r1, [r3, #24]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	619a      	str	r2, [r3, #24]
      break;
 8002e6e:	e062      	b.n	8002f36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fa16 	bl	80032a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699a      	ldr	r2, [r3, #24]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6999      	ldr	r1, [r3, #24]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	021a      	lsls	r2, r3, #8
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	619a      	str	r2, [r3, #24]
      break;
 8002eb0:	e041      	b.n	8002f36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68b9      	ldr	r1, [r7, #8]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 fa5f 	bl	800337c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	69da      	ldr	r2, [r3, #28]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0208 	orr.w	r2, r2, #8
 8002ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	69da      	ldr	r2, [r3, #28]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0204 	bic.w	r2, r2, #4
 8002edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69d9      	ldr	r1, [r3, #28]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	61da      	str	r2, [r3, #28]
      break;
 8002ef0:	e021      	b.n	8002f36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68b9      	ldr	r1, [r7, #8]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 faa9 	bl	8003450 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	69da      	ldr	r2, [r3, #28]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	69da      	ldr	r2, [r3, #28]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69d9      	ldr	r1, [r3, #28]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	021a      	lsls	r2, r3, #8
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	61da      	str	r2, [r3, #28]
      break;
 8002f32:	e000      	b.n	8002f36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002f34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_TIM_ConfigClockSource+0x18>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e0b3      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x180>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f98:	d03e      	beq.n	8003018 <HAL_TIM_ConfigClockSource+0xd0>
 8002f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f9e:	f200 8087 	bhi.w	80030b0 <HAL_TIM_ConfigClockSource+0x168>
 8002fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa6:	f000 8085 	beq.w	80030b4 <HAL_TIM_ConfigClockSource+0x16c>
 8002faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fae:	d87f      	bhi.n	80030b0 <HAL_TIM_ConfigClockSource+0x168>
 8002fb0:	2b70      	cmp	r3, #112	; 0x70
 8002fb2:	d01a      	beq.n	8002fea <HAL_TIM_ConfigClockSource+0xa2>
 8002fb4:	2b70      	cmp	r3, #112	; 0x70
 8002fb6:	d87b      	bhi.n	80030b0 <HAL_TIM_ConfigClockSource+0x168>
 8002fb8:	2b60      	cmp	r3, #96	; 0x60
 8002fba:	d050      	beq.n	800305e <HAL_TIM_ConfigClockSource+0x116>
 8002fbc:	2b60      	cmp	r3, #96	; 0x60
 8002fbe:	d877      	bhi.n	80030b0 <HAL_TIM_ConfigClockSource+0x168>
 8002fc0:	2b50      	cmp	r3, #80	; 0x50
 8002fc2:	d03c      	beq.n	800303e <HAL_TIM_ConfigClockSource+0xf6>
 8002fc4:	2b50      	cmp	r3, #80	; 0x50
 8002fc6:	d873      	bhi.n	80030b0 <HAL_TIM_ConfigClockSource+0x168>
 8002fc8:	2b40      	cmp	r3, #64	; 0x40
 8002fca:	d058      	beq.n	800307e <HAL_TIM_ConfigClockSource+0x136>
 8002fcc:	2b40      	cmp	r3, #64	; 0x40
 8002fce:	d86f      	bhi.n	80030b0 <HAL_TIM_ConfigClockSource+0x168>
 8002fd0:	2b30      	cmp	r3, #48	; 0x30
 8002fd2:	d064      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x156>
 8002fd4:	2b30      	cmp	r3, #48	; 0x30
 8002fd6:	d86b      	bhi.n	80030b0 <HAL_TIM_ConfigClockSource+0x168>
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d060      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x156>
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d867      	bhi.n	80030b0 <HAL_TIM_ConfigClockSource+0x168>
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d05c      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x156>
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d05a      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002fe8:	e062      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6899      	ldr	r1, [r3, #8]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f000 faee 	bl	80035da <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800300c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	609a      	str	r2, [r3, #8]
      break;
 8003016:	e04e      	b.n	80030b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6818      	ldr	r0, [r3, #0]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	6899      	ldr	r1, [r3, #8]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f000 fad7 	bl	80035da <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800303a:	609a      	str	r2, [r3, #8]
      break;
 800303c:	e03b      	b.n	80030b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6859      	ldr	r1, [r3, #4]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	461a      	mov	r2, r3
 800304c:	f000 fa4e 	bl	80034ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2150      	movs	r1, #80	; 0x50
 8003056:	4618      	mov	r0, r3
 8003058:	f000 faa5 	bl	80035a6 <TIM_ITRx_SetConfig>
      break;
 800305c:	e02b      	b.n	80030b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6859      	ldr	r1, [r3, #4]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	461a      	mov	r2, r3
 800306c:	f000 fa6c 	bl	8003548 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2160      	movs	r1, #96	; 0x60
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fa95 	bl	80035a6 <TIM_ITRx_SetConfig>
      break;
 800307c:	e01b      	b.n	80030b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	6859      	ldr	r1, [r3, #4]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	461a      	mov	r2, r3
 800308c:	f000 fa2e 	bl	80034ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2140      	movs	r1, #64	; 0x40
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fa85 	bl	80035a6 <TIM_ITRx_SetConfig>
      break;
 800309c:	e00b      	b.n	80030b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4619      	mov	r1, r3
 80030a8:	4610      	mov	r0, r2
 80030aa:	f000 fa7c 	bl	80035a6 <TIM_ITRx_SetConfig>
        break;
 80030ae:	e002      	b.n	80030b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030b0:	bf00      	nop
 80030b2:	e000      	b.n	80030b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr

08003106 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a29      	ldr	r2, [pc, #164]	; (80031d0 <TIM_Base_SetConfig+0xb8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00b      	beq.n	8003148 <TIM_Base_SetConfig+0x30>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003136:	d007      	beq.n	8003148 <TIM_Base_SetConfig+0x30>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a26      	ldr	r2, [pc, #152]	; (80031d4 <TIM_Base_SetConfig+0xbc>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d003      	beq.n	8003148 <TIM_Base_SetConfig+0x30>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a25      	ldr	r2, [pc, #148]	; (80031d8 <TIM_Base_SetConfig+0xc0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d108      	bne.n	800315a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a1c      	ldr	r2, [pc, #112]	; (80031d0 <TIM_Base_SetConfig+0xb8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00b      	beq.n	800317a <TIM_Base_SetConfig+0x62>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003168:	d007      	beq.n	800317a <TIM_Base_SetConfig+0x62>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a19      	ldr	r2, [pc, #100]	; (80031d4 <TIM_Base_SetConfig+0xbc>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d003      	beq.n	800317a <TIM_Base_SetConfig+0x62>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a18      	ldr	r2, [pc, #96]	; (80031d8 <TIM_Base_SetConfig+0xc0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d108      	bne.n	800318c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4313      	orrs	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a07      	ldr	r2, [pc, #28]	; (80031d0 <TIM_Base_SetConfig+0xb8>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d103      	bne.n	80031c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	615a      	str	r2, [r3, #20]
}
 80031c6:	bf00      	nop
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr
 80031d0:	40012c00 	.word	0x40012c00
 80031d4:	40000400 	.word	0x40000400
 80031d8:	40000800 	.word	0x40000800

080031dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	f023 0201 	bic.w	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 0303 	bic.w	r3, r3, #3
 8003212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f023 0302 	bic.w	r3, r3, #2
 8003224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4313      	orrs	r3, r2
 800322e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a1c      	ldr	r2, [pc, #112]	; (80032a4 <TIM_OC1_SetConfig+0xc8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d10c      	bne.n	8003252 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f023 0308 	bic.w	r3, r3, #8
 800323e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	4313      	orrs	r3, r2
 8003248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f023 0304 	bic.w	r3, r3, #4
 8003250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a13      	ldr	r2, [pc, #76]	; (80032a4 <TIM_OC1_SetConfig+0xc8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d111      	bne.n	800327e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	621a      	str	r2, [r3, #32]
}
 8003298:	bf00      	nop
 800329a:	371c      	adds	r7, #28
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40012c00 	.word	0x40012c00

080032a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	f023 0210 	bic.w	r2, r3, #16
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	021b      	lsls	r3, r3, #8
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f023 0320 	bic.w	r3, r3, #32
 80032f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a1d      	ldr	r2, [pc, #116]	; (8003378 <TIM_OC2_SetConfig+0xd0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d10d      	bne.n	8003324 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800330e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003322:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a14      	ldr	r2, [pc, #80]	; (8003378 <TIM_OC2_SetConfig+0xd0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d113      	bne.n	8003354 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003332:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800333a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	621a      	str	r2, [r3, #32]
}
 800336e:	bf00      	nop
 8003370:	371c      	adds	r7, #28
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr
 8003378:	40012c00 	.word	0x40012c00

0800337c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0303 	bic.w	r3, r3, #3
 80033b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	021b      	lsls	r3, r3, #8
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a1d      	ldr	r2, [pc, #116]	; (800344c <TIM_OC3_SetConfig+0xd0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d10d      	bne.n	80033f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a14      	ldr	r2, [pc, #80]	; (800344c <TIM_OC3_SetConfig+0xd0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d113      	bne.n	8003426 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800340c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	621a      	str	r2, [r3, #32]
}
 8003440:	bf00      	nop
 8003442:	371c      	adds	r7, #28
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40012c00 	.word	0x40012c00

08003450 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800347e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	021b      	lsls	r3, r3, #8
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4313      	orrs	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800349a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	031b      	lsls	r3, r3, #12
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a0f      	ldr	r2, [pc, #60]	; (80034e8 <TIM_OC4_SetConfig+0x98>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d109      	bne.n	80034c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	019b      	lsls	r3, r3, #6
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	621a      	str	r2, [r3, #32]
}
 80034de:	bf00      	nop
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr
 80034e8:	40012c00 	.word	0x40012c00

080034ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	f023 0201 	bic.w	r2, r3, #1
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f023 030a 	bic.w	r3, r3, #10
 8003528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4313      	orrs	r3, r2
 8003530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	621a      	str	r2, [r3, #32]
}
 800353e:	bf00      	nop
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr

08003548 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f023 0210 	bic.w	r2, r3, #16
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003572:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	031b      	lsls	r3, r3, #12
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003584:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	621a      	str	r2, [r3, #32]
}
 800359c:	bf00      	nop
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr

080035a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b085      	sub	sp, #20
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f043 0307 	orr.w	r3, r3, #7
 80035c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	609a      	str	r2, [r3, #8]
}
 80035d0:	bf00      	nop
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr

080035da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035da:	b480      	push	{r7}
 80035dc:	b087      	sub	sp, #28
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	021a      	lsls	r2, r3, #8
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	431a      	orrs	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4313      	orrs	r3, r2
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	609a      	str	r2, [r3, #8]
}
 800360e:	bf00      	nop
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003618:	b480      	push	{r7}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f003 031f 	and.w	r3, r3, #31
 800362a:	2201      	movs	r2, #1
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a1a      	ldr	r2, [r3, #32]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	43db      	mvns	r3, r3
 800363a:	401a      	ands	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a1a      	ldr	r2, [r3, #32]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	fa01 f303 	lsl.w	r3, r1, r3
 8003650:	431a      	orrs	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	621a      	str	r2, [r3, #32]
}
 8003656:	bf00      	nop
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr

08003660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003674:	2302      	movs	r3, #2
 8003676:	e046      	b.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a16      	ldr	r2, [pc, #88]	; (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00e      	beq.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c4:	d009      	beq.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a12      	ldr	r2, [pc, #72]	; (8003714 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d004      	beq.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a10      	ldr	r2, [pc, #64]	; (8003718 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d10c      	bne.n	80036f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr
 8003710:	40012c00 	.word	0x40012c00
 8003714:	40000400 	.word	0x40000400
 8003718:	40000800 	.word	0x40000800

0800371c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr

0800372e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e03f      	b.n	80037d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fd ffe4 	bl	8001734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2224      	movs	r2, #36	; 0x24
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003782:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fc85 	bl	8004094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003798:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695a      	ldr	r2, [r3, #20]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b08a      	sub	sp, #40	; 0x28
 80037de:	af02      	add	r7, sp, #8
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	603b      	str	r3, [r7, #0]
 80037e6:	4613      	mov	r3, r2
 80037e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d17c      	bne.n	80038f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_UART_Transmit+0x2c>
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e075      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_UART_Transmit+0x3e>
 8003814:	2302      	movs	r3, #2
 8003816:	e06e      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2221      	movs	r2, #33	; 0x21
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800382e:	f7fe f893 	bl	8001958 <HAL_GetTick>
 8003832:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	88fa      	ldrh	r2, [r7, #6]
 8003838:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	88fa      	ldrh	r2, [r7, #6]
 800383e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003848:	d108      	bne.n	800385c <HAL_UART_Transmit+0x82>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d104      	bne.n	800385c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	e003      	b.n	8003864 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003860:	2300      	movs	r3, #0
 8003862:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800386c:	e02a      	b.n	80038c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2200      	movs	r2, #0
 8003876:	2180      	movs	r1, #128	; 0x80
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fa38 	bl	8003cee <UART_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e036      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10b      	bne.n	80038a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800389c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	3302      	adds	r3, #2
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	e007      	b.n	80038b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	781a      	ldrb	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	3301      	adds	r3, #1
 80038b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1cf      	bne.n	800386e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2200      	movs	r2, #0
 80038d6:	2140      	movs	r1, #64	; 0x40
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 fa08 	bl	8003cee <UART_WaitOnFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e006      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	e000      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038f4:	2302      	movs	r3, #2
  }
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3720      	adds	r7, #32
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	4613      	mov	r3, r2
 800390a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b20      	cmp	r3, #32
 8003916:	d11d      	bne.n	8003954 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <HAL_UART_Receive_IT+0x26>
 800391e:	88fb      	ldrh	r3, [r7, #6]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e016      	b.n	8003956 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <HAL_UART_Receive_IT+0x38>
 8003932:	2302      	movs	r3, #2
 8003934:	e00f      	b.n	8003956 <HAL_UART_Receive_IT+0x58>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003944:	88fb      	ldrh	r3, [r7, #6]
 8003946:	461a      	mov	r2, r3
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 fa19 	bl	8003d82 <UART_Start_Receive_IT>
 8003950:	4603      	mov	r3, r0
 8003952:	e000      	b.n	8003956 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003954:	2302      	movs	r3, #2
  }
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08a      	sub	sp, #40	; 0x28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003980:	2300      	movs	r3, #0
 8003982:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10d      	bne.n	80039b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <HAL_UART_IRQHandler+0x52>
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fac9 	bl	8003f42 <UART_Receive_IT>
      return;
 80039b0:	e17b      	b.n	8003caa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80b1 	beq.w	8003b1c <HAL_UART_IRQHandler+0x1bc>
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d105      	bne.n	80039d0 <HAL_UART_IRQHandler+0x70>
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 80a6 	beq.w	8003b1c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <HAL_UART_IRQHandler+0x90>
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	f043 0201 	orr.w	r2, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <HAL_UART_IRQHandler+0xb0>
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	f043 0202 	orr.w	r2, r3, #2
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_UART_IRQHandler+0xd0>
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	f043 0204 	orr.w	r2, r3, #4
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00f      	beq.n	8003a5a <HAL_UART_IRQHandler+0xfa>
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	f003 0320 	and.w	r3, r3, #32
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d104      	bne.n	8003a4e <HAL_UART_IRQHandler+0xee>
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	f043 0208 	orr.w	r2, r3, #8
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 811e 	beq.w	8003ca0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d007      	beq.n	8003a7e <HAL_UART_IRQHandler+0x11e>
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fa62 	bl	8003f42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	bf14      	ite	ne
 8003a8c:	2301      	movne	r3, #1
 8003a8e:	2300      	moveq	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d102      	bne.n	8003aa6 <HAL_UART_IRQHandler+0x146>
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d031      	beq.n	8003b0a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f9a4 	bl	8003df4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d023      	beq.n	8003b02 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695a      	ldr	r2, [r3, #20]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d013      	beq.n	8003afa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	4a76      	ldr	r2, [pc, #472]	; (8003cb0 <HAL_UART_IRQHandler+0x350>)
 8003ad8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fe f88c 	bl	8001bfc <HAL_DMA_Abort_IT>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d016      	beq.n	8003b18 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003af4:	4610      	mov	r0, r2
 8003af6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af8:	e00e      	b.n	8003b18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f8e3 	bl	8003cc6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b00:	e00a      	b.n	8003b18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f8df 	bl	8003cc6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b08:	e006      	b.n	8003b18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f8db 	bl	8003cc6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b16:	e0c3      	b.n	8003ca0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b18:	bf00      	nop
    return;
 8003b1a:	e0c1      	b.n	8003ca0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	f040 80a1 	bne.w	8003c68 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	f003 0310 	and.w	r3, r3, #16
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 809b 	beq.w	8003c68 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8095 	beq.w	8003c68 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d04e      	beq.n	8003c00 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003b6c:	8a3b      	ldrh	r3, [r7, #16]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 8098 	beq.w	8003ca4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b78:	8a3a      	ldrh	r2, [r7, #16]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	f080 8092 	bcs.w	8003ca4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8a3a      	ldrh	r2, [r7, #16]
 8003b84:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	2b20      	cmp	r3, #32
 8003b8e:	d02b      	beq.n	8003be8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b9e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0201 	bic.w	r2, r2, #1
 8003bae:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695a      	ldr	r2, [r3, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bbe:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0210 	bic.w	r2, r2, #16
 8003bdc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fd ffcf 	bl	8001b86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f86d 	bl	8003cd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003bfe:	e051      	b.n	8003ca4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d047      	beq.n	8003ca8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003c18:	8a7b      	ldrh	r3, [r7, #18]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d044      	beq.n	8003ca8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c2c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695a      	ldr	r2, [r3, #20]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0201 	bic.w	r2, r2, #1
 8003c3c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0210 	bic.w	r2, r2, #16
 8003c5a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c5c:	8a7b      	ldrh	r3, [r7, #18]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f839 	bl	8003cd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c66:	e01f      	b.n	8003ca8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d008      	beq.n	8003c84 <HAL_UART_IRQHandler+0x324>
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f8f9 	bl	8003e74 <UART_Transmit_IT>
    return;
 8003c82:	e012      	b.n	8003caa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00d      	beq.n	8003caa <HAL_UART_IRQHandler+0x34a>
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f93a 	bl	8003f12 <UART_EndTransmit_IT>
    return;
 8003c9e:	e004      	b.n	8003caa <HAL_UART_IRQHandler+0x34a>
    return;
 8003ca0:	bf00      	nop
 8003ca2:	e002      	b.n	8003caa <HAL_UART_IRQHandler+0x34a>
      return;
 8003ca4:	bf00      	nop
 8003ca6:	e000      	b.n	8003caa <HAL_UART_IRQHandler+0x34a>
      return;
 8003ca8:	bf00      	nop
  }
}
 8003caa:	3728      	adds	r7, #40	; 0x28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	08003e4d 	.word	0x08003e4d

08003cb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr

08003cee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	603b      	str	r3, [r7, #0]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cfe:	e02c      	b.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d06:	d028      	beq.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d007      	beq.n	8003d1e <UART_WaitOnFlagUntilTimeout+0x30>
 8003d0e:	f7fd fe23 	bl	8001958 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d21d      	bcs.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d2c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695a      	ldr	r2, [r3, #20]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0201 	bic.w	r2, r2, #1
 8003d3c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e00f      	b.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4013      	ands	r3, r2
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	bf0c      	ite	eq
 8003d6a:	2301      	moveq	r3, #1
 8003d6c:	2300      	movne	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d0c3      	beq.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b085      	sub	sp, #20
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	88fa      	ldrh	r2, [r7, #6]
 8003d9a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	88fa      	ldrh	r2, [r7, #6]
 8003da0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2222      	movs	r2, #34	; 0x22
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dc6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0220 	orr.w	r2, r2, #32
 8003de6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr

08003df4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e0a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0201 	bic.w	r2, r2, #1
 8003e1a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d107      	bne.n	8003e34 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0210 	bic.w	r2, r2, #16
 8003e32:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f7ff ff2d 	bl	8003cc6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e6c:	bf00      	nop
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b21      	cmp	r3, #33	; 0x21
 8003e86:	d13e      	bne.n	8003f06 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e90:	d114      	bne.n	8003ebc <UART_Transmit_IT+0x48>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d110      	bne.n	8003ebc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	1c9a      	adds	r2, r3, #2
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	621a      	str	r2, [r3, #32]
 8003eba:	e008      	b.n	8003ece <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	1c59      	adds	r1, r3, #1
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6211      	str	r1, [r2, #32]
 8003ec6:	781a      	ldrb	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	4619      	mov	r1, r3
 8003edc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10f      	bne.n	8003f02 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ef0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	e000      	b.n	8003f08 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f06:	2302      	movs	r3, #2
  }
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr

08003f12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff febe 	bl	8003cb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b086      	sub	sp, #24
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b22      	cmp	r3, #34	; 0x22
 8003f54:	f040 8099 	bne.w	800408a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f60:	d117      	bne.n	8003f92 <UART_Receive_IT+0x50>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d113      	bne.n	8003f92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	1c9a      	adds	r2, r3, #2
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f90:	e026      	b.n	8003fe0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f96:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa4:	d007      	beq.n	8003fb6 <UART_Receive_IT+0x74>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10a      	bne.n	8003fc4 <UART_Receive_IT+0x82>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	701a      	strb	r2, [r3, #0]
 8003fc2:	e008      	b.n	8003fd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	4619      	mov	r1, r3
 8003fee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d148      	bne.n	8004086 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0220 	bic.w	r2, r2, #32
 8004002:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004012:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695a      	ldr	r2, [r3, #20]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0201 	bic.w	r2, r2, #1
 8004022:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	2b01      	cmp	r3, #1
 8004032:	d123      	bne.n	800407c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0210 	bic.w	r2, r2, #16
 8004048:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b10      	cmp	r3, #16
 8004056:	d10a      	bne.n	800406e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004072:	4619      	mov	r1, r3
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff fe2f 	bl	8003cd8 <HAL_UARTEx_RxEventCallback>
 800407a:	e002      	b.n	8004082 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7fd f80d 	bl	800109c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	e002      	b.n	800408c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	e000      	b.n	800408c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800408a:	2302      	movs	r3, #2
  }
}
 800408c:	4618      	mov	r0, r3
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040ce:	f023 030c 	bic.w	r3, r3, #12
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6812      	ldr	r2, [r2, #0]
 80040d6:	68b9      	ldr	r1, [r7, #8]
 80040d8:	430b      	orrs	r3, r1
 80040da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699a      	ldr	r2, [r3, #24]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a2c      	ldr	r2, [pc, #176]	; (80041a8 <UART_SetConfig+0x114>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d103      	bne.n	8004104 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040fc:	f7fe fb90 	bl	8002820 <HAL_RCC_GetPCLK2Freq>
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	e002      	b.n	800410a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004104:	f7fe fb78 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 8004108:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	009a      	lsls	r2, r3, #2
 8004114:	441a      	add	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004120:	4a22      	ldr	r2, [pc, #136]	; (80041ac <UART_SetConfig+0x118>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	0119      	lsls	r1, r3, #4
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	009a      	lsls	r2, r3, #2
 8004134:	441a      	add	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004140:	4b1a      	ldr	r3, [pc, #104]	; (80041ac <UART_SetConfig+0x118>)
 8004142:	fba3 0302 	umull	r0, r3, r3, r2
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	2064      	movs	r0, #100	; 0x64
 800414a:	fb00 f303 	mul.w	r3, r0, r3
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	3332      	adds	r3, #50	; 0x32
 8004154:	4a15      	ldr	r2, [pc, #84]	; (80041ac <UART_SetConfig+0x118>)
 8004156:	fba2 2303 	umull	r2, r3, r2, r3
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004160:	4419      	add	r1, r3
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	009a      	lsls	r2, r3, #2
 800416c:	441a      	add	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	fbb2 f2f3 	udiv	r2, r2, r3
 8004178:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <UART_SetConfig+0x118>)
 800417a:	fba3 0302 	umull	r0, r3, r3, r2
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	2064      	movs	r0, #100	; 0x64
 8004182:	fb00 f303 	mul.w	r3, r0, r3
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	3332      	adds	r3, #50	; 0x32
 800418c:	4a07      	ldr	r2, [pc, #28]	; (80041ac <UART_SetConfig+0x118>)
 800418e:	fba2 2303 	umull	r2, r3, r2, r3
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	f003 020f 	and.w	r2, r3, #15
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	440a      	add	r2, r1
 800419e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041a0:	bf00      	nop
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40013800 	.word	0x40013800
 80041ac:	51eb851f 	.word	0x51eb851f

080041b0 <__libc_init_array>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	2600      	movs	r6, #0
 80041b4:	4d0c      	ldr	r5, [pc, #48]	; (80041e8 <__libc_init_array+0x38>)
 80041b6:	4c0d      	ldr	r4, [pc, #52]	; (80041ec <__libc_init_array+0x3c>)
 80041b8:	1b64      	subs	r4, r4, r5
 80041ba:	10a4      	asrs	r4, r4, #2
 80041bc:	42a6      	cmp	r6, r4
 80041be:	d109      	bne.n	80041d4 <__libc_init_array+0x24>
 80041c0:	f000 fc6a 	bl	8004a98 <_init>
 80041c4:	2600      	movs	r6, #0
 80041c6:	4d0a      	ldr	r5, [pc, #40]	; (80041f0 <__libc_init_array+0x40>)
 80041c8:	4c0a      	ldr	r4, [pc, #40]	; (80041f4 <__libc_init_array+0x44>)
 80041ca:	1b64      	subs	r4, r4, r5
 80041cc:	10a4      	asrs	r4, r4, #2
 80041ce:	42a6      	cmp	r6, r4
 80041d0:	d105      	bne.n	80041de <__libc_init_array+0x2e>
 80041d2:	bd70      	pop	{r4, r5, r6, pc}
 80041d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d8:	4798      	blx	r3
 80041da:	3601      	adds	r6, #1
 80041dc:	e7ee      	b.n	80041bc <__libc_init_array+0xc>
 80041de:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e2:	4798      	blx	r3
 80041e4:	3601      	adds	r6, #1
 80041e6:	e7f2      	b.n	80041ce <__libc_init_array+0x1e>
 80041e8:	08004c44 	.word	0x08004c44
 80041ec:	08004c44 	.word	0x08004c44
 80041f0:	08004c44 	.word	0x08004c44
 80041f4:	08004c48 	.word	0x08004c48

080041f8 <memset>:
 80041f8:	4603      	mov	r3, r0
 80041fa:	4402      	add	r2, r0
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d100      	bne.n	8004202 <memset+0xa>
 8004200:	4770      	bx	lr
 8004202:	f803 1b01 	strb.w	r1, [r3], #1
 8004206:	e7f9      	b.n	80041fc <memset+0x4>

08004208 <siprintf>:
 8004208:	b40e      	push	{r1, r2, r3}
 800420a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800420e:	b500      	push	{lr}
 8004210:	b09c      	sub	sp, #112	; 0x70
 8004212:	ab1d      	add	r3, sp, #116	; 0x74
 8004214:	9002      	str	r0, [sp, #8]
 8004216:	9006      	str	r0, [sp, #24]
 8004218:	9107      	str	r1, [sp, #28]
 800421a:	9104      	str	r1, [sp, #16]
 800421c:	4808      	ldr	r0, [pc, #32]	; (8004240 <siprintf+0x38>)
 800421e:	4909      	ldr	r1, [pc, #36]	; (8004244 <siprintf+0x3c>)
 8004220:	f853 2b04 	ldr.w	r2, [r3], #4
 8004224:	9105      	str	r1, [sp, #20]
 8004226:	6800      	ldr	r0, [r0, #0]
 8004228:	a902      	add	r1, sp, #8
 800422a:	9301      	str	r3, [sp, #4]
 800422c:	f000 f868 	bl	8004300 <_svfiprintf_r>
 8004230:	2200      	movs	r2, #0
 8004232:	9b02      	ldr	r3, [sp, #8]
 8004234:	701a      	strb	r2, [r3, #0]
 8004236:	b01c      	add	sp, #112	; 0x70
 8004238:	f85d eb04 	ldr.w	lr, [sp], #4
 800423c:	b003      	add	sp, #12
 800423e:	4770      	bx	lr
 8004240:	20000030 	.word	0x20000030
 8004244:	ffff0208 	.word	0xffff0208

08004248 <__ssputs_r>:
 8004248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800424c:	688e      	ldr	r6, [r1, #8]
 800424e:	4682      	mov	sl, r0
 8004250:	429e      	cmp	r6, r3
 8004252:	460c      	mov	r4, r1
 8004254:	4690      	mov	r8, r2
 8004256:	461f      	mov	r7, r3
 8004258:	d838      	bhi.n	80042cc <__ssputs_r+0x84>
 800425a:	898a      	ldrh	r2, [r1, #12]
 800425c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004260:	d032      	beq.n	80042c8 <__ssputs_r+0x80>
 8004262:	6825      	ldr	r5, [r4, #0]
 8004264:	6909      	ldr	r1, [r1, #16]
 8004266:	3301      	adds	r3, #1
 8004268:	eba5 0901 	sub.w	r9, r5, r1
 800426c:	6965      	ldr	r5, [r4, #20]
 800426e:	444b      	add	r3, r9
 8004270:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004274:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004278:	106d      	asrs	r5, r5, #1
 800427a:	429d      	cmp	r5, r3
 800427c:	bf38      	it	cc
 800427e:	461d      	movcc	r5, r3
 8004280:	0553      	lsls	r3, r2, #21
 8004282:	d531      	bpl.n	80042e8 <__ssputs_r+0xa0>
 8004284:	4629      	mov	r1, r5
 8004286:	f000 fb53 	bl	8004930 <_malloc_r>
 800428a:	4606      	mov	r6, r0
 800428c:	b950      	cbnz	r0, 80042a4 <__ssputs_r+0x5c>
 800428e:	230c      	movs	r3, #12
 8004290:	f04f 30ff 	mov.w	r0, #4294967295
 8004294:	f8ca 3000 	str.w	r3, [sl]
 8004298:	89a3      	ldrh	r3, [r4, #12]
 800429a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800429e:	81a3      	strh	r3, [r4, #12]
 80042a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042a4:	464a      	mov	r2, r9
 80042a6:	6921      	ldr	r1, [r4, #16]
 80042a8:	f000 face 	bl	8004848 <memcpy>
 80042ac:	89a3      	ldrh	r3, [r4, #12]
 80042ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b6:	81a3      	strh	r3, [r4, #12]
 80042b8:	6126      	str	r6, [r4, #16]
 80042ba:	444e      	add	r6, r9
 80042bc:	6026      	str	r6, [r4, #0]
 80042be:	463e      	mov	r6, r7
 80042c0:	6165      	str	r5, [r4, #20]
 80042c2:	eba5 0509 	sub.w	r5, r5, r9
 80042c6:	60a5      	str	r5, [r4, #8]
 80042c8:	42be      	cmp	r6, r7
 80042ca:	d900      	bls.n	80042ce <__ssputs_r+0x86>
 80042cc:	463e      	mov	r6, r7
 80042ce:	4632      	mov	r2, r6
 80042d0:	4641      	mov	r1, r8
 80042d2:	6820      	ldr	r0, [r4, #0]
 80042d4:	f000 fac6 	bl	8004864 <memmove>
 80042d8:	68a3      	ldr	r3, [r4, #8]
 80042da:	6822      	ldr	r2, [r4, #0]
 80042dc:	1b9b      	subs	r3, r3, r6
 80042de:	4432      	add	r2, r6
 80042e0:	2000      	movs	r0, #0
 80042e2:	60a3      	str	r3, [r4, #8]
 80042e4:	6022      	str	r2, [r4, #0]
 80042e6:	e7db      	b.n	80042a0 <__ssputs_r+0x58>
 80042e8:	462a      	mov	r2, r5
 80042ea:	f000 fb7b 	bl	80049e4 <_realloc_r>
 80042ee:	4606      	mov	r6, r0
 80042f0:	2800      	cmp	r0, #0
 80042f2:	d1e1      	bne.n	80042b8 <__ssputs_r+0x70>
 80042f4:	4650      	mov	r0, sl
 80042f6:	6921      	ldr	r1, [r4, #16]
 80042f8:	f000 face 	bl	8004898 <_free_r>
 80042fc:	e7c7      	b.n	800428e <__ssputs_r+0x46>
	...

08004300 <_svfiprintf_r>:
 8004300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004304:	4698      	mov	r8, r3
 8004306:	898b      	ldrh	r3, [r1, #12]
 8004308:	4607      	mov	r7, r0
 800430a:	061b      	lsls	r3, r3, #24
 800430c:	460d      	mov	r5, r1
 800430e:	4614      	mov	r4, r2
 8004310:	b09d      	sub	sp, #116	; 0x74
 8004312:	d50e      	bpl.n	8004332 <_svfiprintf_r+0x32>
 8004314:	690b      	ldr	r3, [r1, #16]
 8004316:	b963      	cbnz	r3, 8004332 <_svfiprintf_r+0x32>
 8004318:	2140      	movs	r1, #64	; 0x40
 800431a:	f000 fb09 	bl	8004930 <_malloc_r>
 800431e:	6028      	str	r0, [r5, #0]
 8004320:	6128      	str	r0, [r5, #16]
 8004322:	b920      	cbnz	r0, 800432e <_svfiprintf_r+0x2e>
 8004324:	230c      	movs	r3, #12
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	f04f 30ff 	mov.w	r0, #4294967295
 800432c:	e0d1      	b.n	80044d2 <_svfiprintf_r+0x1d2>
 800432e:	2340      	movs	r3, #64	; 0x40
 8004330:	616b      	str	r3, [r5, #20]
 8004332:	2300      	movs	r3, #0
 8004334:	9309      	str	r3, [sp, #36]	; 0x24
 8004336:	2320      	movs	r3, #32
 8004338:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800433c:	2330      	movs	r3, #48	; 0x30
 800433e:	f04f 0901 	mov.w	r9, #1
 8004342:	f8cd 800c 	str.w	r8, [sp, #12]
 8004346:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80044ec <_svfiprintf_r+0x1ec>
 800434a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800434e:	4623      	mov	r3, r4
 8004350:	469a      	mov	sl, r3
 8004352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004356:	b10a      	cbz	r2, 800435c <_svfiprintf_r+0x5c>
 8004358:	2a25      	cmp	r2, #37	; 0x25
 800435a:	d1f9      	bne.n	8004350 <_svfiprintf_r+0x50>
 800435c:	ebba 0b04 	subs.w	fp, sl, r4
 8004360:	d00b      	beq.n	800437a <_svfiprintf_r+0x7a>
 8004362:	465b      	mov	r3, fp
 8004364:	4622      	mov	r2, r4
 8004366:	4629      	mov	r1, r5
 8004368:	4638      	mov	r0, r7
 800436a:	f7ff ff6d 	bl	8004248 <__ssputs_r>
 800436e:	3001      	adds	r0, #1
 8004370:	f000 80aa 	beq.w	80044c8 <_svfiprintf_r+0x1c8>
 8004374:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004376:	445a      	add	r2, fp
 8004378:	9209      	str	r2, [sp, #36]	; 0x24
 800437a:	f89a 3000 	ldrb.w	r3, [sl]
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 80a2 	beq.w	80044c8 <_svfiprintf_r+0x1c8>
 8004384:	2300      	movs	r3, #0
 8004386:	f04f 32ff 	mov.w	r2, #4294967295
 800438a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800438e:	f10a 0a01 	add.w	sl, sl, #1
 8004392:	9304      	str	r3, [sp, #16]
 8004394:	9307      	str	r3, [sp, #28]
 8004396:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800439a:	931a      	str	r3, [sp, #104]	; 0x68
 800439c:	4654      	mov	r4, sl
 800439e:	2205      	movs	r2, #5
 80043a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043a4:	4851      	ldr	r0, [pc, #324]	; (80044ec <_svfiprintf_r+0x1ec>)
 80043a6:	f000 fa41 	bl	800482c <memchr>
 80043aa:	9a04      	ldr	r2, [sp, #16]
 80043ac:	b9d8      	cbnz	r0, 80043e6 <_svfiprintf_r+0xe6>
 80043ae:	06d0      	lsls	r0, r2, #27
 80043b0:	bf44      	itt	mi
 80043b2:	2320      	movmi	r3, #32
 80043b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043b8:	0711      	lsls	r1, r2, #28
 80043ba:	bf44      	itt	mi
 80043bc:	232b      	movmi	r3, #43	; 0x2b
 80043be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043c2:	f89a 3000 	ldrb.w	r3, [sl]
 80043c6:	2b2a      	cmp	r3, #42	; 0x2a
 80043c8:	d015      	beq.n	80043f6 <_svfiprintf_r+0xf6>
 80043ca:	4654      	mov	r4, sl
 80043cc:	2000      	movs	r0, #0
 80043ce:	f04f 0c0a 	mov.w	ip, #10
 80043d2:	9a07      	ldr	r2, [sp, #28]
 80043d4:	4621      	mov	r1, r4
 80043d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043da:	3b30      	subs	r3, #48	; 0x30
 80043dc:	2b09      	cmp	r3, #9
 80043de:	d94e      	bls.n	800447e <_svfiprintf_r+0x17e>
 80043e0:	b1b0      	cbz	r0, 8004410 <_svfiprintf_r+0x110>
 80043e2:	9207      	str	r2, [sp, #28]
 80043e4:	e014      	b.n	8004410 <_svfiprintf_r+0x110>
 80043e6:	eba0 0308 	sub.w	r3, r0, r8
 80043ea:	fa09 f303 	lsl.w	r3, r9, r3
 80043ee:	4313      	orrs	r3, r2
 80043f0:	46a2      	mov	sl, r4
 80043f2:	9304      	str	r3, [sp, #16]
 80043f4:	e7d2      	b.n	800439c <_svfiprintf_r+0x9c>
 80043f6:	9b03      	ldr	r3, [sp, #12]
 80043f8:	1d19      	adds	r1, r3, #4
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	9103      	str	r1, [sp, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	bfbb      	ittet	lt
 8004402:	425b      	neglt	r3, r3
 8004404:	f042 0202 	orrlt.w	r2, r2, #2
 8004408:	9307      	strge	r3, [sp, #28]
 800440a:	9307      	strlt	r3, [sp, #28]
 800440c:	bfb8      	it	lt
 800440e:	9204      	strlt	r2, [sp, #16]
 8004410:	7823      	ldrb	r3, [r4, #0]
 8004412:	2b2e      	cmp	r3, #46	; 0x2e
 8004414:	d10c      	bne.n	8004430 <_svfiprintf_r+0x130>
 8004416:	7863      	ldrb	r3, [r4, #1]
 8004418:	2b2a      	cmp	r3, #42	; 0x2a
 800441a:	d135      	bne.n	8004488 <_svfiprintf_r+0x188>
 800441c:	9b03      	ldr	r3, [sp, #12]
 800441e:	3402      	adds	r4, #2
 8004420:	1d1a      	adds	r2, r3, #4
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	9203      	str	r2, [sp, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	bfb8      	it	lt
 800442a:	f04f 33ff 	movlt.w	r3, #4294967295
 800442e:	9305      	str	r3, [sp, #20]
 8004430:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80044fc <_svfiprintf_r+0x1fc>
 8004434:	2203      	movs	r2, #3
 8004436:	4650      	mov	r0, sl
 8004438:	7821      	ldrb	r1, [r4, #0]
 800443a:	f000 f9f7 	bl	800482c <memchr>
 800443e:	b140      	cbz	r0, 8004452 <_svfiprintf_r+0x152>
 8004440:	2340      	movs	r3, #64	; 0x40
 8004442:	eba0 000a 	sub.w	r0, r0, sl
 8004446:	fa03 f000 	lsl.w	r0, r3, r0
 800444a:	9b04      	ldr	r3, [sp, #16]
 800444c:	3401      	adds	r4, #1
 800444e:	4303      	orrs	r3, r0
 8004450:	9304      	str	r3, [sp, #16]
 8004452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004456:	2206      	movs	r2, #6
 8004458:	4825      	ldr	r0, [pc, #148]	; (80044f0 <_svfiprintf_r+0x1f0>)
 800445a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800445e:	f000 f9e5 	bl	800482c <memchr>
 8004462:	2800      	cmp	r0, #0
 8004464:	d038      	beq.n	80044d8 <_svfiprintf_r+0x1d8>
 8004466:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <_svfiprintf_r+0x1f4>)
 8004468:	bb1b      	cbnz	r3, 80044b2 <_svfiprintf_r+0x1b2>
 800446a:	9b03      	ldr	r3, [sp, #12]
 800446c:	3307      	adds	r3, #7
 800446e:	f023 0307 	bic.w	r3, r3, #7
 8004472:	3308      	adds	r3, #8
 8004474:	9303      	str	r3, [sp, #12]
 8004476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004478:	4433      	add	r3, r6
 800447a:	9309      	str	r3, [sp, #36]	; 0x24
 800447c:	e767      	b.n	800434e <_svfiprintf_r+0x4e>
 800447e:	460c      	mov	r4, r1
 8004480:	2001      	movs	r0, #1
 8004482:	fb0c 3202 	mla	r2, ip, r2, r3
 8004486:	e7a5      	b.n	80043d4 <_svfiprintf_r+0xd4>
 8004488:	2300      	movs	r3, #0
 800448a:	f04f 0c0a 	mov.w	ip, #10
 800448e:	4619      	mov	r1, r3
 8004490:	3401      	adds	r4, #1
 8004492:	9305      	str	r3, [sp, #20]
 8004494:	4620      	mov	r0, r4
 8004496:	f810 2b01 	ldrb.w	r2, [r0], #1
 800449a:	3a30      	subs	r2, #48	; 0x30
 800449c:	2a09      	cmp	r2, #9
 800449e:	d903      	bls.n	80044a8 <_svfiprintf_r+0x1a8>
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0c5      	beq.n	8004430 <_svfiprintf_r+0x130>
 80044a4:	9105      	str	r1, [sp, #20]
 80044a6:	e7c3      	b.n	8004430 <_svfiprintf_r+0x130>
 80044a8:	4604      	mov	r4, r0
 80044aa:	2301      	movs	r3, #1
 80044ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80044b0:	e7f0      	b.n	8004494 <_svfiprintf_r+0x194>
 80044b2:	ab03      	add	r3, sp, #12
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	462a      	mov	r2, r5
 80044b8:	4638      	mov	r0, r7
 80044ba:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <_svfiprintf_r+0x1f8>)
 80044bc:	a904      	add	r1, sp, #16
 80044be:	f3af 8000 	nop.w
 80044c2:	1c42      	adds	r2, r0, #1
 80044c4:	4606      	mov	r6, r0
 80044c6:	d1d6      	bne.n	8004476 <_svfiprintf_r+0x176>
 80044c8:	89ab      	ldrh	r3, [r5, #12]
 80044ca:	065b      	lsls	r3, r3, #25
 80044cc:	f53f af2c 	bmi.w	8004328 <_svfiprintf_r+0x28>
 80044d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044d2:	b01d      	add	sp, #116	; 0x74
 80044d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d8:	ab03      	add	r3, sp, #12
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	462a      	mov	r2, r5
 80044de:	4638      	mov	r0, r7
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <_svfiprintf_r+0x1f8>)
 80044e2:	a904      	add	r1, sp, #16
 80044e4:	f000 f87c 	bl	80045e0 <_printf_i>
 80044e8:	e7eb      	b.n	80044c2 <_svfiprintf_r+0x1c2>
 80044ea:	bf00      	nop
 80044ec:	08004c10 	.word	0x08004c10
 80044f0:	08004c1a 	.word	0x08004c1a
 80044f4:	00000000 	.word	0x00000000
 80044f8:	08004249 	.word	0x08004249
 80044fc:	08004c16 	.word	0x08004c16

08004500 <_printf_common>:
 8004500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004504:	4616      	mov	r6, r2
 8004506:	4699      	mov	r9, r3
 8004508:	688a      	ldr	r2, [r1, #8]
 800450a:	690b      	ldr	r3, [r1, #16]
 800450c:	4607      	mov	r7, r0
 800450e:	4293      	cmp	r3, r2
 8004510:	bfb8      	it	lt
 8004512:	4613      	movlt	r3, r2
 8004514:	6033      	str	r3, [r6, #0]
 8004516:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800451a:	460c      	mov	r4, r1
 800451c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004520:	b10a      	cbz	r2, 8004526 <_printf_common+0x26>
 8004522:	3301      	adds	r3, #1
 8004524:	6033      	str	r3, [r6, #0]
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	0699      	lsls	r1, r3, #26
 800452a:	bf42      	ittt	mi
 800452c:	6833      	ldrmi	r3, [r6, #0]
 800452e:	3302      	addmi	r3, #2
 8004530:	6033      	strmi	r3, [r6, #0]
 8004532:	6825      	ldr	r5, [r4, #0]
 8004534:	f015 0506 	ands.w	r5, r5, #6
 8004538:	d106      	bne.n	8004548 <_printf_common+0x48>
 800453a:	f104 0a19 	add.w	sl, r4, #25
 800453e:	68e3      	ldr	r3, [r4, #12]
 8004540:	6832      	ldr	r2, [r6, #0]
 8004542:	1a9b      	subs	r3, r3, r2
 8004544:	42ab      	cmp	r3, r5
 8004546:	dc28      	bgt.n	800459a <_printf_common+0x9a>
 8004548:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800454c:	1e13      	subs	r3, r2, #0
 800454e:	6822      	ldr	r2, [r4, #0]
 8004550:	bf18      	it	ne
 8004552:	2301      	movne	r3, #1
 8004554:	0692      	lsls	r2, r2, #26
 8004556:	d42d      	bmi.n	80045b4 <_printf_common+0xb4>
 8004558:	4649      	mov	r1, r9
 800455a:	4638      	mov	r0, r7
 800455c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004560:	47c0      	blx	r8
 8004562:	3001      	adds	r0, #1
 8004564:	d020      	beq.n	80045a8 <_printf_common+0xa8>
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	68e5      	ldr	r5, [r4, #12]
 800456a:	f003 0306 	and.w	r3, r3, #6
 800456e:	2b04      	cmp	r3, #4
 8004570:	bf18      	it	ne
 8004572:	2500      	movne	r5, #0
 8004574:	6832      	ldr	r2, [r6, #0]
 8004576:	f04f 0600 	mov.w	r6, #0
 800457a:	68a3      	ldr	r3, [r4, #8]
 800457c:	bf08      	it	eq
 800457e:	1aad      	subeq	r5, r5, r2
 8004580:	6922      	ldr	r2, [r4, #16]
 8004582:	bf08      	it	eq
 8004584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004588:	4293      	cmp	r3, r2
 800458a:	bfc4      	itt	gt
 800458c:	1a9b      	subgt	r3, r3, r2
 800458e:	18ed      	addgt	r5, r5, r3
 8004590:	341a      	adds	r4, #26
 8004592:	42b5      	cmp	r5, r6
 8004594:	d11a      	bne.n	80045cc <_printf_common+0xcc>
 8004596:	2000      	movs	r0, #0
 8004598:	e008      	b.n	80045ac <_printf_common+0xac>
 800459a:	2301      	movs	r3, #1
 800459c:	4652      	mov	r2, sl
 800459e:	4649      	mov	r1, r9
 80045a0:	4638      	mov	r0, r7
 80045a2:	47c0      	blx	r8
 80045a4:	3001      	adds	r0, #1
 80045a6:	d103      	bne.n	80045b0 <_printf_common+0xb0>
 80045a8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b0:	3501      	adds	r5, #1
 80045b2:	e7c4      	b.n	800453e <_printf_common+0x3e>
 80045b4:	2030      	movs	r0, #48	; 0x30
 80045b6:	18e1      	adds	r1, r4, r3
 80045b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045c2:	4422      	add	r2, r4
 80045c4:	3302      	adds	r3, #2
 80045c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045ca:	e7c5      	b.n	8004558 <_printf_common+0x58>
 80045cc:	2301      	movs	r3, #1
 80045ce:	4622      	mov	r2, r4
 80045d0:	4649      	mov	r1, r9
 80045d2:	4638      	mov	r0, r7
 80045d4:	47c0      	blx	r8
 80045d6:	3001      	adds	r0, #1
 80045d8:	d0e6      	beq.n	80045a8 <_printf_common+0xa8>
 80045da:	3601      	adds	r6, #1
 80045dc:	e7d9      	b.n	8004592 <_printf_common+0x92>
	...

080045e0 <_printf_i>:
 80045e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045e4:	460c      	mov	r4, r1
 80045e6:	7e27      	ldrb	r7, [r4, #24]
 80045e8:	4691      	mov	r9, r2
 80045ea:	2f78      	cmp	r7, #120	; 0x78
 80045ec:	4680      	mov	r8, r0
 80045ee:	469a      	mov	sl, r3
 80045f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80045f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045f6:	d807      	bhi.n	8004608 <_printf_i+0x28>
 80045f8:	2f62      	cmp	r7, #98	; 0x62
 80045fa:	d80a      	bhi.n	8004612 <_printf_i+0x32>
 80045fc:	2f00      	cmp	r7, #0
 80045fe:	f000 80d9 	beq.w	80047b4 <_printf_i+0x1d4>
 8004602:	2f58      	cmp	r7, #88	; 0x58
 8004604:	f000 80a4 	beq.w	8004750 <_printf_i+0x170>
 8004608:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800460c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004610:	e03a      	b.n	8004688 <_printf_i+0xa8>
 8004612:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004616:	2b15      	cmp	r3, #21
 8004618:	d8f6      	bhi.n	8004608 <_printf_i+0x28>
 800461a:	a001      	add	r0, pc, #4	; (adr r0, 8004620 <_printf_i+0x40>)
 800461c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004620:	08004679 	.word	0x08004679
 8004624:	0800468d 	.word	0x0800468d
 8004628:	08004609 	.word	0x08004609
 800462c:	08004609 	.word	0x08004609
 8004630:	08004609 	.word	0x08004609
 8004634:	08004609 	.word	0x08004609
 8004638:	0800468d 	.word	0x0800468d
 800463c:	08004609 	.word	0x08004609
 8004640:	08004609 	.word	0x08004609
 8004644:	08004609 	.word	0x08004609
 8004648:	08004609 	.word	0x08004609
 800464c:	0800479b 	.word	0x0800479b
 8004650:	080046bd 	.word	0x080046bd
 8004654:	0800477d 	.word	0x0800477d
 8004658:	08004609 	.word	0x08004609
 800465c:	08004609 	.word	0x08004609
 8004660:	080047bd 	.word	0x080047bd
 8004664:	08004609 	.word	0x08004609
 8004668:	080046bd 	.word	0x080046bd
 800466c:	08004609 	.word	0x08004609
 8004670:	08004609 	.word	0x08004609
 8004674:	08004785 	.word	0x08004785
 8004678:	680b      	ldr	r3, [r1, #0]
 800467a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800467e:	1d1a      	adds	r2, r3, #4
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	600a      	str	r2, [r1, #0]
 8004684:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004688:	2301      	movs	r3, #1
 800468a:	e0a4      	b.n	80047d6 <_printf_i+0x1f6>
 800468c:	6825      	ldr	r5, [r4, #0]
 800468e:	6808      	ldr	r0, [r1, #0]
 8004690:	062e      	lsls	r6, r5, #24
 8004692:	f100 0304 	add.w	r3, r0, #4
 8004696:	d50a      	bpl.n	80046ae <_printf_i+0xce>
 8004698:	6805      	ldr	r5, [r0, #0]
 800469a:	600b      	str	r3, [r1, #0]
 800469c:	2d00      	cmp	r5, #0
 800469e:	da03      	bge.n	80046a8 <_printf_i+0xc8>
 80046a0:	232d      	movs	r3, #45	; 0x2d
 80046a2:	426d      	negs	r5, r5
 80046a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046a8:	230a      	movs	r3, #10
 80046aa:	485e      	ldr	r0, [pc, #376]	; (8004824 <_printf_i+0x244>)
 80046ac:	e019      	b.n	80046e2 <_printf_i+0x102>
 80046ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80046b2:	6805      	ldr	r5, [r0, #0]
 80046b4:	600b      	str	r3, [r1, #0]
 80046b6:	bf18      	it	ne
 80046b8:	b22d      	sxthne	r5, r5
 80046ba:	e7ef      	b.n	800469c <_printf_i+0xbc>
 80046bc:	680b      	ldr	r3, [r1, #0]
 80046be:	6825      	ldr	r5, [r4, #0]
 80046c0:	1d18      	adds	r0, r3, #4
 80046c2:	6008      	str	r0, [r1, #0]
 80046c4:	0628      	lsls	r0, r5, #24
 80046c6:	d501      	bpl.n	80046cc <_printf_i+0xec>
 80046c8:	681d      	ldr	r5, [r3, #0]
 80046ca:	e002      	b.n	80046d2 <_printf_i+0xf2>
 80046cc:	0669      	lsls	r1, r5, #25
 80046ce:	d5fb      	bpl.n	80046c8 <_printf_i+0xe8>
 80046d0:	881d      	ldrh	r5, [r3, #0]
 80046d2:	2f6f      	cmp	r7, #111	; 0x6f
 80046d4:	bf0c      	ite	eq
 80046d6:	2308      	moveq	r3, #8
 80046d8:	230a      	movne	r3, #10
 80046da:	4852      	ldr	r0, [pc, #328]	; (8004824 <_printf_i+0x244>)
 80046dc:	2100      	movs	r1, #0
 80046de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046e2:	6866      	ldr	r6, [r4, #4]
 80046e4:	2e00      	cmp	r6, #0
 80046e6:	bfa8      	it	ge
 80046e8:	6821      	ldrge	r1, [r4, #0]
 80046ea:	60a6      	str	r6, [r4, #8]
 80046ec:	bfa4      	itt	ge
 80046ee:	f021 0104 	bicge.w	r1, r1, #4
 80046f2:	6021      	strge	r1, [r4, #0]
 80046f4:	b90d      	cbnz	r5, 80046fa <_printf_i+0x11a>
 80046f6:	2e00      	cmp	r6, #0
 80046f8:	d04d      	beq.n	8004796 <_printf_i+0x1b6>
 80046fa:	4616      	mov	r6, r2
 80046fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8004700:	fb03 5711 	mls	r7, r3, r1, r5
 8004704:	5dc7      	ldrb	r7, [r0, r7]
 8004706:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800470a:	462f      	mov	r7, r5
 800470c:	42bb      	cmp	r3, r7
 800470e:	460d      	mov	r5, r1
 8004710:	d9f4      	bls.n	80046fc <_printf_i+0x11c>
 8004712:	2b08      	cmp	r3, #8
 8004714:	d10b      	bne.n	800472e <_printf_i+0x14e>
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	07df      	lsls	r7, r3, #31
 800471a:	d508      	bpl.n	800472e <_printf_i+0x14e>
 800471c:	6923      	ldr	r3, [r4, #16]
 800471e:	6861      	ldr	r1, [r4, #4]
 8004720:	4299      	cmp	r1, r3
 8004722:	bfde      	ittt	le
 8004724:	2330      	movle	r3, #48	; 0x30
 8004726:	f806 3c01 	strble.w	r3, [r6, #-1]
 800472a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800472e:	1b92      	subs	r2, r2, r6
 8004730:	6122      	str	r2, [r4, #16]
 8004732:	464b      	mov	r3, r9
 8004734:	4621      	mov	r1, r4
 8004736:	4640      	mov	r0, r8
 8004738:	f8cd a000 	str.w	sl, [sp]
 800473c:	aa03      	add	r2, sp, #12
 800473e:	f7ff fedf 	bl	8004500 <_printf_common>
 8004742:	3001      	adds	r0, #1
 8004744:	d14c      	bne.n	80047e0 <_printf_i+0x200>
 8004746:	f04f 30ff 	mov.w	r0, #4294967295
 800474a:	b004      	add	sp, #16
 800474c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004750:	4834      	ldr	r0, [pc, #208]	; (8004824 <_printf_i+0x244>)
 8004752:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004756:	680e      	ldr	r6, [r1, #0]
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	f856 5b04 	ldr.w	r5, [r6], #4
 800475e:	061f      	lsls	r7, r3, #24
 8004760:	600e      	str	r6, [r1, #0]
 8004762:	d514      	bpl.n	800478e <_printf_i+0x1ae>
 8004764:	07d9      	lsls	r1, r3, #31
 8004766:	bf44      	itt	mi
 8004768:	f043 0320 	orrmi.w	r3, r3, #32
 800476c:	6023      	strmi	r3, [r4, #0]
 800476e:	b91d      	cbnz	r5, 8004778 <_printf_i+0x198>
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	f023 0320 	bic.w	r3, r3, #32
 8004776:	6023      	str	r3, [r4, #0]
 8004778:	2310      	movs	r3, #16
 800477a:	e7af      	b.n	80046dc <_printf_i+0xfc>
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	f043 0320 	orr.w	r3, r3, #32
 8004782:	6023      	str	r3, [r4, #0]
 8004784:	2378      	movs	r3, #120	; 0x78
 8004786:	4828      	ldr	r0, [pc, #160]	; (8004828 <_printf_i+0x248>)
 8004788:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800478c:	e7e3      	b.n	8004756 <_printf_i+0x176>
 800478e:	065e      	lsls	r6, r3, #25
 8004790:	bf48      	it	mi
 8004792:	b2ad      	uxthmi	r5, r5
 8004794:	e7e6      	b.n	8004764 <_printf_i+0x184>
 8004796:	4616      	mov	r6, r2
 8004798:	e7bb      	b.n	8004712 <_printf_i+0x132>
 800479a:	680b      	ldr	r3, [r1, #0]
 800479c:	6826      	ldr	r6, [r4, #0]
 800479e:	1d1d      	adds	r5, r3, #4
 80047a0:	6960      	ldr	r0, [r4, #20]
 80047a2:	600d      	str	r5, [r1, #0]
 80047a4:	0635      	lsls	r5, r6, #24
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	d501      	bpl.n	80047ae <_printf_i+0x1ce>
 80047aa:	6018      	str	r0, [r3, #0]
 80047ac:	e002      	b.n	80047b4 <_printf_i+0x1d4>
 80047ae:	0671      	lsls	r1, r6, #25
 80047b0:	d5fb      	bpl.n	80047aa <_printf_i+0x1ca>
 80047b2:	8018      	strh	r0, [r3, #0]
 80047b4:	2300      	movs	r3, #0
 80047b6:	4616      	mov	r6, r2
 80047b8:	6123      	str	r3, [r4, #16]
 80047ba:	e7ba      	b.n	8004732 <_printf_i+0x152>
 80047bc:	680b      	ldr	r3, [r1, #0]
 80047be:	1d1a      	adds	r2, r3, #4
 80047c0:	600a      	str	r2, [r1, #0]
 80047c2:	681e      	ldr	r6, [r3, #0]
 80047c4:	2100      	movs	r1, #0
 80047c6:	4630      	mov	r0, r6
 80047c8:	6862      	ldr	r2, [r4, #4]
 80047ca:	f000 f82f 	bl	800482c <memchr>
 80047ce:	b108      	cbz	r0, 80047d4 <_printf_i+0x1f4>
 80047d0:	1b80      	subs	r0, r0, r6
 80047d2:	6060      	str	r0, [r4, #4]
 80047d4:	6863      	ldr	r3, [r4, #4]
 80047d6:	6123      	str	r3, [r4, #16]
 80047d8:	2300      	movs	r3, #0
 80047da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047de:	e7a8      	b.n	8004732 <_printf_i+0x152>
 80047e0:	4632      	mov	r2, r6
 80047e2:	4649      	mov	r1, r9
 80047e4:	4640      	mov	r0, r8
 80047e6:	6923      	ldr	r3, [r4, #16]
 80047e8:	47d0      	blx	sl
 80047ea:	3001      	adds	r0, #1
 80047ec:	d0ab      	beq.n	8004746 <_printf_i+0x166>
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	079b      	lsls	r3, r3, #30
 80047f2:	d413      	bmi.n	800481c <_printf_i+0x23c>
 80047f4:	68e0      	ldr	r0, [r4, #12]
 80047f6:	9b03      	ldr	r3, [sp, #12]
 80047f8:	4298      	cmp	r0, r3
 80047fa:	bfb8      	it	lt
 80047fc:	4618      	movlt	r0, r3
 80047fe:	e7a4      	b.n	800474a <_printf_i+0x16a>
 8004800:	2301      	movs	r3, #1
 8004802:	4632      	mov	r2, r6
 8004804:	4649      	mov	r1, r9
 8004806:	4640      	mov	r0, r8
 8004808:	47d0      	blx	sl
 800480a:	3001      	adds	r0, #1
 800480c:	d09b      	beq.n	8004746 <_printf_i+0x166>
 800480e:	3501      	adds	r5, #1
 8004810:	68e3      	ldr	r3, [r4, #12]
 8004812:	9903      	ldr	r1, [sp, #12]
 8004814:	1a5b      	subs	r3, r3, r1
 8004816:	42ab      	cmp	r3, r5
 8004818:	dcf2      	bgt.n	8004800 <_printf_i+0x220>
 800481a:	e7eb      	b.n	80047f4 <_printf_i+0x214>
 800481c:	2500      	movs	r5, #0
 800481e:	f104 0619 	add.w	r6, r4, #25
 8004822:	e7f5      	b.n	8004810 <_printf_i+0x230>
 8004824:	08004c21 	.word	0x08004c21
 8004828:	08004c32 	.word	0x08004c32

0800482c <memchr>:
 800482c:	4603      	mov	r3, r0
 800482e:	b510      	push	{r4, lr}
 8004830:	b2c9      	uxtb	r1, r1
 8004832:	4402      	add	r2, r0
 8004834:	4293      	cmp	r3, r2
 8004836:	4618      	mov	r0, r3
 8004838:	d101      	bne.n	800483e <memchr+0x12>
 800483a:	2000      	movs	r0, #0
 800483c:	e003      	b.n	8004846 <memchr+0x1a>
 800483e:	7804      	ldrb	r4, [r0, #0]
 8004840:	3301      	adds	r3, #1
 8004842:	428c      	cmp	r4, r1
 8004844:	d1f6      	bne.n	8004834 <memchr+0x8>
 8004846:	bd10      	pop	{r4, pc}

08004848 <memcpy>:
 8004848:	440a      	add	r2, r1
 800484a:	4291      	cmp	r1, r2
 800484c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004850:	d100      	bne.n	8004854 <memcpy+0xc>
 8004852:	4770      	bx	lr
 8004854:	b510      	push	{r4, lr}
 8004856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800485a:	4291      	cmp	r1, r2
 800485c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004860:	d1f9      	bne.n	8004856 <memcpy+0xe>
 8004862:	bd10      	pop	{r4, pc}

08004864 <memmove>:
 8004864:	4288      	cmp	r0, r1
 8004866:	b510      	push	{r4, lr}
 8004868:	eb01 0402 	add.w	r4, r1, r2
 800486c:	d902      	bls.n	8004874 <memmove+0x10>
 800486e:	4284      	cmp	r4, r0
 8004870:	4623      	mov	r3, r4
 8004872:	d807      	bhi.n	8004884 <memmove+0x20>
 8004874:	1e43      	subs	r3, r0, #1
 8004876:	42a1      	cmp	r1, r4
 8004878:	d008      	beq.n	800488c <memmove+0x28>
 800487a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800487e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004882:	e7f8      	b.n	8004876 <memmove+0x12>
 8004884:	4601      	mov	r1, r0
 8004886:	4402      	add	r2, r0
 8004888:	428a      	cmp	r2, r1
 800488a:	d100      	bne.n	800488e <memmove+0x2a>
 800488c:	bd10      	pop	{r4, pc}
 800488e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004896:	e7f7      	b.n	8004888 <memmove+0x24>

08004898 <_free_r>:
 8004898:	b538      	push	{r3, r4, r5, lr}
 800489a:	4605      	mov	r5, r0
 800489c:	2900      	cmp	r1, #0
 800489e:	d043      	beq.n	8004928 <_free_r+0x90>
 80048a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048a4:	1f0c      	subs	r4, r1, #4
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	bfb8      	it	lt
 80048aa:	18e4      	addlt	r4, r4, r3
 80048ac:	f000 f8d0 	bl	8004a50 <__malloc_lock>
 80048b0:	4a1e      	ldr	r2, [pc, #120]	; (800492c <_free_r+0x94>)
 80048b2:	6813      	ldr	r3, [r2, #0]
 80048b4:	4610      	mov	r0, r2
 80048b6:	b933      	cbnz	r3, 80048c6 <_free_r+0x2e>
 80048b8:	6063      	str	r3, [r4, #4]
 80048ba:	6014      	str	r4, [r2, #0]
 80048bc:	4628      	mov	r0, r5
 80048be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048c2:	f000 b8cb 	b.w	8004a5c <__malloc_unlock>
 80048c6:	42a3      	cmp	r3, r4
 80048c8:	d90a      	bls.n	80048e0 <_free_r+0x48>
 80048ca:	6821      	ldr	r1, [r4, #0]
 80048cc:	1862      	adds	r2, r4, r1
 80048ce:	4293      	cmp	r3, r2
 80048d0:	bf01      	itttt	eq
 80048d2:	681a      	ldreq	r2, [r3, #0]
 80048d4:	685b      	ldreq	r3, [r3, #4]
 80048d6:	1852      	addeq	r2, r2, r1
 80048d8:	6022      	streq	r2, [r4, #0]
 80048da:	6063      	str	r3, [r4, #4]
 80048dc:	6004      	str	r4, [r0, #0]
 80048de:	e7ed      	b.n	80048bc <_free_r+0x24>
 80048e0:	461a      	mov	r2, r3
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	b10b      	cbz	r3, 80048ea <_free_r+0x52>
 80048e6:	42a3      	cmp	r3, r4
 80048e8:	d9fa      	bls.n	80048e0 <_free_r+0x48>
 80048ea:	6811      	ldr	r1, [r2, #0]
 80048ec:	1850      	adds	r0, r2, r1
 80048ee:	42a0      	cmp	r0, r4
 80048f0:	d10b      	bne.n	800490a <_free_r+0x72>
 80048f2:	6820      	ldr	r0, [r4, #0]
 80048f4:	4401      	add	r1, r0
 80048f6:	1850      	adds	r0, r2, r1
 80048f8:	4283      	cmp	r3, r0
 80048fa:	6011      	str	r1, [r2, #0]
 80048fc:	d1de      	bne.n	80048bc <_free_r+0x24>
 80048fe:	6818      	ldr	r0, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	4401      	add	r1, r0
 8004904:	6011      	str	r1, [r2, #0]
 8004906:	6053      	str	r3, [r2, #4]
 8004908:	e7d8      	b.n	80048bc <_free_r+0x24>
 800490a:	d902      	bls.n	8004912 <_free_r+0x7a>
 800490c:	230c      	movs	r3, #12
 800490e:	602b      	str	r3, [r5, #0]
 8004910:	e7d4      	b.n	80048bc <_free_r+0x24>
 8004912:	6820      	ldr	r0, [r4, #0]
 8004914:	1821      	adds	r1, r4, r0
 8004916:	428b      	cmp	r3, r1
 8004918:	bf01      	itttt	eq
 800491a:	6819      	ldreq	r1, [r3, #0]
 800491c:	685b      	ldreq	r3, [r3, #4]
 800491e:	1809      	addeq	r1, r1, r0
 8004920:	6021      	streq	r1, [r4, #0]
 8004922:	6063      	str	r3, [r4, #4]
 8004924:	6054      	str	r4, [r2, #4]
 8004926:	e7c9      	b.n	80048bc <_free_r+0x24>
 8004928:	bd38      	pop	{r3, r4, r5, pc}
 800492a:	bf00      	nop
 800492c:	200000c4 	.word	0x200000c4

08004930 <_malloc_r>:
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004932:	1ccd      	adds	r5, r1, #3
 8004934:	f025 0503 	bic.w	r5, r5, #3
 8004938:	3508      	adds	r5, #8
 800493a:	2d0c      	cmp	r5, #12
 800493c:	bf38      	it	cc
 800493e:	250c      	movcc	r5, #12
 8004940:	2d00      	cmp	r5, #0
 8004942:	4606      	mov	r6, r0
 8004944:	db01      	blt.n	800494a <_malloc_r+0x1a>
 8004946:	42a9      	cmp	r1, r5
 8004948:	d903      	bls.n	8004952 <_malloc_r+0x22>
 800494a:	230c      	movs	r3, #12
 800494c:	6033      	str	r3, [r6, #0]
 800494e:	2000      	movs	r0, #0
 8004950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004952:	f000 f87d 	bl	8004a50 <__malloc_lock>
 8004956:	4921      	ldr	r1, [pc, #132]	; (80049dc <_malloc_r+0xac>)
 8004958:	680a      	ldr	r2, [r1, #0]
 800495a:	4614      	mov	r4, r2
 800495c:	b99c      	cbnz	r4, 8004986 <_malloc_r+0x56>
 800495e:	4f20      	ldr	r7, [pc, #128]	; (80049e0 <_malloc_r+0xb0>)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	b923      	cbnz	r3, 800496e <_malloc_r+0x3e>
 8004964:	4621      	mov	r1, r4
 8004966:	4630      	mov	r0, r6
 8004968:	f000 f862 	bl	8004a30 <_sbrk_r>
 800496c:	6038      	str	r0, [r7, #0]
 800496e:	4629      	mov	r1, r5
 8004970:	4630      	mov	r0, r6
 8004972:	f000 f85d 	bl	8004a30 <_sbrk_r>
 8004976:	1c43      	adds	r3, r0, #1
 8004978:	d123      	bne.n	80049c2 <_malloc_r+0x92>
 800497a:	230c      	movs	r3, #12
 800497c:	4630      	mov	r0, r6
 800497e:	6033      	str	r3, [r6, #0]
 8004980:	f000 f86c 	bl	8004a5c <__malloc_unlock>
 8004984:	e7e3      	b.n	800494e <_malloc_r+0x1e>
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	1b5b      	subs	r3, r3, r5
 800498a:	d417      	bmi.n	80049bc <_malloc_r+0x8c>
 800498c:	2b0b      	cmp	r3, #11
 800498e:	d903      	bls.n	8004998 <_malloc_r+0x68>
 8004990:	6023      	str	r3, [r4, #0]
 8004992:	441c      	add	r4, r3
 8004994:	6025      	str	r5, [r4, #0]
 8004996:	e004      	b.n	80049a2 <_malloc_r+0x72>
 8004998:	6863      	ldr	r3, [r4, #4]
 800499a:	42a2      	cmp	r2, r4
 800499c:	bf0c      	ite	eq
 800499e:	600b      	streq	r3, [r1, #0]
 80049a0:	6053      	strne	r3, [r2, #4]
 80049a2:	4630      	mov	r0, r6
 80049a4:	f000 f85a 	bl	8004a5c <__malloc_unlock>
 80049a8:	f104 000b 	add.w	r0, r4, #11
 80049ac:	1d23      	adds	r3, r4, #4
 80049ae:	f020 0007 	bic.w	r0, r0, #7
 80049b2:	1ac2      	subs	r2, r0, r3
 80049b4:	d0cc      	beq.n	8004950 <_malloc_r+0x20>
 80049b6:	1a1b      	subs	r3, r3, r0
 80049b8:	50a3      	str	r3, [r4, r2]
 80049ba:	e7c9      	b.n	8004950 <_malloc_r+0x20>
 80049bc:	4622      	mov	r2, r4
 80049be:	6864      	ldr	r4, [r4, #4]
 80049c0:	e7cc      	b.n	800495c <_malloc_r+0x2c>
 80049c2:	1cc4      	adds	r4, r0, #3
 80049c4:	f024 0403 	bic.w	r4, r4, #3
 80049c8:	42a0      	cmp	r0, r4
 80049ca:	d0e3      	beq.n	8004994 <_malloc_r+0x64>
 80049cc:	1a21      	subs	r1, r4, r0
 80049ce:	4630      	mov	r0, r6
 80049d0:	f000 f82e 	bl	8004a30 <_sbrk_r>
 80049d4:	3001      	adds	r0, #1
 80049d6:	d1dd      	bne.n	8004994 <_malloc_r+0x64>
 80049d8:	e7cf      	b.n	800497a <_malloc_r+0x4a>
 80049da:	bf00      	nop
 80049dc:	200000c4 	.word	0x200000c4
 80049e0:	200000c8 	.word	0x200000c8

080049e4 <_realloc_r>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	4607      	mov	r7, r0
 80049e8:	4614      	mov	r4, r2
 80049ea:	460e      	mov	r6, r1
 80049ec:	b921      	cbnz	r1, 80049f8 <_realloc_r+0x14>
 80049ee:	4611      	mov	r1, r2
 80049f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049f4:	f7ff bf9c 	b.w	8004930 <_malloc_r>
 80049f8:	b922      	cbnz	r2, 8004a04 <_realloc_r+0x20>
 80049fa:	f7ff ff4d 	bl	8004898 <_free_r>
 80049fe:	4625      	mov	r5, r4
 8004a00:	4628      	mov	r0, r5
 8004a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a04:	f000 f830 	bl	8004a68 <_malloc_usable_size_r>
 8004a08:	42a0      	cmp	r0, r4
 8004a0a:	d20f      	bcs.n	8004a2c <_realloc_r+0x48>
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	4638      	mov	r0, r7
 8004a10:	f7ff ff8e 	bl	8004930 <_malloc_r>
 8004a14:	4605      	mov	r5, r0
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d0f2      	beq.n	8004a00 <_realloc_r+0x1c>
 8004a1a:	4631      	mov	r1, r6
 8004a1c:	4622      	mov	r2, r4
 8004a1e:	f7ff ff13 	bl	8004848 <memcpy>
 8004a22:	4631      	mov	r1, r6
 8004a24:	4638      	mov	r0, r7
 8004a26:	f7ff ff37 	bl	8004898 <_free_r>
 8004a2a:	e7e9      	b.n	8004a00 <_realloc_r+0x1c>
 8004a2c:	4635      	mov	r5, r6
 8004a2e:	e7e7      	b.n	8004a00 <_realloc_r+0x1c>

08004a30 <_sbrk_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	2300      	movs	r3, #0
 8004a34:	4d05      	ldr	r5, [pc, #20]	; (8004a4c <_sbrk_r+0x1c>)
 8004a36:	4604      	mov	r4, r0
 8004a38:	4608      	mov	r0, r1
 8004a3a:	602b      	str	r3, [r5, #0]
 8004a3c:	f000 f81e 	bl	8004a7c <_sbrk>
 8004a40:	1c43      	adds	r3, r0, #1
 8004a42:	d102      	bne.n	8004a4a <_sbrk_r+0x1a>
 8004a44:	682b      	ldr	r3, [r5, #0]
 8004a46:	b103      	cbz	r3, 8004a4a <_sbrk_r+0x1a>
 8004a48:	6023      	str	r3, [r4, #0]
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
 8004a4c:	20000288 	.word	0x20000288

08004a50 <__malloc_lock>:
 8004a50:	4801      	ldr	r0, [pc, #4]	; (8004a58 <__malloc_lock+0x8>)
 8004a52:	f000 b811 	b.w	8004a78 <__retarget_lock_acquire_recursive>
 8004a56:	bf00      	nop
 8004a58:	20000290 	.word	0x20000290

08004a5c <__malloc_unlock>:
 8004a5c:	4801      	ldr	r0, [pc, #4]	; (8004a64 <__malloc_unlock+0x8>)
 8004a5e:	f000 b80c 	b.w	8004a7a <__retarget_lock_release_recursive>
 8004a62:	bf00      	nop
 8004a64:	20000290 	.word	0x20000290

08004a68 <_malloc_usable_size_r>:
 8004a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a6c:	1f18      	subs	r0, r3, #4
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	bfbc      	itt	lt
 8004a72:	580b      	ldrlt	r3, [r1, r0]
 8004a74:	18c0      	addlt	r0, r0, r3
 8004a76:	4770      	bx	lr

08004a78 <__retarget_lock_acquire_recursive>:
 8004a78:	4770      	bx	lr

08004a7a <__retarget_lock_release_recursive>:
 8004a7a:	4770      	bx	lr

08004a7c <_sbrk>:
 8004a7c:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <_sbrk+0x14>)
 8004a7e:	4602      	mov	r2, r0
 8004a80:	6819      	ldr	r1, [r3, #0]
 8004a82:	b909      	cbnz	r1, 8004a88 <_sbrk+0xc>
 8004a84:	4903      	ldr	r1, [pc, #12]	; (8004a94 <_sbrk+0x18>)
 8004a86:	6019      	str	r1, [r3, #0]
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	4402      	add	r2, r0
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	4770      	bx	lr
 8004a90:	200000cc 	.word	0x200000cc
 8004a94:	20000298 	.word	0x20000298

08004a98 <_init>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	bf00      	nop
 8004a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9e:	bc08      	pop	{r3}
 8004aa0:	469e      	mov	lr, r3
 8004aa2:	4770      	bx	lr

08004aa4 <_fini>:
 8004aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa6:	bf00      	nop
 8004aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aaa:	bc08      	pop	{r3}
 8004aac:	469e      	mov	lr, r3
 8004aae:	4770      	bx	lr
